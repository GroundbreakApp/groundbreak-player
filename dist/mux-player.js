"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __accessCheck = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet = (obj, member, getter) => {
    __accessCheck(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet = (obj, member, value, setter) => {
    __accessCheck(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod = (obj, member, method) => {
    __accessCheck(obj, member, "access private method");
    return method;
  };

  // node_modules/mux-embed/dist/mux.js
  var require_mux = __commonJS({
    "node_modules/mux-embed/dist/mux.js"(exports, module) {
      !function() {
        var e, t;
        e = this, t = function() {
          return function() {
            var e2 = { 80: function(e3, t3, r2) {
              e3.exports = r2(728).default;
            }, 728: function(e3, t3, r2) {
              "use strict";
              r2.d(t3, { default: function() {
                return Zt;
              } });
              var a = r2(48), n2 = r2.n(a), i2 = function() {
                return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(e4) {
                  var t4 = 16 * Math.random() | 0;
                  return ("x" === e4 ? t4 : 3 & t4 | 8).toString(16);
                });
              }, o = function() {
                return ("000000" + (Math.random() * Math.pow(36, 6) << 0).toString(36)).slice(-6);
              }, s = function(e4) {
                return e4 && void 0 !== e4.nodeName ? (e4.muxId || (e4.muxId = e4.id || o()), e4.muxId) : e4;
              }, u2 = function(e4) {
                var t4;
                e4 && void 0 !== e4.nodeName ? e4 = s(t4 = e4) : t4 = document.querySelector(e4);
                var r3 = t4 && t4.nodeName ? t4.nodeName.toLowerCase() : "";
                return [t4, e4, r3];
              }, l3 = r2(640), d = r2.n(l3), c = d().methodFactory;
              d().methodFactory = function(e4, t4, r3) {
                var a2 = c(e4, t4, r3);
                return function() {
                  for (var e5 = ["[mux]"], t5 = 0; t5 < arguments.length; t5++)
                    e5.push(arguments[t5]);
                  a2.apply(void 0, e5);
                };
              }, d().setLevel(d().getLevel());
              var f2 = d();
              function p() {
                return "1" === (n2().doNotTrack || n2().navigator && n2().navigator.doNotTrack);
              }
              var _2 = { now: function() {
                var e4 = n2().performance, t4 = e4 && e4.timing, r3 = t4 && t4.navigationStart, a2 = "number" == typeof r3 && "function" == typeof e4.now ? r3 + e4.now() : Date.now();
                return Math.round(a2);
              } }, h3 = function(e4) {
                return v2(e4)[0];
              }, v2 = function(e4) {
                if ("string" != typeof e4 || "" === e4)
                  return ["localhost"];
                var t4, r3 = (e4.match(/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/) || [])[4];
                return r3 && (t4 = (r3.match(/[^\.]+\.[^\.]+$/) || [])[0]), [r3, t4];
              }, m2 = { exists: function() {
                var e4 = n2().performance;
                return void 0 !== (e4 && e4.timing);
              }, domContentLoadedEventEnd: function() {
                var e4 = n2().performance, t4 = e4 && e4.timing;
                return t4 && t4.domContentLoadedEventEnd;
              }, navigationStart: function() {
                var e4 = n2().performance, t4 = e4 && e4.timing;
                return t4 && t4.navigationStart;
              } };
              function y(e4, t4, r3) {
                r3 = void 0 === r3 ? 1 : r3, e4[t4] = e4[t4] || 0, e4[t4] += r3;
              }
              var b2 = ["x-request-id", "cf-ray", "x-amz-cf-id", "x-akamai-request-id"], g2 = ["x-cdn", "content-type"].concat(b2);
              function w2(e4) {
                var t4 = {};
                return (e4 = e4 || "").trim().split(/[\r\n]+/).forEach(function(e5) {
                  if (e5) {
                    var r3 = e5.split(": "), a2 = r3.shift();
                    a2 && (g2.indexOf(a2.toLowerCase()) >= 0 || 0 === a2.toLowerCase().indexOf("x-litix-")) && (t4[a2] = r3.join(": "));
                  }
                }), t4;
              }
              function T2(e4) {
                if (e4) {
                  var t4 = b2.find(function(t5) {
                    return void 0 !== e4[t5];
                  });
                  return t4 ? e4[t4] : void 0;
                }
              }
              var E = function(e4) {
                var t4 = {};
                for (var r3 in e4) {
                  var a2 = e4[r3];
                  -1 !== a2["DATA-ID"].search("io.litix.data.") && (t4[a2["DATA-ID"].replace("io.litix.data.", "")] = a2.VALUE);
                }
                return t4;
              };
              function k2(e4, t4) {
                var r3 = Object.keys(e4);
                if (Object.getOwnPropertySymbols) {
                  var a2 = Object.getOwnPropertySymbols(e4);
                  t4 && (a2 = a2.filter(function(t5) {
                    return Object.getOwnPropertyDescriptor(e4, t5).enumerable;
                  })), r3.push.apply(r3, a2);
                }
                return r3;
              }
              function O3(e4) {
                for (var t4 = 1; t4 < arguments.length; t4++) {
                  var r3 = null != arguments[t4] ? arguments[t4] : {};
                  t4 % 2 ? k2(Object(r3), true).forEach(function(t5) {
                    x(e4, t5, r3[t5]);
                  }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e4, Object.getOwnPropertyDescriptors(r3)) : k2(Object(r3)).forEach(function(t5) {
                    Object.defineProperty(e4, t5, Object.getOwnPropertyDescriptor(r3, t5));
                  });
                }
                return e4;
              }
              function x(e4, t4, r3) {
                return t4 in e4 ? Object.defineProperty(e4, t4, { value: r3, enumerable: true, configurable: true, writable: true }) : e4[t4] = r3, e4;
              }
              var D2 = function(e4) {
                if (!e4)
                  return {};
                var t4 = m2.navigationStart(), r3 = e4.loading, a2 = r3 ? r3.start : e4.trequest, n3 = r3 ? r3.first : e4.tfirst, i3 = r3 ? r3.end : e4.tload;
                return { bytesLoaded: e4.total, requestStart: Math.round(t4 + a2), responseStart: Math.round(t4 + n3), responseEnd: Math.round(t4 + i3) };
              }, S3 = function(e4) {
                if (e4 && "function" == typeof e4.getAllResponseHeaders)
                  return w2(e4.getAllResponseHeaders());
              };
              function q3(e4, t4) {
                var r3 = Object.keys(e4);
                if (Object.getOwnPropertySymbols) {
                  var a2 = Object.getOwnPropertySymbols(e4);
                  t4 && (a2 = a2.filter(function(t5) {
                    return Object.getOwnPropertyDescriptor(e4, t5).enumerable;
                  })), r3.push.apply(r3, a2);
                }
                return r3;
              }
              function P(e4) {
                for (var t4 = 1; t4 < arguments.length; t4++) {
                  var r3 = null != arguments[t4] ? arguments[t4] : {};
                  t4 % 2 ? q3(Object(r3), true).forEach(function(t5) {
                    A2(e4, t5, r3[t5]);
                  }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e4, Object.getOwnPropertyDescriptors(r3)) : q3(Object(r3)).forEach(function(t5) {
                    Object.defineProperty(e4, t5, Object.getOwnPropertyDescriptor(r3, t5));
                  });
                }
                return e4;
              }
              function A2(e4, t4, r3) {
                return t4 in e4 ? Object.defineProperty(e4, t4, { value: r3, enumerable: true, configurable: true, writable: true }) : e4[t4] = r3, e4;
              }
              var R2 = function(e4, t4) {
                if (!e4 || "function" != typeof e4.getRequests)
                  return {};
                var r3 = e4.getRequests({ state: "executed" });
                if (0 === r3.length)
                  return {};
                var a2, n3 = r3[r3.length - 1], i3 = h3(n3.url), o2 = n3.url, s2 = n3.bytesLoaded, u3 = new Date(n3.requestStartDate).getTime(), l4 = new Date(n3.firstByteDate).getTime(), d2 = new Date(n3.requestEndDate).getTime(), c2 = isNaN(n3.duration) ? 0 : n3.duration, f3 = "function" == typeof t4.getMetricsFor ? t4.getMetricsFor(n3.mediaType).HttpList : t4.getDashMetrics().getHttpRequests(n3.mediaType);
                return f3.length > 0 && (a2 = w2(f3[f3.length - 1]._responseHeaders || "")), { requestStart: u3, requestResponseStart: l4, requestResponseEnd: d2, requestBytesLoaded: s2, requestResponseHeaders: a2, requestMediaDuration: c2, requestHostname: i3, requestUrl: o2, requestId: a2 ? T2(a2) : void 0 };
              }, I2 = function(e4, t4) {
                var r3 = t4.getQualityFor(e4), a2 = t4.getCurrentTrackFor(e4).bitrateList;
                return a2 ? { currentLevel: r3, renditionWidth: a2[r3].width || null, renditionHeight: a2[r3].height || null, renditionBitrate: a2[r3].bandwidth } : {};
              }, j3 = function(e4) {
                var t4;
                return null === (t4 = e4.match(/.*codecs\*?="(.*)"/)) || void 0 === t4 ? void 0 : t4[1];
              };
              function L2(e4, t4) {
                for (var r3 = 0; r3 < t4.length; r3++) {
                  var a2 = t4[r3];
                  a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(e4, a2.key, a2);
                }
              }
              var C2 = 0, N2 = function() {
                function e4() {
                  !function(e5, t5) {
                    if (!(e5 instanceof t5))
                      throw new TypeError("Cannot call a class as a function");
                  }(this, e4);
                }
                var t4, r3, a2;
                return t4 = e4, r3 = [{ key: "on", value: function(e5, t5, r4) {
                  return t5._eventEmitterGuid = t5._eventEmitterGuid || ++C2, this._listeners = this._listeners || {}, this._listeners[e5] = this._listeners[e5] || [], r4 && (t5 = t5.bind(r4)), this._listeners[e5].push(t5), t5;
                } }, { key: "off", value: function(e5, t5) {
                  var r4 = this._listeners && this._listeners[e5];
                  r4 && r4.forEach(function(e6, a3) {
                    e6._eventEmitterGuid === t5._eventEmitterGuid && r4.splice(a3, 1);
                  });
                } }, { key: "one", value: function(e5, t5, r4) {
                  var a3 = this;
                  t5._eventEmitterGuid = t5._eventEmitterGuid || ++C2;
                  var n3 = function n4() {
                    a3.off(e5, n4), t5.apply(r4 || this, arguments);
                  };
                  n3._eventEmitterGuid = t5._eventEmitterGuid, this.on(e5, n3);
                } }, { key: "emit", value: function(e5, t5) {
                  var r4 = this;
                  if (this._listeners) {
                    t5 = t5 || {};
                    var a3 = this._listeners["before*"] || [], n3 = this._listeners[e5] || [], i3 = this._listeners["after" + e5] || [], o2 = function(t6, a4) {
                      (t6 = t6.slice()).forEach(function(t7) {
                        t7.call(r4, { type: e5 }, a4);
                      });
                    };
                    o2(a3, t5), o2(n3, t5), o2(i3, t5);
                  }
                } }], r3 && L2(t4.prototype, r3), a2 && L2(t4, a2), Object.defineProperty(t4, "prototype", { writable: false }), e4;
              }(), H2 = N2;
              function M3(e4, t4) {
                for (var r3 = 0; r3 < t4.length; r3++) {
                  var a2 = t4[r3];
                  a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(e4, a2.key, a2);
                }
              }
              var B2 = function() {
                function e4(t5) {
                  var r4 = this;
                  !function(e5, t6) {
                    if (!(e5 instanceof t6))
                      throw new TypeError("Cannot call a class as a function");
                  }(this, e4), this.pm = t5, this._playbackHeartbeatInterval = null, this._playheadShouldBeProgressing = false, t5.on("playing", function() {
                    r4._playheadShouldBeProgressing = true;
                  }), t5.on("play", this._startPlaybackHeartbeatInterval.bind(this)), t5.on("playing", this._startPlaybackHeartbeatInterval.bind(this)), t5.on("adbreakstart", this._startPlaybackHeartbeatInterval.bind(this)), t5.on("adplay", this._startPlaybackHeartbeatInterval.bind(this)), t5.on("adplaying", this._startPlaybackHeartbeatInterval.bind(this)), t5.on("seeking", this._startPlaybackHeartbeatInterval.bind(this)), t5.on("devicewake", this._startPlaybackHeartbeatInterval.bind(this)), t5.on("viewstart", this._startPlaybackHeartbeatInterval.bind(this)), t5.on("rebufferstart", this._startPlaybackHeartbeatInterval.bind(this)), t5.on("pause", this._stopPlaybackHeartbeatInterval.bind(this)), t5.on("ended", this._stopPlaybackHeartbeatInterval.bind(this)), t5.on("viewend", this._stopPlaybackHeartbeatInterval.bind(this)), t5.on("error", this._stopPlaybackHeartbeatInterval.bind(this)), t5.on("aderror", this._stopPlaybackHeartbeatInterval.bind(this)), t5.on("adpause", this._stopPlaybackHeartbeatInterval.bind(this)), t5.on("adended", this._stopPlaybackHeartbeatInterval.bind(this)), t5.on("adbreakend", this._stopPlaybackHeartbeatInterval.bind(this)), t5.on("seeked", function() {
                    t5.data.player_is_paused ? r4._stopPlaybackHeartbeatInterval() : r4._startPlaybackHeartbeatInterval();
                  }), t5.on("timeupdate", function() {
                    null !== r4._playbackHeartbeatInterval && t5.emit("playbackheartbeat");
                  }), t5.on("devicesleep", function(e5, a3) {
                    null !== r4._playbackHeartbeatInterval && (n2().clearInterval(r4._playbackHeartbeatInterval), t5.emit("playbackheartbeatend", { viewer_time: a3.viewer_time }), r4._playbackHeartbeatInterval = null);
                  });
                }
                var t4, r3, a2;
                return t4 = e4, (r3 = [{ key: "_startPlaybackHeartbeatInterval", value: function() {
                  var e5 = this;
                  null === this._playbackHeartbeatInterval && (this.pm.emit("playbackheartbeat"), this._playbackHeartbeatInterval = n2().setInterval(function() {
                    e5.pm.emit("playbackheartbeat");
                  }, this.pm.playbackHeartbeatTime));
                } }, { key: "_stopPlaybackHeartbeatInterval", value: function() {
                  this._playheadShouldBeProgressing = false, null !== this._playbackHeartbeatInterval && (n2().clearInterval(this._playbackHeartbeatInterval), this.pm.emit("playbackheartbeatend"), this._playbackHeartbeatInterval = null);
                } }]) && M3(t4.prototype, r3), a2 && M3(t4, a2), Object.defineProperty(t4, "prototype", { writable: false }), e4;
              }();
              function U2(e4, t4) {
                for (var r3 = 0; r3 < t4.length; r3++) {
                  var a2 = t4[r3];
                  a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(e4, a2.key, a2);
                }
              }
              function F3(e4, t4, r3) {
                return t4 && U2(e4.prototype, t4), r3 && U2(e4, r3), Object.defineProperty(e4, "prototype", { writable: false }), e4;
              }
              var G3 = F3(function e4(t4) {
                var r3 = this;
                !function(e5, t5) {
                  if (!(e5 instanceof t5))
                    throw new TypeError("Cannot call a class as a function");
                }(this, e4), t4.on("viewinit", function() {
                  r3.viewErrored = false;
                }), t4.on("error", function(e5, a2) {
                  try {
                    var n3 = t4.errorTranslator({ player_error_code: a2.player_error_code, player_error_message: a2.player_error_message, player_error_context: a2.player_error_context });
                    n3 ? (t4.data.player_error_code = n3.player_error_code || a2.player_error_code, t4.data.player_error_message = n3.player_error_message || a2.player_error_message, t4.data.player_error_context = n3.player_error_context || a2.player_error_context, r3.viewErrored = true) : (delete t4.data.player_error_code, delete t4.data.player_error_message, delete t4.data.player_error_context);
                  } catch (e6) {
                    t4.mux.log.warn("Exception in error translator callback.", e6), r3.viewErrored = true;
                  }
                });
              });
              function W2(e4, t4) {
                for (var r3 = 0; r3 < t4.length; r3++) {
                  var a2 = t4[r3];
                  a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(e4, a2.key, a2);
                }
              }
              var Q3 = function() {
                function e4(t5) {
                  !function(e5, t6) {
                    if (!(e5 instanceof t6))
                      throw new TypeError("Cannot call a class as a function");
                  }(this, e4), this.pm = t5, this._watchTimeTrackerLastCheckedTime = null, t5.on("playbackheartbeat", this._updateWatchTime.bind(this)), t5.on("playbackheartbeatend", this._clearWatchTimeState.bind(this));
                }
                var t4, r3, a2;
                return t4 = e4, (r3 = [{ key: "_updateWatchTime", value: function(e5, t5) {
                  var r4 = t5.viewer_time;
                  null === this._watchTimeTrackerLastCheckedTime && (this._watchTimeTrackerLastCheckedTime = r4), y(this.pm.data, "view_watch_time", r4 - this._watchTimeTrackerLastCheckedTime), this._watchTimeTrackerLastCheckedTime = r4;
                } }, { key: "_clearWatchTimeState", value: function(e5, t5) {
                  this._updateWatchTime(e5, t5), this._watchTimeTrackerLastCheckedTime = null;
                } }]) && W2(t4.prototype, r3), a2 && W2(t4, a2), Object.defineProperty(t4, "prototype", { writable: false }), e4;
              }();
              function V2(e4, t4) {
                for (var r3 = 0; r3 < t4.length; r3++) {
                  var a2 = t4[r3];
                  a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(e4, a2.key, a2);
                }
              }
              var J3 = function() {
                function e4(t5) {
                  var r4 = this;
                  !function(e5, t6) {
                    if (!(e5 instanceof t6))
                      throw new TypeError("Cannot call a class as a function");
                  }(this, e4), this.pm = t5, this._playbackTimeTrackerLastPlayheadPosition = -1, this._lastTime = _2.now(), this._isAdPlaying = false, t5.on("playbackheartbeat", this._updatePlaybackTime.bind(this)), t5.on("playbackheartbeatend", this._clearPlaybackTimeState.bind(this)), t5.on("seeking", this._clearPlaybackTimeState.bind(this)), t5.on("adplaying", function() {
                    r4._isAdPlaying = true;
                  }), t5.on("adended", function() {
                    r4._isAdPlaying = false;
                  }), t5.on("adpause", function() {
                    r4._isAdPlaying = false;
                  }), t5.on("adbreakstart", function() {
                    r4._isAdPlaying = false;
                  }), t5.on("adbreakend", function() {
                    r4._isAdPlaying = false;
                  }), t5.on("adplay", function() {
                    r4._isAdPlaying = false;
                  });
                }
                var t4, r3, a2;
                return t4 = e4, (r3 = [{ key: "_updatePlaybackTime", value: function() {
                  var e5 = this.pm.data.player_playhead_time, t5 = _2.now(), r4 = -1;
                  this._playbackTimeTrackerLastPlayheadPosition >= 0 && e5 > this._playbackTimeTrackerLastPlayheadPosition ? r4 = e5 - this._playbackTimeTrackerLastPlayheadPosition : this._isAdPlaying && (r4 = t5 - this._lastTime), r4 > 0 && r4 <= 1e3 && y(this.pm.data, "view_content_playback_time", r4), this._playbackTimeTrackerLastPlayheadPosition = e5, this._lastTime = t5;
                } }, { key: "_clearPlaybackTimeState", value: function() {
                  this._updatePlaybackTime(), this._playbackTimeTrackerLastPlayheadPosition = -1;
                } }]) && V2(t4.prototype, r3), a2 && V2(t4, a2), Object.defineProperty(t4, "prototype", { writable: false }), e4;
              }();
              function K2(e4, t4) {
                for (var r3 = 0; r3 < t4.length; r3++) {
                  var a2 = t4[r3];
                  a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(e4, a2.key, a2);
                }
              }
              var z3 = function() {
                function e4(t5) {
                  !function(e5, t6) {
                    if (!(e5 instanceof t6))
                      throw new TypeError("Cannot call a class as a function");
                  }(this, e4), this.pm = t5;
                  var r4 = this._updatePlayheadTime.bind(this);
                  t5.on("playbackheartbeat", r4), t5.on("playbackheartbeatend", r4), t5.on("timeupdate", r4), t5.on("destroy", function() {
                    t5.off("timeupdate", r4);
                  });
                }
                var t4, r3, a2;
                return t4 = e4, (r3 = [{ key: "_updateMaxPlayheadPosition", value: function() {
                  this.pm.data.view_max_playhead_position = void 0 === this.pm.data.view_max_playhead_position ? this.pm.data.player_playhead_time : Math.max(this.pm.data.view_max_playhead_position, this.pm.data.player_playhead_time);
                } }, { key: "_updatePlayheadTime", value: function(e5, t5) {
                  var r4 = this, a3 = function() {
                    r4.pm.currentFragmentPDT && r4.pm.currentFragmentStart && (r4.pm.data.player_program_time = r4.pm.currentFragmentPDT + r4.pm.data.player_playhead_time - r4.pm.currentFragmentStart);
                  };
                  if (t5 && t5.player_playhead_time)
                    this.pm.data.player_playhead_time = t5.player_playhead_time, a3(), this._updateMaxPlayheadPosition();
                  else if (this.pm.getPlayheadTime) {
                    var n3 = this.pm.getPlayheadTime();
                    void 0 !== n3 && (this.pm.data.player_playhead_time = n3, a3(), this._updateMaxPlayheadPosition());
                  }
                } }]) && K2(t4.prototype, r3), a2 && K2(t4, a2), Object.defineProperty(t4, "prototype", { writable: false }), e4;
              }();
              function Y3(e4, t4) {
                for (var r3 = 0; r3 < t4.length; r3++) {
                  var a2 = t4[r3];
                  a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(e4, a2.key, a2);
                }
              }
              function X2(e4, t4, r3) {
                return t4 && Y3(e4.prototype, t4), r3 && Y3(e4, r3), Object.defineProperty(e4, "prototype", { writable: false }), e4;
              }
              var $3 = 3e5, Z3 = X2(function e4(t4) {
                if (function(e5, t5) {
                  if (!(e5 instanceof t5))
                    throw new TypeError("Cannot call a class as a function");
                }(this, e4), !t4.disableRebufferTracking) {
                  var r3, a2 = function(e5, t5) {
                    n3(t5), r3 = void 0;
                  }, n3 = function(e5) {
                    if (r3) {
                      var a3 = e5.viewer_time - r3;
                      y(t4.data, "view_rebuffer_duration", a3), r3 = e5.viewer_time, t4.data.view_rebuffer_duration > $3 && (t4.emit("viewend"), t4.send("viewend"), t4.mux.log.warn("Ending view after rebuffering for longer than ".concat($3, "ms, future events will be ignored unless a programchange or videochange occurs.")));
                    }
                    t4.data.view_watch_time >= 0 && t4.data.view_rebuffer_count > 0 && (t4.data.view_rebuffer_frequency = t4.data.view_rebuffer_count / t4.data.view_watch_time, t4.data.view_rebuffer_percentage = t4.data.view_rebuffer_duration / t4.data.view_watch_time);
                  };
                  t4.on("playbackheartbeat", function(e5, t5) {
                    return n3(t5);
                  }), t4.on("rebufferstart", function(e5, n4) {
                    r3 || (y(t4.data, "view_rebuffer_count", 1), r3 = n4.viewer_time, t4.one("rebufferend", a2));
                  }), t4.on("viewinit", function() {
                    r3 = void 0, t4.off("rebufferend", a2);
                  });
                }
              });
              function ee3(e4, t4) {
                for (var r3 = 0; r3 < t4.length; r3++) {
                  var a2 = t4[r3];
                  a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(e4, a2.key, a2);
                }
              }
              var te3 = function() {
                function e4(t5) {
                  var r4 = this;
                  !function(e5, t6) {
                    if (!(e5 instanceof t6))
                      throw new TypeError("Cannot call a class as a function");
                  }(this, e4), this.pm = t5, t5.disableRebufferTracking || t5.disablePlayheadRebufferTracking || (this._lastCheckedTime = null, this._lastPlayheadTime = null, this._lastPlayheadTimeUpdatedTime = null, t5.on("playbackheartbeat", this._checkIfRebuffering.bind(this)), t5.on("playbackheartbeatend", this._cleanupRebufferTracker.bind(this)), t5.on("seeking", function() {
                    r4._cleanupRebufferTracker(null, { viewer_time: _2.now() });
                  }));
                }
                var t4, r3, a2;
                return t4 = e4, r3 = [{ key: "_checkIfRebuffering", value: function(e5, t5) {
                  if (this.pm.seekingTracker.isSeeking || this.pm.adTracker.isAdBreak || !this.pm.playbackHeartbeat._playheadShouldBeProgressing)
                    this._cleanupRebufferTracker(e5, t5);
                  else if (null !== this._lastCheckedTime)
                    if (this._lastPlayheadTime === this.pm.data.player_playhead_time) {
                      var r4 = t5.viewer_time - this._lastPlayheadTimeUpdatedTime;
                      "number" == typeof this.pm.sustainedRebufferThreshold && r4 >= this.pm.sustainedRebufferThreshold && (this._rebuffering || (this._rebuffering = true, this.pm.emit("rebufferstart", { viewer_time: this._lastPlayheadTimeUpdatedTime }))), this._lastCheckedTime = t5.viewer_time;
                    } else
                      this._cleanupRebufferTracker(e5, t5, true);
                  else
                    this._prepareRebufferTrackerState(t5.viewer_time);
                } }, { key: "_clearRebufferTrackerState", value: function() {
                  this._lastCheckedTime = null, this._lastPlayheadTime = null, this._lastPlayheadTimeUpdatedTime = null;
                } }, { key: "_prepareRebufferTrackerState", value: function(e5) {
                  this._lastCheckedTime = e5, this._lastPlayheadTime = this.pm.data.player_playhead_time, this._lastPlayheadTimeUpdatedTime = e5;
                } }, { key: "_cleanupRebufferTracker", value: function(e5, t5) {
                  var r4 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                  if (this._rebuffering)
                    this._rebuffering = false, this.pm.emit("rebufferend", { viewer_time: t5.viewer_time });
                  else {
                    if (null === this._lastCheckedTime)
                      return;
                    var a3 = this.pm.data.player_playhead_time - this._lastPlayheadTime, n3 = t5.viewer_time - this._lastPlayheadTimeUpdatedTime;
                    "number" == typeof this.pm.minimumRebufferDuration && a3 > 0 && n3 - a3 > this.pm.minimumRebufferDuration && (this._lastCheckedTime = null, this.pm.emit("rebufferstart", { viewer_time: this._lastPlayheadTimeUpdatedTime }), this.pm.emit("rebufferend", { viewer_time: this._lastPlayheadTimeUpdatedTime + n3 - a3 }));
                  }
                  r4 ? this._prepareRebufferTrackerState(t5.viewer_time) : this._clearRebufferTrackerState();
                } }], r3 && ee3(t4.prototype, r3), a2 && ee3(t4, a2), Object.defineProperty(t4, "prototype", { writable: false }), e4;
              }(), re2 = te3;
              function ae2(e4, t4) {
                for (var r3 = 0; r3 < t4.length; r3++) {
                  var a2 = t4[r3];
                  a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(e4, a2.key, a2);
                }
              }
              var ne2 = function() {
                function e4(t5) {
                  var r4 = this;
                  !function(e5, t6) {
                    if (!(e5 instanceof t6))
                      throw new TypeError("Cannot call a class as a function");
                  }(this, e4), this.pm = t5, t5.on("viewinit", function() {
                    var e5 = t5.data, a3 = e5.view_id;
                    if (!e5.view_program_changed) {
                      var n3 = function(e6, n4) {
                        var i3 = n4.viewer_time;
                        "playing" === e6.type && void 0 === t5.data.view_time_to_first_frame ? r4.calculateTimeToFirstFrame(i3 || _2.now(), a3) : "adplaying" !== e6.type || void 0 !== t5.data.view_time_to_first_frame && !r4._inPrerollPosition() || r4.calculateTimeToFirstFrame(i3 || _2.now(), a3);
                      };
                      t5.one("playing", n3), t5.one("adplaying", n3), t5.one("viewend", function() {
                        t5.off("playing", n3), t5.off("adplaying", n3);
                      });
                    }
                  });
                }
                var t4, r3, a2;
                return t4 = e4, (r3 = [{ key: "_inPrerollPosition", value: function() {
                  return void 0 === this.pm.data.view_content_playback_time || this.pm.data.view_content_playback_time <= 1e3;
                } }, { key: "calculateTimeToFirstFrame", value: function(e5, t5) {
                  t5 === this.pm.data.view_id && (this.pm.watchTimeTracker._updateWatchTime(null, { viewer_time: e5 }), this.pm.data.view_time_to_first_frame = this.pm.data.view_watch_time, (this.pm.data.player_autoplay_on || this.pm.data.video_is_autoplay) && this.NAVIGATION_START && (this.pm.data.view_aggregate_startup_time = this.pm.data.view_start + this.pm.data.view_watch_time - this.NAVIGATION_START));
                } }]) && ae2(t4.prototype, r3), a2 && ae2(t4, a2), Object.defineProperty(t4, "prototype", { writable: false }), e4;
              }();
              function ie3(e4, t4) {
                for (var r3 = 0; r3 < t4.length; r3++) {
                  var a2 = t4[r3];
                  a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(e4, a2.key, a2);
                }
              }
              function oe2(e4, t4, r3) {
                return t4 && ie3(e4.prototype, t4), r3 && ie3(e4, r3), Object.defineProperty(e4, "prototype", { writable: false }), e4;
              }
              var se2 = oe2(function e4(t4) {
                var r3 = this;
                !function(e5, t5) {
                  if (!(e5 instanceof t5))
                    throw new TypeError("Cannot call a class as a function");
                }(this, e4), t4.on("viewinit", function() {
                  r3._lastPlayheadPosition = -1;
                }), ["pause", "rebufferstart", "seeking", "error", "adbreakstart", "hb"].forEach(function(e5) {
                  t4.on(e5, function() {
                    if (r3._lastPlayheadPosition >= 0 && t4.data.player_playhead_time >= 0 && r3._lastPlayerWidth >= 0 && r3._lastSourceWidth > 0 && r3._lastPlayerHeight >= 0 && r3._lastSourceHeight > 0) {
                      var e6 = t4.data.player_playhead_time - r3._lastPlayheadPosition;
                      if (e6 < 0)
                        return void (r3._lastPlayheadPosition = -1);
                      var a2 = Math.min(r3._lastPlayerWidth / r3._lastSourceWidth, r3._lastPlayerHeight / r3._lastSourceHeight), n3 = Math.max(0, a2 - 1), i3 = Math.max(0, 1 - a2);
                      t4.data.view_max_upscale_percentage = Math.max(t4.data.view_max_upscale_percentage || 0, n3), t4.data.view_max_downscale_percentage = Math.max(t4.data.view_max_downscale_percentage || 0, i3), y(t4.data, "view_total_content_playback_time", e6), y(t4.data, "view_total_upscaling", n3 * e6), y(t4.data, "view_total_downscaling", i3 * e6);
                    }
                    r3._lastPlayheadPosition = -1;
                  });
                }), ["playing", "hb"].forEach(function(e5) {
                  t4.on(e5, function() {
                    r3._lastPlayheadPosition = t4.data.player_playhead_time, r3._lastPlayerWidth = t4.data.player_width, r3._lastPlayerHeight = t4.data.player_height, r3._lastSourceWidth = t4.data.video_source_width, r3._lastSourceHeight = t4.data.video_source_height;
                  });
                });
              });
              function ue2(e4, t4) {
                for (var r3 = 0; r3 < t4.length; r3++) {
                  var a2 = t4[r3];
                  a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(e4, a2.key, a2);
                }
              }
              function le2(e4, t4, r3) {
                return t4 && ue2(e4.prototype, t4), r3 && ue2(e4, r3), Object.defineProperty(e4, "prototype", { writable: false }), e4;
              }
              var de2 = le2(function e4(t4) {
                var r3 = this;
                !function(e5, t5) {
                  if (!(e5 instanceof t5))
                    throw new TypeError("Cannot call a class as a function");
                }(this, e4), this.isSeeking = false, t4.on("seeking", function(e5, a2) {
                  Object.assign(t4.data, a2), r3._lastSeekingTime = _2.now(), false === r3.isSeeking && (r3.isSeeking = true, t4.send("seeking"));
                }), t4.on("seeked", function() {
                  r3.isSeeking = false;
                  var e5 = r3._lastSeekingTime || _2.now(), a2 = _2.now() - e5;
                  y(t4.data, "view_seek_count", 1), y(t4.data, "view_seek_duration", a2);
                  var n3 = t4.data.view_max_seek_time || 0;
                  t4.data.view_max_seek_time = Math.max(n3, a2);
                }), t4.on("viewend", function() {
                  r3.isSeeking = false;
                });
              });
              function ce2(e4, t4) {
                return function(e5) {
                  if (Array.isArray(e5))
                    return e5;
                }(e4) || function(e5, t5) {
                  var r3 = null == e5 ? null : "undefined" != typeof Symbol && e5[Symbol.iterator] || e5["@@iterator"];
                  if (null != r3) {
                    var a2, n3, i3 = [], o2 = true, s2 = false;
                    try {
                      for (r3 = r3.call(e5); !(o2 = (a2 = r3.next()).done) && (i3.push(a2.value), !t5 || i3.length !== t5); o2 = true)
                        ;
                    } catch (e6) {
                      s2 = true, n3 = e6;
                    } finally {
                      try {
                        o2 || null == r3.return || r3.return();
                      } finally {
                        if (s2)
                          throw n3;
                      }
                    }
                    return i3;
                  }
                }(e4, t4) || function(e5, t5) {
                  if (e5) {
                    if ("string" == typeof e5)
                      return fe2(e5, t5);
                    var r3 = Object.prototype.toString.call(e5).slice(8, -1);
                    return "Object" === r3 && e5.constructor && (r3 = e5.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e5) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? fe2(e5, t5) : void 0;
                  }
                }(e4, t4) || function() {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }();
              }
              function fe2(e4, t4) {
                (null == t4 || t4 > e4.length) && (t4 = e4.length);
                for (var r3 = 0, a2 = new Array(t4); r3 < t4; r3++)
                  a2[r3] = e4[r3];
                return a2;
              }
              function pe2(e4, t4) {
                for (var r3 = 0; r3 < t4.length; r3++) {
                  var a2 = t4[r3];
                  a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(e4, a2.key, a2);
                }
              }
              var _e = function(e4, t4) {
                e4.push(t4), e4.sort(function(e5, t5) {
                  return e5.viewer_time - t5.viewer_time;
                });
              }, he2 = ["adbreakstart", "adrequest", "adresponse", "adplay", "adplaying", "adpause", "adended", "adbreakend", "aderror"], ve2 = function() {
                function e4(t5) {
                  var r4 = this;
                  !function(e5, t6) {
                    if (!(e5 instanceof t6))
                      throw new TypeError("Cannot call a class as a function");
                  }(this, e4), this.pm = t5, t5.on("viewinit", function() {
                    r4.isAdBreak = false, r4._currentAdRequestNumber = 0, r4._currentAdResponseNumber = 0, r4._adRequests = [], r4._adResponses = [], r4._adHasPlayed = false, r4._wouldBeNewAdPlay = true, r4._prerollPlayTime = void 0;
                  }), he2.forEach(function(e5) {
                    return t5.on(e5, r4._updateAdData.bind(r4));
                  });
                  var a3 = function() {
                    r4.isAdBreak = false;
                  };
                  t5.on("adbreakstart", function() {
                    r4.isAdBreak = true;
                  }), t5.on("play", a3), t5.on("playing", a3), t5.on("viewend", a3), t5.on("adrequest", function(e5, a4) {
                    a4 = Object.assign({ ad_request_id: "generatedAdRequestId" + r4._currentAdRequestNumber++ }, a4), _e(r4._adRequests, a4), y(t5.data, "view_ad_request_count"), r4.inPrerollPosition() && (t5.data.view_preroll_requested = true, r4._adHasPlayed || y(t5.data, "view_preroll_request_count"));
                  }), t5.on("adresponse", function(e5, a4) {
                    a4 = Object.assign({ ad_request_id: "generatedAdRequestId" + r4._currentAdResponseNumber++ }, a4), _e(r4._adResponses, a4);
                    var n3 = r4.findAdRequest(a4.ad_request_id);
                    n3 && y(t5.data, "view_ad_request_time", Math.max(0, a4.viewer_time - n3.viewer_time));
                  }), t5.on("adplay", function(e5, a4) {
                    r4._adHasPlayed = true, r4._wouldBeNewAdPlay && (r4._wouldBeNewAdPlay = false, y(t5.data, "view_ad_played_count")), r4.inPrerollPosition() && !t5.data.view_preroll_played && (t5.data.view_preroll_played = true, r4._adRequests.length > 0 && (t5.data.view_preroll_request_time = Math.max(0, a4.viewer_time - r4._adRequests[0].viewer_time)), t5.data.view_start && (t5.data.view_startup_preroll_request_time = Math.max(0, a4.viewer_time - t5.data.view_start)), r4._prerollPlayTime = a4.viewer_time);
                  }), t5.on("adplaying", function(e5, a4) {
                    r4.inPrerollPosition() && void 0 === t5.data.view_preroll_load_time && void 0 !== r4._prerollPlayTime && (t5.data.view_preroll_load_time = a4.viewer_time - r4._prerollPlayTime, t5.data.view_startup_preroll_load_time = a4.viewer_time - r4._prerollPlayTime);
                  }), t5.on("adended", function() {
                    r4._wouldBeNewAdPlay = true;
                  }), t5.on("aderror", function() {
                    r4._wouldBeNewAdPlay = true;
                  });
                }
                var t4, r3, a2;
                return t4 = e4, (r3 = [{ key: "inPrerollPosition", value: function() {
                  return void 0 === this.pm.data.view_content_playback_time || this.pm.data.view_content_playback_time <= 1e3;
                } }, { key: "findAdRequest", value: function(e5) {
                  for (var t5 = 0; t5 < this._adRequests.length; t5++)
                    if (this._adRequests[t5].ad_request_id === e5)
                      return this._adRequests[t5];
                } }, { key: "_updateAdData", value: function(e5, t5) {
                  if (this.inPrerollPosition()) {
                    if (!this.pm.data.view_preroll_ad_tag_hostname && t5.ad_tag_url) {
                      var r4 = ce2(v2(t5.ad_tag_url), 2), a3 = r4[0], n3 = r4[1];
                      this.pm.data.view_preroll_ad_tag_domain = n3, this.pm.data.view_preroll_ad_tag_hostname = a3;
                    }
                    if (!this.pm.data.view_preroll_ad_asset_hostname && t5.ad_asset_url) {
                      var i3 = ce2(v2(t5.ad_asset_url), 2), o2 = i3[0], s2 = i3[1];
                      this.pm.data.view_preroll_ad_asset_domain = s2, this.pm.data.view_preroll_ad_asset_hostname = o2;
                    }
                  }
                  this.pm.data.ad_asset_url = null == t5 ? void 0 : t5.ad_asset_url, this.pm.data.ad_tag_url = null == t5 ? void 0 : t5.ad_tag_url, this.pm.data.ad_creative_id = null == t5 ? void 0 : t5.ad_creative_id, this.pm.data.ad_id = null == t5 ? void 0 : t5.ad_id, this.pm.data.ad_universal_id = null == t5 ? void 0 : t5.ad_universal_id;
                } }]) && pe2(t4.prototype, r3), a2 && pe2(t4, a2), Object.defineProperty(t4, "prototype", { writable: false }), e4;
              }();
              function me3(e4, t4) {
                for (var r3 = 0; r3 < t4.length; r3++) {
                  var a2 = t4[r3];
                  a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(e4, a2.key, a2);
                }
              }
              function ye3(e4, t4, r3) {
                return t4 && me3(e4.prototype, t4), r3 && me3(e4, r3), Object.defineProperty(e4, "prototype", { writable: false }), e4;
              }
              var be3 = ye3(function e4(t4) {
                var r3, a2;
                !function(e5, t5) {
                  if (!(e5 instanceof t5))
                    throw new TypeError("Cannot call a class as a function");
                }(this, e4);
                var i3 = function() {
                  t4.disableRebufferTracking || r3 && (y(t4.data, "view_waiting_rebuffer_duration", _2.now() - r3), r3 = false, n2().clearInterval(a2));
                }, o2 = false, s2 = function() {
                  o2 = false, i3();
                };
                t4.on("waiting", function() {
                  o2 && (t4.disableRebufferTracking || (y(t4.data, "view_waiting_rebuffer_count", 1), r3 = _2.now(), a2 = n2().setInterval(function() {
                    if (r3) {
                      var e5 = _2.now();
                      y(t4.data, "view_waiting_rebuffer_duration", e5 - r3), r3 = e5;
                    }
                  }, 250)));
                }), t4.on("playing", function() {
                  i3(), o2 = true;
                }), t4.on("pause", s2), t4.on("seeking", s2);
              });
              function ge3(e4, t4) {
                for (var r3 = 0; r3 < t4.length; r3++) {
                  var a2 = t4[r3];
                  a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(e4, a2.key, a2);
                }
              }
              function we2(e4, t4, r3) {
                return t4 && ge3(e4.prototype, t4), r3 && ge3(e4, r3), Object.defineProperty(e4, "prototype", { writable: false }), e4;
              }
              var Te3 = we2(function e4(t4) {
                var r3 = this;
                !function(e5, t5) {
                  if (!(e5 instanceof t5))
                    throw new TypeError("Cannot call a class as a function");
                }(this, e4);
                var a2 = function() {
                  r3.lastWallClockTime = _2.now(), t4.on("before*", n3);
                }, n3 = function(e5) {
                  var a3 = _2.now(), n4 = r3.lastWallClockTime;
                  r3.lastWallClockTime = a3, a3 - n4 > 3e4 && (t4.emit("devicesleep", { viewer_time: n4 }), Object.assign(t4.data, { viewer_time: n4 }), t4.send("devicesleep"), t4.emit("devicewake", { viewer_time: a3 }), Object.assign(t4.data, { viewer_time: a3 }), t4.send("devicewake"));
                };
                t4.one("playbackheartbeat", a2), t4.on("playbackheartbeatend", function() {
                  t4.off("before*", n3), t4.one("playbackheartbeat", a2);
                });
              }), Ee2 = r2(375), ke2 = r2(655), Oe3 = r2.n(ke2), xe2 = "muxData", De2 = function() {
                var e4;
                try {
                  e4 = Ee2.parse(Oe3().get(xe2) || "");
                } catch (t4) {
                  e4 = {};
                }
                return e4;
              }, Se2 = function(e4) {
                try {
                  Oe3().set(xe2, Ee2.stringify(e4), { expires: 7300 });
                } catch (e5) {
                }
              }, qe = function() {
                var e4 = De2();
                return e4.mux_viewer_id = e4.mux_viewer_id || i2(), e4.msn = e4.msn || Math.random(), Se2(e4), { mux_viewer_id: e4.mux_viewer_id, mux_sample_number: e4.msn };
              };
              function Pe2(e4, t4) {
                var r3 = t4.beaconCollectionDomain, a2 = t4.beaconDomain;
                if (r3)
                  return "https://" + r3;
                var n3 = a2 || "litix.io";
                return (e4 = e4 || "inferred").match(/^[a-z0-9]+$/) ? "https://" + e4 + "." + n3 : "https://img.litix.io/a.gif";
              }
              var Ae2 = function() {
                var e4;
                switch (Re2()) {
                  case "cellular":
                    e4 = "cellular";
                    break;
                  case "ethernet":
                    e4 = "wired";
                    break;
                  case "wifi":
                    e4 = "wifi";
                    break;
                  case void 0:
                    break;
                  default:
                    e4 = "other";
                }
                return e4;
              }, Re2 = function() {
                var e4 = n2().navigator, t4 = e4 && (e4.connection || e4.mozConnection || e4.webkitConnection);
                return t4 && t4.type;
              };
              Ae2.getConnectionFromAPI = Re2;
              var Ie2 = Ae2, je = Ce3({ a: "env", b: "beacon", c: "custom", d: "ad", e: "event", f: "experiment", i: "internal", m: "mux", n: "response", p: "player", q: "request", r: "retry", s: "session", t: "timestamp", u: "viewer", v: "video", w: "page", x: "view", y: "sub" }), Le3 = Ce3({ ad: "ad", ag: "aggregate", ap: "api", al: "application", ar: "architecture", as: "asset", au: "autoplay", av: "average", bi: "bitrate", br: "break", bw: "browser", by: "bytes", ca: "cached", cb: "cancel", cc: "codec", cd: "code", cg: "category", ch: "changed", cl: "canceled", cn: "config", co: "count", ce: "counter", cp: "complete", cr: "creative", ct: "content", cu: "current", cx: "connection", cz: "context", dg: "downscaling", dm: "domain", dn: "cdn", do: "downscale", dr: "drm", dp: "dropped", du: "duration", dv: "device", ec: "encoding", ed: "edge", en: "end", eg: "engine", em: "embed", er: "error", es: "errorcode", et: "errortext", ee: "event", ev: "events", ex: "expires", ep: "experiments", fa: "failed", fi: "first", fm: "family", ft: "format", fp: "fps", fq: "frequency", fr: "frame", fs: "fullscreen", ha: "has", hb: "holdback", he: "headers", ho: "host", hn: "hostname", ht: "height", id: "id", ii: "init", in: "instance", ip: "ip", is: "is", ke: "key", la: "language", lb: "labeled", le: "level", li: "live", ld: "loaded", lo: "load", ls: "lists", lt: "latency", ma: "max", md: "media", me: "message", mf: "manifest", mi: "mime", ml: "midroll", mm: "min", mn: "manufacturer", mo: "model", mx: "mux", ne: "newest", nm: "name", no: "number", on: "on", os: "os", pa: "paused", pb: "playback", pd: "producer", pe: "percentage", pf: "played", pg: "program", ph: "playhead", pi: "plugin", pl: "preroll", pn: "playing", po: "poster", pr: "preload", ps: "position", pt: "part", py: "property", ra: "rate", rd: "requested", re: "rebuffer", rf: "rendition", rm: "remote", ro: "ratio", rp: "response", rq: "request", rs: "requests", sa: "sample", se: "session", sk: "seek", sm: "stream", so: "source", sq: "sequence", sr: "series", st: "start", su: "startup", sv: "server", sw: "software", ta: "tag", tc: "tech", te: "text", tg: "target", th: "throughput", ti: "time", tl: "total", to: "to", tt: "title", ty: "type", ug: "upscaling", un: "universal", up: "upscale", ur: "url", us: "user", va: "variant", vd: "viewed", vi: "video", ve: "version", vw: "view", vr: "viewer", wd: "width", wa: "watch", wt: "waiting" });
              function Ce3(e4) {
                var t4 = {};
                for (var r3 in e4)
                  e4.hasOwnProperty(r3) && (t4[e4[r3]] = r3);
                return t4;
              }
              function Ne(e4) {
                var t4 = {}, r3 = {};
                return Object.keys(e4).forEach(function(a2) {
                  var n3 = false;
                  if (e4.hasOwnProperty(a2) && void 0 !== e4[a2]) {
                    var i3 = a2.split("_"), o2 = i3[0], s2 = je[o2];
                    s2 || (f2.info("Data key word `" + i3[0] + "` not expected in " + a2), s2 = o2 + "_"), i3.splice(1).forEach(function(e5) {
                      "url" === e5 && (n3 = true), Le3[e5] ? s2 += Le3[e5] : Number(e5) && Math.floor(Number(e5)) === Number(e5) ? s2 += e5 : (f2.info("Data key word `" + e5 + "` not expected in " + a2), s2 += "_" + e5 + "_");
                    }), n3 ? r3[s2] = e4[a2] : t4[s2] = e4[a2];
                  }
                }), Object.assign(t4, r3);
              }
              var He2 = { maxBeaconSize: 300, maxQueueLength: 3600, baseTimeBetweenBeacons: 1e4, maxPayloadKBSize: 500 }, Me2 = ["hb", "requestcompleted", "requestfailed", "requestcanceled"], Be2 = "https://img.litix.io", Ue3 = function(e4) {
                var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                this._beaconUrl = e4 || Be2, this._eventQueue = [], this._postInFlight = false, this._failureCount = 0, this._sendTimeout = false, this._options = Object.assign({}, He2, t4);
              };
              Ue3.prototype.queueEvent = function(e4, t4) {
                var r3 = Object.assign({}, t4);
                return (this._eventQueue.length <= this._options.maxQueueLength || "eventrateexceeded" === e4) && (this._eventQueue.push(r3), this._sendTimeout || this._startBeaconSending(), this._eventQueue.length <= this._options.maxQueueLength);
              }, Ue3.prototype.flushEvents = function() {
                var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                e4 && 1 === this._eventQueue.length ? this._eventQueue.pop() : (this._eventQueue.length && this._sendBeaconQueue(), this._startBeaconSending());
              }, Ue3.prototype.destroy = function() {
                var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                this.destroyed = true, e4 ? this._clearBeaconQueue() : this.flushEvents(), n2().clearTimeout(this._sendTimeout);
              }, Ue3.prototype._clearBeaconQueue = function() {
                var e4 = this._eventQueue.length > this._options.maxBeaconSize ? this._eventQueue.length - this._options.maxBeaconSize : 0, t4 = this._eventQueue.slice(e4);
                e4 > 0 && Object.assign(t4[t4.length - 1], Ne({ mux_view_message: "event queue truncated" }));
                var r3 = this._createPayload(t4);
                Ge2(this._beaconUrl, r3, true, function() {
                });
              }, Ue3.prototype._sendBeaconQueue = function() {
                var e4 = this;
                if (!this._postInFlight) {
                  var t4 = this._eventQueue.slice(0, this._options.maxBeaconSize);
                  this._eventQueue = this._eventQueue.slice(this._options.maxBeaconSize), this._postInFlight = true;
                  var r3 = this._createPayload(t4), a2 = _2.now();
                  Ge2(this._beaconUrl, r3, false, function(r4, n3) {
                    n3 ? (e4._eventQueue = t4.concat(e4._eventQueue), e4._failureCount += 1, f2.info("Error sending beacon: " + n3)) : e4._failureCount = 0, e4._roundTripTime = _2.now() - a2, e4._postInFlight = false;
                  });
                }
              }, Ue3.prototype._getNextBeaconTime = function() {
                if (!this._failureCount)
                  return this._options.baseTimeBetweenBeacons;
                var e4 = Math.pow(2, this._failureCount - 1);
                return (1 + (e4 *= Math.random())) * this._options.baseTimeBetweenBeacons;
              }, Ue3.prototype._startBeaconSending = function() {
                var e4 = this;
                n2().clearTimeout(this._sendTimeout), this.destroyed || (this._sendTimeout = n2().setTimeout(function() {
                  e4._eventQueue.length && e4._sendBeaconQueue(), e4._startBeaconSending();
                }, this._getNextBeaconTime()));
              }, Ue3.prototype._createPayload = function(e4) {
                var t4, r3, a2, n3 = this, i3 = { transmission_timestamp: Math.round(_2.now()) };
                this._roundTripTime && (i3.rtt_ms = Math.round(this._roundTripTime));
                var o2 = function() {
                  t4 = JSON.stringify({ metadata: i3, events: r3 || e4 }), a2 = t4.length / 1024;
                }, s2 = function() {
                  return a2 <= n3._options.maxPayloadKBSize;
                };
                return o2(), s2() || (f2.info("Payload size is too big (" + a2 + " kb). Removing unnecessary events."), r3 = e4.filter(function(e5) {
                  return -1 === Me2.indexOf(e5.e);
                }), o2()), s2() || (f2.info("Payload size still too big (" + a2 + " kb). Cropping fields.."), r3.forEach(function(e5) {
                  for (var t5 in e5) {
                    var r4 = e5[t5];
                    "string" == typeof r4 && r4.length > 51200 && (e5[t5] = r4.substring(0, 51200));
                  }
                }), o2()), t4;
              };
              var Fe = function(e4) {
                return e4.length <= 57344;
              }, Ge2 = function(e4, t4, r3, a2) {
                if (r3 && navigator && navigator.sendBeacon && navigator.sendBeacon(e4, t4))
                  a2();
                else if (n2().fetch)
                  n2().fetch(e4, { method: "POST", body: t4, headers: { "Content-Type": "text/plain" }, keepalive: Fe(t4) }).then(function(e5) {
                    return a2(null, e5.ok ? null : "Error");
                  }).catch(function(e5) {
                    return a2(null, e5);
                  });
                else {
                  if (n2().XMLHttpRequest) {
                    var i3 = new (n2()).XMLHttpRequest();
                    return i3.onreadystatechange = function() {
                      if (4 === i3.readyState)
                        return a2(null, 200 !== i3.status ? "error" : void 0);
                    }, i3.open("POST", e4), i3.setRequestHeader("Content-Type", "text/plain"), void i3.send(t4);
                  }
                  a2();
                }
              }, We = Ue3;
              function Qe2(e4, t4) {
                return function(e5) {
                  if (Array.isArray(e5))
                    return e5;
                }(e4) || function(e5, t5) {
                  var r3 = null == e5 ? null : "undefined" != typeof Symbol && e5[Symbol.iterator] || e5["@@iterator"];
                  if (null != r3) {
                    var a2, n3, i3 = [], o2 = true, s2 = false;
                    try {
                      for (r3 = r3.call(e5); !(o2 = (a2 = r3.next()).done) && (i3.push(a2.value), !t5 || i3.length !== t5); o2 = true)
                        ;
                    } catch (e6) {
                      s2 = true, n3 = e6;
                    } finally {
                      try {
                        o2 || null == r3.return || r3.return();
                      } finally {
                        if (s2)
                          throw n3;
                      }
                    }
                    return i3;
                  }
                }(e4, t4) || function(e5, t5) {
                  if (e5) {
                    if ("string" == typeof e5)
                      return Ve(e5, t5);
                    var r3 = Object.prototype.toString.call(e5).slice(8, -1);
                    return "Object" === r3 && e5.constructor && (r3 = e5.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e5) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? Ve(e5, t5) : void 0;
                  }
                }(e4, t4) || function() {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }();
              }
              function Ve(e4, t4) {
                (null == t4 || t4 > e4.length) && (t4 = e4.length);
                for (var r3 = 0, a2 = new Array(t4); r3 < t4; r3++)
                  a2[r3] = e4[r3];
                return a2;
              }
              function Je2(e4, t4) {
                var r3 = Object.keys(e4);
                if (Object.getOwnPropertySymbols) {
                  var a2 = Object.getOwnPropertySymbols(e4);
                  t4 && (a2 = a2.filter(function(t5) {
                    return Object.getOwnPropertyDescriptor(e4, t5).enumerable;
                  })), r3.push.apply(r3, a2);
                }
                return r3;
              }
              function Ke(e4) {
                for (var t4 = 1; t4 < arguments.length; t4++) {
                  var r3 = null != arguments[t4] ? arguments[t4] : {};
                  t4 % 2 ? Je2(Object(r3), true).forEach(function(t5) {
                    $e2(e4, t5, r3[t5]);
                  }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e4, Object.getOwnPropertyDescriptors(r3)) : Je2(Object(r3)).forEach(function(t5) {
                    Object.defineProperty(e4, t5, Object.getOwnPropertyDescriptor(r3, t5));
                  });
                }
                return e4;
              }
              function ze2(e4) {
                return ze2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e5) {
                  return typeof e5;
                } : function(e5) {
                  return e5 && "function" == typeof Symbol && e5.constructor === Symbol && e5 !== Symbol.prototype ? "symbol" : typeof e5;
                }, ze2(e4);
              }
              function Ye2(e4, t4) {
                if (!(e4 instanceof t4))
                  throw new TypeError("Cannot call a class as a function");
              }
              function Xe2(e4, t4) {
                for (var r3 = 0; r3 < t4.length; r3++) {
                  var a2 = t4[r3];
                  a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(e4, a2.key, a2);
                }
              }
              function $e2(e4, t4, r3) {
                return t4 in e4 ? Object.defineProperty(e4, t4, { value: r3, enumerable: true, configurable: true, writable: true }) : e4[t4] = r3, e4;
              }
              var Ze = ["env_key", "view_id", "view_sequence_number", "player_sequence_number", "beacon_domain", "player_playhead_time", "viewer_time", "mux_api_version", "event", "video_id", "player_instance_id"], et2 = ["adplay", "adplaying", "adpause", "adfirstquartile", "admidpoint", "adthirdquartile", "adended", "adresponse"], tt2 = ["viewstart", "error", "ended", "viewend"], rt2 = function() {
                function e4(t5, r4) {
                  var a3, i3, o2, s2, u3, l4, d2, c2, f3, p2, _3, h4, v3, m3, y2, b3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                  Ye2(this, e4), $e2(this, "previousBeaconData", null), $e2(this, "lastEventTime", 0), $e2(this, "rateLimited", false), this.mux = t5, this.envKey = r4, this.options = b3, this.eventQueue = new We(Pe2(this.envKey, this.options)), this.sampleRate = null !== (a3 = this.options.sampleRate) && void 0 !== a3 ? a3 : 1, this.disableCookies = null !== (i3 = this.options.disableCookies) && void 0 !== i3 && i3, this.respectDoNotTrack = null !== (o2 = this.options.respectDoNotTrack) && void 0 !== o2 && o2, this.previousBeaconData = null, this.lastEventTime = 0, this.rateLimited = false, this.pageLevelData = { mux_api_version: this.mux.API_VERSION, mux_embed: this.mux.NAME, mux_embed_version: this.mux.VERSION, viewer_application_name: null === (s2 = this.options.platform) || void 0 === s2 ? void 0 : s2.name, viewer_application_version: null === (u3 = this.options.platform) || void 0 === u3 ? void 0 : u3.version, viewer_application_engine: null === (l4 = this.options.platform) || void 0 === l4 ? void 0 : l4.layout, viewer_device_name: null === (d2 = this.options.platform) || void 0 === d2 ? void 0 : d2.product, viewer_device_category: "", viewer_device_manufacturer: null === (c2 = this.options.platform) || void 0 === c2 ? void 0 : c2.manufacturer, viewer_os_family: null === (f3 = this.options.platform) || void 0 === f3 || null === (p2 = f3.os) || void 0 === p2 ? void 0 : p2.family, viewer_os_architecture: null === (_3 = this.options.platform) || void 0 === _3 || null === (h4 = _3.os) || void 0 === h4 ? void 0 : h4.architecture, viewer_os_version: null === (v3 = this.options.platform) || void 0 === v3 || null === (m3 = v3.os) || void 0 === m3 ? void 0 : m3.version, viewer_connection_type: Ie2(), page_url: null === n2() || void 0 === n2() || null === (y2 = n2().location) || void 0 === y2 ? void 0 : y2.href }, this.viewerData = this.disableCookies ? {} : qe();
                }
                var t4, r3, a2;
                return t4 = e4, (r3 = [{ key: "send", value: function(e5, t5) {
                  var r4;
                  if (e5 && null != t5 && t5.view_id) {
                    if (this.respectDoNotTrack && p())
                      return f2.info("Not sending `" + e5 + "` because Do Not Track is enabled");
                    if (!t5 || "object" !== ze2(t5))
                      return f2.error("A data object was expected in send() but was not provided");
                    var a3, n3, o2 = this.disableCookies ? {} : (a3 = De2(), n3 = _2.now(), a3.session_start && (a3.sst = a3.session_start, delete a3.session_start), a3.session_id && (a3.sid = a3.session_id, delete a3.session_id), a3.session_expires && (a3.sex = a3.session_expires, delete a3.session_expires), (!a3.sex || a3.sex < n3) && (a3.sid = i2(), a3.sst = n3), a3.sex = n3 + 15e5, Se2(a3), { session_id: a3.sid, session_start: a3.sst, session_expires: a3.sex }), s2 = Ke(Ke(Ke(Ke(Ke({}, this.pageLevelData), t5), o2), this.viewerData), {}, { event: e5, env_key: this.envKey });
                    s2.user_id && (s2.viewer_user_id = s2.user_id, delete s2.user_id);
                    var u3 = (null !== (r4 = s2.mux_sample_number) && void 0 !== r4 ? r4 : 0) >= this.sampleRate, l4 = Ne(this._deduplicateBeaconData(e5, s2));
                    if (this.lastEventTime = this.mux.utils.now(), u3)
                      return f2.info("Not sending event due to sample rate restriction", e5, s2, l4);
                    if (this.envKey || f2.info("Missing environment key (envKey) - beacons will be dropped if the video source is not a valid mux video URL", e5, s2, l4), !this.rateLimited) {
                      if (f2.info("Sending event", e5, s2, l4), this.rateLimited = !this.eventQueue.queueEvent(e5, l4), this.mux.WINDOW_UNLOADING && "viewend" === e5)
                        this.eventQueue.destroy(true);
                      else if (this.mux.WINDOW_HIDDEN && "hb" === e5 ? this.eventQueue.flushEvents(true) : tt2.indexOf(e5) >= 0 && this.eventQueue.flushEvents(), this.rateLimited)
                        return s2.event = "eventrateexceeded", l4 = Ne(s2), this.eventQueue.queueEvent(s2.event, l4), f2.error("Beaconing disabled due to rate limit.");
                    }
                  }
                } }, { key: "destroy", value: function() {
                  this.eventQueue.destroy(false);
                } }, { key: "_deduplicateBeaconData", value: function(e5, t5) {
                  var r4 = this, a3 = {}, n3 = t5.view_id;
                  if ("-1" === n3 || "viewstart" === e5 || "viewend" === e5 || !this.previousBeaconData || this.mux.utils.now() - this.lastEventTime >= 6e5)
                    a3 = Ke({}, t5), n3 && (this.previousBeaconData = a3), n3 && "viewend" === e5 && (this.previousBeaconData = null);
                  else {
                    var i3 = 0 === e5.indexOf("request");
                    Object.entries(t5).forEach(function(t6) {
                      var n4 = Qe2(t6, 2), o2 = n4[0], s2 = n4[1];
                      r4.previousBeaconData && (s2 !== r4.previousBeaconData[o2] || Ze.indexOf(o2) > -1 || r4.objectHasChanged(i3, o2, s2, r4.previousBeaconData[o2]) || r4.eventRequiresKey(e5, o2)) && (a3[o2] = s2, r4.previousBeaconData[o2] = s2);
                    });
                  }
                  return a3;
                } }, { key: "objectHasChanged", value: function(e5, t5, r4, a3) {
                  return !(!e5 || 0 !== t5.indexOf("request_") || "request_response_headers" !== t5 && "object" === ze2(r4) && "object" === ze2(a3) && Object.keys(r4 || {}).length === Object.keys(a3 || {}).length);
                } }, { key: "eventRequiresKey", value: function(e5, t5) {
                  return "renditionchange" === e5 && 0 === t5.indexOf("video_source_") || !(0 !== t5.indexOf("ad_id") || !et2.includes(e5));
                } }]) && Xe2(t4.prototype, r3), a2 && Xe2(t4, a2), Object.defineProperty(t4, "prototype", { writable: false }), e4;
              }();
              function at2(e4, t4) {
                for (var r3 = 0; r3 < t4.length; r3++) {
                  var a2 = t4[r3];
                  a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(e4, a2.key, a2);
                }
              }
              function nt2(e4, t4, r3) {
                return t4 && at2(e4.prototype, t4), r3 && at2(e4, r3), Object.defineProperty(e4, "prototype", { writable: false }), e4;
              }
              var it2 = nt2(function e4(t4) {
                !function(e5, t5) {
                  if (!(e5 instanceof t5))
                    throw new TypeError("Cannot call a class as a function");
                }(this, e4);
                var r3 = 0, a2 = 0, n3 = 0, i3 = 0, o2 = 0, s2 = 0, u3 = 0;
                t4.on("requestcompleted", function(e5, s3) {
                  var u4, l4, d2 = s3.request_start, c2 = s3.request_response_start, f3 = s3.request_response_end, p2 = s3.request_bytes_loaded;
                  if (i3++, c2 ? (u4 = c2 - (null != d2 ? d2 : 0), l4 = (null != f3 ? f3 : 0) - c2) : l4 = (null != f3 ? f3 : 0) - (null != d2 ? d2 : 0), l4 > 0 && p2 && p2 > 0) {
                    var _3 = p2 / l4 * 8e3;
                    o2++, a2 += p2, n3 += l4, t4.data.view_min_request_throughput = Math.min(t4.data.view_min_request_throughput || 1 / 0, _3), t4.data.view_average_request_throughput = a2 / n3 * 8e3, t4.data.view_request_count = i3, u4 > 0 && (r3 += u4, t4.data.view_max_request_latency = Math.max(t4.data.view_max_request_latency || 0, u4), t4.data.view_average_request_latency = r3 / o2);
                  }
                }), t4.on("requestfailed", function(e5, r4) {
                  i3++, s2++, t4.data.view_request_count = i3, t4.data.view_request_failed_count = s2;
                }), t4.on("requestcanceled", function(e5, r4) {
                  i3++, u3++, t4.data.view_request_count = i3, t4.data.view_request_canceled_count = u3;
                });
              });
              function ot(e4, t4) {
                for (var r3 = 0; r3 < t4.length; r3++) {
                  var a2 = t4[r3];
                  a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(e4, a2.key, a2);
                }
              }
              function st2(e4, t4, r3) {
                return t4 && ot(e4.prototype, t4), r3 && ot(e4, r3), Object.defineProperty(e4, "prototype", { writable: false }), e4;
              }
              var ut = st2(function e4(t4) {
                var r3 = this;
                !function(e5, t5) {
                  if (!(e5 instanceof t5))
                    throw new TypeError("Cannot call a class as a function");
                }(this, e4), t4.on("before*", function(e5, a2) {
                  var n3 = a2.viewer_time, i3 = _2.now(), o2 = r3._lastEventTime;
                  if (r3._lastEventTime = i3, o2 && i3 - o2 > 36e5) {
                    var s2 = Object.keys(t4.data).reduce(function(e6, r4) {
                      return 0 === r4.indexOf("video_") ? Object.assign(e6, function(e7, t5, r5) {
                        return t5 in e7 ? Object.defineProperty(e7, t5, { value: r5, enumerable: true, configurable: true, writable: true }) : e7[t5] = r5, e7;
                      }({}, r4, t4.data[r4])) : e6;
                    }, {});
                    t4.mux.log.info("Received event after at least an hour inactivity, creating a new view"), t4.emit("viewinit", Object.assign({ viewer_time: n3 }, s2)), t4.playbackHeartbeat._playheadShouldBeProgressing && "play" !== e5.type && "adbreakstart" !== e5.type && (t4.emit("play", { viewer_time: n3 }), "playing" !== e5.type && t4.emit("playing", { viewer_time: n3 }));
                  }
                });
              });
              function lt2(e4) {
                return lt2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e5) {
                  return typeof e5;
                } : function(e5) {
                  return e5 && "function" == typeof Symbol && e5.constructor === Symbol && e5 !== Symbol.prototype ? "symbol" : typeof e5;
                }, lt2(e4);
              }
              function dt(e4, t4) {
                return function(e5) {
                  if (Array.isArray(e5))
                    return e5;
                }(e4) || function(e5, t5) {
                  var r3 = null == e5 ? null : "undefined" != typeof Symbol && e5[Symbol.iterator] || e5["@@iterator"];
                  if (null != r3) {
                    var a2, n3, i3 = [], o2 = true, s2 = false;
                    try {
                      for (r3 = r3.call(e5); !(o2 = (a2 = r3.next()).done) && (i3.push(a2.value), !t5 || i3.length !== t5); o2 = true)
                        ;
                    } catch (e6) {
                      s2 = true, n3 = e6;
                    } finally {
                      try {
                        o2 || null == r3.return || r3.return();
                      } finally {
                        if (s2)
                          throw n3;
                      }
                    }
                    return i3;
                  }
                }(e4, t4) || function(e5, t5) {
                  if (e5) {
                    if ("string" == typeof e5)
                      return ct(e5, t5);
                    var r3 = Object.prototype.toString.call(e5).slice(8, -1);
                    return "Object" === r3 && e5.constructor && (r3 = e5.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e5) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? ct(e5, t5) : void 0;
                  }
                }(e4, t4) || function() {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }();
              }
              function ct(e4, t4) {
                (null == t4 || t4 > e4.length) && (t4 = e4.length);
                for (var r3 = 0, a2 = new Array(t4); r3 < t4; r3++)
                  a2[r3] = e4[r3];
                return a2;
              }
              function ft2(e4, t4) {
                for (var r3 = 0; r3 < t4.length; r3++) {
                  var a2 = t4[r3];
                  a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(e4, a2.key, a2);
                }
              }
              function pt(e4, t4) {
                return pt = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e5, t5) {
                  return e5.__proto__ = t5, e5;
                }, pt(e4, t4);
              }
              function _t(e4) {
                var t4 = function() {
                  if ("undefined" == typeof Reflect || !Reflect.construct)
                    return false;
                  if (Reflect.construct.sham)
                    return false;
                  if ("function" == typeof Proxy)
                    return true;
                  try {
                    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                    })), true;
                  } catch (e5) {
                    return false;
                  }
                }();
                return function() {
                  var r3, a2 = mt2(e4);
                  if (t4) {
                    var n3 = mt2(this).constructor;
                    r3 = Reflect.construct(a2, arguments, n3);
                  } else
                    r3 = a2.apply(this, arguments);
                  return ht(this, r3);
                };
              }
              function ht(e4, t4) {
                if (t4 && ("object" === lt2(t4) || "function" == typeof t4))
                  return t4;
                if (void 0 !== t4)
                  throw new TypeError("Derived constructors may only return object or undefined");
                return vt2(e4);
              }
              function vt2(e4) {
                if (void 0 === e4)
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return e4;
              }
              function mt2(e4) {
                return mt2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e5) {
                  return e5.__proto__ || Object.getPrototypeOf(e5);
                }, mt2(e4);
              }
              var yt2 = ["viewstart", "ended", "loadstart", "pause", "play", "playing", "ratechange", "waiting", "adplay", "adpause", "adended", "aderror", "adplaying", "adrequest", "adresponse", "adbreakstart", "adbreakend", "adfirstquartile", "admidpoint", "adthirdquartile", "rebufferstart", "rebufferend", "seeked", "error", "hb", "requestcompleted", "requestfailed", "requestcanceled", "renditionchange"], bt = function(e4) {
                !function(e5, t5) {
                  if ("function" != typeof t5 && null !== t5)
                    throw new TypeError("Super expression must either be null or a function");
                  e5.prototype = Object.create(t5 && t5.prototype, { constructor: { value: e5, writable: true, configurable: true } }), Object.defineProperty(e5, "prototype", { writable: false }), t5 && pt(e5, t5);
                }(o2, e4);
                var t4, r3, a2, n3 = _t(o2);
                function o2(e5, t5, r4) {
                  var a3;
                  !function(e6, t6) {
                    if (!(e6 instanceof t6))
                      throw new TypeError("Cannot call a class as a function");
                  }(this, o2), (a3 = n3.call(this)).DOM_CONTENT_LOADED_EVENT_END = m2.domContentLoadedEventEnd(), a3.NAVIGATION_START = m2.navigationStart(), a3.mux = e5, a3.id = t5, (r4 = Object.assign({ debug: false, minimumRebufferDuration: 250, sustainedRebufferThreshold: 1e3, playbackHeartbeatTime: 25, beaconDomain: "litix.io", sampleRate: 1, disableCookies: false, respectDoNotTrack: false, disableRebufferTracking: false, disablePlayheadRebufferTracking: false, errorTranslator: function(e6) {
                    return e6;
                  } }, r4)).data = r4.data || {}, r4.data.property_key && (r4.data.env_key = r4.data.property_key, delete r4.data.property_key), f2.setLevel(r4.debug ? "debug" : "warn"), a3.getPlayheadTime = r4.getPlayheadTime, a3.getStateData = r4.getStateData || function() {
                    return {};
                  }, a3.getAdData = r4.getAdData || function() {
                  }, a3.minimumRebufferDuration = r4.minimumRebufferDuration, a3.sustainedRebufferThreshold = r4.sustainedRebufferThreshold, a3.playbackHeartbeatTime = r4.playbackHeartbeatTime, a3.disableRebufferTracking = r4.disableRebufferTracking, a3.disableRebufferTracking && a3.mux.log.warn("Disabling rebuffer tracking. This should only be used in specific circumstances as a last resort when your player is known to unreliably track rebuffering."), a3.disablePlayheadRebufferTracking = r4.disablePlayheadRebufferTracking, a3.errorTranslator = r4.errorTranslator, a3.playbackEventDispatcher = new rt2(e5, r4.data.env_key, r4), a3.data = { player_instance_id: i2(), mux_sample_rate: r4.sampleRate, beacon_domain: r4.beaconCollectionDomain ? r4.beaconCollectionDomain : r4.beaconDomain }, a3.data.view_sequence_number = 1, a3.data.player_sequence_number = 1, a3.oldEmit = a3.emit, a3.emit = function(e6, t6) {
                    t6 = Object.assign({ viewer_time: this.mux.utils.now() }, t6), this.oldEmit(e6, t6);
                  };
                  var s2 = function() {
                    void 0 === this.data.view_start && (this.data.view_start = this.mux.utils.now(), this.emit("viewstart"));
                  }.bind(vt2(a3));
                  a3.on("viewinit", function(e6, t6) {
                    this._resetVideoData(), this._resetViewData(), this._resetErrorData(), this._updateStateData(), Object.assign(this.data, t6), this._initializeViewData(), this.one("play", s2), this.one("adbreakstart", s2);
                  });
                  var u3 = function(e6) {
                    this.emit("viewend"), this.send("viewend"), this.emit("viewinit", e6);
                  }.bind(vt2(a3));
                  if (a3.on("videochange", function(e6, t6) {
                    u3(t6);
                  }), a3.on("programchange", function(e6, t6) {
                    this.data.player_is_paused && this.mux.log.warn("The `programchange` event is intended to be used when the content changes mid playback without the video source changing, however the video is not currently playing. If the video source is changing please use the videochange event otherwise you will lose startup time information."), u3(Object.assign(t6, { view_program_changed: true })), s2(), this.emit("play"), this.emit("playing");
                  }), a3.on("fragmentchange", function(e6, t6) {
                    this.currentFragmentPDT = t6.currentFragmentPDT, this.currentFragmentStart = t6.currentFragmentStart;
                  }), a3.on("destroy", a3.destroy), "undefined" != typeof window && "function" == typeof window.addEventListener && "function" == typeof window.removeEventListener) {
                    var l4 = function() {
                      var e6 = void 0 !== a3.data.view_start;
                      a3.mux.WINDOW_HIDDEN = "hidden" === document.visibilityState, e6 && a3.mux.WINDOW_HIDDEN && (a3.data.player_is_paused || a3.emit("hb"));
                    };
                    window.addEventListener("visibilitychange", l4, false);
                    var d2 = function(e6) {
                      e6.persisted || a3.destroy();
                    };
                    window.addEventListener("pagehide", d2, false), a3.on("destroy", function() {
                      window.removeEventListener("visibilitychange", l4), window.removeEventListener("pagehide", d2);
                    });
                  }
                  return a3.on("playerready", function(e6, t6) {
                    Object.assign(this.data, t6);
                  }), yt2.forEach(function(e6) {
                    a3.on(e6, function(t6, r5) {
                      0 !== e6.indexOf("ad") && this._updateStateData(), Object.assign(this.data, r5), this._sanitizeData();
                    }), a3.on("after" + e6, function() {
                      ("error" !== e6 || this.errorTracker.viewErrored) && this.send(e6);
                    });
                  }), a3.on("viewend", function(e6, t6) {
                    Object.assign(a3.data, t6);
                  }), a3.one("playerready", function(e6) {
                    var t6 = this.mux.utils.now();
                    this.data.player_init_time && (this.data.player_startup_time = t6 - this.data.player_init_time), !this.mux.PLAYER_TRACKED && this.NAVIGATION_START && (this.mux.PLAYER_TRACKED = true, (this.data.player_init_time || this.DOM_CONTENT_LOADED_EVENT_END) && (this.data.page_load_time = Math.min(this.data.player_init_time || 1 / 0, this.DOM_CONTENT_LOADED_EVENT_END || 1 / 0) - this.NAVIGATION_START)), this.send("playerready"), delete this.data.player_startup_time, delete this.data.page_load_time;
                  }), a3.longResumeTracker = new ut(vt2(a3)), a3.errorTracker = new G3(vt2(a3)), new Te3(vt2(a3)), a3.seekingTracker = new de2(vt2(a3)), a3.playheadTime = new z3(vt2(a3)), a3.playbackHeartbeat = new B2(vt2(a3)), new se2(vt2(a3)), a3.watchTimeTracker = new Q3(vt2(a3)), new J3(vt2(a3)), a3.adTracker = new ve2(vt2(a3)), new re2(vt2(a3)), new Z3(vt2(a3)), new ne2(vt2(a3)), new be3(vt2(a3)), new it2(vt2(a3)), r4.hlsjs && a3.addHLSJS(r4), r4.dashjs && a3.addDashJS(r4), a3.emit("viewinit", r4.data), a3;
                }
                return t4 = o2, r3 = [{ key: "destroy", value: function() {
                  this._destroyed || (this._destroyed = true, void 0 !== this.data.view_start && (this.emit("viewend"), this.send("viewend")), this.playbackEventDispatcher.destroy(), this.removeHLSJS(), this.removeDashJS(), window.clearTimeout(this._heartBeatTimeout));
                } }, { key: "send", value: function(e5) {
                  if (this.data.view_id) {
                    var t5 = Object.assign({}, this.data);
                    if (void 0 === t5.video_source_is_live && (t5.player_source_duration === 1 / 0 || t5.video_source_duration === 1 / 0 ? t5.video_source_is_live = true : (t5.player_source_duration > 0 || t5.video_source_duration > 0) && (t5.video_source_is_live = false)), t5.video_source_is_live || ["player_program_time", "player_manifest_newest_program_time", "player_live_edge_program_time", "player_program_time", "video_holdback", "video_part_holdback", "video_target_duration", "video_part_target_duration"].forEach(function(e6) {
                      t5[e6] = void 0;
                    }), t5.video_source_url = t5.video_source_url || t5.player_source_url, t5.video_source_url) {
                      var r4 = dt(v2(t5.video_source_url), 2), a3 = r4[0], n4 = r4[1];
                      t5.video_source_domain = n4, t5.video_source_hostname = a3;
                    }
                    delete t5.ad_request_id, this.playbackEventDispatcher.send(e5, t5), this.data.view_sequence_number++, this.data.player_sequence_number++, this._restartHeartBeat(), "viewend" === e5 && delete this.data.view_id;
                  }
                } }, { key: "_updateStateData", value: function() {
                  Object.assign(this.data, this.getStateData()), this.playheadTime._updatePlayheadTime(), this._sanitizeData();
                } }, { key: "_sanitizeData", value: function() {
                  var e5 = this;
                  ["player_width", "player_height", "video_source_width", "video_source_height", "player_playhead_time", "video_source_bitrate"].forEach(function(t5) {
                    var r4 = parseInt(e5.data[t5], 10);
                    e5.data[t5] = isNaN(r4) ? void 0 : r4;
                  }), ["player_source_url", "video_source_url"].forEach(function(t5) {
                    if (e5.data[t5]) {
                      var r4 = e5.data[t5].toLowerCase();
                      0 !== r4.indexOf("data:") && 0 !== r4.indexOf("blob:") || (e5.data[t5] = "MSE style URL");
                    }
                  });
                } }, { key: "_resetVideoData", value: function(e5, t5) {
                  var r4 = this;
                  Object.keys(this.data).forEach(function(e6) {
                    0 === e6.indexOf("video_") && delete r4.data[e6];
                  });
                } }, { key: "_resetViewData", value: function() {
                  var e5 = this;
                  Object.keys(this.data).forEach(function(t5) {
                    0 === t5.indexOf("view_") && delete e5.data[t5];
                  }), this.data.view_sequence_number = 1;
                } }, { key: "_resetErrorData", value: function(e5, t5) {
                  delete this.data.player_error_code, delete this.data.player_error_message;
                } }, { key: "_initializeViewData", value: function() {
                  var e5 = this, t5 = this.data.view_id = i2(), r4 = function() {
                    t5 === e5.data.view_id && y(e5.data, "player_view_count", 1);
                  };
                  this.data.player_is_paused ? this.one("play", r4) : r4();
                } }, { key: "_restartHeartBeat", value: function() {
                  var e5 = this;
                  window.clearTimeout(this._heartBeatTimeout), this.errorTracker.viewErrored || (this._heartBeatTimeout = window.setTimeout(function() {
                    e5.data.player_is_paused || e5.emit("hb");
                  }, 1e4));
                } }, { key: "addHLSJS", value: function(e5) {
                  e5.hlsjs ? this.hlsjs ? this.mux.log.warn("An instance of HLS.js is already being monitored for this player.") : (this.hlsjs = e5.hlsjs, function(e6, t5, r4) {
                    var a3 = arguments.length > 4 ? arguments[4] : void 0, n4 = e6.log, i3 = e6.utils.secondsToMs, o3 = function(e7) {
                      var t6, r5 = parseInt(a3.version);
                      return 1 === r5 && null !== e7.programDateTime && (t6 = e7.programDateTime), 0 === r5 && null !== e7.pdt && (t6 = e7.pdt), t6;
                    };
                    if (m2.exists()) {
                      var s2 = function(r5, a4) {
                        return e6.emit(t5, r5, a4);
                      }, u3 = function(e7, t6) {
                        var r5 = t6.levels, a4 = t6.audioTracks, n5 = t6.url, i4 = t6.stats, o4 = t6.networkDetails, u4 = t6.sessionData, l5 = {}, d3 = {};
                        r5.forEach(function(e8, t7) {
                          l5[t7] = { width: e8.width, height: e8.height, bitrate: e8.bitrate, attrs: e8.attrs };
                        }), a4.forEach(function(e8, t7) {
                          d3[t7] = { name: e8.name, language: e8.lang, bitrate: e8.bitrate };
                        });
                        var c3 = D2(i4), f4 = c3.bytesLoaded, p3 = c3.requestStart, _4 = c3.responseStart, v4 = c3.responseEnd;
                        s2("requestcompleted", O3(O3({}, E(u4)), {}, { request_event_type: e7, request_bytes_loaded: f4, request_start: p3, request_response_start: _4, request_response_end: v4, request_type: "manifest", request_hostname: h3(n5), request_response_headers: S3(o4), request_rendition_lists: { media: l5, audio: d3, video: {} } }));
                      };
                      r4.on(a3.Events.MANIFEST_LOADED, u3);
                      var l4 = function(e7, t6) {
                        var r5 = t6.details, a4 = t6.level, n5 = t6.networkDetails, u4 = t6.stats, l5 = D2(u4), d3 = l5.bytesLoaded, c3 = l5.requestStart, f4 = l5.responseStart, p3 = l5.responseEnd, _4 = r5.fragments[r5.fragments.length - 1], v4 = o3(_4) + i3(_4.duration);
                        s2("requestcompleted", { request_event_type: e7, request_bytes_loaded: d3, request_start: c3, request_response_start: f4, request_response_end: p3, request_current_level: a4, request_type: "manifest", request_hostname: h3(r5.url), request_response_headers: S3(n5), video_holdback: r5.holdBack && i3(r5.holdBack), video_part_holdback: r5.partHoldBack && i3(r5.partHoldBack), video_part_target_duration: r5.partTarget && i3(r5.partTarget), video_target_duration: r5.targetduration && i3(r5.targetduration), video_source_is_live: r5.live, player_manifest_newest_program_time: isNaN(v4) ? void 0 : v4 });
                      };
                      r4.on(a3.Events.LEVEL_LOADED, l4);
                      var d2 = function(e7, t6) {
                        var r5 = t6.details, a4 = t6.networkDetails, n5 = t6.stats, i4 = D2(n5), o4 = i4.bytesLoaded, u4 = i4.requestStart, l5 = i4.responseStart, d3 = i4.responseEnd;
                        s2("requestcompleted", { request_event_type: e7, request_bytes_loaded: o4, request_start: u4, request_response_start: l5, request_response_end: d3, request_type: "manifest", request_hostname: h3(r5.url), request_response_headers: S3(a4) });
                      };
                      r4.on(a3.Events.AUDIO_TRACK_LOADED, d2);
                      var c2 = function(e7, t6) {
                        var a4 = t6.stats, n5 = t6.networkDetails, i4 = t6.frag;
                        a4 = a4 || i4.stats;
                        var o4 = D2(a4), u4 = o4.bytesLoaded, l5 = o4.requestStart, d3 = o4.responseStart, c3 = o4.responseEnd, f4 = n5 ? S3(n5) : void 0, p3 = { request_event_type: e7, request_bytes_loaded: u4, request_start: l5, request_response_start: d3, request_response_end: c3, request_hostname: n5 ? h3(n5.responseURL) : void 0, request_id: f4 ? T2(f4) : void 0, request_response_headers: f4, request_media_duration: i4.duration, request_url: null == n5 ? void 0 : n5.responseURL };
                        "main" === i4.type ? (p3.request_type = "media", p3.request_current_level = i4.level, p3.request_video_width = (r4.levels[i4.level] || {}).width, p3.request_video_height = (r4.levels[i4.level] || {}).height, p3.request_labeled_bitrate = (r4.levels[i4.level] || {}).bitrate) : p3.request_type = i4.type, s2("requestcompleted", p3);
                      };
                      r4.on(a3.Events.FRAG_LOADED, c2);
                      var f3 = function(e7, t6) {
                        var r5 = t6.frag, a4 = r5.start, n5 = { currentFragmentPDT: o3(r5), currentFragmentStart: i3(a4) };
                        s2("fragmentchange", n5);
                      };
                      r4.on(a3.Events.FRAG_CHANGED, f3);
                      var p2 = function(e7, t6) {
                        var r5 = t6.type, n5 = t6.details, i4 = t6.response, o4 = t6.fatal, u4 = t6.frag, l5 = t6.networkDetails, d3 = (null == u4 ? void 0 : u4.url) || t6.url || "", c3 = l5 ? S3(l5) : void 0;
                        if (n5 !== a3.ErrorDetails.MANIFEST_LOAD_ERROR && n5 !== a3.ErrorDetails.MANIFEST_LOAD_TIMEOUT && n5 !== a3.ErrorDetails.FRAG_LOAD_ERROR && n5 !== a3.ErrorDetails.FRAG_LOAD_TIMEOUT && n5 !== a3.ErrorDetails.LEVEL_LOAD_ERROR && n5 !== a3.ErrorDetails.LEVEL_LOAD_TIMEOUT && n5 !== a3.ErrorDetails.AUDIO_TRACK_LOAD_ERROR && n5 !== a3.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT && n5 !== a3.ErrorDetails.SUBTITLE_LOAD_ERROR && n5 !== a3.ErrorDetails.SUBTITLE_LOAD_TIMEOUT && n5 !== a3.ErrorDetails.KEY_LOAD_ERROR && n5 !== a3.ErrorDetails.KEY_LOAD_TIMEOUT || s2("requestfailed", { request_error: n5, request_url: d3, request_hostname: h3(d3), request_id: c3 ? T2(c3) : void 0, request_type: n5 === a3.ErrorDetails.FRAG_LOAD_ERROR || n5 === a3.ErrorDetails.FRAG_LOAD_TIMEOUT ? "media" : n5 === a3.ErrorDetails.AUDIO_TRACK_LOAD_ERROR || n5 === a3.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT ? "audio" : n5 === a3.ErrorDetails.SUBTITLE_LOAD_ERROR || n5 === a3.ErrorDetails.SUBTITLE_LOAD_TIMEOUT ? "subtitle" : n5 === a3.ErrorDetails.KEY_LOAD_ERROR || n5 === a3.ErrorDetails.KEY_LOAD_TIMEOUT ? "encryption" : "manifest", request_error_code: null == i4 ? void 0 : i4.code, request_error_text: null == i4 ? void 0 : i4.text }), o4) {
                          var f4, p3 = "".concat(d3 ? "url: ".concat(d3, "\n") : "") + "".concat(i4 && (i4.code || i4.text) ? "response: ".concat(i4.code, ", ").concat(i4.text, "\n") : "") + "".concat(t6.reason ? "failure reason: ".concat(t6.reason, "\n") : "") + "".concat(t6.level ? "level: ".concat(t6.level, "\n") : "") + "".concat(t6.parent ? "parent stream controller: ".concat(t6.parent, "\n") : "") + "".concat(t6.buffer ? "buffer length: ".concat(t6.buffer, "\n") : "") + "".concat(t6.error ? "error: ".concat(t6.error, "\n") : "") + "".concat(t6.event ? "event: ".concat(t6.event, "\n") : "") + "".concat(t6.err ? "error message: ".concat(null === (f4 = t6.err) || void 0 === f4 ? void 0 : f4.message, "\n") : "");
                          s2("error", { player_error_code: r5, player_error_message: n5, player_error_context: p3 });
                        }
                      };
                      r4.on(a3.Events.ERROR, p2);
                      var _3 = function(e7, t6) {
                        var r5 = t6.frag, a4 = r5 && r5._url || "";
                        s2("requestcanceled", { request_event_type: e7, request_url: a4, request_type: "media", request_hostname: h3(a4) });
                      };
                      r4.on(a3.Events.FRAG_LOAD_EMERGENCY_ABORTED, _3);
                      var v3 = function(e7, t6) {
                        var a4 = t6.level, i4 = r4.levels[a4];
                        if (i4 && i4.attrs && i4.attrs.BANDWIDTH) {
                          var o4, u4 = i4.attrs.BANDWIDTH, l5 = parseFloat(i4.attrs["FRAME-RATE"]);
                          isNaN(l5) || (o4 = l5), u4 ? s2("renditionchange", { video_source_fps: o4, video_source_bitrate: u4, video_source_width: i4.width, video_source_height: i4.height, video_source_rendition_name: i4.name, video_source_codec: null == i4 ? void 0 : i4.videoCodec }) : n4.warn("missing BANDWIDTH from HLS manifest parsed by HLS.js");
                        }
                      };
                      r4.on(a3.Events.LEVEL_SWITCHED, v3), r4._stopMuxMonitor = function() {
                        r4.off(a3.Events.MANIFEST_LOADED, u3), r4.off(a3.Events.LEVEL_LOADED, l4), r4.off(a3.Events.AUDIO_TRACK_LOADED, d2), r4.off(a3.Events.FRAG_LOADED, c2), r4.off(a3.Events.FRAG_CHANGED, f3), r4.off(a3.Events.ERROR, p2), r4.off(a3.Events.FRAG_LOAD_EMERGENCY_ABORTED, _3), r4.off(a3.Events.LEVEL_SWITCHED, v3), r4.off(a3.Events.DESTROYING, r4._stopMuxMonitor), delete r4._stopMuxMonitor;
                      }, r4.on(a3.Events.DESTROYING, r4._stopMuxMonitor);
                    } else
                      n4.warn("performance timing not supported. Not tracking HLS.js.");
                  }(this.mux, this.id, e5.hlsjs, {}, e5.Hls || window.Hls)) : this.mux.log.warn("You must pass a valid hlsjs instance in order to track it.");
                } }, { key: "removeHLSJS", value: function() {
                  var e5;
                  this.hlsjs && ((e5 = this.hlsjs) && "function" == typeof e5._stopMuxMonitor && e5._stopMuxMonitor(), this.hlsjs = void 0);
                } }, { key: "addDashJS", value: function(e5) {
                  e5.dashjs ? this.dashjs ? this.mux.log.warn("An instance of Dash.js is already being monitored for this player.") : (this.dashjs = e5.dashjs, function(e6, t5, r4) {
                    var a3 = e6.log;
                    if (r4 && r4.on) {
                      var n4 = function(r5, a4) {
                        return e6.emit(t5, r5, a4);
                      }, i3 = function(e7) {
                        var t6 = e7.type, r5 = (e7.data || {}).url;
                        n4("requestcompleted", { request_event_type: t6, request_start: 0, request_response_start: 0, request_response_end: 0, request_bytes_loaded: -1, request_type: "manifest", request_hostname: h3(r5), request_url: r5 });
                      };
                      r4.on("manifestLoaded", i3);
                      var o3 = {}, s2 = function(e7) {
                        var t6 = e7.type, a4 = e7.fragmentModel, i4 = (e7.chunk || {}).mediaInfo || {}, s3 = i4.type, u4 = i4.bitrateList, l5 = {};
                        (u4 = u4 || []).forEach(function(e8, t7) {
                          l5[t7] = {}, l5[t7].width = e8.width, l5[t7].height = e8.height, l5[t7].bitrate = e8.bandwidth, l5[t7].attrs = {};
                        }), "video" === s3 ? o3.video = l5 : "audio" === s3 ? o3.audio = l5 : o3.media = l5;
                        var d3 = R2(a4, r4), c3 = d3.requestStart, f4 = d3.requestResponseStart, p3 = d3.requestResponseEnd, _3 = d3.requestResponseHeaders, h4 = d3.requestMediaDuration, v3 = d3.requestHostname, m3 = d3.requestUrl, y2 = d3.requestId;
                        n4("requestcompleted", { request_event_type: t6, request_start: c3, request_response_start: f4, request_response_end: p3, request_bytes_loaded: -1, request_type: s3 + "_init", request_response_headers: _3, request_hostname: v3, request_id: y2, request_url: m3, request_media_duration: h4, request_rendition_lists: o3 });
                      };
                      r4.on("initFragmentLoaded", s2);
                      var u3 = function(e7) {
                        var t6 = e7.type, a4 = e7.fragmentModel, i4 = e7.chunk || {}, o4 = i4.mediaInfo, s3 = i4.start, u4 = (o4 || {}).type, l5 = R2(a4, r4), d3 = l5.requestStart, c3 = l5.requestResponseStart, f4 = l5.requestResponseEnd, p3 = l5.requestBytesLoaded, _3 = l5.requestResponseHeaders, h4 = l5.requestMediaDuration, v3 = l5.requestHostname, m3 = l5.requestUrl, y2 = l5.requestId, b3 = I2(u4, r4), g3 = b3.currentLevel, w3 = b3.renditionWidth, T3 = b3.renditionHeight, E2 = b3.renditionBitrate;
                        n4("requestcompleted", { request_event_type: t6, request_start: d3, request_response_start: c3, request_response_end: f4, request_bytes_loaded: p3, request_type: u4, request_response_headers: _3, request_hostname: v3, request_id: y2, request_url: m3, request_media_start_time: s3, request_media_duration: h4, request_current_level: g3, request_labeled_bitrate: E2, request_video_width: w3, request_video_height: T3 });
                      };
                      r4.on("mediaFragmentLoaded", u3);
                      var l4 = { video: void 0, audio: void 0, totalBitrate: void 0 }, d2 = function() {
                        if (l4.video && "number" == typeof l4.video.bitrate) {
                          if (l4.video.width && l4.video.height) {
                            var e7 = l4.video.bitrate;
                            return l4.audio && "number" == typeof l4.audio.bitrate && (e7 += l4.audio.bitrate), e7 !== l4.totalBitrate ? (l4.totalBitrate = e7, { video_source_bitrate: e7, video_source_height: l4.video.height, video_source_width: l4.video.width, video_source_codec: j3(l4.video.codec) }) : void 0;
                          }
                          a3.warn("have bitrate info for video but missing width/height");
                        }
                      }, c2 = function(e7, t6, i4) {
                        if ("number" == typeof e7.newQuality) {
                          var o4 = e7.mediaType;
                          if ("audio" === o4 || "video" === o4) {
                            var s3 = r4.getBitrateInfoListFor(o4).find(function(t7) {
                              return t7.qualityIndex === e7.newQuality;
                            });
                            if (s3 && "number" == typeof s3.bitrate) {
                              l4[o4] = P(P({}, s3), {}, { codec: r4.getCurrentTrackFor(o4).codec });
                              var u4 = d2();
                              u4 && n4("renditionchange", u4);
                            } else
                              a3.warn("missing bitrate info for ".concat(o4));
                          }
                        } else
                          a3.warn("missing evt.newQuality in qualityChangeRendered event", e7);
                      };
                      r4.on("qualityChangeRendered", c2);
                      var f3 = function(e7) {
                        var t6 = e7.request, r5 = e7.mediaType;
                        n4("requestcanceled", { request_event_type: (t6 = t6 || {}).type + "_" + t6.action, request_url: t6.url, request_type: r5, request_hostname: h3(t6.url) });
                      };
                      r4.on("fragmentLoadingAbandoned", f3);
                      var p2 = function(e7) {
                        var t6, r5, a4 = e7.error, i4 = (null == a4 || null === (t6 = a4.data) || void 0 === t6 ? void 0 : t6.request) || {}, o4 = (null == a4 || null === (r5 = a4.data) || void 0 === r5 ? void 0 : r5.response) || {};
                        27 === (null == a4 ? void 0 : a4.code) && n4("requestfailed", { request_error: i4.type + "_" + i4.action, request_url: i4.url, request_hostname: h3(i4.url), request_type: i4.mediaType, request_error_code: o4.status, request_error_text: o4.statusText });
                        var s3 = "".concat(null != i4 && i4.url ? "url: ".concat(i4.url, "\n") : "") + "".concat(null != o4 && o4.status || null != o4 && o4.statusText ? "response: ".concat(null == o4 ? void 0 : o4.status, ", ").concat(null == o4 ? void 0 : o4.statusText, "\n") : "");
                        n4("error", { player_error_code: null == a4 ? void 0 : a4.code, player_error_message: null == a4 ? void 0 : a4.message, player_error_context: s3 });
                      };
                      r4.on("error", p2), r4._stopMuxMonitor = function() {
                        r4.off("manifestLoaded", i3), r4.off("initFragmentLoaded", s2), r4.off("mediaFragmentLoaded", u3), r4.off("qualityChangeRendered", c2), r4.off("error", p2), r4.off("fragmentLoadingAbandoned", f3), delete r4._stopMuxMonitor;
                      };
                    } else
                      a3.warn("Invalid dash.js player reference. Monitoring blocked.");
                  }(this.mux, this.id, e5.dashjs)) : this.mux.log.warn("You must pass a valid dashjs instance in order to track it.");
                } }, { key: "removeDashJS", value: function() {
                  var e5;
                  this.dashjs && ((e5 = this.dashjs) && "function" == typeof e5._stopMuxMonitor && e5._stopMuxMonitor(), this.dashjs = void 0);
                } }], r3 && ft2(t4.prototype, r3), a2 && ft2(t4, a2), Object.defineProperty(t4, "prototype", { writable: false }), o2;
              }(H2), gt2 = bt, wt = r2(153), Tt2 = r2.n(wt);
              function Et(e4) {
                return Et = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e5) {
                  return typeof e5;
                } : function(e5) {
                  return e5 && "function" == typeof Symbol && e5.constructor === Symbol && e5 !== Symbol.prototype ? "symbol" : typeof e5;
                }, Et(e4);
              }
              function kt(e4, t4) {
                return function(e5) {
                  if (Array.isArray(e5))
                    return e5;
                }(e4) || function(e5, t5) {
                  var r3 = null == e5 ? null : "undefined" != typeof Symbol && e5[Symbol.iterator] || e5["@@iterator"];
                  if (null != r3) {
                    var a2, n3, i3 = [], o2 = true, s2 = false;
                    try {
                      for (r3 = r3.call(e5); !(o2 = (a2 = r3.next()).done) && (i3.push(a2.value), !t5 || i3.length !== t5); o2 = true)
                        ;
                    } catch (e6) {
                      s2 = true, n3 = e6;
                    } finally {
                      try {
                        o2 || null == r3.return || r3.return();
                      } finally {
                        if (s2)
                          throw n3;
                      }
                    }
                    return i3;
                  }
                }(e4, t4) || function(e5, t5) {
                  if (e5) {
                    if ("string" == typeof e5)
                      return Ot(e5, t5);
                    var r3 = Object.prototype.toString.call(e5).slice(8, -1);
                    return "Object" === r3 && e5.constructor && (r3 = e5.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e5) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? Ot(e5, t5) : void 0;
                  }
                }(e4, t4) || function() {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }();
              }
              function Ot(e4, t4) {
                (null == t4 || t4 > e4.length) && (t4 = e4.length);
                for (var r3 = 0, a2 = new Array(t4); r3 < t4; r3++)
                  a2[r3] = e4[r3];
                return a2;
              }
              var xt, Dt = ["loadstart", "pause", "play", "playing", "seeking", "seeked", "timeupdate", "ratechange", "stalled", "waiting", "error", "ended"], St = { 1: "MEDIA_ERR_ABORTED", 2: "MEDIA_ERR_NETWORK", 3: "MEDIA_ERR_DECODE", 4: "MEDIA_ERR_SRC_NOT_SUPPORTED" };
              n2() && n2().WeakMap && (xt = /* @__PURE__ */ new WeakMap());
              var qt = "#EXT-X-TARGETDURATION", Pt2 = "#EXT-X-PART-INF", At2 = "#EXT-X-SERVER-CONTROL", Rt = "#EXTINF", It = "#EXT-X-PROGRAM-DATE-TIME", jt = "#EXT-X-VERSION", Lt = "#EXT-X-SESSION-DATA", Ct = function(e4) {
                return this.buffer = "", this.manifest = { segments: [], serverControl: {}, sessionData: {} }, this.currentUri = {}, this.process(e4), this.manifest;
              };
              Ct.prototype.process = function(e4) {
                var t4;
                for (this.buffer += e4, t4 = this.buffer.indexOf("\n"); t4 > -1; t4 = this.buffer.indexOf("\n"))
                  this.processLine(this.buffer.substring(0, t4)), this.buffer = this.buffer.substring(t4 + 1);
              }, Ct.prototype.processLine = function(e4) {
                var t4 = e4.indexOf(":"), r3 = Gt(e4, t4), a2 = r3[0], n3 = 2 === r3.length ? Mt2(r3[1]) : void 0;
                if ("#" !== a2[0])
                  this.currentUri.uri = a2, this.manifest.segments.push(this.currentUri), this.manifest.targetDuration && !("duration" in this.currentUri) && (this.currentUri.duration = this.manifest.targetDuration), this.currentUri = {};
                else
                  switch (a2) {
                    case qt:
                      if (!isFinite(n3) || n3 < 0)
                        return;
                      this.manifest.targetDuration = n3, this.setHoldBack();
                      break;
                    case Pt2:
                      Nt(this.manifest, r3), this.manifest.partInf.partTarget && (this.manifest.partTargetDuration = this.manifest.partInf.partTarget), this.setHoldBack();
                      break;
                    case At2:
                      Nt(this.manifest, r3), this.setHoldBack();
                      break;
                    case Rt:
                      0 === n3 ? this.currentUri.duration = 0.01 : n3 > 0 && (this.currentUri.duration = n3);
                      break;
                    case It:
                      var i3 = n3, o2 = new Date(i3);
                      this.manifest.dateTimeString || (this.manifest.dateTimeString = i3, this.manifest.dateTimeObject = o2), this.currentUri.dateTimeString = i3, this.currentUri.dateTimeObject = o2;
                      break;
                    case jt:
                      Nt(this.manifest, r3);
                      break;
                    case Lt:
                      var s2 = Wt(r3[1]), u3 = E(s2);
                      Object.assign(this.manifest.sessionData, u3);
                  }
              }, Ct.prototype.setHoldBack = function() {
                var e4 = this.manifest, t4 = e4.serverControl, r3 = e4.targetDuration, a2 = e4.partTargetDuration;
                if (t4) {
                  var n3 = "holdBack", i3 = "partHoldBack", o2 = r3 && 3 * r3, s2 = a2 && 2 * a2;
                  r3 && !t4.hasOwnProperty(n3) && (t4[n3] = o2), o2 && t4[n3] < o2 && (t4[n3] = o2), a2 && !t4.hasOwnProperty(i3) && (t4[i3] = 3 * a2), a2 && t4[i3] < s2 && (t4[i3] = s2);
                }
              };
              var Nt = function(e4, t4) {
                var r3, a2 = Ht(t4[0].replace("#EXT-X-", ""));
                Ft(t4[1]) ? (r3 = {}, r3 = Object.assign(Ut(t4[1]), r3)) : r3 = Mt2(t4[1]), e4[a2] = r3;
              }, Ht = function(e4) {
                return e4.toLowerCase().replace(/-(\w)/g, function(e5) {
                  return e5[1].toUpperCase();
                });
              }, Mt2 = function(e4) {
                if ("yes" === e4.toLowerCase() || "no" === e4.toLowerCase())
                  return "yes" === e4.toLowerCase();
                var t4 = -1 !== e4.indexOf(":") ? e4 : parseFloat(e4);
                return isNaN(t4) ? e4 : t4;
              }, Bt = function(e4) {
                var t4 = {}, r3 = e4.split("=");
                return r3.length > 1 && (t4[Ht(r3[0])] = Mt2(r3[1])), t4;
              }, Ut = function(e4) {
                for (var t4 = e4.split(","), r3 = {}, a2 = 0; t4.length > a2; a2++) {
                  var n3 = t4[a2], i3 = Bt(n3);
                  r3 = Object.assign(i3, r3);
                }
                return r3;
              }, Ft = function(e4) {
                return e4.indexOf("=") > -1;
              }, Gt = function(e4, t4) {
                return -1 === t4 ? [e4] : [e4.substring(0, t4), e4.substring(t4 + 1)];
              }, Wt = function(e4) {
                var t4 = {};
                if (e4) {
                  var r3 = e4.search(",");
                  return [e4.slice(0, r3), e4.slice(r3 + 1)].forEach(function(e5, r4) {
                    for (var a2 = e5.replace(/['"]+/g, "").split("="), n3 = 0; n3 < a2.length; n3++)
                      "DATA-ID" === a2[n3] && (t4["DATA-ID"] = a2[1 - n3]), "VALUE" === a2[n3] && (t4.VALUE = a2[1 - n3]);
                  }), { data: t4 };
                }
              }, Qt = Ct, Vt = { safeCall: function(e4, t4, r3, a2) {
                var n3 = a2;
                if (e4 && "function" == typeof e4[t4])
                  try {
                    n3 = e4[t4].apply(e4, r3);
                  } catch (e5) {
                    f2.info("safeCall error", e5);
                  }
                return n3;
              }, safeIncrement: y, getComputedStyle: function(e4, t4) {
                var r3;
                if (e4 && t4 && n2() && "function" == typeof n2().getComputedStyle)
                  return xt && xt.has(e4) && (r3 = xt.get(e4)), r3 || (r3 = n2().getComputedStyle(e4, null), xt && xt.set(e4, r3)), r3.getPropertyValue(t4);
              }, secondsToMs: function(e4) {
                return Math.floor(1e3 * e4);
              }, assign: Object.assign, headersStringToObject: w2, cdnHeadersToRequestId: T2, extractHostnameAndDomain: v2, extractHostname: h3, manifestParser: Qt, generateShortID: o, generateUUID: i2, now: _2.now }, Jt = { PLAYER_READY: "playerready", VIEW_INIT: "viewinit", VIDEO_CHANGE: "videochange", PLAY: "play", PAUSE: "pause", PLAYING: "playing", TIME_UPDATE: "timeupdate", SEEKING: "seeking", SEEKED: "seeked", REBUFFER_START: "rebufferstart", REBUFFER_END: "rebufferend", ERROR: "error", ENDED: "ended", RENDITION_CHANGE: "renditionchange", ORIENTATION_CHANGE: "orientationchange", AD_REQUEST: "adrequest", AD_RESPONSE: "adresponse", AD_BREAK_START: "adbreakstart", AD_PLAY: "adplay", AD_PLAYING: "adplaying", AD_PAUSE: "adpause", AD_FIRST_QUARTILE: "adfirstquartile", AD_MID_POINT: "admidpoint", AD_THIRD_QUARTILE: "adthirdquartile", AD_ENDED: "adended", AD_BREAK_END: "adbreakend", AD_ERROR: "aderror", REQUEST_COMPLETED: "requestcompleted", REQUEST_FAILED: "requestfailed", REQUEST_CANCELLED: "requestcanceled" };
              function Kt2(e4, t4) {
                return function(e5) {
                  if (Array.isArray(e5))
                    return e5;
                }(e4) || function(e5, t5) {
                  var r3 = null == e5 ? null : "undefined" != typeof Symbol && e5[Symbol.iterator] || e5["@@iterator"];
                  if (null != r3) {
                    var a2, n3, i3 = [], o2 = true, s2 = false;
                    try {
                      for (r3 = r3.call(e5); !(o2 = (a2 = r3.next()).done) && (i3.push(a2.value), !t5 || i3.length !== t5); o2 = true)
                        ;
                    } catch (e6) {
                      s2 = true, n3 = e6;
                    } finally {
                      try {
                        o2 || null == r3.return || r3.return();
                      } finally {
                        if (s2)
                          throw n3;
                      }
                    }
                    return i3;
                  }
                }(e4, t4) || function(e5, t5) {
                  if (e5) {
                    if ("string" == typeof e5)
                      return zt(e5, t5);
                    var r3 = Object.prototype.toString.call(e5).slice(8, -1);
                    return "Object" === r3 && e5.constructor && (r3 = e5.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e5) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? zt(e5, t5) : void 0;
                  }
                }(e4, t4) || function() {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }();
              }
              function zt(e4, t4) {
                (null == t4 || t4 > e4.length) && (t4 = e4.length);
                for (var r3 = 0, a2 = new Array(t4); r3 < t4; r3++)
                  a2[r3] = e4[r3];
                return a2;
              }
              var Yt = {}, Xt = function e4(t4) {
                var r3 = arguments;
                "string" == typeof t4 ? e4.hasOwnProperty(t4) ? n2().setTimeout(function() {
                  r3 = Array.prototype.splice.call(r3, 1), e4[t4].apply(null, r3);
                }, 0) : f2.warn("`" + t4 + "` is an unknown task") : "function" == typeof t4 ? n2().setTimeout(function() {
                  t4(e4);
                }, 0) : f2.warn("`" + t4 + "` is invalid.");
              }, $t = { loaded: _2.now(), NAME: "mux-embed", VERSION: "4.25.0", API_VERSION: "2.1", PLAYER_TRACKED: false, monitor: function(e4, t4) {
                return function(e5, t5, r3) {
                  var a2 = kt(u2(t5), 3), n3 = a2[0], i3 = a2[1], o2 = a2[2], s2 = e5.log, l4 = e5.utils.getComputedStyle, d2 = e5.utils.secondsToMs;
                  if (!n3)
                    return s2.error("No element was found with the `" + i3 + "` query selector.");
                  if ("video" !== o2 && "audio" !== o2)
                    return s2.error("The element of `" + i3 + "` was not a media element.");
                  n3.mux && (n3.mux.destroy(), delete n3.mux, s2.warn("Already monitoring this video element, replacing existing event listeners")), (r3 = Object.assign({ automaticErrorTracking: true }, r3)).data = Object.assign({ player_software: "HTML5 Video Element", player_mux_plugin_name: "VideoElementMonitor", player_mux_plugin_version: e5.VERSION }, r3.data), r3.getPlayheadTime = function() {
                    return d2(n3.currentTime);
                  }, r3.getStateData = function() {
                    var e6, t6, a3 = this.hlsjs && this.hlsjs.url, i4 = this.dashjs && Et("function" === this.dashjs.getSource) && this.dashjs.getSource(), o3 = { player_is_paused: n3.paused, player_playhead_time: d2(n3.currentTime), player_width: parseInt(l4(n3, "width")), player_height: parseInt(l4(n3, "height")), player_autoplay_on: n3.autoplay, player_preload_on: n3.preload, player_language_code: n3.lang, player_is_fullscreen: Tt2() && !!(Tt2().fullscreenElement || Tt2().webkitFullscreenElement || Tt2().mozFullScreenElement || Tt2().msFullscreenElement), video_poster_url: n3.poster, video_source_url: a3 || i4 || n3.currentSrc, video_source_duration: d2(n3.duration), video_source_height: n3.videoHeight, video_source_width: n3.videoWidth, view_dropped_frame_count: null === (e6 = n3) || void 0 === e6 || null === (t6 = e6.getVideoPlaybackQuality) || void 0 === t6 ? void 0 : t6.call(e6).droppedVideoFrames }, s3 = r3.getPlayheadTime();
                    if (n3.getStartDate && s3 > 0) {
                      var u3 = n3.getStartDate();
                      if (u3 && "function" == typeof u3.getTime && u3.getTime()) {
                        var c3 = u3.getTime();
                        if (o3.player_program_time = c3 + s3, n3.seekable.length > 0) {
                          var f3 = c3 + n3.seekable.end(n3.seekable.length - 1);
                          o3.player_live_edge_program_time = f3;
                        }
                      }
                    }
                    return o3;
                  }, n3.mux = n3.mux || {}, n3.mux.deleted = false, n3.mux.emit = function(t6, r4) {
                    e5.emit(i3, t6, r4);
                  };
                  var c2 = function() {
                    s2.error("The monitor for this video element has already been destroyed.");
                  };
                  n3.mux.destroy = function() {
                    Object.keys(n3.mux.listeners).forEach(function(e6) {
                      n3.removeEventListener(e6, n3.mux.listeners[e6], false);
                    }), delete n3.mux.listeners, n3.mux.destroy = c2, n3.mux.swapElement = c2, n3.mux.emit = c2, n3.mux.addHLSJS = c2, n3.mux.addDashJS = c2, n3.mux.removeHLSJS = c2, n3.mux.removeDashJS = c2, n3.mux.deleted = true, e5.emit(i3, "destroy");
                  }, n3.mux.swapElement = function(t6) {
                    var r4 = kt(u2(t6), 3), a3 = r4[0], i4 = r4[1], o3 = r4[2];
                    return a3 ? "video" !== o3 && "audio" !== o3 ? e5.log.error("The element of `" + i4 + "` was not a media element.") : (a3.muxId = n3.muxId, delete n3.muxId, a3.mux = a3.mux || {}, a3.mux.listeners = Object.assign({}, n3.mux.listeners), delete n3.mux.listeners, Object.keys(a3.mux.listeners).forEach(function(e6) {
                      n3.removeEventListener(e6, a3.mux.listeners[e6], false), a3.addEventListener(e6, a3.mux.listeners[e6], false);
                    }), a3.mux.swapElement = n3.mux.swapElement, a3.mux.destroy = n3.mux.destroy, delete n3.mux, void (n3 = a3)) : e5.log.error("No element was found with the `" + i4 + "` query selector.");
                  }, n3.mux.addHLSJS = function(t6) {
                    e5.addHLSJS(i3, t6);
                  }, n3.mux.addDashJS = function(t6) {
                    e5.addDashJS(i3, t6);
                  }, n3.mux.removeHLSJS = function() {
                    e5.removeHLSJS(i3);
                  }, n3.mux.removeDashJS = function() {
                    e5.removeDashJS(i3);
                  }, e5.init(i3, r3), e5.emit(i3, "playerready"), n3.paused || (e5.emit(i3, "play"), n3.readyState > 2 && e5.emit(i3, "playing")), n3.mux.listeners = {}, Dt.forEach(function(t6) {
                    ("error" !== t6 || r3.automaticErrorTracking) && (n3.mux.listeners[t6] = function() {
                      var r4 = {};
                      if ("error" === t6) {
                        if (!n3.error)
                          return;
                        if (1 === n3.error.code)
                          return;
                        r4.player_error_code = n3.error.code, r4.player_error_message = St[n3.error.code] || n3.error.message;
                      }
                      e5.emit(i3, t6, r4);
                    }, n3.addEventListener(t6, n3.mux.listeners[t6], false));
                  });
                }(Xt, e4, t4);
              }, destroyMonitor: function(e4) {
                var t4 = Kt2(u2(e4), 1)[0];
                t4 && t4.mux && "function" == typeof t4.mux.destroy ? t4.mux.destroy() : f2.error("A video element monitor for `" + e4 + "` has not been initialized via `mux.monitor`.");
              }, addHLSJS: function(e4, t4) {
                var r3 = s(e4);
                Yt[r3] ? Yt[r3].addHLSJS(t4) : f2.error("A monitor for `" + r3 + "` has not been initialized.");
              }, addDashJS: function(e4, t4) {
                var r3 = s(e4);
                Yt[r3] ? Yt[r3].addDashJS(t4) : f2.error("A monitor for `" + r3 + "` has not been initialized.");
              }, removeHLSJS: function(e4) {
                var t4 = s(e4);
                Yt[t4] ? Yt[t4].removeHLSJS() : f2.error("A monitor for `" + t4 + "` has not been initialized.");
              }, removeDashJS: function(e4) {
                var t4 = s(e4);
                Yt[t4] ? Yt[t4].removeDashJS() : f2.error("A monitor for `" + t4 + "` has not been initialized.");
              }, init: function(e4, t4) {
                p() && t4 && t4.respectDoNotTrack && f2.info("The browser's Do Not Track flag is enabled - Mux beaconing is disabled.");
                var r3 = s(e4);
                Yt[r3] = new gt2(Xt, r3, t4);
              }, emit: function(e4, t4, r3) {
                var a2 = s(e4);
                Yt[a2] ? (Yt[a2].emit(t4, r3), "destroy" === t4 && delete Yt[a2]) : f2.error("A monitor for `" + a2 + "` has not been initialized.");
              }, checkDoNotTrack: p, log: f2, utils: Vt, events: Jt, WINDOW_HIDDEN: false, WINDOW_UNLOADING: false };
              Object.assign(Xt, $t), void 0 !== n2() && "function" == typeof n2().addEventListener && n2().addEventListener("pagehide", function(e4) {
                e4.persisted || (Xt.WINDOW_UNLOADING = true);
              }, false);
              var Zt = Xt;
            }, 655: function(e3, t3, r2) {
              var a, n2;
              function i2(e4) {
                return i2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e5) {
                  return typeof e5;
                } : function(e5) {
                  return e5 && "function" == typeof Symbol && e5.constructor === Symbol && e5 !== Symbol.prototype ? "symbol" : typeof e5;
                }, i2(e4);
              }
              !function(o) {
                var s = false;
                if (void 0 === (n2 = "function" == typeof (a = o) ? a.call(t3, r2, t3, e3) : a) || (e3.exports = n2), s = true, "object" === i2(t3) && (e3.exports = o(), s = true), !s) {
                  var u2 = window.Cookies, l3 = window.Cookies = o();
                  l3.noConflict = function() {
                    return window.Cookies = u2, l3;
                  };
                }
              }(function() {
                var e4 = function() {
                  for (var e5 = 0, t4 = {}; e5 < arguments.length; e5++) {
                    var r3 = arguments[e5];
                    for (var a2 in r3)
                      t4[a2] = r3[a2];
                  }
                  return t4;
                };
                return function t4(r3) {
                  function a2(t5, n3, i3) {
                    var o;
                    if ("undefined" != typeof document) {
                      if (arguments.length > 1) {
                        if ("number" == typeof (i3 = e4({ path: "/" }, a2.defaults, i3)).expires) {
                          var s = new Date();
                          s.setMilliseconds(s.getMilliseconds() + 864e5 * i3.expires), i3.expires = s;
                        }
                        try {
                          o = JSON.stringify(n3), /^[\{\[]/.test(o) && (n3 = o);
                        } catch (e5) {
                        }
                        return n3 = r3.write ? r3.write(n3, t5) : encodeURIComponent(String(n3)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent), t5 = (t5 = (t5 = encodeURIComponent(String(t5))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape), document.cookie = [t5, "=", n3, i3.expires ? "; expires=" + i3.expires.toUTCString() : "", i3.path ? "; path=" + i3.path : "", i3.domain ? "; domain=" + i3.domain : "", i3.secure ? "; secure" : ""].join("");
                      }
                      t5 || (o = {});
                      for (var u2 = document.cookie ? document.cookie.split("; ") : [], l3 = /(%[0-9A-Z]{2})+/g, d = 0; d < u2.length; d++) {
                        var c = u2[d].split("="), f2 = c.slice(1).join("=");
                        '"' === f2.charAt(0) && (f2 = f2.slice(1, -1));
                        try {
                          var p = c[0].replace(l3, decodeURIComponent);
                          if (f2 = r3.read ? r3.read(f2, p) : r3(f2, p) || f2.replace(l3, decodeURIComponent), this.json)
                            try {
                              f2 = JSON.parse(f2);
                            } catch (e5) {
                            }
                          if (t5 === p) {
                            o = f2;
                            break;
                          }
                          t5 || (o[p] = f2);
                        } catch (e5) {
                        }
                      }
                      return o;
                    }
                  }
                  return a2.set = a2, a2.get = function(e5) {
                    return a2.call(a2, e5);
                  }, a2.getJSON = function() {
                    return a2.apply({ json: true }, [].slice.call(arguments));
                  }, a2.defaults = {}, a2.remove = function(t5, r4) {
                    a2(t5, "", e4(r4, { expires: -1 }));
                  }, a2.withConverter = t4, a2;
                }(function() {
                });
              });
            }, 153: function(e3, t3, r2) {
              var a, n2 = void 0 !== r2.g ? r2.g : "undefined" != typeof window ? window : {}, i2 = r2(558);
              "undefined" != typeof document ? a = document : (a = n2["__GLOBAL_DOCUMENT_CACHE@4"]) || (a = n2["__GLOBAL_DOCUMENT_CACHE@4"] = i2), e3.exports = a;
            }, 48: function(e3, t3, r2) {
              var a;
              a = "undefined" != typeof window ? window : void 0 !== r2.g ? r2.g : "undefined" != typeof self ? self : {}, e3.exports = a;
            }, 640: function(e3, t3, r2) {
              var a, n2;
              !function(i2, o) {
                "use strict";
                a = function() {
                  var e4 = function() {
                  }, t4 = "undefined", r3 = typeof window !== t4 && typeof window.navigator !== t4 && /Trident\/|MSIE /.test(window.navigator.userAgent), a2 = ["trace", "debug", "info", "warn", "error"];
                  function n3(e5, t5) {
                    var r4 = e5[t5];
                    if ("function" == typeof r4.bind)
                      return r4.bind(e5);
                    try {
                      return Function.prototype.bind.call(r4, e5);
                    } catch (t6) {
                      return function() {
                        return Function.prototype.apply.apply(r4, [e5, arguments]);
                      };
                    }
                  }
                  function i3() {
                    console.log && (console.log.apply ? console.log.apply(console, arguments) : Function.prototype.apply.apply(console.log, [console, arguments])), console.trace && console.trace();
                  }
                  function o2(a3) {
                    return "debug" === a3 && (a3 = "log"), typeof console !== t4 && ("trace" === a3 && r3 ? i3 : void 0 !== console[a3] ? n3(console, a3) : void 0 !== console.log ? n3(console, "log") : e4);
                  }
                  function s(t5, r4) {
                    for (var n4 = 0; n4 < a2.length; n4++) {
                      var i4 = a2[n4];
                      this[i4] = n4 < t5 ? e4 : this.methodFactory(i4, t5, r4);
                    }
                    this.log = this.debug;
                  }
                  function u2(e5, r4, a3) {
                    return function() {
                      typeof console !== t4 && (s.call(this, r4, a3), this[e5].apply(this, arguments));
                    };
                  }
                  function l3(e5, t5, r4) {
                    return o2(e5) || u2.apply(this, arguments);
                  }
                  function d(e5, r4, n4) {
                    var i4, o3 = this;
                    r4 = null == r4 ? "WARN" : r4;
                    var u3 = "loglevel";
                    function d2(e6) {
                      var r5 = (a2[e6] || "silent").toUpperCase();
                      if (typeof window !== t4 && u3) {
                        try {
                          return void (window.localStorage[u3] = r5);
                        } catch (e7) {
                        }
                        try {
                          window.document.cookie = encodeURIComponent(u3) + "=" + r5 + ";";
                        } catch (e7) {
                        }
                      }
                    }
                    function c2() {
                      var e6;
                      if (typeof window !== t4 && u3) {
                        try {
                          e6 = window.localStorage[u3];
                        } catch (e7) {
                        }
                        if (typeof e6 === t4)
                          try {
                            var r5 = window.document.cookie, a3 = r5.indexOf(encodeURIComponent(u3) + "=");
                            -1 !== a3 && (e6 = /^([^;]+)/.exec(r5.slice(a3))[1]);
                          } catch (e7) {
                          }
                        return void 0 === o3.levels[e6] && (e6 = void 0), e6;
                      }
                    }
                    function f3() {
                      if (typeof window !== t4 && u3) {
                        try {
                          return void window.localStorage.removeItem(u3);
                        } catch (e6) {
                        }
                        try {
                          window.document.cookie = encodeURIComponent(u3) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
                        } catch (e6) {
                        }
                      }
                    }
                    "string" == typeof e5 ? u3 += ":" + e5 : "symbol" == typeof e5 && (u3 = void 0), o3.name = e5, o3.levels = { TRACE: 0, DEBUG: 1, INFO: 2, WARN: 3, ERROR: 4, SILENT: 5 }, o3.methodFactory = n4 || l3, o3.getLevel = function() {
                      return i4;
                    }, o3.setLevel = function(r5, a3) {
                      if ("string" == typeof r5 && void 0 !== o3.levels[r5.toUpperCase()] && (r5 = o3.levels[r5.toUpperCase()]), !("number" == typeof r5 && r5 >= 0 && r5 <= o3.levels.SILENT))
                        throw "log.setLevel() called with invalid level: " + r5;
                      if (i4 = r5, false !== a3 && d2(r5), s.call(o3, r5, e5), typeof console === t4 && r5 < o3.levels.SILENT)
                        return "No console available for logging";
                    }, o3.setDefaultLevel = function(e6) {
                      r4 = e6, c2() || o3.setLevel(e6, false);
                    }, o3.resetLevel = function() {
                      o3.setLevel(r4, false), f3();
                    }, o3.enableAll = function(e6) {
                      o3.setLevel(o3.levels.TRACE, e6);
                    }, o3.disableAll = function(e6) {
                      o3.setLevel(o3.levels.SILENT, e6);
                    };
                    var p2 = c2();
                    null == p2 && (p2 = r4), o3.setLevel(p2, false);
                  }
                  var c = new d(), f2 = {};
                  c.getLogger = function(e5) {
                    if ("symbol" != typeof e5 && "string" != typeof e5 || "" === e5)
                      throw new TypeError("You must supply a name when creating a logger.");
                    var t5 = f2[e5];
                    return t5 || (t5 = f2[e5] = new d(e5, c.getLevel(), c.methodFactory)), t5;
                  };
                  var p = typeof window !== t4 ? window.log : void 0;
                  return c.noConflict = function() {
                    return typeof window !== t4 && window.log === c && (window.log = p), c;
                  }, c.getLoggers = function() {
                    return f2;
                  }, c.default = c, c;
                }, void 0 === (n2 = "function" == typeof a ? a.call(t3, r2, t3, e3) : a) || (e3.exports = n2);
              }();
            }, 375: function(e3, t3) {
              "use strict";
              var r2 = Object.prototype.hasOwnProperty;
              function a(e4) {
                try {
                  return decodeURIComponent(e4.replace(/\+/g, " "));
                } catch (e5) {
                  return null;
                }
              }
              function n2(e4) {
                try {
                  return encodeURIComponent(e4);
                } catch (e5) {
                  return null;
                }
              }
              t3.stringify = function(e4, t4) {
                t4 = t4 || "";
                var a2, i2, o = [];
                for (i2 in "string" != typeof t4 && (t4 = "?"), e4)
                  if (r2.call(e4, i2)) {
                    if ((a2 = e4[i2]) || null != a2 && !isNaN(a2) || (a2 = ""), i2 = n2(i2), a2 = n2(a2), null === i2 || null === a2)
                      continue;
                    o.push(i2 + "=" + a2);
                  }
                return o.length ? t4 + o.join("&") : "";
              }, t3.parse = function(e4) {
                for (var t4, r3 = /([^=?#&]+)=?([^&]*)/g, n3 = {}; t4 = r3.exec(e4); ) {
                  var i2 = a(t4[1]), o = a(t4[2]);
                  null === i2 || null === o || i2 in n3 || (n3[i2] = o);
                }
                return n3;
              };
            }, 558: function() {
            } }, t2 = {};
            function r(a) {
              var n2 = t2[a];
              if (void 0 !== n2)
                return n2.exports;
              var i2 = t2[a] = { exports: {} };
              return e2[a].call(i2.exports, i2, i2.exports, r), i2.exports;
            }
            return r.n = function(e3) {
              var t3 = e3 && e3.__esModule ? function() {
                return e3.default;
              } : function() {
                return e3;
              };
              return r.d(t3, { a: t3 }), t3;
            }, r.d = function(e3, t3) {
              for (var a in t3)
                r.o(t3, a) && !r.o(e3, a) && Object.defineProperty(e3, a, { enumerable: true, get: t3[a] });
            }, r.g = function() {
              if ("object" == typeof globalThis)
                return globalThis;
              try {
                return this || new Function("return this")();
              } catch (e3) {
                if ("object" == typeof window)
                  return window;
              }
            }(), r.o = function(e3, t3) {
              return Object.prototype.hasOwnProperty.call(e3, t3);
            }, r(80);
          }();
        }, "object" == typeof exports && "object" == typeof module ? module.exports = t() : "object" == typeof exports ? exports.mux = t() : e.mux = t();
      }();
    }
  });

  // node_modules/hls.js/dist/hls.min.js
  var require_hls_min = __commonJS({
    "node_modules/hls.js/dist/hls.min.js"(exports, module) {
      !function t(e) {
        var r, i2;
        r = this, i2 = function() {
          "use strict";
          function r2(t2, e2) {
            var r3 = Object.keys(t2);
            if (Object.getOwnPropertySymbols) {
              var i4 = Object.getOwnPropertySymbols(t2);
              e2 && (i4 = i4.filter(function(e3) {
                return Object.getOwnPropertyDescriptor(t2, e3).enumerable;
              })), r3.push.apply(r3, i4);
            }
            return r3;
          }
          function i3(t2) {
            for (var e2 = 1; e2 < arguments.length; e2++) {
              var i4 = null != arguments[e2] ? arguments[e2] : {};
              e2 % 2 ? r2(Object(i4), true).forEach(function(e3) {
                s(t2, e3, i4[e3]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t2, Object.getOwnPropertyDescriptors(i4)) : r2(Object(i4)).forEach(function(e3) {
                Object.defineProperty(t2, e3, Object.getOwnPropertyDescriptor(i4, e3));
              });
            }
            return t2;
          }
          function n2(t2, e2) {
            for (var r3 = 0; r3 < e2.length; r3++) {
              var i4 = e2[r3];
              i4.enumerable = i4.enumerable || false, i4.configurable = true, "value" in i4 && (i4.writable = true), Object.defineProperty(t2, m2(i4.key), i4);
            }
          }
          function a(t2, e2, r3) {
            return e2 && n2(t2.prototype, e2), r3 && n2(t2, r3), Object.defineProperty(t2, "prototype", { writable: false }), t2;
          }
          function s(t2, e2, r3) {
            return (e2 = m2(e2)) in t2 ? Object.defineProperty(t2, e2, { value: r3, enumerable: true, configurable: true, writable: true }) : t2[e2] = r3, t2;
          }
          function o() {
            return o = Object.assign ? Object.assign.bind() : function(t2) {
              for (var e2 = 1; e2 < arguments.length; e2++) {
                var r3 = arguments[e2];
                for (var i4 in r3)
                  Object.prototype.hasOwnProperty.call(r3, i4) && (t2[i4] = r3[i4]);
              }
              return t2;
            }, o.apply(this, arguments);
          }
          function l3(t2, e2) {
            t2.prototype = Object.create(e2.prototype), t2.prototype.constructor = t2, h3(t2, e2);
          }
          function u2(t2) {
            return u2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t3) {
              return t3.__proto__ || Object.getPrototypeOf(t3);
            }, u2(t2);
          }
          function h3(t2, e2) {
            return h3 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t3, e3) {
              return t3.__proto__ = e3, t3;
            }, h3(t2, e2);
          }
          function d() {
            if ("undefined" == typeof Reflect || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if ("function" == typeof Proxy)
              return true;
            try {
              return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              })), true;
            } catch (t2) {
              return false;
            }
          }
          function c(t2, e2, r3) {
            return c = d() ? Reflect.construct.bind() : function(t3, e3, r4) {
              var i4 = [null];
              i4.push.apply(i4, e3);
              var n3 = new (Function.bind.apply(t3, i4))();
              return r4 && h3(n3, r4.prototype), n3;
            }, c.apply(null, arguments);
          }
          function f2(t2) {
            var e2 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
            return f2 = function(t3) {
              if (null === t3 || (r3 = t3, -1 === Function.toString.call(r3).indexOf("[native code]")))
                return t3;
              var r3;
              if ("function" != typeof t3)
                throw new TypeError("Super expression must either be null or a function");
              if (void 0 !== e2) {
                if (e2.has(t3))
                  return e2.get(t3);
                e2.set(t3, i4);
              }
              function i4() {
                return c(t3, arguments, u2(this).constructor);
              }
              return i4.prototype = Object.create(t3.prototype, { constructor: { value: i4, enumerable: false, writable: true, configurable: true } }), h3(i4, t3);
            }, f2(t2);
          }
          function g2(t2, e2) {
            (null == e2 || e2 > t2.length) && (e2 = t2.length);
            for (var r3 = 0, i4 = new Array(e2); r3 < e2; r3++)
              i4[r3] = t2[r3];
            return i4;
          }
          function v2(t2, e2) {
            var r3 = "undefined" != typeof Symbol && t2[Symbol.iterator] || t2["@@iterator"];
            if (r3)
              return (r3 = r3.call(t2)).next.bind(r3);
            if (Array.isArray(t2) || (r3 = function(t3, e3) {
              if (t3) {
                if ("string" == typeof t3)
                  return g2(t3, e3);
                var r4 = Object.prototype.toString.call(t3).slice(8, -1);
                return "Object" === r4 && t3.constructor && (r4 = t3.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(t3) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? g2(t3, e3) : void 0;
              }
            }(t2)) || e2 && t2 && "number" == typeof t2.length) {
              r3 && (t2 = r3);
              var i4 = 0;
              return function() {
                return i4 >= t2.length ? { done: true } : { done: false, value: t2[i4++] };
              };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          function m2(t2) {
            var e2 = function(t3, e3) {
              if ("object" != typeof t3 || null === t3)
                return t3;
              var r3 = t3[Symbol.toPrimitive];
              if (void 0 !== r3) {
                var i4 = r3.call(t3, e3 || "default");
                if ("object" != typeof i4)
                  return i4;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return ("string" === e3 ? String : Number)(t3);
            }(t2, "string");
            return "symbol" == typeof e2 ? e2 : String(e2);
          }
          var p = {};
          !function(t2, e2) {
            var r3, i4, n3, a2, s2;
            r3 = /^(?=((?:[a-zA-Z0-9+\-.]+:)?))\1(?=((?:\/\/[^\/?#]*)?))\2(?=((?:(?:[^?#\/]*\/)*[^;?#\/]*)?))\3((?:;[^?#]*)?)(\?[^#]*)?(#[^]*)?$/, i4 = /^(?=([^\/?#]*))\1([^]*)$/, n3 = /(?:\/|^)\.(?=\/)/g, a2 = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g, s2 = { buildAbsoluteURL: function(t3, e3, r4) {
              if (r4 = r4 || {}, t3 = t3.trim(), !(e3 = e3.trim())) {
                if (!r4.alwaysNormalize)
                  return t3;
                var n4 = s2.parseURL(t3);
                if (!n4)
                  throw new Error("Error trying to parse base URL.");
                return n4.path = s2.normalizePath(n4.path), s2.buildURLFromParts(n4);
              }
              var a3 = s2.parseURL(e3);
              if (!a3)
                throw new Error("Error trying to parse relative URL.");
              if (a3.scheme)
                return r4.alwaysNormalize ? (a3.path = s2.normalizePath(a3.path), s2.buildURLFromParts(a3)) : e3;
              var o2 = s2.parseURL(t3);
              if (!o2)
                throw new Error("Error trying to parse base URL.");
              if (!o2.netLoc && o2.path && "/" !== o2.path[0]) {
                var l4 = i4.exec(o2.path);
                o2.netLoc = l4[1], o2.path = l4[2];
              }
              o2.netLoc && !o2.path && (o2.path = "/");
              var u3 = { scheme: o2.scheme, netLoc: a3.netLoc, path: null, params: a3.params, query: a3.query, fragment: a3.fragment };
              if (!a3.netLoc && (u3.netLoc = o2.netLoc, "/" !== a3.path[0]))
                if (a3.path) {
                  var h4 = o2.path, d2 = h4.substring(0, h4.lastIndexOf("/") + 1) + a3.path;
                  u3.path = s2.normalizePath(d2);
                } else
                  u3.path = o2.path, a3.params || (u3.params = o2.params, a3.query || (u3.query = o2.query));
              return null === u3.path && (u3.path = r4.alwaysNormalize ? s2.normalizePath(a3.path) : a3.path), s2.buildURLFromParts(u3);
            }, parseURL: function(t3) {
              var e3 = r3.exec(t3);
              return e3 ? { scheme: e3[1] || "", netLoc: e3[2] || "", path: e3[3] || "", params: e3[4] || "", query: e3[5] || "", fragment: e3[6] || "" } : null;
            }, normalizePath: function(t3) {
              for (t3 = t3.split("").reverse().join("").replace(n3, ""); t3.length !== (t3 = t3.replace(a2, "")).length; )
                ;
              return t3.split("").reverse().join("");
            }, buildURLFromParts: function(t3) {
              return t3.scheme + t3.netLoc + t3.path + t3.params + t3.query + t3.fragment;
            } }, t2.exports = s2;
          }({ get exports() {
            return p;
          }, set exports(t2) {
            p = t2;
          } });
          var y = Number.isFinite || function(t2) {
            return "number" == typeof t2 && isFinite(t2);
          }, T2 = function(t2) {
            return t2.MEDIA_ATTACHING = "hlsMediaAttaching", t2.MEDIA_ATTACHED = "hlsMediaAttached", t2.MEDIA_DETACHING = "hlsMediaDetaching", t2.MEDIA_DETACHED = "hlsMediaDetached", t2.BUFFER_RESET = "hlsBufferReset", t2.BUFFER_CODECS = "hlsBufferCodecs", t2.BUFFER_CREATED = "hlsBufferCreated", t2.BUFFER_APPENDING = "hlsBufferAppending", t2.BUFFER_APPENDED = "hlsBufferAppended", t2.BUFFER_EOS = "hlsBufferEos", t2.BUFFER_FLUSHING = "hlsBufferFlushing", t2.BUFFER_FLUSHED = "hlsBufferFlushed", t2.MANIFEST_LOADING = "hlsManifestLoading", t2.MANIFEST_LOADED = "hlsManifestLoaded", t2.MANIFEST_PARSED = "hlsManifestParsed", t2.LEVEL_SWITCHING = "hlsLevelSwitching", t2.LEVEL_SWITCHED = "hlsLevelSwitched", t2.LEVEL_LOADING = "hlsLevelLoading", t2.LEVEL_LOADED = "hlsLevelLoaded", t2.LEVEL_UPDATED = "hlsLevelUpdated", t2.LEVEL_PTS_UPDATED = "hlsLevelPtsUpdated", t2.LEVELS_UPDATED = "hlsLevelsUpdated", t2.AUDIO_TRACKS_UPDATED = "hlsAudioTracksUpdated", t2.AUDIO_TRACK_SWITCHING = "hlsAudioTrackSwitching", t2.AUDIO_TRACK_SWITCHED = "hlsAudioTrackSwitched", t2.AUDIO_TRACK_LOADING = "hlsAudioTrackLoading", t2.AUDIO_TRACK_LOADED = "hlsAudioTrackLoaded", t2.SUBTITLE_TRACKS_UPDATED = "hlsSubtitleTracksUpdated", t2.SUBTITLE_TRACKS_CLEARED = "hlsSubtitleTracksCleared", t2.SUBTITLE_TRACK_SWITCH = "hlsSubtitleTrackSwitch", t2.SUBTITLE_TRACK_LOADING = "hlsSubtitleTrackLoading", t2.SUBTITLE_TRACK_LOADED = "hlsSubtitleTrackLoaded", t2.SUBTITLE_FRAG_PROCESSED = "hlsSubtitleFragProcessed", t2.CUES_PARSED = "hlsCuesParsed", t2.NON_NATIVE_TEXT_TRACKS_FOUND = "hlsNonNativeTextTracksFound", t2.INIT_PTS_FOUND = "hlsInitPtsFound", t2.FRAG_LOADING = "hlsFragLoading", t2.FRAG_LOAD_EMERGENCY_ABORTED = "hlsFragLoadEmergencyAborted", t2.FRAG_LOADED = "hlsFragLoaded", t2.FRAG_DECRYPTED = "hlsFragDecrypted", t2.FRAG_PARSING_INIT_SEGMENT = "hlsFragParsingInitSegment", t2.FRAG_PARSING_USERDATA = "hlsFragParsingUserdata", t2.FRAG_PARSING_METADATA = "hlsFragParsingMetadata", t2.FRAG_PARSED = "hlsFragParsed", t2.FRAG_BUFFERED = "hlsFragBuffered", t2.FRAG_CHANGED = "hlsFragChanged", t2.FPS_DROP = "hlsFpsDrop", t2.FPS_DROP_LEVEL_CAPPING = "hlsFpsDropLevelCapping", t2.ERROR = "hlsError", t2.DESTROYING = "hlsDestroying", t2.KEY_LOADING = "hlsKeyLoading", t2.KEY_LOADED = "hlsKeyLoaded", t2.LIVE_BACK_BUFFER_REACHED = "hlsLiveBackBufferReached", t2.BACK_BUFFER_REACHED = "hlsBackBufferReached", t2;
          }({}), E = function(t2) {
            return t2.NETWORK_ERROR = "networkError", t2.MEDIA_ERROR = "mediaError", t2.KEY_SYSTEM_ERROR = "keySystemError", t2.MUX_ERROR = "muxError", t2.OTHER_ERROR = "otherError", t2;
          }({}), S3 = function(t2) {
            return t2.KEY_SYSTEM_NO_KEYS = "keySystemNoKeys", t2.KEY_SYSTEM_NO_ACCESS = "keySystemNoAccess", t2.KEY_SYSTEM_NO_SESSION = "keySystemNoSession", t2.KEY_SYSTEM_NO_CONFIGURED_LICENSE = "keySystemNoConfiguredLicense", t2.KEY_SYSTEM_LICENSE_REQUEST_FAILED = "keySystemLicenseRequestFailed", t2.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED = "keySystemServerCertificateRequestFailed", t2.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED = "keySystemServerCertificateUpdateFailed", t2.KEY_SYSTEM_SESSION_UPDATE_FAILED = "keySystemSessionUpdateFailed", t2.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED = "keySystemStatusOutputRestricted", t2.KEY_SYSTEM_STATUS_INTERNAL_ERROR = "keySystemStatusInternalError", t2.MANIFEST_LOAD_ERROR = "manifestLoadError", t2.MANIFEST_LOAD_TIMEOUT = "manifestLoadTimeOut", t2.MANIFEST_PARSING_ERROR = "manifestParsingError", t2.MANIFEST_INCOMPATIBLE_CODECS_ERROR = "manifestIncompatibleCodecsError", t2.LEVEL_EMPTY_ERROR = "levelEmptyError", t2.LEVEL_LOAD_ERROR = "levelLoadError", t2.LEVEL_LOAD_TIMEOUT = "levelLoadTimeOut", t2.LEVEL_PARSING_ERROR = "levelParsingError", t2.LEVEL_SWITCH_ERROR = "levelSwitchError", t2.AUDIO_TRACK_LOAD_ERROR = "audioTrackLoadError", t2.AUDIO_TRACK_LOAD_TIMEOUT = "audioTrackLoadTimeOut", t2.SUBTITLE_LOAD_ERROR = "subtitleTrackLoadError", t2.SUBTITLE_TRACK_LOAD_TIMEOUT = "subtitleTrackLoadTimeOut", t2.FRAG_LOAD_ERROR = "fragLoadError", t2.FRAG_LOAD_TIMEOUT = "fragLoadTimeOut", t2.FRAG_DECRYPT_ERROR = "fragDecryptError", t2.FRAG_PARSING_ERROR = "fragParsingError", t2.FRAG_GAP = "fragGap", t2.REMUX_ALLOC_ERROR = "remuxAllocError", t2.KEY_LOAD_ERROR = "keyLoadError", t2.KEY_LOAD_TIMEOUT = "keyLoadTimeOut", t2.BUFFER_ADD_CODEC_ERROR = "bufferAddCodecError", t2.BUFFER_INCOMPATIBLE_CODECS_ERROR = "bufferIncompatibleCodecsError", t2.BUFFER_APPEND_ERROR = "bufferAppendError", t2.BUFFER_APPENDING_ERROR = "bufferAppendingError", t2.BUFFER_STALLED_ERROR = "bufferStalledError", t2.BUFFER_FULL_ERROR = "bufferFullError", t2.BUFFER_SEEK_OVER_HOLE = "bufferSeekOverHole", t2.BUFFER_NUDGE_ON_STALL = "bufferNudgeOnStall", t2.INTERNAL_EXCEPTION = "internalException", t2.INTERNAL_ABORTED = "aborted", t2.UNKNOWN = "unknown", t2;
          }({}), L2 = function() {
          }, R2 = { trace: L2, debug: L2, log: L2, warn: L2, info: L2, error: L2 }, A2 = R2;
          function k2(t2) {
            var e2 = self.console[t2];
            return e2 ? e2.bind(self.console, "[" + t2 + "] >") : L2;
          }
          function b2(t2, e2) {
            if (self.console && true === t2 || "object" == typeof t2) {
              !function(t3) {
                for (var e3 = arguments.length, r3 = new Array(e3 > 1 ? e3 - 1 : 0), i4 = 1; i4 < e3; i4++)
                  r3[i4 - 1] = arguments[i4];
                r3.forEach(function(e4) {
                  A2[e4] = t3[e4] ? t3[e4].bind(t3) : k2(e4);
                });
              }(t2, "debug", "log", "info", "warn", "error");
              try {
                A2.log('Debug logs enabled for "' + e2 + '" in hls.js version 1.4.0');
              } catch (t3) {
                A2 = R2;
              }
            } else
              A2 = R2;
          }
          var D2 = A2, I2 = /^(\d+)x(\d+)$/, w2 = /(.+?)=(".*?"|.*?)(?:,|$)/g, C2 = function() {
            function t2(e3) {
              for (var r3 in "string" == typeof e3 && (e3 = t2.parseAttrList(e3)), e3)
                e3.hasOwnProperty(r3) && ("X-" === r3.substring(0, 2) && (this.clientAttrs = this.clientAttrs || [], this.clientAttrs.push(r3)), this[r3] = e3[r3]);
            }
            var e2 = t2.prototype;
            return e2.decimalInteger = function(t3) {
              var e3 = parseInt(this[t3], 10);
              return e3 > Number.MAX_SAFE_INTEGER ? 1 / 0 : e3;
            }, e2.hexadecimalInteger = function(t3) {
              if (this[t3]) {
                var e3 = (this[t3] || "0x").slice(2);
                e3 = (1 & e3.length ? "0" : "") + e3;
                for (var r3 = new Uint8Array(e3.length / 2), i4 = 0; i4 < e3.length / 2; i4++)
                  r3[i4] = parseInt(e3.slice(2 * i4, 2 * i4 + 2), 16);
                return r3;
              }
              return null;
            }, e2.hexadecimalIntegerAsNumber = function(t3) {
              var e3 = parseInt(this[t3], 16);
              return e3 > Number.MAX_SAFE_INTEGER ? 1 / 0 : e3;
            }, e2.decimalFloatingPoint = function(t3) {
              return parseFloat(this[t3]);
            }, e2.optionalFloat = function(t3, e3) {
              var r3 = this[t3];
              return r3 ? parseFloat(r3) : e3;
            }, e2.enumeratedString = function(t3) {
              return this[t3];
            }, e2.bool = function(t3) {
              return "YES" === this[t3];
            }, e2.decimalResolution = function(t3) {
              var e3 = I2.exec(this[t3]);
              if (null !== e3)
                return { width: parseInt(e3[1], 10), height: parseInt(e3[2], 10) };
            }, t2.parseAttrList = function(t3) {
              var e3, r3 = {};
              for (w2.lastIndex = 0; null !== (e3 = w2.exec(t3)); ) {
                var i4 = e3[2];
                0 === i4.indexOf('"') && i4.lastIndexOf('"') === i4.length - 1 && (i4 = i4.slice(1, -1)), r3[e3[1].trim()] = i4;
              }
              return r3;
            }, t2;
          }();
          function _2(t2) {
            return "SCTE35-OUT" === t2 || "SCTE35-IN" === t2;
          }
          var P = function() {
            function t2(t3, e2) {
              if (this.attr = void 0, this._startDate = void 0, this._endDate = void 0, this._badValueForSameId = void 0, e2) {
                var r3 = e2.attr;
                for (var i4 in r3)
                  if (Object.prototype.hasOwnProperty.call(t3, i4) && t3[i4] !== r3[i4]) {
                    D2.warn('DATERANGE tag attribute: "' + i4 + '" does not match for tags with ID: "' + t3.ID + '"'), this._badValueForSameId = i4;
                    break;
                  }
                t3 = o(new C2({}), r3, t3);
              }
              if (this.attr = t3, this._startDate = new Date(t3["START-DATE"]), "END-DATE" in this.attr) {
                var n3 = new Date(this.attr["END-DATE"]);
                y(n3.getTime()) && (this._endDate = n3);
              }
            }
            return a(t2, [{ key: "id", get: function() {
              return this.attr.ID;
            } }, { key: "class", get: function() {
              return this.attr.CLASS;
            } }, { key: "startDate", get: function() {
              return this._startDate;
            } }, { key: "endDate", get: function() {
              if (this._endDate)
                return this._endDate;
              var t3 = this.duration;
              return null !== t3 ? new Date(this._startDate.getTime() + 1e3 * t3) : null;
            } }, { key: "duration", get: function() {
              if ("DURATION" in this.attr) {
                var t3 = this.attr.decimalFloatingPoint("DURATION");
                if (y(t3))
                  return t3;
              } else if (this._endDate)
                return (this._endDate.getTime() - this._startDate.getTime()) / 1e3;
              return null;
            } }, { key: "plannedDuration", get: function() {
              return "PLANNED-DURATION" in this.attr ? this.attr.decimalFloatingPoint("PLANNED-DURATION") : null;
            } }, { key: "endOnNext", get: function() {
              return this.attr.bool("END-ON-NEXT");
            } }, { key: "isValid", get: function() {
              return !!this.id && !this._badValueForSameId && y(this.startDate.getTime()) && (null === this.duration || this.duration >= 0) && (!this.endOnNext || !!this.class);
            } }]), t2;
          }(), x = function() {
            this.aborted = false, this.loaded = 0, this.retry = 0, this.total = 0, this.chunkCount = 0, this.bwEstimate = 0, this.loading = { start: 0, first: 0, end: 0 }, this.parsing = { start: 0, end: 0 }, this.buffering = { start: 0, first: 0, end: 0 };
          }, F3 = "audio", O3 = "video", M3 = "audiovideo", N2 = function() {
            function t2(t3) {
              var e2;
              this._byteRange = null, this._url = null, this.baseurl = void 0, this.relurl = void 0, this.elementaryStreams = ((e2 = {})[F3] = null, e2[O3] = null, e2[M3] = null, e2), this.baseurl = t3;
            }
            return t2.prototype.setByteRange = function(t3, e2) {
              var r3 = t3.split("@", 2), i4 = [];
              1 === r3.length ? i4[0] = e2 ? e2.byteRangeEndOffset : 0 : i4[0] = parseInt(r3[1]), i4[1] = parseInt(r3[0]) + i4[0], this._byteRange = i4;
            }, a(t2, [{ key: "byteRange", get: function() {
              return this._byteRange ? this._byteRange : [];
            } }, { key: "byteRangeStartOffset", get: function() {
              return this.byteRange[0];
            } }, { key: "byteRangeEndOffset", get: function() {
              return this.byteRange[1];
            } }, { key: "url", get: function() {
              return !this._url && this.baseurl && this.relurl && (this._url = p.buildAbsoluteURL(this.baseurl, this.relurl, { alwaysNormalize: true })), this._url || "";
            }, set: function(t3) {
              this._url = t3;
            } }]), t2;
          }(), U2 = function(t2) {
            function e2(e3, r4) {
              var i4;
              return (i4 = t2.call(this, r4) || this)._decryptdata = null, i4.rawProgramDateTime = null, i4.programDateTime = null, i4.tagList = [], i4.duration = 0, i4.sn = 0, i4.levelkeys = void 0, i4.type = void 0, i4.loader = null, i4.keyLoader = null, i4.level = -1, i4.cc = 0, i4.startPTS = void 0, i4.endPTS = void 0, i4.startDTS = void 0, i4.endDTS = void 0, i4.start = 0, i4.deltaPTS = void 0, i4.maxStartPTS = void 0, i4.minEndPTS = void 0, i4.stats = new x(), i4.urlId = 0, i4.data = void 0, i4.bitrateTest = false, i4.title = null, i4.initSegment = null, i4.endList = void 0, i4.gap = void 0, i4.type = e3, i4;
            }
            l3(e2, t2);
            var r3 = e2.prototype;
            return r3.setKeyFormat = function(t3) {
              if (this.levelkeys) {
                var e3 = this.levelkeys[t3];
                e3 && !this._decryptdata && (this._decryptdata = e3.getDecryptData(this.sn));
              }
            }, r3.abortRequests = function() {
              var t3, e3;
              null == (t3 = this.loader) || t3.abort(), null == (e3 = this.keyLoader) || e3.abort();
            }, r3.setElementaryStreamInfo = function(t3, e3, r4, i4, n3, a2) {
              void 0 === a2 && (a2 = false);
              var s2 = this.elementaryStreams, o2 = s2[t3];
              o2 ? (o2.startPTS = Math.min(o2.startPTS, e3), o2.endPTS = Math.max(o2.endPTS, r4), o2.startDTS = Math.min(o2.startDTS, i4), o2.endDTS = Math.max(o2.endDTS, n3)) : s2[t3] = { startPTS: e3, endPTS: r4, startDTS: i4, endDTS: n3, partial: a2 };
            }, r3.clearElementaryStreamInfo = function() {
              var t3 = this.elementaryStreams;
              t3[F3] = null, t3[O3] = null, t3[M3] = null;
            }, a(e2, [{ key: "decryptdata", get: function() {
              if (!this.levelkeys && !this._decryptdata)
                return null;
              if (!this._decryptdata && this.levelkeys && !this.levelkeys.NONE) {
                var t3 = this.levelkeys.identity;
                if (t3)
                  this._decryptdata = t3.getDecryptData(this.sn);
                else {
                  var e3 = Object.keys(this.levelkeys);
                  if (1 === e3.length)
                    return this._decryptdata = this.levelkeys[e3[0]].getDecryptData(this.sn);
                }
              }
              return this._decryptdata;
            } }, { key: "end", get: function() {
              return this.start + this.duration;
            } }, { key: "endProgramDateTime", get: function() {
              if (null === this.programDateTime)
                return null;
              if (!y(this.programDateTime))
                return null;
              var t3 = y(this.duration) ? this.duration : 0;
              return this.programDateTime + 1e3 * t3;
            } }, { key: "encrypted", get: function() {
              var t3;
              if (null != (t3 = this._decryptdata) && t3.encrypted)
                return true;
              if (this.levelkeys) {
                var e3 = Object.keys(this.levelkeys), r4 = e3.length;
                if (r4 > 1 || 1 === r4 && this.levelkeys[e3[0]].encrypted)
                  return true;
              }
              return false;
            } }]), e2;
          }(N2), B2 = function(t2) {
            function e2(e3, r3, i4, n3, a2) {
              var s2;
              (s2 = t2.call(this, i4) || this).fragOffset = 0, s2.duration = 0, s2.gap = false, s2.independent = false, s2.relurl = void 0, s2.fragment = void 0, s2.index = void 0, s2.stats = new x(), s2.duration = e3.decimalFloatingPoint("DURATION"), s2.gap = e3.bool("GAP"), s2.independent = e3.bool("INDEPENDENT"), s2.relurl = e3.enumeratedString("URI"), s2.fragment = r3, s2.index = n3;
              var o2 = e3.enumeratedString("BYTERANGE");
              return o2 && s2.setByteRange(o2, a2), a2 && (s2.fragOffset = a2.fragOffset + a2.duration), s2;
            }
            return l3(e2, t2), a(e2, [{ key: "start", get: function() {
              return this.fragment.start + this.fragOffset;
            } }, { key: "end", get: function() {
              return this.start + this.duration;
            } }, { key: "loaded", get: function() {
              var t3 = this.elementaryStreams;
              return !!(t3.audio || t3.video || t3.audiovideo);
            } }]), e2;
          }(N2), G3 = function() {
            function t2(t3) {
              this.PTSKnown = false, this.alignedSliding = false, this.averagetargetduration = void 0, this.endCC = 0, this.endSN = 0, this.fragments = void 0, this.fragmentHint = void 0, this.partList = null, this.dateRanges = void 0, this.live = true, this.ageHeader = 0, this.advancedDateTime = void 0, this.updated = true, this.advanced = true, this.availabilityDelay = void 0, this.misses = 0, this.startCC = 0, this.startSN = 0, this.startTimeOffset = null, this.targetduration = 0, this.totalduration = 0, this.type = null, this.url = void 0, this.m3u8 = "", this.version = null, this.canBlockReload = false, this.canSkipUntil = 0, this.canSkipDateRanges = false, this.skippedSegments = 0, this.recentlyRemovedDateranges = void 0, this.partHoldBack = 0, this.holdBack = 0, this.partTarget = 0, this.preloadHint = void 0, this.renditionReports = void 0, this.tuneInGoal = 0, this.deltaUpdateFailed = void 0, this.driftStartTime = 0, this.driftEndTime = 0, this.driftStart = 0, this.driftEnd = 0, this.encryptedFragments = void 0, this.playlistParsingError = null, this.variableList = null, this.hasVariableRefs = false, this.fragments = [], this.encryptedFragments = [], this.dateRanges = {}, this.url = t3;
            }
            return t2.prototype.reloaded = function(t3) {
              if (!t3)
                return this.advanced = true, void (this.updated = true);
              var e2 = this.lastPartSn - t3.lastPartSn, r3 = this.lastPartIndex - t3.lastPartIndex;
              this.updated = this.endSN !== t3.endSN || !!r3 || !!e2, this.advanced = this.endSN > t3.endSN || e2 > 0 || 0 === e2 && r3 > 0, this.updated || this.advanced ? this.misses = Math.floor(0.6 * t3.misses) : this.misses = t3.misses + 1, this.availabilityDelay = t3.availabilityDelay;
            }, a(t2, [{ key: "hasProgramDateTime", get: function() {
              return !!this.fragments.length && y(this.fragments[this.fragments.length - 1].programDateTime);
            } }, { key: "levelTargetDuration", get: function() {
              return this.averagetargetduration || this.targetduration || 10;
            } }, { key: "drift", get: function() {
              var t3 = this.driftEndTime - this.driftStartTime;
              return t3 > 0 ? 1e3 * (this.driftEnd - this.driftStart) / t3 : 1;
            } }, { key: "edge", get: function() {
              return this.partEnd || this.fragmentEnd;
            } }, { key: "partEnd", get: function() {
              var t3;
              return null != (t3 = this.partList) && t3.length ? this.partList[this.partList.length - 1].end : this.fragmentEnd;
            } }, { key: "fragmentEnd", get: function() {
              var t3;
              return null != (t3 = this.fragments) && t3.length ? this.fragments[this.fragments.length - 1].end : 0;
            } }, { key: "age", get: function() {
              return this.advancedDateTime ? Math.max(Date.now() - this.advancedDateTime, 0) / 1e3 : 0;
            } }, { key: "lastPartIndex", get: function() {
              var t3;
              return null != (t3 = this.partList) && t3.length ? this.partList[this.partList.length - 1].index : -1;
            } }, { key: "lastPartSn", get: function() {
              var t3;
              return null != (t3 = this.partList) && t3.length ? this.partList[this.partList.length - 1].fragment.sn : this.endSN;
            } }]), t2;
          }();
          function K2(t2) {
            return Uint8Array.from(atob(t2), function(t3) {
              return t3.charCodeAt(0);
            });
          }
          function H2(t2) {
            var e2, r3, i4 = t2.split(":"), n3 = null;
            if ("data" === i4[0] && 2 === i4.length) {
              var a2 = i4[1].split(";"), s2 = a2[a2.length - 1].split(",");
              if (2 === s2.length) {
                var o2 = "base64" === s2[0], l4 = s2[1];
                o2 ? (a2.splice(-1, 1), n3 = K2(l4)) : (e2 = V2(l4).subarray(0, 16), (r3 = new Uint8Array(16)).set(e2, 16 - e2.length), n3 = r3);
              }
            }
            return n3;
          }
          function V2(t2) {
            return Uint8Array.from(unescape(encodeURIComponent(t2)), function(t3) {
              return t3.charCodeAt(0);
            });
          }
          var Y3 = { CLEARKEY: "org.w3.clearkey", FAIRPLAY: "com.apple.fps", PLAYREADY: "com.microsoft.playready", WIDEVINE: "com.widevine.alpha" }, W2 = "org.w3.clearkey", j3 = "com.apple.streamingkeydelivery", q3 = "com.microsoft.playready", X2 = "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed";
          function z3(t2) {
            switch (t2) {
              case j3:
                return Y3.FAIRPLAY;
              case q3:
                return Y3.PLAYREADY;
              case X2:
                return Y3.WIDEVINE;
              case W2:
                return Y3.CLEARKEY;
            }
          }
          var Q3 = "edef8ba979d64acea3c827dcd51d21ed";
          function $3(t2) {
            switch (t2) {
              case Y3.FAIRPLAY:
                return j3;
              case Y3.PLAYREADY:
                return q3;
              case Y3.WIDEVINE:
                return X2;
              case Y3.CLEARKEY:
                return W2;
            }
          }
          function J3(t2) {
            var e2 = t2.drmSystems, r3 = t2.widevineLicenseUrl, i4 = e2 ? [Y3.FAIRPLAY, Y3.WIDEVINE, Y3.PLAYREADY, Y3.CLEARKEY].filter(function(t3) {
              return !!e2[t3];
            }) : [];
            return !i4[Y3.WIDEVINE] && r3 && i4.push(Y3.WIDEVINE), i4;
          }
          var Z3 = "undefined" != typeof self && self.navigator && self.navigator.requestMediaKeySystemAccess ? self.navigator.requestMediaKeySystemAccess.bind(self.navigator) : null;
          function tt2(t2, e2, r3) {
            return Uint8Array.prototype.slice ? t2.slice(e2, r3) : new Uint8Array(Array.prototype.slice.call(t2, e2, r3));
          }
          var et2, rt2 = function(t2, e2) {
            return e2 + 10 <= t2.length && 73 === t2[e2] && 68 === t2[e2 + 1] && 51 === t2[e2 + 2] && t2[e2 + 3] < 255 && t2[e2 + 4] < 255 && t2[e2 + 6] < 128 && t2[e2 + 7] < 128 && t2[e2 + 8] < 128 && t2[e2 + 9] < 128;
          }, it2 = function(t2, e2) {
            return e2 + 10 <= t2.length && 51 === t2[e2] && 68 === t2[e2 + 1] && 73 === t2[e2 + 2] && t2[e2 + 3] < 255 && t2[e2 + 4] < 255 && t2[e2 + 6] < 128 && t2[e2 + 7] < 128 && t2[e2 + 8] < 128 && t2[e2 + 9] < 128;
          }, nt2 = function(t2, e2) {
            for (var r3 = e2, i4 = 0; rt2(t2, e2); )
              i4 += 10, i4 += at2(t2, e2 + 6), it2(t2, e2 + 10) && (i4 += 10), e2 += i4;
            if (i4 > 0)
              return t2.subarray(r3, r3 + i4);
          }, at2 = function(t2, e2) {
            var r3 = 0;
            return r3 = (127 & t2[e2]) << 21, r3 |= (127 & t2[e2 + 1]) << 14, r3 |= (127 & t2[e2 + 2]) << 7, r3 |= 127 & t2[e2 + 3];
          }, st2 = function(t2, e2) {
            return rt2(t2, e2) && at2(t2, e2 + 6) + 10 <= t2.length - e2;
          }, ot = function(t2) {
            return t2 && "PRIV" === t2.key && "com.apple.streaming.transportStreamTimestamp" === t2.info;
          }, lt2 = function(t2) {
            var e2 = String.fromCharCode(t2[0], t2[1], t2[2], t2[3]), r3 = at2(t2, 4);
            return { type: e2, size: r3, data: t2.subarray(10, 10 + r3) };
          }, ut = function(t2) {
            for (var e2 = 0, r3 = []; rt2(t2, e2); ) {
              for (var i4 = at2(t2, e2 + 6), n3 = (e2 += 10) + i4; e2 + 8 < n3; ) {
                var a2 = lt2(t2.subarray(e2)), s2 = ht(a2);
                s2 && r3.push(s2), e2 += a2.size + 10;
              }
              it2(t2, e2) && (e2 += 10);
            }
            return r3;
          }, ht = function(t2) {
            return "PRIV" === t2.type ? dt(t2) : "W" === t2.type[0] ? ft2(t2) : ct(t2);
          }, dt = function(t2) {
            if (!(t2.size < 2)) {
              var e2 = vt2(t2.data, true), r3 = new Uint8Array(t2.data.subarray(e2.length + 1));
              return { key: t2.type, info: e2, data: r3.buffer };
            }
          }, ct = function(t2) {
            if (!(t2.size < 2)) {
              if ("TXXX" === t2.type) {
                var e2 = 1, r3 = vt2(t2.data.subarray(e2), true);
                e2 += r3.length + 1;
                var i4 = vt2(t2.data.subarray(e2));
                return { key: t2.type, info: r3, data: i4 };
              }
              var n3 = vt2(t2.data.subarray(1));
              return { key: t2.type, data: n3 };
            }
          }, ft2 = function(t2) {
            if ("WXXX" === t2.type) {
              if (t2.size < 2)
                return;
              var e2 = 1, r3 = vt2(t2.data.subarray(e2), true);
              e2 += r3.length + 1;
              var i4 = vt2(t2.data.subarray(e2));
              return { key: t2.type, info: r3, data: i4 };
            }
            var n3 = vt2(t2.data);
            return { key: t2.type, data: n3 };
          }, gt2 = function(t2) {
            if (8 === t2.data.byteLength) {
              var e2 = new Uint8Array(t2.data), r3 = 1 & e2[3], i4 = (e2[4] << 23) + (e2[5] << 15) + (e2[6] << 7) + e2[7];
              return i4 /= 45, r3 && (i4 += 4772185884e-2), Math.round(i4);
            }
          }, vt2 = function(t2, e2) {
            void 0 === e2 && (e2 = false);
            var r3 = mt2();
            if (r3) {
              var i4 = r3.decode(t2);
              if (e2) {
                var n3 = i4.indexOf("\0");
                return -1 !== n3 ? i4.substring(0, n3) : i4;
              }
              return i4.replace(/\0/g, "");
            }
            for (var a2, s2, o2, l4 = t2.length, u3 = "", h4 = 0; h4 < l4; ) {
              if (0 === (a2 = t2[h4++]) && e2)
                return u3;
              if (0 !== a2 && 3 !== a2)
                switch (a2 >> 4) {
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                    u3 += String.fromCharCode(a2);
                    break;
                  case 12:
                  case 13:
                    s2 = t2[h4++], u3 += String.fromCharCode((31 & a2) << 6 | 63 & s2);
                    break;
                  case 14:
                    s2 = t2[h4++], o2 = t2[h4++], u3 += String.fromCharCode((15 & a2) << 12 | (63 & s2) << 6 | (63 & o2) << 0);
                }
            }
            return u3;
          };
          function mt2() {
            return et2 || void 0 === self.TextDecoder || (et2 = new self.TextDecoder("utf-8")), et2;
          }
          var pt = function(t2) {
            for (var e2 = "", r3 = 0; r3 < t2.length; r3++) {
              var i4 = t2[r3].toString(16);
              i4.length < 2 && (i4 = "0" + i4), e2 += i4;
            }
            return e2;
          }, yt2 = Math.pow(2, 32) - 1, Tt2 = [].push, Et = { video: 1, audio: 2, id3: 3, text: 4 };
          function St(t2) {
            return String.fromCharCode.apply(null, t2);
          }
          function Lt(t2, e2) {
            var r3 = t2[e2] << 8 | t2[e2 + 1];
            return r3 < 0 ? 65536 + r3 : r3;
          }
          function Rt(t2, e2) {
            var r3 = At2(t2, e2);
            return r3 < 0 ? 4294967296 + r3 : r3;
          }
          function At2(t2, e2) {
            return t2[e2] << 24 | t2[e2 + 1] << 16 | t2[e2 + 2] << 8 | t2[e2 + 3];
          }
          function kt(t2, e2, r3) {
            t2[e2] = r3 >> 24, t2[e2 + 1] = r3 >> 16 & 255, t2[e2 + 2] = r3 >> 8 & 255, t2[e2 + 3] = 255 & r3;
          }
          function bt(t2, e2) {
            var r3 = [];
            if (!e2.length)
              return r3;
            for (var i4 = t2.byteLength, n3 = 0; n3 < i4; ) {
              var a2 = Rt(t2, n3), s2 = a2 > 1 ? n3 + a2 : i4;
              if (St(t2.subarray(n3 + 4, n3 + 8)) === e2[0])
                if (1 === e2.length)
                  r3.push(t2.subarray(n3 + 8, s2));
                else {
                  var o2 = bt(t2.subarray(n3 + 8, s2), e2.slice(1));
                  o2.length && Tt2.apply(r3, o2);
                }
              n3 = s2;
            }
            return r3;
          }
          function Dt(t2) {
            var e2 = [], r3 = t2[0], i4 = 8, n3 = Rt(t2, i4);
            i4 += 4, i4 += 0 === r3 ? 8 : 16, i4 += 2;
            var a2 = t2.length + 0, s2 = Lt(t2, i4);
            i4 += 2;
            for (var o2 = 0; o2 < s2; o2++) {
              var l4 = i4, u3 = Rt(t2, l4);
              l4 += 4;
              var h4 = 2147483647 & u3;
              if (1 == (2147483648 & u3) >>> 31)
                return D2.warn("SIDX has hierarchical references (not supported)"), null;
              var d2 = Rt(t2, l4);
              l4 += 4, e2.push({ referenceSize: h4, subsegmentDuration: d2, info: { duration: d2 / n3, start: a2, end: a2 + h4 - 1 } }), a2 += h4, i4 = l4 += 4;
            }
            return { earliestPresentationTime: 0, timescale: n3, version: r3, referencesCount: s2, references: e2 };
          }
          function It(t2) {
            for (var e2 = [], r3 = bt(t2, ["moov", "trak"]), i4 = 0; i4 < r3.length; i4++) {
              var n3 = r3[i4], a2 = bt(n3, ["tkhd"])[0];
              if (a2) {
                var s2 = a2[0], o2 = 0 === s2 ? 12 : 20, l4 = Rt(a2, o2), u3 = bt(n3, ["mdia", "mdhd"])[0];
                if (u3) {
                  var h4 = Rt(u3, o2 = 0 === (s2 = u3[0]) ? 12 : 20), d2 = bt(n3, ["mdia", "hdlr"])[0];
                  if (d2) {
                    var c2 = St(d2.subarray(8, 12)), f3 = { soun: F3, vide: O3 }[c2];
                    if (f3) {
                      var g3 = bt(n3, ["mdia", "minf", "stbl", "stsd"])[0], v3 = void 0;
                      g3 && (v3 = St(g3.subarray(12, 16))), e2[l4] = { timescale: h4, type: f3 }, e2[f3] = { timescale: h4, id: l4, codec: v3 };
                    }
                  }
                }
              }
            }
            return bt(t2, ["moov", "mvex", "trex"]).forEach(function(t3) {
              var r4 = Rt(t3, 4), i5 = e2[r4];
              i5 && (i5.default = { duration: Rt(t3, 12), flags: Rt(t3, 20) });
            }), e2;
          }
          function wt(t2) {
            var e2 = bt(t2, ["schm"])[0];
            if (e2) {
              var r3 = St(e2.subarray(4, 8));
              if ("cbcs" === r3 || "cenc" === r3)
                return bt(t2, ["schi", "tenc"])[0];
            }
            return D2.error("[eme] missing 'schm' box"), null;
          }
          function Ct(t2) {
            var e2 = Rt(t2, 0), r3 = 8;
            1 & e2 && (r3 += 4), 4 & e2 && (r3 += 4);
            for (var i4 = 0, n3 = Rt(t2, 4), a2 = 0; a2 < n3; a2++)
              256 & e2 && (i4 += Rt(t2, r3), r3 += 4), 512 & e2 && (r3 += 4), 1024 & e2 && (r3 += 4), 2048 & e2 && (r3 += 4);
            return i4;
          }
          function _t(t2, e2) {
            var r3 = new Uint8Array(t2.length + e2.length);
            return r3.set(t2), r3.set(e2, t2.length), r3;
          }
          function Pt2(t2, e2) {
            var r3 = [], i4 = e2.samples, n3 = e2.timescale, a2 = e2.id, s2 = false;
            return bt(i4, ["moof"]).map(function(o2) {
              var l4 = o2.byteOffset - 8;
              bt(o2, ["traf"]).map(function(o3) {
                var u3 = bt(o3, ["tfdt"]).map(function(t3) {
                  var e3 = t3[0], r4 = Rt(t3, 4);
                  return 1 === e3 && (r4 *= Math.pow(2, 32), r4 += Rt(t3, 8)), r4 / n3;
                })[0];
                return void 0 !== u3 && (t2 = u3), bt(o3, ["tfhd"]).map(function(u4) {
                  var h4 = Rt(u4, 4), d2 = 16777215 & Rt(u4, 0), c2 = 0, f3 = 0 != (16 & d2), g3 = 0, v3 = 0 != (32 & d2), m3 = 8;
                  h4 === a2 && (0 != (1 & d2) && (m3 += 8), 0 != (2 & d2) && (m3 += 4), 0 != (8 & d2) && (c2 = Rt(u4, m3), m3 += 4), f3 && (g3 = Rt(u4, m3), m3 += 4), v3 && (m3 += 4), "video" === e2.type && (s2 = function(t3) {
                    if (!t3)
                      return false;
                    var e3 = t3.indexOf("."), r4 = e3 < 0 ? t3 : t3.substring(0, e3);
                    return "hvc1" === r4 || "hev1" === r4 || "dvh1" === r4 || "dvhe" === r4;
                  }(e2.codec)), bt(o3, ["trun"]).map(function(a3) {
                    var o4 = a3[0], u5 = 16777215 & Rt(a3, 0), h5 = 0 != (1 & u5), d3 = 0, f4 = 0 != (4 & u5), v4 = 0 != (256 & u5), m4 = 0, p2 = 0 != (512 & u5), y2 = 0, T3 = 0 != (1024 & u5), E2 = 0 != (2048 & u5), S4 = 0, L3 = Rt(a3, 4), R3 = 8;
                    h5 && (d3 = Rt(a3, R3), R3 += 4), f4 && (R3 += 4);
                    for (var A3 = d3 + l4, k3 = 0; k3 < L3; k3++) {
                      if (v4 ? (m4 = Rt(a3, R3), R3 += 4) : m4 = c2, p2 ? (y2 = Rt(a3, R3), R3 += 4) : y2 = g3, T3 && (R3 += 4), E2 && (S4 = 0 === o4 ? Rt(a3, R3) : At2(a3, R3), R3 += 4), e2.type === O3)
                        for (var b3 = 0; b3 < y2; ) {
                          var D3 = Rt(i4, A3);
                          xt(s2, i4[A3 += 4]) && Ft(i4.subarray(A3, A3 + D3), s2 ? 2 : 1, t2 + S4 / n3, r3), A3 += D3, b3 += D3 + 4;
                        }
                      t2 += m4 / n3;
                    }
                  }));
                });
              });
            }), r3;
          }
          function xt(t2, e2) {
            if (t2) {
              var r3 = e2 >> 1 & 63;
              return 39 === r3 || 40 === r3;
            }
            return 6 == (31 & e2);
          }
          function Ft(t2, e2, r3, i4) {
            var n3 = Ot(t2), a2 = 0;
            a2 += e2;
            for (var s2 = 0, o2 = 0, l4 = false, u3 = 0; a2 < n3.length; ) {
              s2 = 0;
              do {
                if (a2 >= n3.length)
                  break;
                s2 += u3 = n3[a2++];
              } while (255 === u3);
              o2 = 0;
              do {
                if (a2 >= n3.length)
                  break;
                o2 += u3 = n3[a2++];
              } while (255 === u3);
              var h4 = n3.length - a2;
              if (!l4 && 4 === s2 && a2 < n3.length) {
                if (l4 = true, 181 === n3[a2++]) {
                  var d2 = Lt(n3, a2);
                  if (a2 += 2, 49 === d2) {
                    var c2 = Rt(n3, a2);
                    if (a2 += 4, 1195456820 === c2) {
                      var f3 = n3[a2++];
                      if (3 === f3) {
                        var g3 = n3[a2++], v3 = 64 & g3, m3 = v3 ? 2 + 3 * (31 & g3) : 0, p2 = new Uint8Array(m3);
                        if (v3) {
                          p2[0] = g3;
                          for (var y2 = 1; y2 < m3; y2++)
                            p2[y2] = n3[a2++];
                        }
                        i4.push({ type: f3, payloadType: s2, pts: r3, bytes: p2 });
                      }
                    }
                  }
                }
              } else if (5 === s2 && o2 < h4) {
                if (l4 = true, o2 > 16) {
                  for (var T3 = [], E2 = 0; E2 < 16; E2++) {
                    var S4 = n3[a2++].toString(16);
                    T3.push(1 == S4.length ? "0" + S4 : S4), 3 !== E2 && 5 !== E2 && 7 !== E2 && 9 !== E2 || T3.push("-");
                  }
                  for (var L3 = o2 - 16, R3 = new Uint8Array(L3), A3 = 0; A3 < L3; A3++)
                    R3[A3] = n3[a2++];
                  i4.push({ payloadType: s2, pts: r3, uuid: T3.join(""), userData: vt2(R3), userDataBytes: R3 });
                }
              } else if (o2 < h4)
                a2 += o2;
              else if (o2 > h4)
                break;
            }
          }
          function Ot(t2) {
            for (var e2 = t2.byteLength, r3 = [], i4 = 1; i4 < e2 - 2; )
              0 === t2[i4] && 0 === t2[i4 + 1] && 3 === t2[i4 + 2] ? (r3.push(i4 + 2), i4 += 2) : i4++;
            if (0 === r3.length)
              return t2;
            var n3 = e2 - r3.length, a2 = new Uint8Array(n3), s2 = 0;
            for (i4 = 0; i4 < n3; s2++, i4++)
              s2 === r3[0] && (s2++, r3.shift()), a2[i4] = t2[s2];
            return a2;
          }
          function Mt2(t2, e2, r3) {
            if (16 !== t2.byteLength)
              throw new RangeError("Invalid system id");
            var i4, n3, a2;
            if (e2) {
              i4 = 1, n3 = new Uint8Array(16 * e2.length);
              for (var s2 = 0; s2 < e2.length; s2++) {
                var o2 = e2[s2];
                if (16 !== o2.byteLength)
                  throw new RangeError("Invalid key");
                n3.set(o2, 16 * s2);
              }
            } else
              i4 = 0, n3 = new Uint8Array();
            i4 > 0 ? (a2 = new Uint8Array(4), e2.length > 0 && new DataView(a2.buffer).setUint32(0, e2.length, false)) : a2 = new Uint8Array();
            var l4 = new Uint8Array(4);
            return r3 && r3.byteLength > 0 && new DataView(l4.buffer).setUint32(0, r3.byteLength, false), function(t3) {
              for (var e3 = arguments.length, r4 = new Array(e3 > 1 ? e3 - 1 : 0), i5 = 1; i5 < e3; i5++)
                r4[i5 - 1] = arguments[i5];
              for (var n4 = r4.length, a3 = 8, s3 = n4; s3--; )
                a3 += r4[s3].byteLength;
              var o3 = new Uint8Array(a3);
              for (o3[0] = a3 >> 24 & 255, o3[1] = a3 >> 16 & 255, o3[2] = a3 >> 8 & 255, o3[3] = 255 & a3, o3.set(t3, 4), s3 = 0, a3 = 8; s3 < n4; s3++)
                o3.set(r4[s3], a3), a3 += r4[s3].byteLength;
              return o3;
            }([112, 115, 115, 104], new Uint8Array([i4, 0, 0, 0]), t2, a2, n3, l4, r3 || new Uint8Array());
          }
          var Nt = {}, Ut = function() {
            function t2(t3, e3, r3, i4, n3) {
              void 0 === i4 && (i4 = [1]), void 0 === n3 && (n3 = null), this.uri = void 0, this.method = void 0, this.keyFormat = void 0, this.keyFormatVersions = void 0, this.encrypted = void 0, this.isCommonEncryption = void 0, this.iv = null, this.key = null, this.keyId = null, this.pssh = null, this.method = t3, this.uri = e3, this.keyFormat = r3, this.keyFormatVersions = i4, this.iv = n3, this.encrypted = !!t3 && "NONE" !== t3, this.isCommonEncryption = this.encrypted && "AES-128" !== t3;
            }
            t2.clearKeyUriToKeyIdMap = function() {
              Nt = {};
            };
            var e2 = t2.prototype;
            return e2.isSupported = function() {
              if (this.method) {
                if ("AES-128" === this.method || "NONE" === this.method)
                  return true;
                if ("identity" === this.keyFormat)
                  return "SAMPLE-AES" === this.method;
                switch (this.keyFormat) {
                  case j3:
                  case X2:
                  case q3:
                  case W2:
                    return -1 !== ["ISO-23001-7", "SAMPLE-AES", "SAMPLE-AES-CENC", "SAMPLE-AES-CTR"].indexOf(this.method);
                }
              }
              return false;
            }, e2.getDecryptData = function(e3) {
              if (!this.encrypted || !this.uri)
                return null;
              if ("AES-128" === this.method && this.uri && !this.iv) {
                "number" != typeof e3 && ("AES-128" !== this.method || this.iv || D2.warn('missing IV for initialization segment with method="' + this.method + '" - compliance issue'), e3 = 0);
                var r3 = function(t3) {
                  for (var e4 = new Uint8Array(16), r4 = 12; r4 < 16; r4++)
                    e4[r4] = t3 >> 8 * (15 - r4) & 255;
                  return e4;
                }(e3);
                return new t2(this.method, this.uri, "identity", this.keyFormatVersions, r3);
              }
              var i4 = H2(this.uri);
              if (i4)
                switch (this.keyFormat) {
                  case X2:
                    this.pssh = i4, i4.length >= 22 && (this.keyId = i4.subarray(i4.length - 22, i4.length - 6));
                    break;
                  case q3:
                    var n3 = new Uint8Array([154, 4, 240, 121, 152, 64, 66, 134, 171, 146, 230, 91, 224, 136, 95, 149]);
                    this.pssh = Mt2(n3, null, i4);
                    var a2 = new Uint16Array(i4.buffer, i4.byteOffset, i4.byteLength / 2), s2 = String.fromCharCode.apply(null, Array.from(a2)), o2 = s2.substring(s2.indexOf("<"), s2.length), l4 = new DOMParser().parseFromString(o2, "text/xml").getElementsByTagName("KID")[0];
                    if (l4) {
                      var u3 = l4.childNodes[0] ? l4.childNodes[0].nodeValue : l4.getAttribute("VALUE");
                      if (u3) {
                        var h4 = K2(u3).subarray(0, 16);
                        !function(t3) {
                          var e4 = function(t4, e5, r4) {
                            var i5 = t4[e5];
                            t4[e5] = t4[r4], t4[r4] = i5;
                          };
                          e4(t3, 0, 3), e4(t3, 1, 2), e4(t3, 4, 5), e4(t3, 6, 7);
                        }(h4), this.keyId = h4;
                      }
                    }
                    break;
                  default:
                    var d2 = i4.subarray(0, 16);
                    if (16 !== d2.length) {
                      var c2 = new Uint8Array(16);
                      c2.set(d2, 16 - d2.length), d2 = c2;
                    }
                    this.keyId = d2;
                }
              if (!this.keyId || 16 !== this.keyId.byteLength) {
                var f3 = Nt[this.uri];
                if (!f3) {
                  var g3 = Object.keys(Nt).length % Number.MAX_SAFE_INTEGER;
                  f3 = new Uint8Array(16), new DataView(f3.buffer, 12, 4).setUint32(0, g3), Nt[this.uri] = f3;
                }
                this.keyId = f3;
              }
              return this;
            }, t2;
          }(), Bt = /\{\$([a-zA-Z0-9-_]+)\}/g;
          function Gt(t2) {
            return Bt.test(t2);
          }
          function Kt2(t2, e2, r3) {
            if (null !== t2.variableList || t2.hasVariableRefs)
              for (var i4 = r3.length; i4--; ) {
                var n3 = r3[i4], a2 = e2[n3];
                a2 && (e2[n3] = Ht(t2, a2));
              }
          }
          function Ht(t2, e2) {
            if (null !== t2.variableList || t2.hasVariableRefs) {
              var r3 = t2.variableList;
              return e2.replace(Bt, function(e3) {
                var i4 = e3.substring(2, e3.length - 1), n3 = null == r3 ? void 0 : r3[i4];
                return void 0 === n3 ? (t2.playlistParsingError || (t2.playlistParsingError = new Error('Missing preceding EXT-X-DEFINE tag for Variable Reference: "' + i4 + '"')), e3) : n3;
              });
            }
            return e2;
          }
          function Vt(t2, e2, r3) {
            var i4, n3, a2 = t2.variableList;
            if (a2 || (t2.variableList = a2 = {}), "QUERYPARAM" in e2) {
              i4 = e2.QUERYPARAM;
              try {
                var s2 = new self.URL(r3).searchParams;
                if (!s2.has(i4))
                  throw new Error('"' + i4 + '" does not match any query parameter in URI: "' + r3 + '"');
                n3 = s2.get(i4);
              } catch (e3) {
                t2.playlistParsingError || (t2.playlistParsingError = new Error("EXT-X-DEFINE QUERYPARAM: " + e3.message));
              }
            } else
              i4 = e2.NAME, n3 = e2.VALUE;
            i4 in a2 ? t2.playlistParsingError || (t2.playlistParsingError = new Error('EXT-X-DEFINE duplicate Variable Name declarations: "' + i4 + '"')) : a2[i4] = n3 || "";
          }
          function Yt(t2, e2, r3) {
            var i4 = e2.IMPORT;
            if (r3 && i4 in r3) {
              var n3 = t2.variableList;
              n3 || (t2.variableList = n3 = {}), n3[i4] = r3[i4];
            } else
              t2.playlistParsingError || (t2.playlistParsingError = new Error('EXT-X-DEFINE IMPORT attribute not found in Multivariant Playlist: "' + i4 + '"'));
          }
          var Wt = { audio: { a3ds: true, "ac-3": true, "ac-4": true, alac: true, alaw: true, dra1: true, "dts+": true, "dts-": true, dtsc: true, dtse: true, dtsh: true, "ec-3": true, enca: true, g719: true, g726: true, m4ae: true, mha1: true, mha2: true, mhm1: true, mhm2: true, mlpa: true, mp4a: true, "raw ": true, Opus: true, opus: true, samr: true, sawb: true, sawp: true, sevc: true, sqcp: true, ssmv: true, twos: true, ulaw: true }, video: { avc1: true, avc2: true, avc3: true, avc4: true, avcp: true, av01: true, drac: true, dva1: true, dvav: true, dvh1: true, dvhe: true, encv: true, hev1: true, hvc1: true, mjp2: true, mp4v: true, mvc1: true, mvc2: true, mvc3: true, mvc4: true, resv: true, rv60: true, s263: true, svc1: true, svc2: true, "vc-1": true, vp08: true, vp09: true }, text: { stpp: true, wvtt: true } };
          function jt(t2, e2) {
            return MediaSource.isTypeSupported((e2 || "video") + '/mp4;codecs="' + t2 + '"');
          }
          var qt = /#EXT-X-STREAM-INF:([^\r\n]*)(?:[\r\n](?:#[^\r\n]*)?)*([^\r\n]+)|#EXT-X-(SESSION-DATA|SESSION-KEY|DEFINE|CONTENT-STEERING|START):([^\r\n]*)[\r\n]+/g, Xt = /#EXT-X-MEDIA:(.*)/g, zt = /^#EXT(?:INF|-X-TARGETDURATION):/m, Qt = new RegExp([/#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source, /(?!#) *(\S[\S ]*)/.source, /#EXT-X-BYTERANGE:*(.+)/.source, /#EXT-X-PROGRAM-DATE-TIME:(.+)/.source, /#.*/.source].join("|"), "g"), $t = new RegExp([/#(EXTM3U)/.source, /#EXT-X-(DATERANGE|DEFINE|KEY|MAP|PART|PART-INF|PLAYLIST-TYPE|PRELOAD-HINT|RENDITION-REPORT|SERVER-CONTROL|SKIP|START):(.+)/.source, /#EXT-X-(BITRATE|DISCONTINUITY-SEQUENCE|MEDIA-SEQUENCE|TARGETDURATION|VERSION): *(\d+)/.source, /#EXT-X-(DISCONTINUITY|ENDLIST|GAP)/.source, /(#)([^:]*):(.*)/.source, /(#)(.*)(?:.*)\r?\n?/.source].join("|")), Jt = function() {
            function t2() {
            }
            return t2.findGroup = function(t3, e2) {
              for (var r3 = 0; r3 < t3.length; r3++) {
                var i4 = t3[r3];
                if (i4.id === e2)
                  return i4;
              }
            }, t2.convertAVC1ToAVCOTI = function(t3) {
              var e2 = t3.split(".");
              if (e2.length > 2) {
                var r3 = e2.shift() + ".";
                return r3 += parseInt(e2.shift()).toString(16), r3 += ("000" + parseInt(e2.shift()).toString(16)).slice(-4);
              }
              return t3;
            }, t2.resolve = function(t3, e2) {
              return p.buildAbsoluteURL(e2, t3, { alwaysNormalize: true });
            }, t2.isMediaPlaylist = function(t3) {
              return zt.test(t3);
            }, t2.parseMasterPlaylist = function(e2, r3) {
              var i4, n3 = { contentSteering: null, levels: [], playlistParsingError: null, sessionData: null, sessionKeys: null, startTimeOffset: null, variableList: null, hasVariableRefs: Gt(e2) }, a2 = [];
              for (qt.lastIndex = 0; null != (i4 = qt.exec(e2)); )
                if (i4[1]) {
                  var s2, o2 = new C2(i4[1]);
                  Kt2(n3, o2, ["CODECS", "SUPPLEMENTAL-CODECS", "ALLOWED-CPC", "PATHWAY-ID", "STABLE-VARIANT-ID", "AUDIO", "VIDEO", "SUBTITLES", "CLOSED-CAPTIONS", "NAME"]);
                  var l4 = Ht(n3, i4[2]), u3 = { attrs: o2, bitrate: o2.decimalInteger("AVERAGE-BANDWIDTH") || o2.decimalInteger("BANDWIDTH"), name: o2.NAME, url: t2.resolve(l4, r3) }, h4 = o2.decimalResolution("RESOLUTION");
                  h4 && (u3.width = h4.width, u3.height = h4.height), ee3((o2.CODECS || "").split(/[ ,]+/).filter(function(t3) {
                    return t3;
                  }), u3), u3.videoCodec && -1 !== u3.videoCodec.indexOf("avc1") && (u3.videoCodec = t2.convertAVC1ToAVCOTI(u3.videoCodec)), null != (s2 = u3.unknownCodecs) && s2.length || a2.push(u3), n3.levels.push(u3);
                } else if (i4[3]) {
                  var d2 = i4[3], c2 = i4[4];
                  switch (d2) {
                    case "SESSION-DATA":
                      var f3 = new C2(c2);
                      Kt2(n3, f3, ["DATA-ID", "LANGUAGE", "VALUE", "URI"]);
                      var g3 = f3["DATA-ID"];
                      g3 && (null === n3.sessionData && (n3.sessionData = {}), n3.sessionData[g3] = f3);
                      break;
                    case "SESSION-KEY":
                      var v3 = Zt(c2, r3, n3);
                      v3.encrypted && v3.isSupported() ? (null === n3.sessionKeys && (n3.sessionKeys = []), n3.sessionKeys.push(v3)) : D2.warn('[Keys] Ignoring invalid EXT-X-SESSION-KEY tag: "' + c2 + '"');
                      break;
                    case "DEFINE":
                      var m3 = new C2(c2);
                      Kt2(n3, m3, ["NAME", "VALUE", "QUERYPARAM"]), Vt(n3, m3, r3);
                      break;
                    case "CONTENT-STEERING":
                      var p2 = new C2(c2);
                      Kt2(n3, p2, ["SERVER-URI", "PATHWAY-ID"]), n3.contentSteering = { uri: t2.resolve(p2["SERVER-URI"], r3), pathwayId: p2["PATHWAY-ID"] || "." };
                      break;
                    case "START":
                      n3.startTimeOffset = te3(c2);
                  }
                }
              var y2 = a2.length > 0 && a2.length < n3.levels.length;
              return n3.levels = y2 ? a2 : n3.levels, 0 === n3.levels.length && (n3.playlistParsingError = new Error("no levels found in manifest")), n3;
            }, t2.parseMasterPlaylistMedia = function(e2, r3, i4) {
              var n3, a2 = {}, s2 = i4.levels, o2 = { AUDIO: s2.map(function(t3) {
                return { id: t3.attrs.AUDIO, audioCodec: t3.audioCodec };
              }), SUBTITLES: s2.map(function(t3) {
                return { id: t3.attrs.SUBTITLES, textCodec: t3.textCodec };
              }), "CLOSED-CAPTIONS": [] }, l4 = 0;
              for (Xt.lastIndex = 0; null !== (n3 = Xt.exec(e2)); ) {
                var u3 = new C2(n3[1]), h4 = u3.TYPE;
                if (h4) {
                  var d2 = o2[h4], c2 = a2[h4] || [];
                  a2[h4] = c2, Kt2(i4, u3, ["URI", "GROUP-ID", "LANGUAGE", "ASSOC-LANGUAGE", "STABLE-RENDITION-ID", "NAME", "INSTREAM-ID", "CHARACTERISTICS", "CHANNELS"]);
                  var f3 = { attrs: u3, bitrate: 0, id: l4++, groupId: u3["GROUP-ID"] || "", instreamId: u3["INSTREAM-ID"], name: u3.NAME || u3.LANGUAGE || "", type: h4, default: u3.bool("DEFAULT"), autoselect: u3.bool("AUTOSELECT"), forced: u3.bool("FORCED"), lang: u3.LANGUAGE, url: u3.URI ? t2.resolve(u3.URI, r3) : "" };
                  if (null != d2 && d2.length) {
                    var g3 = t2.findGroup(d2, f3.groupId) || d2[0];
                    re2(f3, g3, "audioCodec"), re2(f3, g3, "textCodec");
                  }
                  c2.push(f3);
                }
              }
              return a2;
            }, t2.parseLevelPlaylist = function(t3, e2, r3, i4, n3, a2) {
              var s2, l4, u3, h4 = new G3(e2), d2 = h4.fragments, c2 = null, f3 = 0, g3 = 0, v3 = 0, m3 = 0, p2 = null, T3 = new U2(i4, e2), E2 = -1, S4 = false;
              for (Qt.lastIndex = 0, h4.m3u8 = t3, h4.hasVariableRefs = Gt(t3); null !== (s2 = Qt.exec(t3)); ) {
                S4 && (S4 = false, (T3 = new U2(i4, e2)).start = v3, T3.sn = f3, T3.cc = m3, T3.level = r3, c2 && (T3.initSegment = c2, T3.rawProgramDateTime = c2.rawProgramDateTime, c2.rawProgramDateTime = null));
                var L3 = s2[1];
                if (L3) {
                  T3.duration = parseFloat(L3);
                  var R3 = (" " + s2[2]).slice(1);
                  T3.title = R3 || null, T3.tagList.push(R3 ? ["INF", L3, R3] : ["INF", L3]);
                } else if (s2[3]) {
                  if (y(T3.duration)) {
                    T3.start = v3, u3 && ae2(T3, u3, h4), T3.sn = f3, T3.level = r3, T3.cc = m3, T3.urlId = n3, d2.push(T3);
                    var A3 = (" " + s2[3]).slice(1);
                    T3.relurl = Ht(h4, A3), ie3(T3, p2), p2 = T3, v3 += T3.duration, f3++, g3 = 0, S4 = true;
                  }
                } else if (s2[4]) {
                  var k3 = (" " + s2[4]).slice(1);
                  p2 ? T3.setByteRange(k3, p2) : T3.setByteRange(k3);
                } else if (s2[5])
                  T3.rawProgramDateTime = (" " + s2[5]).slice(1), T3.tagList.push(["PROGRAM-DATE-TIME", T3.rawProgramDateTime]), -1 === E2 && (E2 = d2.length);
                else {
                  if (!(s2 = s2[0].match($t))) {
                    D2.warn("No matches on slow regex match for level playlist!");
                    continue;
                  }
                  for (l4 = 1; l4 < s2.length && void 0 === s2[l4]; l4++)
                    ;
                  var b3 = (" " + s2[l4]).slice(1), I3 = (" " + s2[l4 + 1]).slice(1), w3 = s2[l4 + 2] ? (" " + s2[l4 + 2]).slice(1) : "";
                  switch (b3) {
                    case "PLAYLIST-TYPE":
                      h4.type = I3.toUpperCase();
                      break;
                    case "MEDIA-SEQUENCE":
                      f3 = h4.startSN = parseInt(I3);
                      break;
                    case "SKIP":
                      var _3 = new C2(I3);
                      Kt2(h4, _3, ["RECENTLY-REMOVED-DATERANGES"]);
                      var x2 = _3.decimalInteger("SKIPPED-SEGMENTS");
                      if (y(x2)) {
                        h4.skippedSegments = x2;
                        for (var F4 = x2; F4--; )
                          d2.unshift(null);
                        f3 += x2;
                      }
                      var O4 = _3.enumeratedString("RECENTLY-REMOVED-DATERANGES");
                      O4 && (h4.recentlyRemovedDateranges = O4.split("	"));
                      break;
                    case "TARGETDURATION":
                      h4.targetduration = Math.max(parseInt(I3), 1);
                      break;
                    case "VERSION":
                      h4.version = parseInt(I3);
                      break;
                    case "EXTM3U":
                      break;
                    case "ENDLIST":
                      h4.live = false;
                      break;
                    case "#":
                      (I3 || w3) && T3.tagList.push(w3 ? [I3, w3] : [I3]);
                      break;
                    case "DISCONTINUITY":
                      m3++, T3.tagList.push(["DIS"]);
                      break;
                    case "GAP":
                      T3.gap = true, T3.tagList.push([b3]);
                      break;
                    case "BITRATE":
                      T3.tagList.push([b3, I3]);
                      break;
                    case "DATERANGE":
                      var M4 = new C2(I3);
                      Kt2(h4, M4, ["ID", "CLASS", "START-DATE", "END-DATE", "SCTE35-CMD", "SCTE35-OUT", "SCTE35-IN"]), Kt2(h4, M4, M4.clientAttrs);
                      var N3 = new P(M4, h4.dateRanges[M4.ID]);
                      N3.isValid || h4.skippedSegments ? h4.dateRanges[N3.id] = N3 : D2.warn('Ignoring invalid DATERANGE tag: "' + I3 + '"'), T3.tagList.push(["EXT-X-DATERANGE", I3]);
                      break;
                    case "DEFINE":
                      var K3 = new C2(I3);
                      Kt2(h4, K3, ["NAME", "VALUE", "IMPORT", "QUERYPARAM"]), "IMPORT" in K3 ? Yt(h4, K3, a2) : Vt(h4, K3, e2);
                      break;
                    case "DISCONTINUITY-SEQUENCE":
                      m3 = parseInt(I3);
                      break;
                    case "KEY":
                      var H3 = Zt(I3, e2, h4);
                      if (H3.isSupported()) {
                        if ("NONE" === H3.method) {
                          u3 = void 0;
                          break;
                        }
                        u3 || (u3 = {}), u3[H3.keyFormat] && (u3 = o({}, u3)), u3[H3.keyFormat] = H3;
                      } else
                        D2.warn('[Keys] Ignoring invalid EXT-X-KEY tag: "' + I3 + '"');
                      break;
                    case "START":
                      h4.startTimeOffset = te3(I3);
                      break;
                    case "MAP":
                      var V3 = new C2(I3);
                      if (Kt2(h4, V3, ["BYTERANGE", "URI"]), T3.duration) {
                        var Y4 = new U2(i4, e2);
                        ne2(Y4, V3, r3, u3), c2 = Y4, T3.initSegment = c2, c2.rawProgramDateTime && !T3.rawProgramDateTime && (T3.rawProgramDateTime = c2.rawProgramDateTime);
                      } else
                        ne2(T3, V3, r3, u3), c2 = T3, S4 = true;
                      break;
                    case "SERVER-CONTROL":
                      var W3 = new C2(I3);
                      h4.canBlockReload = W3.bool("CAN-BLOCK-RELOAD"), h4.canSkipUntil = W3.optionalFloat("CAN-SKIP-UNTIL", 0), h4.canSkipDateRanges = h4.canSkipUntil > 0 && W3.bool("CAN-SKIP-DATERANGES"), h4.partHoldBack = W3.optionalFloat("PART-HOLD-BACK", 0), h4.holdBack = W3.optionalFloat("HOLD-BACK", 0);
                      break;
                    case "PART-INF":
                      var j4 = new C2(I3);
                      h4.partTarget = j4.decimalFloatingPoint("PART-TARGET");
                      break;
                    case "PART":
                      var q4 = h4.partList;
                      q4 || (q4 = h4.partList = []);
                      var X3 = g3 > 0 ? q4[q4.length - 1] : void 0, z4 = g3++, Q4 = new C2(I3);
                      Kt2(h4, Q4, ["BYTERANGE", "URI"]);
                      var $4 = new B2(Q4, T3, e2, z4, X3);
                      q4.push($4), T3.duration += $4.duration;
                      break;
                    case "PRELOAD-HINT":
                      var J4 = new C2(I3);
                      Kt2(h4, J4, ["URI"]), h4.preloadHint = J4;
                      break;
                    case "RENDITION-REPORT":
                      var Z4 = new C2(I3);
                      Kt2(h4, Z4, ["URI"]), h4.renditionReports = h4.renditionReports || [], h4.renditionReports.push(Z4);
                      break;
                    default:
                      D2.warn("line parsed but not handled: " + s2);
                  }
                }
              }
              p2 && !p2.relurl ? (d2.pop(), v3 -= p2.duration, h4.partList && (h4.fragmentHint = p2)) : h4.partList && (ie3(T3, p2), T3.cc = m3, h4.fragmentHint = T3, u3 && ae2(T3, u3, h4));
              var tt3 = d2.length, et3 = d2[0], rt3 = d2[tt3 - 1];
              if ((v3 += h4.skippedSegments * h4.targetduration) > 0 && tt3 && rt3) {
                h4.averagetargetduration = v3 / tt3;
                var it3 = rt3.sn;
                h4.endSN = "initSegment" !== it3 ? it3 : 0, h4.live || (rt3.endList = true), et3 && (h4.startCC = et3.cc);
              } else
                h4.endSN = 0, h4.startCC = 0;
              return h4.fragmentHint && (v3 += h4.fragmentHint.duration), h4.totalduration = v3, h4.endCC = m3, E2 > 0 && function(t4, e3) {
                for (var r4 = t4[e3], i5 = e3; i5--; ) {
                  var n4 = t4[i5];
                  if (!n4)
                    return;
                  n4.programDateTime = r4.programDateTime - 1e3 * n4.duration, r4 = n4;
                }
              }(d2, E2), h4;
            }, t2;
          }();
          function Zt(t2, e2, r3) {
            var i4, n3, a2 = new C2(t2);
            Kt2(r3, a2, ["KEYFORMAT", "KEYFORMATVERSIONS", "URI", "IV", "URI"]);
            var s2 = null != (i4 = a2.METHOD) ? i4 : "", o2 = a2.URI, l4 = a2.hexadecimalInteger("IV"), u3 = a2.KEYFORMATVERSIONS, h4 = null != (n3 = a2.KEYFORMAT) ? n3 : "identity";
            o2 && a2.IV && !l4 && D2.error("Invalid IV: " + a2.IV);
            var d2 = o2 ? Jt.resolve(o2, e2) : "", c2 = (u3 || "1").split("/").map(Number).filter(Number.isFinite);
            return new Ut(s2, d2, h4, c2, l4);
          }
          function te3(t2) {
            var e2 = new C2(t2).decimalFloatingPoint("TIME-OFFSET");
            return y(e2) ? e2 : null;
          }
          function ee3(t2, e2) {
            ["video", "audio", "text"].forEach(function(r3) {
              var i4 = t2.filter(function(t3) {
                return function(t4, e3) {
                  var r4 = Wt[e3];
                  return !!r4 && true === r4[t4.slice(0, 4)];
                }(t3, r3);
              });
              if (i4.length) {
                var n3 = i4.filter(function(t3) {
                  return 0 === t3.lastIndexOf("avc1", 0) || 0 === t3.lastIndexOf("mp4a", 0);
                });
                e2[r3 + "Codec"] = n3.length > 0 ? n3[0] : i4[0], t2 = t2.filter(function(t3) {
                  return -1 === i4.indexOf(t3);
                });
              }
            }), e2.unknownCodecs = t2;
          }
          function re2(t2, e2, r3) {
            var i4 = e2[r3];
            i4 && (t2[r3] = i4);
          }
          function ie3(t2, e2) {
            t2.rawProgramDateTime ? t2.programDateTime = Date.parse(t2.rawProgramDateTime) : null != e2 && e2.programDateTime && (t2.programDateTime = e2.endProgramDateTime), y(t2.programDateTime) || (t2.programDateTime = null, t2.rawProgramDateTime = null);
          }
          function ne2(t2, e2, r3, i4) {
            t2.relurl = e2.URI, e2.BYTERANGE && t2.setByteRange(e2.BYTERANGE), t2.level = r3, t2.sn = "initSegment", i4 && (t2.levelkeys = i4), t2.initSegment = null;
          }
          function ae2(t2, e2, r3) {
            t2.levelkeys = e2;
            var i4 = r3.encryptedFragments;
            i4.length && i4[i4.length - 1].levelkeys === e2 || !Object.keys(e2).some(function(t3) {
              return e2[t3].isCommonEncryption;
            }) || i4.push(t2);
          }
          var se2 = "manifest", oe2 = "level", le2 = "audioTrack", ue2 = "subtitleTrack", he2 = "main", de2 = "audio", ce2 = "subtitle";
          function fe2(t2) {
            switch (t2.type) {
              case le2:
                return de2;
              case ue2:
                return ce2;
              default:
                return he2;
            }
          }
          function ge3(t2, e2) {
            var r3 = t2.url;
            return void 0 !== r3 && 0 !== r3.indexOf("data:") || (r3 = e2.url), r3;
          }
          var ve2 = function() {
            function t2(t3) {
              this.hls = void 0, this.loaders = /* @__PURE__ */ Object.create(null), this.variableList = null, this.hls = t3, this.registerListeners();
            }
            var e2 = t2.prototype;
            return e2.startLoad = function(t3) {
            }, e2.stopLoad = function() {
              this.destroyInternalLoaders();
            }, e2.registerListeners = function() {
              var t3 = this.hls;
              t3.on(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.on(T2.LEVEL_LOADING, this.onLevelLoading, this), t3.on(T2.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this), t3.on(T2.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
            }, e2.unregisterListeners = function() {
              var t3 = this.hls;
              t3.off(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.off(T2.LEVEL_LOADING, this.onLevelLoading, this), t3.off(T2.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this), t3.off(T2.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
            }, e2.createInternalLoader = function(t3) {
              var e3 = this.hls.config, r3 = e3.pLoader, i4 = e3.loader, n3 = new (r3 || i4)(e3);
              return this.loaders[t3.type] = n3, n3;
            }, e2.getInternalLoader = function(t3) {
              return this.loaders[t3.type];
            }, e2.resetInternalLoader = function(t3) {
              this.loaders[t3] && delete this.loaders[t3];
            }, e2.destroyInternalLoaders = function() {
              for (var t3 in this.loaders) {
                var e3 = this.loaders[t3];
                e3 && e3.destroy(), this.resetInternalLoader(t3);
              }
            }, e2.destroy = function() {
              this.variableList = null, this.unregisterListeners(), this.destroyInternalLoaders();
            }, e2.onManifestLoading = function(t3, e3) {
              var r3 = e3.url;
              this.variableList = null, this.load({ id: null, level: 0, responseType: "text", type: se2, url: r3, deliveryDirectives: null });
            }, e2.onLevelLoading = function(t3, e3) {
              var r3 = e3.id, i4 = e3.level, n3 = e3.url, a2 = e3.deliveryDirectives;
              this.load({ id: r3, level: i4, responseType: "text", type: oe2, url: n3, deliveryDirectives: a2 });
            }, e2.onAudioTrackLoading = function(t3, e3) {
              var r3 = e3.id, i4 = e3.groupId, n3 = e3.url, a2 = e3.deliveryDirectives;
              this.load({ id: r3, groupId: i4, level: null, responseType: "text", type: le2, url: n3, deliveryDirectives: a2 });
            }, e2.onSubtitleTrackLoading = function(t3, e3) {
              var r3 = e3.id, i4 = e3.groupId, n3 = e3.url, a2 = e3.deliveryDirectives;
              this.load({ id: r3, groupId: i4, level: null, responseType: "text", type: ue2, url: n3, deliveryDirectives: a2 });
            }, e2.load = function(t3) {
              var e3, r3, i4, n3 = this, a2 = this.hls.config, s2 = this.getInternalLoader(t3);
              if (s2) {
                var l4 = s2.context;
                if (l4 && l4.url === t3.url)
                  return void D2.trace("[playlist-loader]: playlist request ongoing");
                D2.log("[playlist-loader]: aborting previous loader for type: " + t3.type), s2.abort();
              }
              if (r3 = t3.type === se2 ? a2.manifestLoadPolicy.default : o({}, a2.playlistLoadPolicy.default, { timeoutRetry: null, errorRetry: null }), s2 = this.createInternalLoader(t3), null != (e3 = t3.deliveryDirectives) && e3.part && (t3.type === oe2 && null !== t3.level ? i4 = this.hls.levels[t3.level].details : t3.type === le2 && null !== t3.id ? i4 = this.hls.audioTracks[t3.id].details : t3.type === ue2 && null !== t3.id && (i4 = this.hls.subtitleTracks[t3.id].details), i4)) {
                var u3 = i4.partTarget, h4 = i4.targetduration;
                if (u3 && h4) {
                  var d2 = 1e3 * Math.max(3 * u3, 0.8 * h4);
                  r3 = o({}, r3, { maxTimeToFirstByteMs: Math.min(d2, r3.maxTimeToFirstByteMs), maxLoadTimeMs: Math.min(d2, r3.maxTimeToFirstByteMs) });
                }
              }
              var c2 = r3.errorRetry || r3.timeoutRetry || {}, f3 = { loadPolicy: r3, timeout: r3.maxLoadTimeMs, maxRetry: c2.maxNumRetry || 0, retryDelay: c2.retryDelayMs || 0, maxRetryDelay: c2.maxRetryDelayMs || 0 }, g3 = { onSuccess: function(t4, e4, r4, i5) {
                var a3 = n3.getInternalLoader(r4);
                n3.resetInternalLoader(r4.type);
                var s3 = t4.data;
                0 === s3.indexOf("#EXTM3U") ? (e4.parsing.start = performance.now(), Jt.isMediaPlaylist(s3) ? n3.handleTrackOrLevelPlaylist(t4, e4, r4, i5 || null, a3) : n3.handleMasterPlaylist(t4, e4, r4, i5)) : n3.handleManifestParsingError(t4, r4, new Error("no EXTM3U delimiter"), i5 || null, e4);
              }, onError: function(t4, e4, r4, i5) {
                n3.handleNetworkError(e4, r4, false, t4, i5);
              }, onTimeout: function(t4, e4, r4) {
                n3.handleNetworkError(e4, r4, true, void 0, t4);
              } };
              s2.load(t3, f3, g3);
            }, e2.handleMasterPlaylist = function(t3, e3, r3, i4) {
              var n3 = this.hls, a2 = t3.data, s2 = ge3(t3, r3), o2 = Jt.parseMasterPlaylist(a2, s2);
              if (o2.playlistParsingError)
                this.handleManifestParsingError(t3, r3, o2.playlistParsingError, i4, e3);
              else {
                var l4 = o2.contentSteering, u3 = o2.levels, h4 = o2.sessionData, d2 = o2.sessionKeys, c2 = o2.startTimeOffset, f3 = o2.variableList;
                this.variableList = f3;
                var g3 = Jt.parseMasterPlaylistMedia(a2, s2, o2), v3 = g3.AUDIO, m3 = void 0 === v3 ? [] : v3, p2 = g3.SUBTITLES, y2 = g3["CLOSED-CAPTIONS"];
                m3.length && (m3.some(function(t4) {
                  return !t4.url;
                }) || !u3[0].audioCodec || u3[0].attrs.AUDIO || (D2.log("[playlist-loader]: audio codec signaled in quality level, but no embedded audio track signaled, create one"), m3.unshift({ type: "main", name: "main", groupId: "main", default: false, autoselect: false, forced: false, id: -1, attrs: new C2({}), bitrate: 0, url: "" }))), n3.trigger(T2.MANIFEST_LOADED, { levels: u3, audioTracks: m3, subtitles: p2, captions: y2, contentSteering: l4, url: s2, stats: e3, networkDetails: i4, sessionData: h4, sessionKeys: d2, startTimeOffset: c2, variableList: f3 });
              }
            }, e2.handleTrackOrLevelPlaylist = function(t3, e3, r3, i4, n3) {
              var a2 = this.hls, s2 = r3.id, o2 = r3.level, l4 = r3.type, u3 = ge3(t3, r3), h4 = y(s2) ? s2 : 0, d2 = y(o2) ? o2 : h4, c2 = fe2(r3), f3 = Jt.parseLevelPlaylist(t3.data, u3, d2, c2, h4, this.variableList);
              if (l4 === se2) {
                var g3 = { attrs: new C2({}), bitrate: 0, details: f3, name: "", url: u3 };
                a2.trigger(T2.MANIFEST_LOADED, { levels: [g3], audioTracks: [], url: u3, stats: e3, networkDetails: i4, sessionData: null, sessionKeys: null, contentSteering: null, startTimeOffset: null, variableList: null });
              }
              e3.parsing.end = performance.now(), r3.levelDetails = f3, this.handlePlaylistLoaded(f3, t3, e3, r3, i4, n3);
            }, e2.handleManifestParsingError = function(t3, e3, r3, i4, n3) {
              this.hls.trigger(T2.ERROR, { type: E.NETWORK_ERROR, details: S3.MANIFEST_PARSING_ERROR, fatal: e3.type === se2, url: t3.url, err: r3, error: r3, reason: r3.message, response: t3, context: e3, networkDetails: i4, stats: n3 });
            }, e2.handleNetworkError = function(t3, e3, r3, n3, a2) {
              void 0 === r3 && (r3 = false);
              var s2 = "A network " + (r3 ? "timeout" : "error" + (n3 ? " (status " + n3.code + ")" : "")) + " occurred while loading " + t3.type;
              t3.type === oe2 ? s2 += ": " + t3.level + " id: " + t3.id : t3.type !== le2 && t3.type !== ue2 || (s2 += " id: " + t3.id + ' group-id: "' + t3.groupId + '"');
              var o2 = new Error(s2);
              D2.warn("[playlist-loader]: " + s2);
              var l4 = S3.UNKNOWN, u3 = false, h4 = this.getInternalLoader(t3);
              switch (t3.type) {
                case se2:
                  l4 = r3 ? S3.MANIFEST_LOAD_TIMEOUT : S3.MANIFEST_LOAD_ERROR, u3 = true;
                  break;
                case oe2:
                  l4 = r3 ? S3.LEVEL_LOAD_TIMEOUT : S3.LEVEL_LOAD_ERROR, u3 = false;
                  break;
                case le2:
                  l4 = r3 ? S3.AUDIO_TRACK_LOAD_TIMEOUT : S3.AUDIO_TRACK_LOAD_ERROR, u3 = false;
                  break;
                case ue2:
                  l4 = r3 ? S3.SUBTITLE_TRACK_LOAD_TIMEOUT : S3.SUBTITLE_LOAD_ERROR, u3 = false;
              }
              h4 && this.resetInternalLoader(t3.type);
              var d2 = { type: E.NETWORK_ERROR, details: l4, fatal: u3, url: t3.url, loader: h4, context: t3, error: o2, networkDetails: e3, stats: a2 };
              if (n3) {
                var c2 = (null == e3 ? void 0 : e3.url) || t3.url;
                d2.response = i3({ url: c2, data: void 0 }, n3);
              }
              this.hls.trigger(T2.ERROR, d2);
            }, e2.handlePlaylistLoaded = function(t3, e3, r3, i4, n3, a2) {
              var s2 = this.hls, o2 = i4.type, l4 = i4.level, u3 = i4.id, h4 = i4.groupId, d2 = i4.deliveryDirectives, c2 = ge3(e3, i4), f3 = fe2(i4), g3 = "number" == typeof i4.level && f3 === he2 ? l4 : void 0;
              if (t3.fragments.length) {
                t3.targetduration || (t3.playlistParsingError = new Error("Missing Target Duration"));
                var v3 = t3.playlistParsingError;
                if (v3)
                  s2.trigger(T2.ERROR, { type: E.NETWORK_ERROR, details: S3.LEVEL_PARSING_ERROR, fatal: false, url: c2, error: v3, reason: v3.message, response: e3, context: i4, level: g3, parent: f3, networkDetails: n3, stats: r3 });
                else
                  switch (t3.live && a2 && (a2.getCacheAge && (t3.ageHeader = a2.getCacheAge() || 0), a2.getCacheAge && !isNaN(t3.ageHeader) || (t3.ageHeader = 0)), o2) {
                    case se2:
                    case oe2:
                      s2.trigger(T2.LEVEL_LOADED, { details: t3, level: g3 || 0, id: u3 || 0, stats: r3, networkDetails: n3, deliveryDirectives: d2 });
                      break;
                    case le2:
                      s2.trigger(T2.AUDIO_TRACK_LOADED, { details: t3, id: u3 || 0, groupId: h4 || "", stats: r3, networkDetails: n3, deliveryDirectives: d2 });
                      break;
                    case ue2:
                      s2.trigger(T2.SUBTITLE_TRACK_LOADED, { details: t3, id: u3 || 0, groupId: h4 || "", stats: r3, networkDetails: n3, deliveryDirectives: d2 });
                  }
              } else {
                var m3 = new Error("No Segments found in Playlist");
                s2.trigger(T2.ERROR, { type: E.NETWORK_ERROR, details: S3.LEVEL_EMPTY_ERROR, fatal: false, url: c2, error: m3, reason: m3.message, response: e3, context: i4, level: g3, parent: f3, networkDetails: n3, stats: r3 });
              }
            }, t2;
          }();
          function me3(t2, e2) {
            var r3;
            try {
              r3 = new Event("addtrack");
            } catch (t3) {
              (r3 = document.createEvent("Event")).initEvent("addtrack", false, false);
            }
            r3.track = t2, e2.dispatchEvent(r3);
          }
          function pe2(t2, e2) {
            var r3 = t2.mode;
            if ("disabled" === r3 && (t2.mode = "hidden"), t2.cues && !t2.cues.getCueById(e2.id))
              try {
                if (t2.addCue(e2), !t2.cues.getCueById(e2.id))
                  throw new Error("addCue is failed for: " + e2);
              } catch (r4) {
                D2.debug("[texttrack-utils]: " + r4);
                var i4 = new self.TextTrackCue(e2.startTime, e2.endTime, e2.text);
                i4.id = e2.id, t2.addCue(i4);
              }
            "disabled" === r3 && (t2.mode = r3);
          }
          function ye3(t2) {
            var e2 = t2.mode;
            if ("disabled" === e2 && (t2.mode = "hidden"), t2.cues)
              for (var r3 = t2.cues.length; r3--; )
                t2.removeCue(t2.cues[r3]);
            "disabled" === e2 && (t2.mode = e2);
          }
          function Te3(t2, e2, r3, i4) {
            var n3 = t2.mode;
            if ("disabled" === n3 && (t2.mode = "hidden"), t2.cues && t2.cues.length > 0)
              for (var a2 = function(t3, e3, r4) {
                var i5 = [], n4 = function(t4, e4) {
                  if (e4 < t4[0].startTime)
                    return 0;
                  var r5 = t4.length - 1;
                  if (e4 > t4[r5].endTime)
                    return -1;
                  for (var i6 = 0, n5 = r5; i6 <= n5; ) {
                    var a4 = Math.floor((n5 + i6) / 2);
                    if (e4 < t4[a4].startTime)
                      n5 = a4 - 1;
                    else {
                      if (!(e4 > t4[a4].startTime && i6 < r5))
                        return a4;
                      i6 = a4 + 1;
                    }
                  }
                  return t4[i6].startTime - e4 < e4 - t4[n5].startTime ? i6 : n5;
                }(t3, e3);
                if (n4 > -1)
                  for (var a3 = n4, s3 = t3.length; a3 < s3; a3++) {
                    var o2 = t3[a3];
                    if (o2.startTime >= e3 && o2.endTime <= r4)
                      i5.push(o2);
                    else if (o2.startTime > r4)
                      return i5;
                  }
                return i5;
              }(t2.cues, e2, r3), s2 = 0; s2 < a2.length; s2++)
                i4 && !i4(a2[s2]) || t2.removeCue(a2[s2]);
            "disabled" === n3 && (t2.mode = n3);
          }
          var Ee2 = "org.id3", Se2 = "com.apple.quicktime.HLS", Le3 = "https://aomedia.org/emsg/ID3";
          function Re2() {
            if ("undefined" != typeof self)
              return self.WebKitDataCue || self.VTTCue || self.TextTrackCue;
          }
          var Ae2 = function() {
            var t2 = Re2();
            try {
              new t2(0, Number.POSITIVE_INFINITY, "");
            } catch (t3) {
              return Number.MAX_VALUE;
            }
            return Number.POSITIVE_INFINITY;
          }();
          function ke2(t2, e2) {
            return t2.getTime() / 1e3 - e2;
          }
          var be3 = function() {
            function t2(t3) {
              this.hls = void 0, this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {}, this.hls = t3, this._registerListeners();
            }
            var e2 = t2.prototype;
            return e2.destroy = function() {
              this._unregisterListeners(), this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {}, this.hls = null;
            }, e2._registerListeners = function() {
              var t3 = this.hls;
              t3.on(T2.MEDIA_ATTACHED, this.onMediaAttached, this), t3.on(T2.MEDIA_DETACHING, this.onMediaDetaching, this), t3.on(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.on(T2.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this), t3.on(T2.BUFFER_FLUSHING, this.onBufferFlushing, this), t3.on(T2.LEVEL_UPDATED, this.onLevelUpdated, this);
            }, e2._unregisterListeners = function() {
              var t3 = this.hls;
              t3.off(T2.MEDIA_ATTACHED, this.onMediaAttached, this), t3.off(T2.MEDIA_DETACHING, this.onMediaDetaching, this), t3.off(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.off(T2.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this), t3.off(T2.BUFFER_FLUSHING, this.onBufferFlushing, this), t3.off(T2.LEVEL_UPDATED, this.onLevelUpdated, this);
            }, e2.onMediaAttached = function(t3, e3) {
              this.media = e3.media;
            }, e2.onMediaDetaching = function() {
              this.id3Track && (ye3(this.id3Track), this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {});
            }, e2.onManifestLoading = function() {
              this.dateRangeCuesAppended = {};
            }, e2.createTrack = function(t3) {
              var e3 = this.getID3Track(t3.textTracks);
              return e3.mode = "hidden", e3;
            }, e2.getID3Track = function(t3) {
              if (this.media) {
                for (var e3 = 0; e3 < t3.length; e3++) {
                  var r3 = t3[e3];
                  if ("metadata" === r3.kind && "id3" === r3.label)
                    return me3(r3, this.media), r3;
                }
                return this.media.addTextTrack("metadata", "id3");
              }
            }, e2.onFragParsingMetadata = function(t3, e3) {
              if (this.media) {
                var r3 = this.hls.config, i4 = r3.enableEmsgMetadataCues, n3 = r3.enableID3MetadataCues;
                if (i4 || n3) {
                  var a2 = e3.samples;
                  this.id3Track || (this.id3Track = this.createTrack(this.media));
                  for (var s2 = Re2(), o2 = 0; o2 < a2.length; o2++) {
                    var l4 = a2[o2].type;
                    if ((l4 !== Le3 || i4) && n3) {
                      var u3 = ut(a2[o2].data);
                      if (u3) {
                        var h4 = a2[o2].pts, d2 = h4 + a2[o2].duration;
                        d2 > Ae2 && (d2 = Ae2), d2 - h4 <= 0 && (d2 = h4 + 0.25);
                        for (var c2 = 0; c2 < u3.length; c2++) {
                          var f3 = u3[c2];
                          if (!ot(f3)) {
                            this.updateId3CueEnds(h4);
                            var g3 = new s2(h4, d2, "");
                            g3.value = f3, l4 && (g3.type = l4), this.id3Track.addCue(g3);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }, e2.updateId3CueEnds = function(t3) {
              var e3, r3 = null == (e3 = this.id3Track) ? void 0 : e3.cues;
              if (r3)
                for (var i4 = r3.length; i4--; ) {
                  var n3 = r3[i4];
                  n3.startTime < t3 && n3.endTime === Ae2 && (n3.endTime = t3);
                }
            }, e2.onBufferFlushing = function(t3, e3) {
              var r3 = e3.startOffset, i4 = e3.endOffset, n3 = e3.type, a2 = this.id3Track, s2 = this.hls;
              if (s2) {
                var o2 = s2.config, l4 = o2.enableEmsgMetadataCues, u3 = o2.enableID3MetadataCues;
                a2 && (l4 || u3) && Te3(a2, r3, i4, "audio" === n3 ? function(t4) {
                  return t4.type === Ee2 && u3;
                } : "video" === n3 ? function(t4) {
                  return t4.type === Le3 && l4;
                } : function(t4) {
                  return t4.type === Ee2 && u3 || t4.type === Le3 && l4;
                });
              }
            }, e2.onLevelUpdated = function(t3, e3) {
              var r3 = this, i4 = e3.details;
              if (this.media && i4.hasProgramDateTime && this.hls.config.enableDateRangeMetadataCues) {
                var n3 = this.dateRangeCuesAppended, a2 = this.id3Track, s2 = i4.dateRanges, o2 = Object.keys(s2);
                if (a2)
                  for (var l4 = Object.keys(n3).filter(function(t4) {
                    return !o2.includes(t4);
                  }), u3 = function() {
                    var t4 = l4[h4];
                    Object.keys(n3[t4].cues).forEach(function(e4) {
                      a2.removeCue(n3[t4].cues[e4]);
                    }), delete n3[t4];
                  }, h4 = l4.length; h4--; )
                    u3();
                var d2 = i4.fragments[i4.fragments.length - 1];
                if (0 !== o2.length && y(null == d2 ? void 0 : d2.programDateTime)) {
                  this.id3Track || (this.id3Track = this.createTrack(this.media));
                  for (var c2 = d2.programDateTime / 1e3 - d2.start, f3 = Re2(), g3 = function() {
                    var t4 = o2[v3], e4 = s2[t4], i5 = n3[t4], a3 = (null == i5 ? void 0 : i5.cues) || {}, l5 = (null == i5 ? void 0 : i5.durationKnown) || false, u4 = ke2(e4.startDate, c2), h5 = Ae2, d3 = e4.endDate;
                    if (d3)
                      h5 = ke2(d3, c2), l5 = true;
                    else if (e4.endOnNext && !l5) {
                      var g4 = o2.reduce(function(t5, r4) {
                        var i6 = s2[r4];
                        return i6.class === e4.class && i6.id !== r4 && i6.startDate > e4.startDate && t5.push(i6), t5;
                      }, []).sort(function(t5, e5) {
                        return t5.startDate.getTime() - e5.startDate.getTime();
                      })[0];
                      g4 && (h5 = ke2(g4.startDate, c2), l5 = true);
                    }
                    for (var m3, p2, y2 = Object.keys(e4.attr), T3 = 0; T3 < y2.length; T3++) {
                      var E2 = y2[T3];
                      if ("ID" !== (p2 = E2) && "CLASS" !== p2 && "START-DATE" !== p2 && "DURATION" !== p2 && "END-DATE" !== p2 && "END-ON-NEXT" !== p2) {
                        var S4 = a3[E2];
                        if (S4)
                          l5 && !i5.durationKnown && (S4.endTime = h5);
                        else {
                          var L3 = e4.attr[E2];
                          S4 = new f3(u4, h5, ""), _2(E2) && (m3 = L3, L3 = Uint8Array.from(m3.replace(/^0x/, "").replace(/([\da-fA-F]{2}) ?/g, "0x$1 ").replace(/ +$/, "").split(" ")).buffer), S4.value = { key: E2, data: L3 }, S4.type = Se2, S4.id = t4, r3.id3Track.addCue(S4), a3[E2] = S4;
                        }
                      }
                    }
                    n3[t4] = { cues: a3, dateRange: e4, durationKnown: l5 };
                  }, v3 = 0; v3 < o2.length; v3++)
                    g3();
                }
              }
            }, t2;
          }(), De2 = function() {
            function t2(t3) {
              var e3 = this;
              this.hls = void 0, this.config = void 0, this.media = null, this.levelDetails = null, this.currentTime = 0, this.stallCount = 0, this._latency = null, this.timeupdateHandler = function() {
                return e3.timeupdate();
              }, this.hls = t3, this.config = t3.config, this.registerListeners();
            }
            var e2 = t2.prototype;
            return e2.destroy = function() {
              this.unregisterListeners(), this.onMediaDetaching(), this.levelDetails = null, this.hls = this.timeupdateHandler = null;
            }, e2.registerListeners = function() {
              this.hls.on(T2.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.on(T2.MEDIA_DETACHING, this.onMediaDetaching, this), this.hls.on(T2.MANIFEST_LOADING, this.onManifestLoading, this), this.hls.on(T2.LEVEL_UPDATED, this.onLevelUpdated, this), this.hls.on(T2.ERROR, this.onError, this);
            }, e2.unregisterListeners = function() {
              this.hls.off(T2.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.off(T2.MEDIA_DETACHING, this.onMediaDetaching, this), this.hls.off(T2.MANIFEST_LOADING, this.onManifestLoading, this), this.hls.off(T2.LEVEL_UPDATED, this.onLevelUpdated, this), this.hls.off(T2.ERROR, this.onError, this);
            }, e2.onMediaAttached = function(t3, e3) {
              this.media = e3.media, this.media.addEventListener("timeupdate", this.timeupdateHandler);
            }, e2.onMediaDetaching = function() {
              this.media && (this.media.removeEventListener("timeupdate", this.timeupdateHandler), this.media = null);
            }, e2.onManifestLoading = function() {
              this.levelDetails = null, this._latency = null, this.stallCount = 0;
            }, e2.onLevelUpdated = function(t3, e3) {
              var r3 = e3.details;
              this.levelDetails = r3, r3.advanced && this.timeupdate(), !r3.live && this.media && this.media.removeEventListener("timeupdate", this.timeupdateHandler);
            }, e2.onError = function(t3, e3) {
              var r3;
              e3.details === S3.BUFFER_STALLED_ERROR && (this.stallCount++, null != (r3 = this.levelDetails) && r3.live && D2.warn("[playback-rate-controller]: Stall detected, adjusting target latency"));
            }, e2.timeupdate = function() {
              var t3 = this.media, e3 = this.levelDetails;
              if (t3 && e3) {
                this.currentTime = t3.currentTime;
                var r3 = this.computeLatency();
                if (null !== r3) {
                  this._latency = r3;
                  var i4 = this.config, n3 = i4.lowLatencyMode, a2 = i4.maxLiveSyncPlaybackRate;
                  if (n3 && 1 !== a2) {
                    var s2 = this.targetLatency;
                    if (null !== s2) {
                      var o2 = r3 - s2, l4 = o2 < Math.min(this.maxLatency, s2 + e3.targetduration);
                      if (e3.live && l4 && o2 > 0.05 && this.forwardBufferLength > 1) {
                        var u3 = Math.min(2, Math.max(1, a2)), h4 = Math.round(2 / (1 + Math.exp(-0.75 * o2 - this.edgeStalled)) * 20) / 20;
                        t3.playbackRate = Math.min(u3, Math.max(1, h4));
                      } else
                        1 !== t3.playbackRate && 0 !== t3.playbackRate && (t3.playbackRate = 1);
                    }
                  }
                }
              }
            }, e2.estimateLiveEdge = function() {
              var t3 = this.levelDetails;
              return null === t3 ? null : t3.edge + t3.age;
            }, e2.computeLatency = function() {
              var t3 = this.estimateLiveEdge();
              return null === t3 ? null : t3 - this.currentTime;
            }, a(t2, [{ key: "latency", get: function() {
              return this._latency || 0;
            } }, { key: "maxLatency", get: function() {
              var t3 = this.config, e3 = this.levelDetails;
              return void 0 !== t3.liveMaxLatencyDuration ? t3.liveMaxLatencyDuration : e3 ? t3.liveMaxLatencyDurationCount * e3.targetduration : 0;
            } }, { key: "targetLatency", get: function() {
              var t3 = this.levelDetails;
              if (null === t3)
                return null;
              var e3 = t3.holdBack, r3 = t3.partHoldBack, i4 = t3.targetduration, n3 = this.config, a2 = n3.liveSyncDuration, s2 = n3.liveSyncDurationCount, o2 = n3.lowLatencyMode, l4 = this.hls.userConfig, u3 = o2 && r3 || e3;
              (l4.liveSyncDuration || l4.liveSyncDurationCount || 0 === u3) && (u3 = void 0 !== a2 ? a2 : s2 * i4);
              var h4 = i4;
              return u3 + Math.min(1 * this.stallCount, h4);
            } }, { key: "liveSyncPosition", get: function() {
              var t3 = this.estimateLiveEdge(), e3 = this.targetLatency, r3 = this.levelDetails;
              if (null === t3 || null === e3 || null === r3)
                return null;
              var i4 = r3.edge, n3 = t3 - e3 - this.edgeStalled, a2 = i4 - r3.totalduration, s2 = i4 - (this.config.lowLatencyMode && r3.partTarget || r3.targetduration);
              return Math.min(Math.max(a2, n3), s2);
            } }, { key: "drift", get: function() {
              var t3 = this.levelDetails;
              return null === t3 ? 1 : t3.drift;
            } }, { key: "edgeStalled", get: function() {
              var t3 = this.levelDetails;
              if (null === t3)
                return 0;
              var e3 = 3 * (this.config.lowLatencyMode && t3.partTarget || t3.targetduration);
              return Math.max(t3.age - e3, 0);
            } }, { key: "forwardBufferLength", get: function() {
              var t3 = this.media, e3 = this.levelDetails;
              if (!t3 || !e3)
                return 0;
              var r3 = t3.buffered.length;
              return (r3 ? t3.buffered.end(r3 - 1) : e3.edge) - this.currentTime;
            } }]), t2;
          }(), Ie2 = ["NONE", "TYPE-0", "TYPE-1", null], we2 = "", Ce3 = "YES", _e = "v2", Pe2 = function() {
            function t2(t3, e2, r3) {
              this.msn = void 0, this.part = void 0, this.skip = void 0, this.msn = t3, this.part = e2, this.skip = r3;
            }
            return t2.prototype.addDirectives = function(t3) {
              var e2 = new self.URL(t3);
              return void 0 !== this.msn && e2.searchParams.set("_HLS_msn", this.msn.toString()), void 0 !== this.part && e2.searchParams.set("_HLS_part", this.part.toString()), this.skip && e2.searchParams.set("_HLS_skip", this.skip), e2.href;
            }, t2;
          }(), xe2 = function() {
            function t2(t3) {
              this._attrs = void 0, this.audioCodec = void 0, this.bitrate = void 0, this.codecSet = void 0, this.height = void 0, this.id = void 0, this.name = void 0, this.videoCodec = void 0, this.width = void 0, this.unknownCodecs = void 0, this.audioGroupIds = void 0, this.details = void 0, this.fragmentError = 0, this.loadError = 0, this.loaded = void 0, this.realBitrate = 0, this.textGroupIds = void 0, this.url = void 0, this._urlId = 0, this.url = [t3.url], this._attrs = [t3.attrs], this.bitrate = t3.bitrate, t3.details && (this.details = t3.details), this.id = t3.id || 0, this.name = t3.name, this.width = t3.width || 0, this.height = t3.height || 0, this.audioCodec = t3.audioCodec, this.videoCodec = t3.videoCodec, this.unknownCodecs = t3.unknownCodecs, this.codecSet = [t3.videoCodec, t3.audioCodec].filter(function(t4) {
                return t4;
              }).join(",").replace(/\.[^.,]+/g, "");
            }
            return t2.prototype.addFallback = function(t3) {
              this.url.push(t3.url), this._attrs.push(t3.attrs);
            }, a(t2, [{ key: "maxBitrate", get: function() {
              return Math.max(this.realBitrate, this.bitrate);
            } }, { key: "attrs", get: function() {
              return this._attrs[this._urlId];
            } }, { key: "pathwayId", get: function() {
              return this.attrs["PATHWAY-ID"] || ".";
            } }, { key: "uri", get: function() {
              return this.url[this._urlId] || "";
            } }, { key: "urlId", get: function() {
              return this._urlId;
            }, set: function(t3) {
              var e2 = t3 % this.url.length;
              this._urlId !== e2 && (this.fragmentError = 0, this.loadError = 0, this.details = void 0, this._urlId = e2);
            } }, { key: "audioGroupId", get: function() {
              var t3;
              return null == (t3 = this.audioGroupIds) ? void 0 : t3[this.urlId];
            } }, { key: "textGroupId", get: function() {
              var t3;
              return null == (t3 = this.textGroupIds) ? void 0 : t3[this.urlId];
            } }]), t2;
          }();
          function Fe(t2, e2) {
            var r3 = e2.startPTS;
            if (y(r3)) {
              var i4, n3 = 0;
              e2.sn > t2.sn ? (n3 = r3 - t2.start, i4 = t2) : (n3 = t2.start - r3, i4 = e2), i4.duration !== n3 && (i4.duration = n3);
            } else
              e2.sn > t2.sn ? t2.cc === e2.cc && t2.minEndPTS ? e2.start = t2.start + (t2.minEndPTS - t2.start) : e2.start = t2.start + t2.duration : e2.start = Math.max(t2.start - e2.duration, 0);
          }
          function Oe3(t2, e2, r3, i4, n3, a2) {
            i4 - r3 <= 0 && (D2.warn("Fragment should have a positive duration", e2), i4 = r3 + e2.duration, a2 = n3 + e2.duration);
            var s2 = r3, o2 = i4, l4 = e2.startPTS, u3 = e2.endPTS;
            if (y(l4)) {
              var h4 = Math.abs(l4 - r3);
              y(e2.deltaPTS) ? e2.deltaPTS = Math.max(h4, e2.deltaPTS) : e2.deltaPTS = h4, s2 = Math.max(r3, l4), r3 = Math.min(r3, l4), n3 = Math.min(n3, e2.startDTS), o2 = Math.min(i4, u3), i4 = Math.max(i4, u3), a2 = Math.max(a2, e2.endDTS);
            }
            var d2 = r3 - e2.start;
            0 !== e2.start && (e2.start = r3), e2.duration = i4 - e2.start, e2.startPTS = r3, e2.maxStartPTS = s2, e2.startDTS = n3, e2.endPTS = i4, e2.minEndPTS = o2, e2.endDTS = a2;
            var c2, f3 = e2.sn;
            if (!t2 || f3 < t2.startSN || f3 > t2.endSN)
              return 0;
            var g3 = f3 - t2.startSN, v3 = t2.fragments;
            for (v3[g3] = e2, c2 = g3; c2 > 0; c2--)
              Fe(v3[c2], v3[c2 - 1]);
            for (c2 = g3; c2 < v3.length - 1; c2++)
              Fe(v3[c2], v3[c2 + 1]);
            return t2.fragmentHint && Fe(v3[v3.length - 1], t2.fragmentHint), t2.PTSKnown = t2.alignedSliding = true, d2;
          }
          function Me2(t2, e2) {
            for (var r3 = null, i4 = t2.fragments, n3 = i4.length - 1; n3 >= 0; n3--) {
              var a2 = i4[n3].initSegment;
              if (a2) {
                r3 = a2;
                break;
              }
            }
            t2.fragmentHint && delete t2.fragmentHint.endPTS;
            var s2, l4, u3, h4, d2, c2 = 0;
            if (function(t3, e3, r4) {
              for (var i5 = e3.skippedSegments, n4 = Math.max(t3.startSN, e3.startSN) - e3.startSN, a3 = (t3.fragmentHint ? 1 : 0) + (i5 ? e3.endSN : Math.min(t3.endSN, e3.endSN)) - e3.startSN, s3 = e3.startSN - t3.startSN, o2 = e3.fragmentHint ? e3.fragments.concat(e3.fragmentHint) : e3.fragments, l5 = t3.fragmentHint ? t3.fragments.concat(t3.fragmentHint) : t3.fragments, u4 = n4; u4 <= a3; u4++) {
                var h5 = l5[s3 + u4], d3 = o2[u4];
                i5 && !d3 && u4 < i5 && (d3 = e3.fragments[u4] = h5), h5 && d3 && r4(h5, d3);
              }
            }(t2, e2, function(t3, i5) {
              t3.relurl && (c2 = t3.cc - i5.cc), y(t3.startPTS) && y(t3.endPTS) && (i5.start = i5.startPTS = t3.startPTS, i5.startDTS = t3.startDTS, i5.maxStartPTS = t3.maxStartPTS, i5.endPTS = t3.endPTS, i5.endDTS = t3.endDTS, i5.minEndPTS = t3.minEndPTS, i5.duration = t3.endPTS - t3.startPTS, i5.duration && (s2 = i5), e2.PTSKnown = e2.alignedSliding = true), i5.elementaryStreams = t3.elementaryStreams, i5.loader = t3.loader, i5.stats = t3.stats, i5.urlId = t3.urlId, t3.initSegment && (i5.initSegment = t3.initSegment, r3 = t3.initSegment);
            }), r3 && (e2.fragmentHint ? e2.fragments.concat(e2.fragmentHint) : e2.fragments).forEach(function(t3) {
              var e3;
              t3.initSegment && t3.initSegment.relurl !== (null == (e3 = r3) ? void 0 : e3.relurl) || (t3.initSegment = r3);
            }), e2.skippedSegments)
              if (e2.deltaUpdateFailed = e2.fragments.some(function(t3) {
                return !t3;
              }), e2.deltaUpdateFailed) {
                D2.warn("[level-helper] Previous playlist missing segments skipped in delta playlist");
                for (var f3 = e2.skippedSegments; f3--; )
                  e2.fragments.shift();
                e2.startSN = e2.fragments[0].sn, e2.startCC = e2.fragments[0].cc;
              } else
                e2.canSkipDateRanges && (e2.dateRanges = (l4 = t2.dateRanges, u3 = e2.dateRanges, h4 = e2.recentlyRemovedDateranges, d2 = o({}, l4), h4 && h4.forEach(function(t3) {
                  delete d2[t3];
                }), Object.keys(u3).forEach(function(t3) {
                  var e3 = new P(u3[t3].attr, d2[t3]);
                  e3.isValid ? d2[t3] = e3 : D2.warn('Ignoring invalid Playlist Delta Update DATERANGE tag: "' + JSON.stringify(u3[t3].attr) + '"');
                }), d2));
            var g3 = e2.fragments;
            if (c2) {
              D2.warn("discontinuity sliding from playlist, take drift into account");
              for (var v3 = 0; v3 < g3.length; v3++)
                g3[v3].cc += c2;
            }
            e2.skippedSegments && (e2.startCC = e2.fragments[0].cc), function(t3, e3, r4) {
              if (t3 && e3)
                for (var i5 = 0, n4 = 0, a3 = t3.length; n4 <= a3; n4++) {
                  var s3 = t3[n4], o2 = e3[n4 + i5];
                  s3 && o2 && s3.index === o2.index && s3.fragment.sn === o2.fragment.sn ? r4(s3, o2) : i5--;
                }
            }(t2.partList, e2.partList, function(t3, e3) {
              e3.elementaryStreams = t3.elementaryStreams, e3.stats = t3.stats;
            }), s2 ? Oe3(e2, s2, s2.startPTS, s2.endPTS, s2.startDTS, s2.endDTS) : Ne(t2, e2), g3.length && (e2.totalduration = e2.edge - g3[0].start), e2.driftStartTime = t2.driftStartTime, e2.driftStart = t2.driftStart;
            var m3 = e2.advancedDateTime;
            if (e2.advanced && m3) {
              var p2 = e2.edge;
              e2.driftStart || (e2.driftStartTime = m3, e2.driftStart = p2), e2.driftEndTime = m3, e2.driftEnd = p2;
            } else
              e2.driftEndTime = t2.driftEndTime, e2.driftEnd = t2.driftEnd, e2.advancedDateTime = t2.advancedDateTime;
          }
          function Ne(t2, e2) {
            var r3 = e2.startSN + e2.skippedSegments - t2.startSN, i4 = t2.fragments;
            r3 < 0 || r3 >= i4.length || Ue3(e2, i4[r3].start);
          }
          function Ue3(t2, e2) {
            if (e2) {
              for (var r3 = t2.fragments, i4 = t2.skippedSegments; i4 < r3.length; i4++)
                r3[i4].start += e2;
              t2.fragmentHint && (t2.fragmentHint.start += e2);
            }
          }
          function Be2(t2, e2, r3) {
            var i4;
            return null != t2 && t2.details ? Ge2(null == (i4 = t2.details) ? void 0 : i4.partList, e2, r3) : null;
          }
          function Ge2(t2, e2, r3) {
            if (t2)
              for (var i4 = t2.length; i4--; ) {
                var n3 = t2[i4];
                if (n3.index === r3 && n3.fragment.sn === e2)
                  return n3;
              }
            return null;
          }
          function Ke(t2) {
            switch (t2.details) {
              case S3.FRAG_LOAD_TIMEOUT:
              case S3.KEY_LOAD_TIMEOUT:
              case S3.LEVEL_LOAD_TIMEOUT:
              case S3.MANIFEST_LOAD_TIMEOUT:
                return true;
            }
            return false;
          }
          function He2(t2, e2) {
            var r3 = Ke(e2);
            return t2.default[(r3 ? "timeout" : "error") + "Retry"];
          }
          function Ve(t2, e2) {
            var r3 = "linear" === t2.backoff ? 1 : Math.pow(2, e2);
            return Math.min(r3 * t2.retryDelayMs, t2.maxRetryDelayMs);
          }
          function Ye2(t2) {
            return i3(i3({}, t2), { errorRetry: null, timeoutRetry: null });
          }
          function We(t2, e2, r3, i4) {
            return !!t2 && e2 < t2.maxNumRetry && (function(t3) {
              return 0 === t3 && false === navigator.onLine || !!t3 && (t3 < 400 || t3 > 499);
            }(i4) || !!r3);
          }
          var je = function(t2, e2) {
            for (var r3 = 0, i4 = t2.length - 1, n3 = null, a2 = null; r3 <= i4; ) {
              var s2 = e2(a2 = t2[n3 = (r3 + i4) / 2 | 0]);
              if (s2 > 0)
                r3 = n3 + 1;
              else {
                if (!(s2 < 0))
                  return a2;
                i4 = n3 - 1;
              }
            }
            return null;
          };
          function qe(t2, e2, r3, i4) {
            void 0 === r3 && (r3 = 0), void 0 === i4 && (i4 = 0);
            var n3 = null;
            if (t2 ? n3 = e2[t2.sn - e2[0].sn + 1] || null : 0 === r3 && 0 === e2[0].start && (n3 = e2[0]), n3 && 0 === Xe2(r3, i4, n3))
              return n3;
            var a2 = je(e2, Xe2.bind(null, r3, i4));
            return !a2 || a2 === t2 && n3 ? n3 : a2;
          }
          function Xe2(t2, e2, r3) {
            if (void 0 === t2 && (t2 = 0), void 0 === e2 && (e2 = 0), r3.start <= t2 && r3.start + r3.duration > t2)
              return 0;
            var i4 = Math.min(e2, r3.duration + (r3.deltaPTS ? r3.deltaPTS : 0));
            return r3.start + r3.duration - i4 <= t2 ? 1 : r3.start - i4 > t2 && r3.start ? -1 : 0;
          }
          function ze2(t2, e2, r3) {
            var i4 = 1e3 * Math.min(e2, r3.duration + (r3.deltaPTS ? r3.deltaPTS : 0));
            return (r3.endProgramDateTime || 0) - i4 > t2;
          }
          var Qe2, $e2 = 3e5, Je2 = 0, Ze = 2, tr = 5, er = 0, rr = 1, ir = 2, nr = function() {
            function t2(t3) {
              this.hls = void 0, this.playlistError = 0, this.penalizedRenditions = {}, this.log = void 0, this.warn = void 0, this.error = void 0, this.hls = t3, this.log = D2.log.bind(D2, "[info]:"), this.warn = D2.warn.bind(D2, "[warning]:"), this.error = D2.error.bind(D2, "[error]:"), this.registerListeners();
            }
            var e2 = t2.prototype;
            return e2.registerListeners = function() {
              var t3 = this.hls;
              t3.on(T2.ERROR, this.onError, this), t3.on(T2.MANIFEST_LOADING, this.onManifestLoading, this);
            }, e2.unregisterListeners = function() {
              var t3 = this.hls;
              t3 && (t3.off(T2.ERROR, this.onError, this), t3.off(T2.ERROR, this.onErrorOut, this), t3.off(T2.MANIFEST_LOADING, this.onManifestLoading, this));
            }, e2.destroy = function() {
              this.unregisterListeners(), this.hls = null, this.penalizedRenditions = {};
            }, e2.startLoad = function(t3) {
              this.playlistError = 0;
            }, e2.stopLoad = function() {
            }, e2.getVariantLevelIndex = function(t3) {
              return (null == t3 ? void 0 : t3.type) === he2 ? t3.level : this.hls.loadLevel;
            }, e2.onManifestLoading = function() {
              this.playlistError = 0, this.penalizedRenditions = {};
            }, e2.onError = function(t3, e3) {
              var r3;
              if (!e3.fatal) {
                var i4 = this.hls, n3 = e3.context;
                switch (e3.details) {
                  case S3.FRAG_LOAD_ERROR:
                  case S3.FRAG_LOAD_TIMEOUT:
                  case S3.KEY_LOAD_ERROR:
                  case S3.KEY_LOAD_TIMEOUT:
                    return void (e3.errorAction = this.getFragRetryOrSwitchAction(e3));
                  case S3.FRAG_GAP:
                  case S3.FRAG_PARSING_ERROR:
                  case S3.FRAG_DECRYPT_ERROR:
                    return e3.errorAction = this.getFragRetryOrSwitchAction(e3), void (e3.errorAction.action = Ze);
                  case S3.LEVEL_EMPTY_ERROR:
                  case S3.LEVEL_PARSING_ERROR:
                    var a2, s2, o2 = e3.parent === he2 ? e3.level : i4.loadLevel;
                    return void (e3.details === S3.LEVEL_EMPTY_ERROR && null != (a2 = e3.context) && null != (s2 = a2.levelDetails) && s2.live ? e3.errorAction = this.getPlaylistRetryOrSwitchAction(e3, o2) : (e3.levelRetry = false, e3.errorAction = this.getLevelSwitchAction(e3, o2)));
                  case S3.LEVEL_LOAD_ERROR:
                  case S3.LEVEL_LOAD_TIMEOUT:
                    return void ("number" == typeof (null == n3 ? void 0 : n3.level) && (e3.errorAction = this.getPlaylistRetryOrSwitchAction(e3, n3.level)));
                  case S3.AUDIO_TRACK_LOAD_ERROR:
                  case S3.AUDIO_TRACK_LOAD_TIMEOUT:
                  case S3.SUBTITLE_LOAD_ERROR:
                  case S3.SUBTITLE_TRACK_LOAD_TIMEOUT:
                    if (n3) {
                      var l4 = i4.levels[i4.loadLevel];
                      if (l4 && (n3.type === le2 && n3.groupId === l4.audioGroupId || n3.type === ue2 && n3.groupId === l4.textGroupId))
                        return e3.errorAction = this.getPlaylistRetryOrSwitchAction(e3, i4.loadLevel), e3.errorAction.action = Ze, void (e3.errorAction.flags = rr);
                    }
                    return;
                  case S3.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED:
                    var u3 = i4.levels[i4.loadLevel], h4 = null == u3 ? void 0 : u3.attrs["HDCP-LEVEL"];
                    return void (h4 && (e3.errorAction = { action: Ze, flags: ir, hdcpLevel: h4 }));
                  case S3.BUFFER_ADD_CODEC_ERROR:
                  case S3.REMUX_ALLOC_ERROR:
                    return void (e3.errorAction = this.getLevelSwitchAction(e3, null != (r3 = e3.level) ? r3 : i4.loadLevel));
                  case S3.INTERNAL_EXCEPTION:
                  case S3.BUFFER_APPENDING_ERROR:
                  case S3.BUFFER_APPEND_ERROR:
                  case S3.BUFFER_FULL_ERROR:
                  case S3.LEVEL_SWITCH_ERROR:
                  case S3.BUFFER_STALLED_ERROR:
                  case S3.BUFFER_SEEK_OVER_HOLE:
                  case S3.BUFFER_NUDGE_ON_STALL:
                    return void (e3.errorAction = { action: Je2, flags: er });
                }
                if (e3.type === E.KEY_SYSTEM_ERROR) {
                  var d2 = this.getVariantLevelIndex(e3.frag);
                  return e3.levelRetry = false, void (e3.errorAction = this.getLevelSwitchAction(e3, d2));
                }
              }
            }, e2.getPlaylistRetryOrSwitchAction = function(t3, e3) {
              var r3, i4, n3 = He2(this.hls.config.playlistLoadPolicy, t3), a2 = this.playlistError++, s2 = null == (r3 = t3.response) ? void 0 : r3.code;
              return We(n3, a2, Ke(t3), s2) ? { action: tr, flags: er, retryConfig: n3, retryCount: a2 } : null != (i4 = t3.context) && i4.deliveryDirectives ? { action: Je2, flags: er, retryConfig: n3 || { maxNumRetry: 0, retryDelayMs: 0, maxRetryDelayMs: 0 }, retryCount: a2 } : this.getLevelSwitchAction(t3, e3);
            }, e2.getFragRetryOrSwitchAction = function(t3) {
              var e3 = this.hls, r3 = this.getVariantLevelIndex(t3.frag), i4 = e3.levels[r3], n3 = e3.config, a2 = n3.fragLoadPolicy, s2 = n3.keyLoadPolicy, o2 = He2(t3.details.startsWith("key") ? s2 : a2, t3), l4 = e3.levels.reduce(function(t4, e4) {
                return t4 + e4.fragmentError;
              }, 0);
              if (i4) {
                var u3;
                t3.details !== S3.FRAG_GAP && i4.fragmentError++;
                var h4 = null == (u3 = t3.response) ? void 0 : u3.code;
                if (We(o2, l4, Ke(t3), h4))
                  return { action: tr, flags: er, retryConfig: o2, retryCount: l4 };
              }
              var d2 = this.getLevelSwitchAction(t3, r3);
              return o2 && (d2.retryConfig = o2, d2.retryCount = l4), d2;
            }, e2.getLevelSwitchAction = function(t3, e3) {
              var r3 = this.hls;
              null == e3 && (e3 = r3.loadLevel);
              var i4 = this.hls.levels[e3];
              if (i4 && (i4.loadError++, r3.autoLevelEnabled)) {
                for (var n3, a2, s2 = -1, o2 = r3.levels, l4 = null == (n3 = t3.frag) ? void 0 : n3.type, u3 = null != (a2 = t3.context) ? a2 : {}, h4 = u3.type, d2 = u3.groupId, c2 = o2.length; c2--; ) {
                  var f3 = (c2 + r3.loadLevel) % o2.length;
                  if (f3 !== r3.loadLevel && 0 === o2[f3].loadError) {
                    var g3 = o2[f3];
                    if (t3.details === S3.FRAG_GAP && t3.frag) {
                      var v3 = o2[f3].details;
                      if (v3) {
                        var m3 = qe(t3.frag, v3.fragments, t3.frag.start);
                        if (null != m3 && m3.gap)
                          continue;
                      }
                    } else {
                      if (h4 === le2 && d2 === g3.audioGroupId || h4 === ue2 && d2 === g3.textGroupId)
                        continue;
                      if (l4 === de2 && i4.audioGroupId === g3.audioGroupId || l4 === ce2 && i4.textGroupId === g3.textGroupId)
                        continue;
                    }
                    s2 = f3;
                    break;
                  }
                }
                if (s2 > -1 && r3.loadLevel !== s2)
                  return t3.levelRetry = true, { action: Ze, flags: er, nextAutoLevel: s2 };
              }
              return { action: Ze, flags: rr };
            }, e2.onErrorOut = function(t3, e3) {
              var r3;
              switch (null == (r3 = e3.errorAction) ? void 0 : r3.action) {
                case Je2:
                  break;
                case Ze:
                  this.sendAlternateToPenaltyBox(e3), e3.errorAction.resolved || e3.details === S3.FRAG_GAP || (e3.fatal = true);
              }
              e3.fatal && this.hls.stopLoad();
            }, e2.sendAlternateToPenaltyBox = function(t3) {
              var e3 = this.hls, r3 = t3.errorAction;
              if (r3) {
                var i4 = r3.flags, n3 = r3.hdcpLevel, a2 = r3.nextAutoLevel;
                switch (i4) {
                  case er:
                    this.switchLevel(t3, a2);
                    break;
                  case rr:
                    r3.resolved || (r3.resolved = this.redundantFailover(t3));
                    break;
                  case ir:
                    n3 && (e3.maxHdcpLevel = Ie2[Ie2.indexOf(n3) - 1], r3.resolved = true), this.warn('Restricting playback to HDCP-LEVEL of "' + e3.maxHdcpLevel + '" or lower');
                }
                r3.resolved || this.switchLevel(t3, a2);
              }
            }, e2.switchLevel = function(t3, e3) {
              void 0 !== e3 && t3.errorAction && (this.warn("switching to level " + e3 + " after " + t3.details), this.hls.nextAutoLevel = e3, t3.errorAction.resolved = true, this.hls.nextLoadLevel = this.hls.nextAutoLevel);
            }, e2.redundantFailover = function(t3) {
              var e3 = this, r3 = this.hls, i4 = this.penalizedRenditions, n3 = t3.parent === he2 ? t3.level : r3.loadLevel, a2 = r3.levels[n3], s2 = a2.url.length, o2 = t3.frag ? t3.frag.urlId : a2.urlId;
              a2.urlId !== o2 || t3.frag && !a2.details || this.penalizeRendition(a2, t3);
              for (var l4 = function() {
                var l5 = (o2 + u3) % s2, h5 = i4[l5];
                if (!h5 || function(t4, e4, r4) {
                  if (performance.now() - t4.lastErrorPerfMs > $e2)
                    return true;
                  var i5 = t4.details;
                  if (e4.details === S3.FRAG_GAP && i5 && e4.frag) {
                    var n4 = e4.frag.start, a3 = qe(null, i5.fragments, n4);
                    if (a3 && !a3.gap)
                      return true;
                  }
                  if (r4 && t4.errors.length < r4.errors.length) {
                    var s3 = t4.errors[t4.errors.length - 1];
                    if (i5 && s3.frag && e4.frag && Math.abs(s3.frag.start - e4.frag.start) > 3 * i5.targetduration)
                      return true;
                  }
                  return false;
                }(h5, t3, i4[o2]))
                  return e3.warn("Switching to Redundant Stream " + (l5 + 1) + "/" + s2 + ': "' + a2.url[l5] + '" after ' + t3.details), e3.playlistError = 0, r3.levels.forEach(function(t4) {
                    t4.urlId = l5;
                  }), r3.nextLoadLevel = n3, { v: true };
              }, u3 = 1; u3 < s2; u3++) {
                var h4 = l4();
                if ("object" == typeof h4)
                  return h4.v;
              }
              return false;
            }, e2.penalizeRendition = function(t3, e3) {
              var r3 = this.penalizedRenditions, i4 = r3[t3.urlId] || { lastErrorPerfMs: 0, errors: [], details: void 0 };
              i4.lastErrorPerfMs = performance.now(), i4.errors.push(e3), i4.details = t3.details, r3[t3.urlId] = i4;
            }, t2;
          }(), ar = function() {
            function t2(t3, e3) {
              this.hls = void 0, this.timer = -1, this.requestScheduled = -1, this.canLoad = false, this.log = void 0, this.warn = void 0, this.log = D2.log.bind(D2, e3 + ":"), this.warn = D2.warn.bind(D2, e3 + ":"), this.hls = t3;
            }
            var e2 = t2.prototype;
            return e2.destroy = function() {
              this.clearTimer(), this.hls = this.log = this.warn = null;
            }, e2.clearTimer = function() {
              clearTimeout(this.timer), this.timer = -1;
            }, e2.startLoad = function() {
              this.canLoad = true, this.requestScheduled = -1, this.loadPlaylist();
            }, e2.stopLoad = function() {
              this.canLoad = false, this.clearTimer();
            }, e2.switchParams = function(t3, e3) {
              var r3 = null == e3 ? void 0 : e3.renditionReports;
              if (r3) {
                for (var i4 = -1, n3 = 0; n3 < r3.length; n3++) {
                  var a2 = r3[n3], s2 = void 0;
                  try {
                    s2 = new self.URL(a2.URI, e3.url).href;
                  } catch (t4) {
                    D2.warn("Could not construct new URL for Rendition Report: " + t4), s2 = a2.URI || "";
                  }
                  if (s2 === t3) {
                    i4 = n3;
                    break;
                  }
                  s2 === t3.substring(0, s2.length) && (i4 = n3);
                }
                if (-1 !== i4) {
                  var o2 = r3[i4], l4 = parseInt(o2["LAST-MSN"]) || (null == e3 ? void 0 : e3.lastPartSn), u3 = parseInt(o2["LAST-PART"]) || (null == e3 ? void 0 : e3.lastPartIndex);
                  if (this.hls.config.lowLatencyMode) {
                    var h4 = Math.min(e3.age - e3.partTarget, e3.targetduration);
                    u3 >= 0 && h4 > e3.partTarget && (u3 += 1);
                  }
                  return new Pe2(l4, u3 >= 0 ? u3 : void 0, we2);
                }
              }
            }, e2.loadPlaylist = function(t3) {
              -1 === this.requestScheduled && (this.requestScheduled = self.performance.now());
            }, e2.shouldLoadPlaylist = function(t3) {
              return this.canLoad && !!t3 && !!t3.url && (!t3.details || t3.details.live);
            }, e2.shouldReloadPlaylist = function(t3) {
              return -1 === this.timer && -1 === this.requestScheduled && this.shouldLoadPlaylist(t3);
            }, e2.playlistLoaded = function(t3, e3, r3) {
              var i4 = this, n3 = e3.details, a2 = e3.stats, s2 = self.performance.now(), o2 = a2.loading.first ? Math.max(0, s2 - a2.loading.first) : 0;
              if (n3.advancedDateTime = Date.now() - o2, n3.live || null != r3 && r3.live) {
                if (n3.reloaded(r3), r3 && this.log("live playlist " + t3 + " " + (n3.advanced ? "REFRESHED " + n3.lastPartSn + "-" + n3.lastPartIndex : "MISSED")), r3 && n3.fragments.length > 0 && Me2(r3, n3), !this.canLoad || !n3.live)
                  return;
                var l4, u3 = void 0, h4 = void 0;
                if (n3.canBlockReload && n3.endSN && n3.advanced) {
                  var d2 = this.hls.config.lowLatencyMode, c2 = n3.lastPartSn, f3 = n3.endSN, g3 = n3.lastPartIndex, v3 = c2 === f3;
                  -1 !== g3 ? (u3 = v3 ? f3 + 1 : c2, h4 = v3 ? d2 ? 0 : g3 : g3 + 1) : u3 = f3 + 1;
                  var m3 = n3.age, p2 = m3 + n3.ageHeader, y2 = Math.min(p2 - n3.partTarget, 1.5 * n3.targetduration);
                  if (y2 > 0) {
                    if (r3 && y2 > r3.tuneInGoal)
                      this.warn("CDN Tune-in goal increased from: " + r3.tuneInGoal + " to: " + y2 + " with playlist age: " + n3.age), y2 = 0;
                    else {
                      var T3 = Math.floor(y2 / n3.targetduration);
                      u3 += T3, void 0 !== h4 && (h4 += Math.round(y2 % n3.targetduration / n3.partTarget)), this.log("CDN Tune-in age: " + n3.ageHeader + "s last advanced " + m3.toFixed(2) + "s goal: " + y2 + " skip sn " + T3 + " to part " + h4);
                    }
                    n3.tuneInGoal = y2;
                  }
                  if (l4 = this.getDeliveryDirectives(n3, e3.deliveryDirectives, u3, h4), d2 || !v3)
                    return void this.loadPlaylist(l4);
                } else
                  n3.canBlockReload && (l4 = this.getDeliveryDirectives(n3, e3.deliveryDirectives, u3, h4));
                var E2 = this.hls.mainForwardBufferInfo, S4 = E2 ? E2.end - E2.len : 0, L3 = function(t4, e4) {
                  void 0 === e4 && (e4 = 1 / 0);
                  var r4 = 1e3 * t4.targetduration;
                  if (t4.updated) {
                    var i5 = t4.fragments;
                    if (i5.length && 4 * r4 > e4) {
                      var n4 = 1e3 * i5[i5.length - 1].duration;
                      n4 < r4 && (r4 = n4);
                    }
                  } else
                    r4 /= 2;
                  return Math.round(r4);
                }(n3, 1e3 * (n3.edge - S4));
                n3.updated && s2 > this.requestScheduled + L3 && (this.requestScheduled = a2.loading.start), void 0 !== u3 && n3.canBlockReload ? this.requestScheduled = a2.loading.first + L3 - (1e3 * n3.partTarget || 1e3) : -1 === this.requestScheduled || this.requestScheduled + L3 < s2 ? this.requestScheduled = s2 : this.requestScheduled - s2 <= 0 && (this.requestScheduled += L3);
                var R3 = this.requestScheduled - s2;
                R3 = Math.max(0, R3), this.log("reload live playlist " + t3 + " in " + Math.round(R3) + " ms"), this.timer = self.setTimeout(function() {
                  return i4.loadPlaylist(l4);
                }, R3);
              } else
                this.clearTimer();
            }, e2.getDeliveryDirectives = function(t3, e3, r3, i4) {
              var n3 = function(t4, e4) {
                var r4 = t4.canSkipUntil, i5 = t4.canSkipDateRanges, n4 = t4.endSN;
                return r4 && (void 0 !== e4 ? e4 - n4 : 0) < r4 ? i5 ? _e : Ce3 : we2;
              }(t3, r3);
              return null != e3 && e3.skip && t3.deltaUpdateFailed && (r3 = e3.msn, i4 = e3.part, n3 = we2), new Pe2(r3, i4, n3);
            }, e2.checkRetry = function(t3) {
              var e3 = this, r3 = t3.details, i4 = Ke(t3), n3 = t3.errorAction, a2 = n3 || {}, s2 = a2.action, o2 = a2.retryCount, l4 = void 0 === o2 ? 0 : o2, u3 = a2.retryConfig, h4 = s2 === tr && !!n3 && !!u3;
              if (h4) {
                var d2;
                if (this.requestScheduled = -1, i4 && null != (d2 = t3.context) && d2.deliveryDirectives)
                  this.warn("Retrying playlist loading " + (l4 + 1) + "/" + u3.maxNumRetry + ' after "' + r3 + '" without delivery-directives'), this.loadPlaylist();
                else {
                  var c2 = Ve(u3, l4);
                  this.timer = self.setTimeout(function() {
                    return e3.loadPlaylist();
                  }, c2), this.warn("Retrying playlist loading " + (l4 + 1) + "/" + u3.maxNumRetry + ' after "' + r3 + '" in ' + c2 + "ms");
                }
                t3.levelRetry = true, n3.resolved = true;
              }
              return h4;
            }, t2;
          }(), sr = function(t2) {
            function e2(e3, r4) {
              var i4;
              return (i4 = t2.call(this, e3, "[level-controller]") || this)._levels = [], i4._firstLevel = -1, i4._startLevel = void 0, i4.currentLevel = null, i4.currentLevelIndex = -1, i4.manualLevelIndex = -1, i4.steering = void 0, i4.onParsedComplete = void 0, i4.steering = r4, i4._registerListeners(), i4;
            }
            l3(e2, t2);
            var r3 = e2.prototype;
            return r3._registerListeners = function() {
              var t3 = this.hls;
              t3.on(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.on(T2.MANIFEST_LOADED, this.onManifestLoaded, this), t3.on(T2.LEVEL_LOADED, this.onLevelLoaded, this), t3.on(T2.LEVELS_UPDATED, this.onLevelsUpdated, this), t3.on(T2.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), t3.on(T2.FRAG_LOADED, this.onFragLoaded, this), t3.on(T2.ERROR, this.onError, this);
            }, r3._unregisterListeners = function() {
              var t3 = this.hls;
              t3.off(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.off(T2.MANIFEST_LOADED, this.onManifestLoaded, this), t3.off(T2.LEVEL_LOADED, this.onLevelLoaded, this), t3.off(T2.LEVELS_UPDATED, this.onLevelsUpdated, this), t3.off(T2.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), t3.off(T2.FRAG_LOADED, this.onFragLoaded, this), t3.off(T2.ERROR, this.onError, this);
            }, r3.destroy = function() {
              this._unregisterListeners(), this.steering = null, this.resetLevels(), t2.prototype.destroy.call(this);
            }, r3.startLoad = function() {
              this._levels.forEach(function(t3) {
                t3.loadError = 0, t3.fragmentError = 0;
              }), t2.prototype.startLoad.call(this);
            }, r3.resetLevels = function() {
              this._startLevel = void 0, this.manualLevelIndex = -1, this.currentLevelIndex = -1, this.currentLevel = null, this._levels = [];
            }, r3.onManifestLoading = function(t3, e3) {
              this.resetLevels();
            }, r3.onManifestLoaded = function(t3, e3) {
              var r4, i4 = [], n3 = {};
              e3.levels.forEach(function(t4) {
                var e4, a2 = t4.attrs;
                -1 !== (null == (e4 = t4.audioCodec) ? void 0 : e4.indexOf("mp4a.40.34")) && (Qe2 || (Qe2 = /chrome|firefox/i.test(navigator.userAgent)), Qe2 && (t4.audioCodec = void 0));
                var s2 = a2.AUDIO, o2 = a2.CODECS, l4 = a2["FRAME-RATE"], u3 = a2["PATHWAY-ID"], h4 = a2.RESOLUTION, d2 = a2.SUBTITLES, c2 = (u3 || ".") + "-" + t4.bitrate + "-" + h4 + "-" + l4 + "-" + o2;
                (r4 = n3[c2]) ? r4.addFallback(t4) : (r4 = new xe2(t4), n3[c2] = r4, i4.push(r4)), or(r4, "audio", s2), or(r4, "text", d2);
              }), this.filterAndSortMediaOptions(i4, e3);
            }, r3.filterAndSortMediaOptions = function(t3, e3) {
              var r4 = this, i4 = [], n3 = [], a2 = false, s2 = false, o2 = false, l4 = t3.filter(function(t4) {
                var e4 = t4.audioCodec, r5 = t4.videoCodec, i5 = t4.width, n4 = t4.height, l5 = t4.unknownCodecs;
                return a2 || (a2 = !(!i5 || !n4)), s2 || (s2 = !!r5), o2 || (o2 = !!e4), !(null != l5 && l5.length) && (!e4 || jt(e4, "audio")) && (!r5 || jt(r5, "video"));
              });
              if ((a2 || s2) && o2 && (l4 = l4.filter(function(t4) {
                var e4 = t4.videoCodec, r5 = t4.width, i5 = t4.height;
                return !!e4 || !(!r5 || !i5);
              })), 0 !== l4.length) {
                e3.audioTracks && lr(i4 = e3.audioTracks.filter(function(t4) {
                  return !t4.audioCodec || jt(t4.audioCodec, "audio");
                })), e3.subtitles && lr(n3 = e3.subtitles);
                var u3 = l4.slice(0);
                l4.sort(function(t4, e4) {
                  return t4.attrs["HDCP-LEVEL"] !== e4.attrs["HDCP-LEVEL"] ? (t4.attrs["HDCP-LEVEL"] || "") > (e4.attrs["HDCP-LEVEL"] || "") ? 1 : -1 : t4.bitrate !== e4.bitrate ? t4.bitrate - e4.bitrate : t4.attrs["FRAME-RATE"] !== e4.attrs["FRAME-RATE"] ? t4.attrs.decimalFloatingPoint("FRAME-RATE") - e4.attrs.decimalFloatingPoint("FRAME-RATE") : t4.attrs.SCORE !== e4.attrs.SCORE ? t4.attrs.decimalFloatingPoint("SCORE") - e4.attrs.decimalFloatingPoint("SCORE") : a2 && t4.height !== e4.height ? t4.height - e4.height : 0;
                });
                var h4 = u3[0];
                if (this.steering && (l4 = this.steering.filterParsedLevels(l4)).length !== u3.length) {
                  for (var d2 = 0; d2 < u3.length; d2++)
                    if (u3[d2].pathwayId === l4[0].pathwayId) {
                      h4 = u3[d2];
                      break;
                    }
                }
                this._levels = l4;
                for (var c2 = 0; c2 < l4.length; c2++)
                  if (l4[c2] === h4) {
                    this._firstLevel = c2, this.log("manifest loaded, " + l4.length + " level(s) found, first bitrate: " + h4.bitrate);
                    break;
                  }
                var f3 = o2 && !s2, g3 = { levels: l4, audioTracks: i4, subtitleTracks: n3, sessionData: e3.sessionData, sessionKeys: e3.sessionKeys, firstLevel: this._firstLevel, stats: e3.stats, audio: o2, video: s2, altAudio: !f3 && i4.some(function(t4) {
                  return !!t4.url;
                }) };
                this.hls.trigger(T2.MANIFEST_PARSED, g3), (this.hls.config.autoStartLoad || this.hls.forceStartLoad) && this.hls.startLoad(this.hls.config.startPosition);
              } else
                Promise.resolve().then(function() {
                  if (r4.hls) {
                    var t4 = new Error("no level with compatible codecs found in manifest");
                    r4.hls.trigger(T2.ERROR, { type: E.MEDIA_ERROR, details: S3.MANIFEST_INCOMPATIBLE_CODECS_ERROR, fatal: true, url: e3.url, error: t4, reason: t4.message });
                  }
                });
            }, r3.onError = function(t3, e3) {
              !e3.fatal && e3.context && e3.context.type === oe2 && e3.context.level === this.level && this.checkRetry(e3);
            }, r3.onFragLoaded = function(t3, e3) {
              var r4 = e3.frag;
              if (void 0 !== r4 && r4.type === he2) {
                var i4 = this._levels[r4.level];
                void 0 !== i4 && (i4.loadError = 0);
              }
            }, r3.onLevelLoaded = function(t3, e3) {
              var r4, i4, n3 = e3.level, a2 = e3.details, s2 = this._levels[n3];
              if (!s2)
                return this.warn("Invalid level index " + n3), void (null != (i4 = e3.deliveryDirectives) && i4.skip && (a2.deltaUpdateFailed = true));
              n3 === this.currentLevelIndex ? (0 === s2.fragmentError && (s2.loadError = 0), this.playlistLoaded(n3, e3, s2.details)) : null != (r4 = e3.deliveryDirectives) && r4.skip && (a2.deltaUpdateFailed = true);
            }, r3.onAudioTrackSwitched = function(t3, e3) {
              var r4 = this.currentLevel;
              if (r4) {
                var i4 = this.hls.audioTracks[e3.id].groupId;
                if (r4.audioGroupIds && r4.audioGroupId !== i4) {
                  for (var n3 = -1, a2 = 0; a2 < r4.audioGroupIds.length; a2++)
                    if (r4.audioGroupIds[a2] === i4) {
                      n3 = a2;
                      break;
                    }
                  -1 !== n3 && n3 !== r4.urlId && (r4.urlId = n3, this.canLoad && this.startLoad());
                }
              }
            }, r3.loadPlaylist = function(e3) {
              t2.prototype.loadPlaylist.call(this);
              var r4 = this.currentLevelIndex, i4 = this.currentLevel;
              if (i4 && this.shouldLoadPlaylist(i4)) {
                var n3 = i4.urlId, a2 = i4.uri;
                if (e3)
                  try {
                    a2 = e3.addDirectives(a2);
                  } catch (t3) {
                    this.warn("Could not construct new URL with HLS Delivery Directives: " + t3);
                  }
                var s2 = i4.attrs["PATHWAY-ID"];
                this.log("Loading level index " + r4 + (void 0 !== (null == e3 ? void 0 : e3.msn) ? " at sn " + e3.msn + " part " + e3.part : "") + " with" + (s2 ? " Pathway " + s2 : "") + " URI " + (n3 + 1) + "/" + i4.url.length + " " + a2), this.clearTimer(), this.hls.trigger(T2.LEVEL_LOADING, { url: a2, level: r4, id: n3, deliveryDirectives: e3 || null });
              }
            }, r3.removeLevel = function(t3, e3) {
              var r4 = this, i4 = function(t4, r5) {
                return r5 !== e3;
              }, n3 = this._levels.filter(function(n4, a2) {
                return a2 !== t3 || (n4.url.length > 1 && void 0 !== e3 ? (n4.url = n4.url.filter(i4), n4.audioGroupIds && (n4.audioGroupIds = n4.audioGroupIds.filter(i4)), n4.textGroupIds && (n4.textGroupIds = n4.textGroupIds.filter(i4)), n4.urlId = 0, true) : (r4.steering && r4.steering.removeLevel(n4), false));
              });
              this.hls.trigger(T2.LEVELS_UPDATED, { levels: n3 });
            }, r3.onLevelsUpdated = function(t3, e3) {
              var r4 = e3.levels;
              r4.forEach(function(t4, e4) {
                var r5 = t4.details;
                null != r5 && r5.fragments && r5.fragments.forEach(function(t5) {
                  t5.level = e4;
                });
              }), this._levels = r4;
            }, a(e2, [{ key: "levels", get: function() {
              return 0 === this._levels.length ? null : this._levels;
            } }, { key: "level", get: function() {
              return this.currentLevelIndex;
            }, set: function(t3) {
              var e3 = this._levels;
              if (0 !== e3.length) {
                if (t3 < 0 || t3 >= e3.length) {
                  var r4 = new Error("invalid level idx"), i4 = t3 < 0;
                  if (this.hls.trigger(T2.ERROR, { type: E.OTHER_ERROR, details: S3.LEVEL_SWITCH_ERROR, level: t3, fatal: i4, error: r4, reason: r4.message }), i4)
                    return;
                  t3 = Math.min(t3, e3.length - 1);
                }
                var n3 = this.currentLevelIndex, a2 = this.currentLevel, s2 = a2 ? a2.attrs["PATHWAY-ID"] : void 0, l4 = e3[t3], u3 = l4.attrs["PATHWAY-ID"];
                if (this.currentLevelIndex = t3, this.currentLevel = l4, n3 !== t3 || !l4.details || !a2 || s2 !== u3) {
                  this.log("Switching to level " + t3 + (u3 ? " with Pathway " + u3 : "") + " from level " + n3 + (s2 ? " with Pathway " + s2 : ""));
                  var h4 = o({}, l4, { level: t3, maxBitrate: l4.maxBitrate, attrs: l4.attrs, uri: l4.uri, urlId: l4.urlId });
                  delete h4._attrs, delete h4._urlId, this.hls.trigger(T2.LEVEL_SWITCHING, h4);
                  var d2 = l4.details;
                  if (!d2 || d2.live) {
                    var c2 = this.switchParams(l4.uri, null == a2 ? void 0 : a2.details);
                    this.loadPlaylist(c2);
                  }
                }
              }
            } }, { key: "manualLevel", get: function() {
              return this.manualLevelIndex;
            }, set: function(t3) {
              this.manualLevelIndex = t3, void 0 === this._startLevel && (this._startLevel = t3), -1 !== t3 && (this.level = t3);
            } }, { key: "firstLevel", get: function() {
              return this._firstLevel;
            }, set: function(t3) {
              this._firstLevel = t3;
            } }, { key: "startLevel", get: function() {
              if (void 0 === this._startLevel) {
                var t3 = this.hls.config.startLevel;
                return void 0 !== t3 ? t3 : this._firstLevel;
              }
              return this._startLevel;
            }, set: function(t3) {
              this._startLevel = t3;
            } }, { key: "nextLoadLevel", get: function() {
              return -1 !== this.manualLevelIndex ? this.manualLevelIndex : this.hls.nextAutoLevel;
            }, set: function(t3) {
              this.level = t3, -1 === this.manualLevelIndex && (this.hls.nextAutoLevel = t3);
            } }]), e2;
          }(ar);
          function or(t2, e2, r3) {
            r3 && ("audio" === e2 ? (t2.audioGroupIds || (t2.audioGroupIds = []), t2.audioGroupIds[t2.url.length - 1] = r3) : "text" === e2 && (t2.textGroupIds || (t2.textGroupIds = []), t2.textGroupIds[t2.url.length - 1] = r3));
          }
          function lr(t2) {
            var e2 = {};
            t2.forEach(function(t3) {
              var r3 = t3.groupId || "";
              t3.id = e2[r3] = e2[r3] || 0, e2[r3]++;
            });
          }
          var ur = "NOT_LOADED", hr = "APPENDING", dr = "PARTIAL", cr = "OK", fr = function() {
            function t2(t3) {
              this.mainFragEntity = null, this.activeParts = null, this.endListFragments = /* @__PURE__ */ Object.create(null), this.fragments = /* @__PURE__ */ Object.create(null), this.timeRanges = /* @__PURE__ */ Object.create(null), this.bufferPadding = 0.2, this.hls = void 0, this.hasGaps = false, this.hls = t3, this._registerListeners();
            }
            var e2 = t2.prototype;
            return e2._registerListeners = function() {
              var t3 = this.hls;
              t3.on(T2.BUFFER_APPENDED, this.onBufferAppended, this), t3.on(T2.FRAG_BUFFERED, this.onFragBuffered, this), t3.on(T2.FRAG_LOADED, this.onFragLoaded, this);
            }, e2._unregisterListeners = function() {
              var t3 = this.hls;
              t3.off(T2.BUFFER_APPENDED, this.onBufferAppended, this), t3.off(T2.FRAG_BUFFERED, this.onFragBuffered, this), t3.off(T2.FRAG_LOADED, this.onFragLoaded, this);
            }, e2.destroy = function() {
              this._unregisterListeners(), this.fragments = this.endListFragments = this.timeRanges = this.mainFragEntity = this.activeParts = null;
            }, e2.getAppendedFrag = function(t3, e3) {
              if (e3 === he2) {
                var r3 = this.mainFragEntity, i4 = this.activeParts;
                if (r3) {
                  if (r3 && i4)
                    for (var n3 = i4.length; n3--; ) {
                      var a2 = i4[n3], s2 = a2 ? a2.end : r3.appendedPTS;
                      if (a2.start <= t3 && null !== s2 && t3 <= s2)
                        return n3 > 9 && (this.activeParts = i4.slice(n3 - 9)), a2;
                    }
                  else if (r3.body.start <= t3 && null !== r3.appendedPTS && t3 <= r3.appendedPTS)
                    return r3.body;
                }
              }
              return this.getBufferedFrag(t3, e3);
            }, e2.getBufferedFrag = function(t3, e3) {
              for (var r3 = this.fragments, i4 = Object.keys(r3), n3 = i4.length; n3--; ) {
                var a2 = r3[i4[n3]];
                if ((null == a2 ? void 0 : a2.body.type) === e3 && a2.buffered) {
                  var s2 = a2.body;
                  if (s2.start <= t3 && t3 <= s2.end)
                    return s2;
                }
              }
              return null;
            }, e2.detectEvictedFragments = function(t3, e3, r3) {
              var i4 = this;
              this.timeRanges && (this.timeRanges[t3] = e3), Object.keys(this.fragments).forEach(function(n3) {
                var a2 = i4.fragments[n3];
                if (a2)
                  if (a2.buffered || a2.loaded) {
                    var s2 = a2.range[t3];
                    s2 && s2.time.some(function(t4) {
                      var r4 = !i4.isTimeBuffered(t4.startPTS, t4.endPTS, e3);
                      return r4 && i4.removeFragment(a2.body), r4;
                    });
                  } else
                    a2.body.type === r3 && i4.removeFragment(a2.body);
              });
            }, e2.detectPartialFragments = function(t3) {
              var e3 = this, r3 = this.timeRanges, i4 = t3.frag, n3 = t3.part;
              if (r3 && "initSegment" !== i4.sn) {
                var a2 = vr(i4), s2 = this.fragments[a2];
                s2 && (Object.keys(r3).forEach(function(t4) {
                  var a3 = i4.elementaryStreams[t4];
                  if (a3) {
                    var o2 = r3[t4], l4 = null !== n3 || true === a3.partial;
                    s2.range[t4] = e3.getBufferedTimes(i4, n3, l4, o2);
                  }
                }), s2.loaded = null, Object.keys(s2.range).length ? (s2.buffered = true, s2.body.endList && (this.endListFragments[s2.body.type] = s2)) : this.removeFragment(s2.body));
              }
            }, e2.fragBuffered = function(t3, e3) {
              var r3 = vr(t3), i4 = this.fragments[r3];
              !i4 && e3 && (i4 = this.fragments[r3] = { body: t3, appendedPTS: null, loaded: null, buffered: false, range: /* @__PURE__ */ Object.create(null) }, t3.gap && (this.hasGaps = true)), i4 && (i4.loaded = null, i4.buffered = true);
            }, e2.getBufferedTimes = function(t3, e3, r3, i4) {
              for (var n3 = { time: [], partial: r3 }, a2 = e3 ? e3.start : t3.start, s2 = e3 ? e3.end : t3.end, o2 = t3.minEndPTS || s2, l4 = t3.maxStartPTS || a2, u3 = 0; u3 < i4.length; u3++) {
                var h4 = i4.start(u3) - this.bufferPadding, d2 = i4.end(u3) + this.bufferPadding;
                if (l4 >= h4 && o2 <= d2) {
                  n3.time.push({ startPTS: Math.max(a2, i4.start(u3)), endPTS: Math.min(s2, i4.end(u3)) });
                  break;
                }
                if (a2 < d2 && s2 > h4)
                  n3.partial = true, n3.time.push({ startPTS: Math.max(a2, i4.start(u3)), endPTS: Math.min(s2, i4.end(u3)) });
                else if (s2 <= h4)
                  break;
              }
              return n3;
            }, e2.getPartialFragment = function(t3) {
              var e3, r3, i4, n3 = null, a2 = 0, s2 = this.bufferPadding, o2 = this.fragments;
              return Object.keys(o2).forEach(function(l4) {
                var u3 = o2[l4];
                u3 && gr(u3) && (r3 = u3.body.start - s2, i4 = u3.body.end + s2, t3 >= r3 && t3 <= i4 && (e3 = Math.min(t3 - r3, i4 - t3), a2 <= e3 && (n3 = u3.body, a2 = e3)));
              }), n3;
            }, e2.isEndListAppended = function(t3) {
              var e3 = this.endListFragments[t3];
              return void 0 !== e3 && (e3.buffered || gr(e3));
            }, e2.getState = function(t3) {
              var e3 = vr(t3), r3 = this.fragments[e3];
              return r3 ? r3.buffered ? gr(r3) ? dr : cr : hr : ur;
            }, e2.isTimeBuffered = function(t3, e3, r3) {
              for (var i4, n3, a2 = 0; a2 < r3.length; a2++) {
                if (i4 = r3.start(a2) - this.bufferPadding, n3 = r3.end(a2) + this.bufferPadding, t3 >= i4 && e3 <= n3)
                  return true;
                if (e3 <= i4)
                  return false;
              }
              return false;
            }, e2.onFragLoaded = function(t3, e3) {
              var r3 = e3.frag, i4 = e3.part;
              if ("initSegment" !== r3.sn && !r3.bitrateTest && !i4) {
                var n3 = vr(r3);
                this.fragments[n3] = { body: r3, appendedPTS: null, loaded: e3, buffered: false, range: /* @__PURE__ */ Object.create(null) };
              }
            }, e2.onBufferAppended = function(t3, e3) {
              var r3 = this, i4 = e3.frag, n3 = e3.part, a2 = e3.timeRanges, s2 = this.mainFragEntity;
              if (i4.type === he2) {
                var o2 = s2 ? s2.body : null;
                if (o2 !== i4) {
                  s2 && o2 && o2.sn !== i4.sn && (s2.buffered = true, this.fragments[vr(o2)] = s2);
                  var l4 = vr(i4);
                  s2 = this.mainFragEntity = this.fragments[l4] || { body: i4, appendedPTS: null, loaded: null, buffered: false, range: /* @__PURE__ */ Object.create(null) };
                }
                if (n3) {
                  var u3 = this.activeParts;
                  u3 || (this.activeParts = u3 = []), u3.push(n3);
                } else
                  this.activeParts = null;
              }
              this.timeRanges = a2, Object.keys(a2).forEach(function(t4) {
                var e4 = a2[t4];
                if (r3.detectEvictedFragments(t4, e4), !n3 && s2) {
                  var o3 = i4.elementaryStreams[t4];
                  if (!o3)
                    return;
                  for (var l5 = 0; l5 < e4.length; l5++) {
                    var u4 = e4.end(l5);
                    u4 <= o3.endPTS && u4 > o3.startPTS ? s2.appendedPTS = Math.max(u4, s2.appendedPTS || 0) : s2.appendedPTS = o3.endPTS;
                  }
                }
              });
            }, e2.onFragBuffered = function(t3, e3) {
              this.detectPartialFragments(e3);
            }, e2.hasFragment = function(t3) {
              var e3 = vr(t3);
              return !!this.fragments[e3];
            }, e2.removeFragmentsInRange = function(t3, e3, r3, i4, n3) {
              var a2 = this;
              i4 && !this.hasGaps || Object.keys(this.fragments).forEach(function(s2) {
                var o2 = a2.fragments[s2];
                if (o2) {
                  var l4 = o2.body;
                  l4.type !== r3 || i4 && !l4.gap || l4.start < e3 && l4.end > t3 && (o2.buffered || n3) && a2.removeFragment(l4);
                }
              });
            }, e2.removeFragment = function(t3) {
              var e3 = vr(t3);
              t3.stats.loaded = 0, t3.clearElementaryStreamInfo(), this.mainFragEntity === this.fragments[e3] && (this.mainFragEntity = null), delete this.fragments[e3], t3.endList && delete this.endListFragments[t3.type];
            }, e2.removeAllFragments = function() {
              this.fragments = /* @__PURE__ */ Object.create(null), this.endListFragments = /* @__PURE__ */ Object.create(null), this.mainFragEntity = null, this.activeParts = null, this.hasGaps = false;
            }, t2;
          }();
          function gr(t2) {
            var e2, r3;
            return t2.buffered && (t2.body.gap || (null == (e2 = t2.range.video) ? void 0 : e2.partial) || (null == (r3 = t2.range.audio) ? void 0 : r3.partial));
          }
          function vr(t2) {
            return t2.type + "_" + t2.level + "_" + t2.urlId + "_" + t2.sn;
          }
          var mr = Math.pow(2, 17), pr = function() {
            function t2(t3) {
              this.config = void 0, this.loader = null, this.partLoadTimeout = -1, this.config = t3;
            }
            var e2 = t2.prototype;
            return e2.destroy = function() {
              this.loader && (this.loader.destroy(), this.loader = null);
            }, e2.abort = function() {
              this.loader && this.loader.abort();
            }, e2.load = function(t3, e3) {
              var r3 = this, n3 = t3.url;
              if (!n3)
                return Promise.reject(new Er({ type: E.NETWORK_ERROR, details: S3.FRAG_LOAD_ERROR, fatal: false, frag: t3, error: new Error("Fragment does not have a " + (n3 ? "part list" : "url")), networkDetails: null }));
              this.abort();
              var a2 = this.config, s2 = a2.fLoader, o2 = a2.loader;
              return new Promise(function(l4, u3) {
                if (r3.loader && r3.loader.destroy(), t3.gap)
                  u3(Tr(t3));
                else {
                  var h4 = r3.loader = t3.loader = s2 ? new s2(a2) : new o2(a2), d2 = yr(t3), c2 = Ye2(a2.fragLoadPolicy.default), f3 = { loadPolicy: c2, timeout: c2.maxLoadTimeMs, maxRetry: 0, retryDelay: 0, maxRetryDelay: 0, highWaterMark: "initSegment" === t3.sn ? 1 / 0 : mr };
                  t3.stats = h4.stats, h4.load(d2, f3, { onSuccess: function(e4, i4, n4, a3) {
                    r3.resetLoader(t3, h4);
                    var s3 = e4.data;
                    n4.resetIV && t3.decryptdata && (t3.decryptdata.iv = new Uint8Array(s3.slice(0, 16)), s3 = s3.slice(16)), l4({ frag: t3, part: null, payload: s3, networkDetails: a3 });
                  }, onError: function(e4, a3, s3, o3) {
                    r3.resetLoader(t3, h4), u3(new Er({ type: E.NETWORK_ERROR, details: S3.FRAG_LOAD_ERROR, fatal: false, frag: t3, response: i3({ url: n3, data: void 0 }, e4), error: new Error("HTTP Error " + e4.code + " " + e4.text), networkDetails: s3, stats: o3 }));
                  }, onAbort: function(e4, i4, n4) {
                    r3.resetLoader(t3, h4), u3(new Er({ type: E.NETWORK_ERROR, details: S3.INTERNAL_ABORTED, fatal: false, frag: t3, error: new Error("Aborted"), networkDetails: n4, stats: e4 }));
                  }, onTimeout: function(e4, i4, n4) {
                    r3.resetLoader(t3, h4), u3(new Er({ type: E.NETWORK_ERROR, details: S3.FRAG_LOAD_TIMEOUT, fatal: false, frag: t3, error: new Error("Timeout after " + f3.timeout + "ms"), networkDetails: n4, stats: e4 }));
                  }, onProgress: function(r4, i4, n4, a3) {
                    e3 && e3({ frag: t3, part: null, payload: n4, networkDetails: a3 });
                  } });
                }
              });
            }, e2.loadPart = function(t3, e3, r3) {
              var n3 = this;
              this.abort();
              var a2 = this.config, s2 = a2.fLoader, o2 = a2.loader;
              return new Promise(function(l4, u3) {
                if (n3.loader && n3.loader.destroy(), t3.gap || e3.gap)
                  u3(Tr(t3, e3));
                else {
                  var h4 = n3.loader = t3.loader = s2 ? new s2(a2) : new o2(a2), d2 = yr(t3, e3), c2 = Ye2(a2.fragLoadPolicy.default), f3 = { loadPolicy: c2, timeout: c2.maxLoadTimeMs, maxRetry: 0, retryDelay: 0, maxRetryDelay: 0, highWaterMark: mr };
                  e3.stats = h4.stats, h4.load(d2, f3, { onSuccess: function(i4, a3, s3, o3) {
                    n3.resetLoader(t3, h4), n3.updateStatsFromPart(t3, e3);
                    var u4 = { frag: t3, part: e3, payload: i4.data, networkDetails: o3 };
                    r3(u4), l4(u4);
                  }, onError: function(r4, a3, s3, o3) {
                    n3.resetLoader(t3, h4), u3(new Er({ type: E.NETWORK_ERROR, details: S3.FRAG_LOAD_ERROR, fatal: false, frag: t3, part: e3, response: i3({ url: d2.url, data: void 0 }, r4), error: new Error("HTTP Error " + r4.code + " " + r4.text), networkDetails: s3, stats: o3 }));
                  }, onAbort: function(r4, i4, a3) {
                    t3.stats.aborted = e3.stats.aborted, n3.resetLoader(t3, h4), u3(new Er({ type: E.NETWORK_ERROR, details: S3.INTERNAL_ABORTED, fatal: false, frag: t3, part: e3, error: new Error("Aborted"), networkDetails: a3, stats: r4 }));
                  }, onTimeout: function(r4, i4, a3) {
                    n3.resetLoader(t3, h4), u3(new Er({ type: E.NETWORK_ERROR, details: S3.FRAG_LOAD_TIMEOUT, fatal: false, frag: t3, part: e3, error: new Error("Timeout after " + f3.timeout + "ms"), networkDetails: a3, stats: r4 }));
                  } });
                }
              });
            }, e2.updateStatsFromPart = function(t3, e3) {
              var r3 = t3.stats, i4 = e3.stats, n3 = i4.total;
              if (r3.loaded += i4.loaded, n3) {
                var a2 = Math.round(t3.duration / e3.duration), s2 = Math.min(Math.round(r3.loaded / n3), a2), o2 = (a2 - s2) * Math.round(r3.loaded / s2);
                r3.total = r3.loaded + o2;
              } else
                r3.total = Math.max(r3.loaded, r3.total);
              var l4 = r3.loading, u3 = i4.loading;
              l4.start ? l4.first += u3.first - u3.start : (l4.start = u3.start, l4.first = u3.first), l4.end = u3.end;
            }, e2.resetLoader = function(t3, e3) {
              t3.loader = null, this.loader === e3 && (self.clearTimeout(this.partLoadTimeout), this.loader = null), e3.destroy();
            }, t2;
          }();
          function yr(t2, e2) {
            void 0 === e2 && (e2 = null);
            var r3 = e2 || t2, i4 = { frag: t2, part: e2, responseType: "arraybuffer", url: r3.url, headers: {}, rangeStart: 0, rangeEnd: 0 }, n3 = r3.byteRangeStartOffset, a2 = r3.byteRangeEndOffset;
            if (y(n3) && y(a2)) {
              var s2, o2 = n3, l4 = a2;
              if ("initSegment" === t2.sn && "AES-128" === (null == (s2 = t2.decryptdata) ? void 0 : s2.method)) {
                var u3 = a2 - n3;
                u3 % 16 && (l4 = a2 + (16 - u3 % 16)), 0 !== n3 && (i4.resetIV = true, o2 = n3 - 16);
              }
              i4.rangeStart = o2, i4.rangeEnd = l4;
            }
            return i4;
          }
          function Tr(t2, e2) {
            var r3 = new Error("GAP " + (t2.gap ? "tag" : "attribute") + " found"), i4 = { type: E.MEDIA_ERROR, details: S3.FRAG_GAP, fatal: false, frag: t2, error: r3, networkDetails: null };
            return e2 && (i4.part = e2), (e2 || t2).stats.aborted = true, new Er(i4);
          }
          var Er = function(t2) {
            function e2(e3) {
              var r3;
              return (r3 = t2.call(this, e3.error.message) || this).data = void 0, r3.data = e3, r3;
            }
            return l3(e2, t2), e2;
          }(f2(Error)), Sr = function() {
            function t2(t3) {
              this.config = void 0, this.keyUriToKeyInfo = {}, this.emeController = null, this.config = t3;
            }
            var e2 = t2.prototype;
            return e2.abort = function() {
              for (var t3 in this.keyUriToKeyInfo) {
                var e3 = this.keyUriToKeyInfo[t3].loader;
                e3 && e3.abort();
              }
            }, e2.detach = function() {
              for (var t3 in this.keyUriToKeyInfo) {
                var e3 = this.keyUriToKeyInfo[t3];
                (e3.mediaKeySessionContext || e3.decryptdata.isCommonEncryption) && delete this.keyUriToKeyInfo[t3];
              }
            }, e2.destroy = function() {
              for (var t3 in this.detach(), this.keyUriToKeyInfo) {
                var e3 = this.keyUriToKeyInfo[t3].loader;
                e3 && e3.destroy();
              }
              this.keyUriToKeyInfo = {};
            }, e2.createKeyLoadError = function(t3, e3, r3, i4, n3) {
              return void 0 === e3 && (e3 = S3.KEY_LOAD_ERROR), new Er({ type: E.NETWORK_ERROR, details: e3, fatal: false, frag: t3, response: n3, error: r3, networkDetails: i4 });
            }, e2.loadClear = function(t3, e3) {
              var r3 = this;
              if (this.emeController && this.config.emeEnabled)
                for (var i4 = t3.sn, n3 = t3.cc, a2 = function() {
                  var t4 = e3[s2];
                  if (n3 <= t4.cc && ("initSegment" === i4 || "initSegment" === t4.sn || i4 < t4.sn))
                    return r3.emeController.selectKeySystemFormat(t4).then(function(e4) {
                      t4.setKeyFormat(e4);
                    }), "break";
                }, s2 = 0; s2 < e3.length && "break" !== a2(); s2++)
                  ;
            }, e2.load = function(t3) {
              var e3 = this;
              return !t3.decryptdata && t3.encrypted && this.emeController ? this.emeController.selectKeySystemFormat(t3).then(function(r3) {
                return e3.loadInternal(t3, r3);
              }) : this.loadInternal(t3);
            }, e2.loadInternal = function(t3, e3) {
              var r3, i4;
              e3 && t3.setKeyFormat(e3);
              var n3 = t3.decryptdata;
              if (!n3) {
                var a2 = new Error(e3 ? "Expected frag.decryptdata to be defined after setting format " + e3 : "Missing decryption data on fragment in onKeyLoading");
                return Promise.reject(this.createKeyLoadError(t3, S3.KEY_LOAD_ERROR, a2));
              }
              var s2 = n3.uri;
              if (!s2)
                return Promise.reject(this.createKeyLoadError(t3, S3.KEY_LOAD_ERROR, new Error('Invalid key URI: "' + s2 + '"')));
              var o2, l4 = this.keyUriToKeyInfo[s2];
              if (null != (r3 = l4) && r3.decryptdata.key)
                return n3.key = l4.decryptdata.key, Promise.resolve({ frag: t3, keyInfo: l4 });
              if (null != (i4 = l4) && i4.keyLoadPromise)
                switch (null == (o2 = l4.mediaKeySessionContext) ? void 0 : o2.keyStatus) {
                  case void 0:
                  case "status-pending":
                  case "usable":
                  case "usable-in-future":
                    return l4.keyLoadPromise.then(function(e4) {
                      return n3.key = e4.keyInfo.decryptdata.key, { frag: t3, keyInfo: l4 };
                    });
                }
              switch (l4 = this.keyUriToKeyInfo[s2] = { decryptdata: n3, keyLoadPromise: null, loader: null, mediaKeySessionContext: null }, n3.method) {
                case "ISO-23001-7":
                case "SAMPLE-AES":
                case "SAMPLE-AES-CENC":
                case "SAMPLE-AES-CTR":
                  return "identity" === n3.keyFormat ? this.loadKeyHTTP(l4, t3) : this.loadKeyEME(l4, t3);
                case "AES-128":
                  return this.loadKeyHTTP(l4, t3);
                default:
                  return Promise.reject(this.createKeyLoadError(t3, S3.KEY_LOAD_ERROR, new Error('Key supplied with unsupported METHOD: "' + n3.method + '"')));
              }
            }, e2.loadKeyEME = function(t3, e3) {
              var r3 = { frag: e3, keyInfo: t3 };
              if (this.emeController && this.config.emeEnabled) {
                var i4 = this.emeController.loadKey(r3);
                if (i4)
                  return (t3.keyLoadPromise = i4.then(function(e4) {
                    return t3.mediaKeySessionContext = e4, r3;
                  })).catch(function(e4) {
                    throw t3.keyLoadPromise = null, e4;
                  });
              }
              return Promise.resolve(r3);
            }, e2.loadKeyHTTP = function(t3, e3) {
              var r3 = this, n3 = this.config, a2 = new (0, n3.loader)(n3);
              return e3.keyLoader = t3.loader = a2, t3.keyLoadPromise = new Promise(function(s2, o2) {
                var l4 = { keyInfo: t3, frag: e3, responseType: "arraybuffer", url: t3.decryptdata.uri }, u3 = n3.keyLoadPolicy.default, h4 = { loadPolicy: u3, timeout: u3.maxLoadTimeMs, maxRetry: 0, retryDelay: 0, maxRetryDelay: 0 }, d2 = { onSuccess: function(t4, e4, i4, n4) {
                  var a3 = i4.frag, l5 = i4.keyInfo, u4 = i4.url;
                  if (!a3.decryptdata || l5 !== r3.keyUriToKeyInfo[u4])
                    return o2(r3.createKeyLoadError(a3, S3.KEY_LOAD_ERROR, new Error("after key load, decryptdata unset or changed"), n4));
                  l5.decryptdata.key = a3.decryptdata.key = new Uint8Array(t4.data), a3.keyLoader = null, l5.loader = null, s2({ frag: a3, keyInfo: l5 });
                }, onError: function(t4, n4, a3, s3) {
                  r3.resetLoader(n4), o2(r3.createKeyLoadError(e3, S3.KEY_LOAD_ERROR, new Error("HTTP Error " + t4.code + " loading key " + t4.text), a3, i3({ url: l4.url, data: void 0 }, t4)));
                }, onTimeout: function(t4, i4, n4) {
                  r3.resetLoader(i4), o2(r3.createKeyLoadError(e3, S3.KEY_LOAD_TIMEOUT, new Error("key loading timed out"), n4));
                }, onAbort: function(t4, i4, n4) {
                  r3.resetLoader(i4), o2(r3.createKeyLoadError(e3, S3.INTERNAL_ABORTED, new Error("key loading aborted"), n4));
                } };
                a2.load(l4, h4, d2);
              });
            }, e2.resetLoader = function(t3) {
              var e3 = t3.frag, r3 = t3.keyInfo, i4 = t3.url, n3 = r3.loader;
              e3.keyLoader === n3 && (e3.keyLoader = null, r3.loader = null), delete this.keyUriToKeyInfo[i4], n3 && n3.destroy();
            }, t2;
          }(), Lr = function() {
            function t2() {
              this._boundTick = void 0, this._tickTimer = null, this._tickInterval = null, this._tickCallCount = 0, this._boundTick = this.tick.bind(this);
            }
            var e2 = t2.prototype;
            return e2.destroy = function() {
              this.onHandlerDestroying(), this.onHandlerDestroyed();
            }, e2.onHandlerDestroying = function() {
              this.clearNextTick(), this.clearInterval();
            }, e2.onHandlerDestroyed = function() {
            }, e2.hasInterval = function() {
              return !!this._tickInterval;
            }, e2.hasNextTick = function() {
              return !!this._tickTimer;
            }, e2.setInterval = function(t3) {
              return !this._tickInterval && (this._tickCallCount = 0, this._tickInterval = self.setInterval(this._boundTick, t3), true);
            }, e2.clearInterval = function() {
              return !!this._tickInterval && (self.clearInterval(this._tickInterval), this._tickInterval = null, true);
            }, e2.clearNextTick = function() {
              return !!this._tickTimer && (self.clearTimeout(this._tickTimer), this._tickTimer = null, true);
            }, e2.tick = function() {
              this._tickCallCount++, 1 === this._tickCallCount && (this.doTick(), this._tickCallCount > 1 && this.tickImmediate(), this._tickCallCount = 0);
            }, e2.tickImmediate = function() {
              this.clearNextTick(), this._tickTimer = self.setTimeout(this._boundTick, 0);
            }, e2.doTick = function() {
            }, t2;
          }(), Rr = { length: 0, start: function() {
            return 0;
          }, end: function() {
            return 0;
          } }, Ar = function() {
            function t2() {
            }
            return t2.isBuffered = function(e2, r3) {
              try {
                if (e2) {
                  for (var i4 = t2.getBuffered(e2), n3 = 0; n3 < i4.length; n3++)
                    if (r3 >= i4.start(n3) && r3 <= i4.end(n3))
                      return true;
                }
              } catch (t3) {
              }
              return false;
            }, t2.bufferInfo = function(e2, r3, i4) {
              try {
                if (e2) {
                  var n3, a2 = t2.getBuffered(e2), s2 = [];
                  for (n3 = 0; n3 < a2.length; n3++)
                    s2.push({ start: a2.start(n3), end: a2.end(n3) });
                  return this.bufferedInfo(s2, r3, i4);
                }
              } catch (t3) {
              }
              return { len: 0, start: r3, end: r3, nextStart: void 0 };
            }, t2.bufferedInfo = function(t3, e2, r3) {
              e2 = Math.max(0, e2), t3.sort(function(t4, e3) {
                var r4 = t4.start - e3.start;
                return r4 || e3.end - t4.end;
              });
              var i4 = [];
              if (r3)
                for (var n3 = 0; n3 < t3.length; n3++) {
                  var a2 = i4.length;
                  if (a2) {
                    var s2 = i4[a2 - 1].end;
                    t3[n3].start - s2 < r3 ? t3[n3].end > s2 && (i4[a2 - 1].end = t3[n3].end) : i4.push(t3[n3]);
                  } else
                    i4.push(t3[n3]);
                }
              else
                i4 = t3;
              for (var o2, l4 = 0, u3 = e2, h4 = e2, d2 = 0; d2 < i4.length; d2++) {
                var c2 = i4[d2].start, f3 = i4[d2].end;
                if (e2 + r3 >= c2 && e2 < f3)
                  u3 = c2, l4 = (h4 = f3) - e2;
                else if (e2 + r3 < c2) {
                  o2 = c2;
                  break;
                }
              }
              return { len: l4, start: u3 || 0, end: h4 || 0, nextStart: o2 };
            }, t2.getBuffered = function(t3) {
              try {
                return t3.buffered;
              } catch (t4) {
                return D2.log("failed to get media.buffered", t4), Rr;
              }
            }, t2;
          }(), kr = function(t2, e2, r3, i4, n3, a2) {
            void 0 === i4 && (i4 = 0), void 0 === n3 && (n3 = -1), void 0 === a2 && (a2 = false), this.level = void 0, this.sn = void 0, this.part = void 0, this.id = void 0, this.size = void 0, this.partial = void 0, this.transmuxing = { start: 0, executeStart: 0, executeEnd: 0, end: 0 }, this.buffering = { audio: { start: 0, executeStart: 0, executeEnd: 0, end: 0 }, video: { start: 0, executeStart: 0, executeEnd: 0, end: 0 }, audiovideo: { start: 0, executeStart: 0, executeEnd: 0, end: 0 } }, this.level = t2, this.sn = e2, this.id = r3, this.size = i4, this.part = n3, this.partial = a2;
          };
          function br(t2, e2) {
            for (var r3 = null, i4 = 0, n3 = t2.length; i4 < n3; i4++) {
              var a2 = t2[i4];
              if (a2 && a2.cc === e2) {
                r3 = a2;
                break;
              }
            }
            return r3;
          }
          function Dr(t2, e2) {
            if (t2) {
              var r3 = t2.start + e2;
              t2.start = t2.startPTS = r3, t2.endPTS = r3 + t2.duration;
            }
          }
          function Ir(t2, e2) {
            for (var r3 = e2.fragments, i4 = 0, n3 = r3.length; i4 < n3; i4++)
              Dr(r3[i4], t2);
            e2.fragmentHint && Dr(e2.fragmentHint, t2), e2.alignedSliding = true;
          }
          function wr(t2, e2, r3) {
            e2 && (function(t3, e3, r4) {
              if (function(t4, e4, r5) {
                return !(!e4.details || !(r5.endCC > r5.startCC || t4 && t4.cc < r5.startCC));
              }(t3, r4, e3)) {
                var i4 = function(t4, e4, r5) {
                  var i5 = t4.fragments, n3 = e4.fragments;
                  if (n3.length && i5.length) {
                    var a2 = br(i5, n3[0].cc);
                    if (a2 && (!a2 || a2.startPTS))
                      return a2;
                    D2.log("No frag in previous level to align on");
                  } else
                    D2.log("No fragments to align");
                }(r4.details, e3);
                i4 && y(i4.start) && (D2.log("Adjusting PTS using last level due to CC increase within current level " + e3.url), Ir(i4.start, e3));
              }
            }(t2, r3, e2), !r3.alignedSliding && e2.details && function(t3, e3) {
              if (e3.fragments.length && t3.hasProgramDateTime && e3.hasProgramDateTime) {
                var r4 = e3.fragments[0].programDateTime, i4 = t3.fragments[0].programDateTime, n3 = (i4 - r4) / 1e3 + e3.fragments[0].start;
                n3 && y(n3) && (D2.log("Adjusting PTS using programDateTime delta " + (i4 - r4) + "ms, sliding:" + n3.toFixed(3) + " " + t3.url + " "), Ir(n3, t3));
              }
            }(r3, e2.details), r3.alignedSliding || !e2.details || r3.skippedSegments || Ne(e2.details, r3));
          }
          function Cr(t2, e2) {
            if (t2.hasProgramDateTime && e2.hasProgramDateTime) {
              var r3 = t2.fragments, i4 = e2.fragments;
              if (r3.length && i4.length) {
                var n3 = i4[Math.round(i4.length / 2) - 1], a2 = br(r3, n3.cc) || r3[Math.round(r3.length / 2) - 1], s2 = n3.programDateTime, o2 = a2.programDateTime;
                null !== s2 && null !== o2 && Ir((o2 - s2) / 1e3 - (a2.start - n3.start), t2);
              }
            }
          }
          var _r = function() {
            function t2(t3, e2) {
              this.subtle = void 0, this.aesIV = void 0, this.subtle = t3, this.aesIV = e2;
            }
            return t2.prototype.decrypt = function(t3, e2) {
              return this.subtle.decrypt({ name: "AES-CBC", iv: this.aesIV }, e2, t3);
            }, t2;
          }(), Pr = function() {
            function t2(t3, e2) {
              this.subtle = void 0, this.key = void 0, this.subtle = t3, this.key = e2;
            }
            return t2.prototype.expandKey = function() {
              return this.subtle.importKey("raw", this.key, { name: "AES-CBC" }, false, ["encrypt", "decrypt"]);
            }, t2;
          }(), xr = function() {
            function t2() {
              this.rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], this.subMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)], this.invSubMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)], this.sBox = new Uint32Array(256), this.invSBox = new Uint32Array(256), this.key = new Uint32Array(0), this.ksRows = 0, this.keySize = 0, this.keySchedule = void 0, this.invKeySchedule = void 0, this.initTable();
            }
            var e2 = t2.prototype;
            return e2.uint8ArrayToUint32Array_ = function(t3) {
              for (var e3 = new DataView(t3), r3 = new Uint32Array(4), i4 = 0; i4 < 4; i4++)
                r3[i4] = e3.getUint32(4 * i4);
              return r3;
            }, e2.initTable = function() {
              var t3 = this.sBox, e3 = this.invSBox, r3 = this.subMix, i4 = r3[0], n3 = r3[1], a2 = r3[2], s2 = r3[3], o2 = this.invSubMix, l4 = o2[0], u3 = o2[1], h4 = o2[2], d2 = o2[3], c2 = new Uint32Array(256), f3 = 0, g3 = 0, v3 = 0;
              for (v3 = 0; v3 < 256; v3++)
                c2[v3] = v3 < 128 ? v3 << 1 : v3 << 1 ^ 283;
              for (v3 = 0; v3 < 256; v3++) {
                var m3 = g3 ^ g3 << 1 ^ g3 << 2 ^ g3 << 3 ^ g3 << 4;
                m3 = m3 >>> 8 ^ 255 & m3 ^ 99, t3[f3] = m3, e3[m3] = f3;
                var p2 = c2[f3], y2 = c2[p2], T3 = c2[y2], E2 = 257 * c2[m3] ^ 16843008 * m3;
                i4[f3] = E2 << 24 | E2 >>> 8, n3[f3] = E2 << 16 | E2 >>> 16, a2[f3] = E2 << 8 | E2 >>> 24, s2[f3] = E2, E2 = 16843009 * T3 ^ 65537 * y2 ^ 257 * p2 ^ 16843008 * f3, l4[m3] = E2 << 24 | E2 >>> 8, u3[m3] = E2 << 16 | E2 >>> 16, h4[m3] = E2 << 8 | E2 >>> 24, d2[m3] = E2, f3 ? (f3 = p2 ^ c2[c2[c2[T3 ^ p2]]], g3 ^= c2[c2[g3]]) : f3 = g3 = 1;
              }
            }, e2.expandKey = function(t3) {
              for (var e3 = this.uint8ArrayToUint32Array_(t3), r3 = true, i4 = 0; i4 < e3.length && r3; )
                r3 = e3[i4] === this.key[i4], i4++;
              if (!r3) {
                this.key = e3;
                var n3 = this.keySize = e3.length;
                if (4 !== n3 && 6 !== n3 && 8 !== n3)
                  throw new Error("Invalid aes key size=" + n3);
                var a2, s2, o2, l4, u3 = this.ksRows = 4 * (n3 + 6 + 1), h4 = this.keySchedule = new Uint32Array(u3), d2 = this.invKeySchedule = new Uint32Array(u3), c2 = this.sBox, f3 = this.rcon, g3 = this.invSubMix, v3 = g3[0], m3 = g3[1], p2 = g3[2], y2 = g3[3];
                for (a2 = 0; a2 < u3; a2++)
                  a2 < n3 ? o2 = h4[a2] = e3[a2] : (l4 = o2, a2 % n3 == 0 ? (l4 = c2[(l4 = l4 << 8 | l4 >>> 24) >>> 24] << 24 | c2[l4 >>> 16 & 255] << 16 | c2[l4 >>> 8 & 255] << 8 | c2[255 & l4], l4 ^= f3[a2 / n3 | 0] << 24) : n3 > 6 && a2 % n3 == 4 && (l4 = c2[l4 >>> 24] << 24 | c2[l4 >>> 16 & 255] << 16 | c2[l4 >>> 8 & 255] << 8 | c2[255 & l4]), h4[a2] = o2 = (h4[a2 - n3] ^ l4) >>> 0);
                for (s2 = 0; s2 < u3; s2++)
                  a2 = u3 - s2, l4 = 3 & s2 ? h4[a2] : h4[a2 - 4], d2[s2] = s2 < 4 || a2 <= 4 ? l4 : v3[c2[l4 >>> 24]] ^ m3[c2[l4 >>> 16 & 255]] ^ p2[c2[l4 >>> 8 & 255]] ^ y2[c2[255 & l4]], d2[s2] = d2[s2] >>> 0;
              }
            }, e2.networkToHostOrderSwap = function(t3) {
              return t3 << 24 | (65280 & t3) << 8 | (16711680 & t3) >> 8 | t3 >>> 24;
            }, e2.decrypt = function(t3, e3, r3) {
              for (var i4, n3, a2, s2, o2, l4, u3, h4, d2, c2, f3, g3, v3, m3, p2 = this.keySize + 6, y2 = this.invKeySchedule, T3 = this.invSBox, E2 = this.invSubMix, S4 = E2[0], L3 = E2[1], R3 = E2[2], A3 = E2[3], k3 = this.uint8ArrayToUint32Array_(r3), b3 = k3[0], D3 = k3[1], I3 = k3[2], w3 = k3[3], C3 = new Int32Array(t3), _3 = new Int32Array(C3.length), P2 = this.networkToHostOrderSwap; e3 < C3.length; ) {
                for (d2 = P2(C3[e3]), c2 = P2(C3[e3 + 1]), f3 = P2(C3[e3 + 2]), g3 = P2(C3[e3 + 3]), o2 = d2 ^ y2[0], l4 = g3 ^ y2[1], u3 = f3 ^ y2[2], h4 = c2 ^ y2[3], v3 = 4, m3 = 1; m3 < p2; m3++)
                  i4 = S4[o2 >>> 24] ^ L3[l4 >> 16 & 255] ^ R3[u3 >> 8 & 255] ^ A3[255 & h4] ^ y2[v3], n3 = S4[l4 >>> 24] ^ L3[u3 >> 16 & 255] ^ R3[h4 >> 8 & 255] ^ A3[255 & o2] ^ y2[v3 + 1], a2 = S4[u3 >>> 24] ^ L3[h4 >> 16 & 255] ^ R3[o2 >> 8 & 255] ^ A3[255 & l4] ^ y2[v3 + 2], s2 = S4[h4 >>> 24] ^ L3[o2 >> 16 & 255] ^ R3[l4 >> 8 & 255] ^ A3[255 & u3] ^ y2[v3 + 3], o2 = i4, l4 = n3, u3 = a2, h4 = s2, v3 += 4;
                i4 = T3[o2 >>> 24] << 24 ^ T3[l4 >> 16 & 255] << 16 ^ T3[u3 >> 8 & 255] << 8 ^ T3[255 & h4] ^ y2[v3], n3 = T3[l4 >>> 24] << 24 ^ T3[u3 >> 16 & 255] << 16 ^ T3[h4 >> 8 & 255] << 8 ^ T3[255 & o2] ^ y2[v3 + 1], a2 = T3[u3 >>> 24] << 24 ^ T3[h4 >> 16 & 255] << 16 ^ T3[o2 >> 8 & 255] << 8 ^ T3[255 & l4] ^ y2[v3 + 2], s2 = T3[h4 >>> 24] << 24 ^ T3[o2 >> 16 & 255] << 16 ^ T3[l4 >> 8 & 255] << 8 ^ T3[255 & u3] ^ y2[v3 + 3], _3[e3] = P2(i4 ^ b3), _3[e3 + 1] = P2(s2 ^ D3), _3[e3 + 2] = P2(a2 ^ I3), _3[e3 + 3] = P2(n3 ^ w3), b3 = d2, D3 = c2, I3 = f3, w3 = g3, e3 += 4;
              }
              return _3.buffer;
            }, t2;
          }(), Fr = function() {
            function t2(t3, e3) {
              var r3 = (void 0 === e3 ? {} : e3).removePKCS7Padding, i4 = void 0 === r3 || r3;
              if (this.logEnabled = true, this.removePKCS7Padding = void 0, this.subtle = null, this.softwareDecrypter = null, this.key = null, this.fastAesKey = null, this.remainderData = null, this.currentIV = null, this.currentResult = null, this.useSoftware = void 0, this.useSoftware = t3.enableSoftwareAES, this.removePKCS7Padding = i4, i4)
                try {
                  var n3 = self.crypto;
                  n3 && (this.subtle = n3.subtle || n3.webkitSubtle);
                } catch (t4) {
                }
              null === this.subtle && (this.useSoftware = true);
            }
            var e2 = t2.prototype;
            return e2.destroy = function() {
              this.subtle = null, this.softwareDecrypter = null, this.key = null, this.fastAesKey = null, this.remainderData = null, this.currentIV = null, this.currentResult = null;
            }, e2.isSync = function() {
              return this.useSoftware;
            }, e2.flush = function() {
              var t3 = this.currentResult, e3 = this.remainderData;
              if (!t3 || e3)
                return this.reset(), null;
              var r3, i4, n3, a2 = new Uint8Array(t3);
              return this.reset(), this.removePKCS7Padding ? (i4 = (r3 = a2).byteLength, (n3 = i4 && new DataView(r3.buffer).getUint8(i4 - 1)) ? tt2(r3, 0, i4 - n3) : r3) : a2;
            }, e2.reset = function() {
              this.currentResult = null, this.currentIV = null, this.remainderData = null, this.softwareDecrypter && (this.softwareDecrypter = null);
            }, e2.decrypt = function(t3, e3, r3) {
              var i4 = this;
              return this.useSoftware ? new Promise(function(n3, a2) {
                i4.softwareDecrypt(new Uint8Array(t3), e3, r3);
                var s2 = i4.flush();
                s2 ? n3(s2.buffer) : a2(new Error("[softwareDecrypt] Failed to decrypt data"));
              }) : this.webCryptoDecrypt(new Uint8Array(t3), e3, r3);
            }, e2.softwareDecrypt = function(t3, e3, r3) {
              var i4 = this.currentIV, n3 = this.currentResult, a2 = this.remainderData;
              this.logOnce("JS AES decrypt"), a2 && (t3 = _t(a2, t3), this.remainderData = null);
              var s2 = this.getValidChunk(t3);
              if (!s2.length)
                return null;
              i4 && (r3 = i4);
              var o2 = this.softwareDecrypter;
              o2 || (o2 = this.softwareDecrypter = new xr()), o2.expandKey(e3);
              var l4 = n3;
              return this.currentResult = o2.decrypt(s2.buffer, 0, r3), this.currentIV = tt2(s2, -16).buffer, l4 || null;
            }, e2.webCryptoDecrypt = function(t3, e3, r3) {
              var i4 = this, n3 = this.subtle;
              return this.key === e3 && this.fastAesKey || (this.key = e3, this.fastAesKey = new Pr(n3, e3)), this.fastAesKey.expandKey().then(function(e4) {
                return n3 ? (i4.logOnce("WebCrypto AES decrypt"), new _r(n3, new Uint8Array(r3)).decrypt(t3.buffer, e4)) : Promise.reject(new Error("web crypto not initialized"));
              }).catch(function(n4) {
                return D2.warn("[decrypter]: WebCrypto Error, disable WebCrypto API, " + n4.name + ": " + n4.message), i4.onWebCryptoError(t3, e3, r3);
              });
            }, e2.onWebCryptoError = function(t3, e3, r3) {
              this.useSoftware = true, this.logEnabled = true, this.softwareDecrypt(t3, e3, r3);
              var i4 = this.flush();
              if (i4)
                return i4.buffer;
              throw new Error("WebCrypto and softwareDecrypt: failed to decrypt data");
            }, e2.getValidChunk = function(t3) {
              var e3 = t3, r3 = t3.length - t3.length % 16;
              return r3 !== t3.length && (e3 = tt2(t3, 0, r3), this.remainderData = tt2(t3, r3)), e3;
            }, e2.logOnce = function(t3) {
              this.logEnabled && (D2.log("[decrypter]: " + t3), this.logEnabled = false);
            }, t2;
          }(), Or = function(t2) {
            for (var e2 = "", r3 = t2.length, i4 = 0; i4 < r3; i4++)
              e2 += "[" + t2.start(i4).toFixed(3) + "-" + t2.end(i4).toFixed(3) + "]";
            return e2;
          }, Mr = "STOPPED", Nr = "IDLE", Ur = "KEY_LOADING", Br = "FRAG_LOADING", Gr = "FRAG_LOADING_WAITING_RETRY", Kr = "WAITING_TRACK", Hr = "PARSING", Vr = "PARSED", Yr = "ENDED", Wr = "ERROR", jr = "WAITING_INIT_PTS", qr = "WAITING_LEVEL", Xr = function(t2) {
            function e2(e3, r4, i4, n3, a2) {
              var s2;
              return (s2 = t2.call(this) || this).hls = void 0, s2.fragPrevious = null, s2.fragCurrent = null, s2.fragmentTracker = void 0, s2.transmuxer = null, s2._state = Mr, s2.playlistType = void 0, s2.media = null, s2.mediaBuffer = null, s2.config = void 0, s2.bitrateTest = false, s2.lastCurrentTime = 0, s2.nextLoadPosition = 0, s2.startPosition = 0, s2.startTimeOffset = null, s2.loadedmetadata = false, s2.retryDate = 0, s2.levels = null, s2.fragmentLoader = void 0, s2.keyLoader = void 0, s2.levelLastLoaded = null, s2.startFragRequested = false, s2.decrypter = void 0, s2.initPTS = [], s2.onvseeking = null, s2.onvended = null, s2.logPrefix = "", s2.log = void 0, s2.warn = void 0, s2.playlistType = a2, s2.logPrefix = n3, s2.log = D2.log.bind(D2, n3 + ":"), s2.warn = D2.warn.bind(D2, n3 + ":"), s2.hls = e3, s2.fragmentLoader = new pr(e3.config), s2.keyLoader = i4, s2.fragmentTracker = r4, s2.config = e3.config, s2.decrypter = new Fr(e3.config), e3.on(T2.MANIFEST_LOADED, s2.onManifestLoaded, function(t3) {
                if (void 0 === t3)
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return t3;
              }(s2)), s2;
            }
            l3(e2, t2);
            var r3 = e2.prototype;
            return r3.doTick = function() {
              this.onTickEnd();
            }, r3.onTickEnd = function() {
            }, r3.startLoad = function(t3) {
            }, r3.stopLoad = function() {
              this.fragmentLoader.abort(), this.keyLoader.abort();
              var t3 = this.fragCurrent;
              null != t3 && t3.loader && (t3.abortRequests(), this.fragmentTracker.removeFragment(t3)), this.resetTransmuxer(), this.fragCurrent = null, this.fragPrevious = null, this.clearInterval(), this.clearNextTick(), this.state = Mr;
            }, r3._streamEnded = function(t3, e3) {
              if (e3.live || t3.nextStart || !t3.end || !this.media)
                return false;
              var r4 = e3.partList;
              if (null != r4 && r4.length) {
                var i4 = r4[r4.length - 1];
                return Ar.isBuffered(this.media, i4.start + i4.duration / 2);
              }
              var n3 = e3.fragments[e3.fragments.length - 1].type;
              return this.fragmentTracker.isEndListAppended(n3);
            }, r3.getLevelDetails = function() {
              var t3;
              if (this.levels && null !== this.levelLastLoaded)
                return null == (t3 = this.levels[this.levelLastLoaded]) ? void 0 : t3.details;
            }, r3.onMediaAttached = function(t3, e3) {
              var r4 = this.media = this.mediaBuffer = e3.media;
              this.onvseeking = this.onMediaSeeking.bind(this), this.onvended = this.onMediaEnded.bind(this), r4.addEventListener("seeking", this.onvseeking), r4.addEventListener("ended", this.onvended);
              var i4 = this.config;
              this.levels && i4.autoStartLoad && this.state === Mr && this.startLoad(i4.startPosition);
            }, r3.onMediaDetaching = function() {
              var t3 = this.media;
              null != t3 && t3.ended && (this.log("MSE detaching and video ended, reset startPosition"), this.startPosition = this.lastCurrentTime = 0), t3 && this.onvseeking && this.onvended && (t3.removeEventListener("seeking", this.onvseeking), t3.removeEventListener("ended", this.onvended), this.onvseeking = this.onvended = null), this.keyLoader && this.keyLoader.detach(), this.media = this.mediaBuffer = null, this.loadedmetadata = false, this.fragmentTracker.removeAllFragments(), this.stopLoad();
            }, r3.onMediaSeeking = function() {
              var t3 = this.config, e3 = this.fragCurrent, r4 = this.media, i4 = this.mediaBuffer, n3 = this.state, a2 = r4 ? r4.currentTime : 0, s2 = Ar.bufferInfo(i4 || r4, a2, t3.maxBufferHole);
              if (this.log("media seeking to " + (y(a2) ? a2.toFixed(3) : a2) + ", state: " + n3), this.state === Yr)
                this.resetLoadingState();
              else if (e3) {
                var o2 = t3.maxFragLookUpTolerance, l4 = e3.start - o2, u3 = e3.start + e3.duration + o2;
                if (!s2.len || u3 < s2.start || l4 > s2.end) {
                  var h4 = a2 > u3;
                  (a2 < l4 || h4) && (h4 && e3.loader && (this.log("seeking outside of buffer while fragment load in progress, cancel fragment load"), e3.abortRequests()), this.resetLoadingState());
                }
              }
              r4 && (this.fragmentTracker.removeFragmentsInRange(a2, 1 / 0, this.playlistType, true), this.lastCurrentTime = a2), this.loadedmetadata || s2.len || (this.nextLoadPosition = this.startPosition = a2), this.tickImmediate();
            }, r3.onMediaEnded = function() {
              this.startPosition = this.lastCurrentTime = 0;
            }, r3.onManifestLoaded = function(t3, e3) {
              this.startTimeOffset = e3.startTimeOffset, this.initPTS = [];
            }, r3.onHandlerDestroying = function() {
              this.stopLoad(), t2.prototype.onHandlerDestroying.call(this);
            }, r3.onHandlerDestroyed = function() {
              this.state = Mr, this.fragmentLoader && this.fragmentLoader.destroy(), this.keyLoader && this.keyLoader.destroy(), this.decrypter && this.decrypter.destroy(), this.hls = this.log = this.warn = this.decrypter = this.keyLoader = this.fragmentLoader = this.fragmentTracker = null, t2.prototype.onHandlerDestroyed.call(this);
            }, r3.loadFragment = function(t3, e3, r4) {
              this._loadFragForPlayback(t3, e3, r4);
            }, r3._loadFragForPlayback = function(t3, e3, r4) {
              var i4 = this;
              this._doFragLoad(t3, e3, r4, function(e4) {
                if (i4.fragContextChanged(t3))
                  return i4.warn("Fragment " + t3.sn + (e4.part ? " p: " + e4.part.index : "") + " of level " + t3.level + " was dropped during download."), void i4.fragmentTracker.removeFragment(t3);
                t3.stats.chunkCount++, i4._handleFragmentLoadProgress(e4);
              }).then(function(e4) {
                if (e4) {
                  var r5 = i4.state;
                  i4.fragContextChanged(t3) ? (r5 === Br || !i4.fragCurrent && r5 === Hr) && (i4.fragmentTracker.removeFragment(t3), i4.state = Nr) : ("payload" in e4 && (i4.log("Loaded fragment " + t3.sn + " of level " + t3.level), i4.hls.trigger(T2.FRAG_LOADED, e4)), i4._handleFragmentLoadComplete(e4));
                }
              }).catch(function(e4) {
                i4.state !== Mr && i4.state !== Wr && (i4.warn(e4), i4.resetFragmentLoading(t3));
              });
            }, r3.clearTrackerIfNeeded = function(t3) {
              var e3;
              if (this.fragmentTracker.getState(t3) === hr) {
                var r4 = t3.type, i4 = this.getFwdBufferInfo(this.mediaBuffer, r4), n3 = Math.max(t3.duration, i4 ? i4.len : this.config.maxBufferLength);
                this.reduceMaxBufferLength(n3) && this.fragmentTracker.removeFragment(t3);
              } else
                0 === (null == (e3 = this.mediaBuffer) ? void 0 : e3.buffered.length) && this.fragmentTracker.removeAllFragments();
            }, r3.flushMainBuffer = function(t3, e3, r4) {
              if (void 0 === r4 && (r4 = null), t3 - e3) {
                var i4 = { startOffset: t3, endOffset: e3, type: r4 };
                this.hls.trigger(T2.BUFFER_FLUSHING, i4);
              }
            }, r3._loadInitSegment = function(t3, e3) {
              var r4 = this;
              this._doFragLoad(t3, e3).then(function(e4) {
                if (!e4 || r4.fragContextChanged(t3) || !r4.levels)
                  throw new Error("init load aborted");
                return e4;
              }).then(function(e4) {
                var i4 = r4.hls, n3 = e4.payload, a2 = t3.decryptdata;
                if (n3 && n3.byteLength > 0 && a2 && a2.key && a2.iv && "AES-128" === a2.method) {
                  var s2 = self.performance.now();
                  return r4.decrypter.decrypt(new Uint8Array(n3), a2.key.buffer, a2.iv.buffer).catch(function(e5) {
                    throw i4.trigger(T2.ERROR, { type: E.MEDIA_ERROR, details: S3.FRAG_DECRYPT_ERROR, fatal: false, error: e5, reason: e5.message, frag: t3 }), e5;
                  }).then(function(r5) {
                    var n4 = self.performance.now();
                    return i4.trigger(T2.FRAG_DECRYPTED, { frag: t3, payload: r5, stats: { tstart: s2, tdecrypt: n4 } }), e4.payload = r5, e4;
                  });
                }
                return e4;
              }).then(function(i4) {
                var n3 = r4.fragCurrent, a2 = r4.hls;
                if (!r4.levels)
                  throw new Error("init load aborted, missing levels");
                var s2 = t3.stats;
                r4.state = Nr, e3.fragmentError = 0, t3.data = new Uint8Array(i4.payload), s2.parsing.start = s2.buffering.start = self.performance.now(), s2.parsing.end = s2.buffering.end = self.performance.now(), i4.frag === n3 && a2.trigger(T2.FRAG_BUFFERED, { stats: s2, frag: n3, part: null, id: t3.type }), r4.tick();
              }).catch(function(e4) {
                r4.state !== Mr && r4.state !== Wr && (r4.warn(e4), r4.resetFragmentLoading(t3));
              });
            }, r3.fragContextChanged = function(t3) {
              var e3 = this.fragCurrent;
              return !t3 || !e3 || t3.level !== e3.level || t3.sn !== e3.sn || t3.urlId !== e3.urlId;
            }, r3.fragBufferedComplete = function(t3, e3) {
              var r4, i4, n3, a2, s2 = this.mediaBuffer ? this.mediaBuffer : this.media;
              this.log("Buffered " + t3.type + " sn: " + t3.sn + (e3 ? " part: " + e3.index : "") + " of " + ("[stream-controller]" === this.logPrefix ? "level" : "track") + " " + t3.level + " (frag:[" + (null != (r4 = t3.startPTS) ? r4 : NaN).toFixed(3) + "-" + (null != (i4 = t3.endPTS) ? i4 : NaN).toFixed(3) + "] > buffer:" + (s2 ? Or(Ar.getBuffered(s2)) : "(detached)") + ")"), this.state = Nr, s2 && (!this.loadedmetadata && t3.type == he2 && s2.buffered.length && (null == (n3 = this.fragCurrent) ? void 0 : n3.sn) === (null == (a2 = this.fragPrevious) ? void 0 : a2.sn) && (this.loadedmetadata = true, this.seekToStartPos()), this.tick());
            }, r3.seekToStartPos = function() {
            }, r3._handleFragmentLoadComplete = function(t3) {
              var e3 = this.transmuxer;
              if (e3) {
                var r4 = t3.frag, i4 = t3.part, n3 = t3.partsLoaded, a2 = !n3 || 0 === n3.length || n3.some(function(t4) {
                  return !t4;
                }), s2 = new kr(r4.level, r4.sn, r4.stats.chunkCount + 1, 0, i4 ? i4.index : -1, !a2);
                e3.flush(s2);
              }
            }, r3._handleFragmentLoadProgress = function(t3) {
            }, r3._doFragLoad = function(t3, e3, r4, i4) {
              var n3, a2 = this;
              void 0 === r4 && (r4 = null);
              var s2 = null == e3 ? void 0 : e3.details;
              if (!this.levels || !s2)
                throw new Error("frag load aborted, missing level" + (s2 ? "" : " detail") + "s");
              var o2 = null;
              if (!t3.encrypted || null != (n3 = t3.decryptdata) && n3.key ? !t3.encrypted && s2.encryptedFragments.length && this.keyLoader.loadClear(t3, s2.encryptedFragments) : (this.log("Loading key for " + t3.sn + " of [" + s2.startSN + "-" + s2.endSN + "], " + ("[stream-controller]" === this.logPrefix ? "level" : "track") + " " + t3.level), this.state = Ur, this.fragCurrent = t3, o2 = this.keyLoader.load(t3).then(function(t4) {
                if (!a2.fragContextChanged(t4.frag))
                  return a2.hls.trigger(T2.KEY_LOADED, t4), a2.state === Ur && (a2.state = Nr), t4;
              }), this.hls.trigger(T2.KEY_LOADING, { frag: t3 }), null === this.fragCurrent && (o2 = Promise.reject(new Error("frag load aborted, context changed in KEY_LOADING")))), r4 = Math.max(t3.start, r4 || 0), this.config.lowLatencyMode) {
                var l4 = s2.partList;
                if (l4 && i4) {
                  r4 > t3.end && s2.fragmentHint && (t3 = s2.fragmentHint);
                  var u3 = this.getNextPart(l4, t3, r4);
                  if (u3 > -1) {
                    var h4, d2 = l4[u3];
                    return this.log("Loading part sn: " + t3.sn + " p: " + d2.index + " cc: " + t3.cc + " of playlist [" + s2.startSN + "-" + s2.endSN + "] parts [0-" + u3 + "-" + (l4.length - 1) + "] " + ("[stream-controller]" === this.logPrefix ? "level" : "track") + ": " + t3.level + ", target: " + parseFloat(r4.toFixed(3))), this.nextLoadPosition = d2.start + d2.duration, this.state = Br, h4 = o2 ? o2.then(function(r5) {
                      return !r5 || a2.fragContextChanged(r5.frag) ? null : a2.doFragPartsLoad(t3, d2, e3, i4);
                    }).catch(function(t4) {
                      return a2.handleFragLoadError(t4);
                    }) : this.doFragPartsLoad(t3, d2, e3, i4).catch(function(t4) {
                      return a2.handleFragLoadError(t4);
                    }), this.hls.trigger(T2.FRAG_LOADING, { frag: t3, part: d2, targetBufferTime: r4 }), null === this.fragCurrent ? Promise.reject(new Error("frag load aborted, context changed in FRAG_LOADING parts")) : h4;
                  }
                  if (!t3.url || this.loadedEndOfParts(l4, r4))
                    return Promise.resolve(null);
                }
              }
              this.log("Loading fragment " + t3.sn + " cc: " + t3.cc + " " + (s2 ? "of [" + s2.startSN + "-" + s2.endSN + "] " : "") + ("[stream-controller]" === this.logPrefix ? "level" : "track") + ": " + t3.level + ", target: " + parseFloat(r4.toFixed(3))), y(t3.sn) && !this.bitrateTest && (this.nextLoadPosition = t3.start + t3.duration), this.state = Br;
              var c2, f3 = this.config.progressive;
              return c2 = f3 && o2 ? o2.then(function(e4) {
                return !e4 || a2.fragContextChanged(null == e4 ? void 0 : e4.frag) ? null : a2.fragmentLoader.load(t3, i4);
              }).catch(function(t4) {
                return a2.handleFragLoadError(t4);
              }) : Promise.all([this.fragmentLoader.load(t3, f3 ? i4 : void 0), o2]).then(function(t4) {
                var e4 = t4[0];
                return !f3 && e4 && i4 && i4(e4), e4;
              }).catch(function(t4) {
                return a2.handleFragLoadError(t4);
              }), this.hls.trigger(T2.FRAG_LOADING, { frag: t3, targetBufferTime: r4 }), null === this.fragCurrent ? Promise.reject(new Error("frag load aborted, context changed in FRAG_LOADING")) : c2;
            }, r3.doFragPartsLoad = function(t3, e3, r4, i4) {
              var n3 = this;
              return new Promise(function(a2, s2) {
                var o2, l4 = [], u3 = null == (o2 = r4.details) ? void 0 : o2.partList;
                !function e4(o3) {
                  n3.fragmentLoader.loadPart(t3, o3, i4).then(function(i5) {
                    l4[o3.index] = i5;
                    var s3 = i5.part;
                    n3.hls.trigger(T2.FRAG_LOADED, i5);
                    var h4 = Be2(r4, t3.sn, o3.index + 1) || Ge2(u3, t3.sn, o3.index + 1);
                    if (!h4)
                      return a2({ frag: t3, part: s3, partsLoaded: l4 });
                    e4(h4);
                  }).catch(s2);
                }(e3);
              });
            }, r3.handleFragLoadError = function(t3) {
              if ("data" in t3) {
                var e3 = t3.data;
                t3.data && e3.details === S3.INTERNAL_ABORTED ? this.handleFragLoadAborted(e3.frag, e3.part) : this.hls.trigger(T2.ERROR, e3);
              } else
                this.hls.trigger(T2.ERROR, { type: E.OTHER_ERROR, details: S3.INTERNAL_EXCEPTION, err: t3, error: t3, fatal: true });
              return null;
            }, r3._handleTransmuxerFlush = function(t3) {
              var e3 = this.getCurrentContext(t3);
              if (e3 && this.state === Hr) {
                var r4 = e3.frag, i4 = e3.part, n3 = e3.level, a2 = self.performance.now();
                r4.stats.parsing.end = a2, i4 && (i4.stats.parsing.end = a2), this.updateLevelTiming(r4, i4, n3, t3.partial);
              } else
                this.fragCurrent || this.state === Mr || this.state === Wr || (this.state = Nr);
            }, r3.getCurrentContext = function(t3) {
              var e3 = this.levels, r4 = this.fragCurrent, i4 = t3.level, n3 = t3.sn, a2 = t3.part;
              if (null == e3 || !e3[i4])
                return this.warn("Levels object was unset while buffering fragment " + n3 + " of level " + i4 + ". The current chunk will not be buffered."), null;
              var s2 = e3[i4], o2 = a2 > -1 ? Be2(s2, n3, a2) : null, l4 = o2 ? o2.fragment : function(t4, e4, r5) {
                if (null == t4 || !t4.details)
                  return null;
                var i5 = t4.details, n4 = i5.fragments[e4 - i5.startSN];
                return n4 || ((n4 = i5.fragmentHint) && n4.sn === e4 ? n4 : e4 < i5.startSN && r5 && r5.sn === e4 ? r5 : null);
              }(s2, n3, r4);
              return l4 ? (r4 && r4 !== l4 && (l4.stats = r4.stats), { frag: l4, part: o2, level: s2 }) : null;
            }, r3.bufferFragmentData = function(t3, e3, r4, i4) {
              var n3;
              if (t3 && this.state === Hr) {
                var a2 = t3.data1, s2 = t3.data2, o2 = a2;
                if (a2 && s2 && (o2 = _t(a2, s2)), null != (n3 = o2) && n3.length) {
                  var l4 = { type: t3.type, frag: e3, part: r4, chunkMeta: i4, parent: e3.type, data: o2 };
                  this.hls.trigger(T2.BUFFER_APPENDING, l4), t3.dropped && t3.independent && !r4 && this.flushBufferGap(e3);
                }
              }
            }, r3.flushBufferGap = function(t3) {
              var e3 = this.media;
              if (e3)
                if (Ar.isBuffered(e3, e3.currentTime)) {
                  var r4 = e3.currentTime, i4 = Ar.bufferInfo(e3, r4, 0), n3 = t3.duration, a2 = Math.min(2 * this.config.maxFragLookUpTolerance, 0.25 * n3), s2 = Math.max(Math.min(t3.start - a2, i4.end - a2), r4 + a2);
                  t3.start - s2 > a2 && this.flushMainBuffer(s2, t3.start);
                } else
                  this.flushMainBuffer(0, t3.start);
            }, r3.getFwdBufferInfo = function(t3, e3) {
              var r4 = this.getLoadPosition();
              return y(r4) ? this.getFwdBufferInfoAtPos(t3, r4, e3) : null;
            }, r3.getFwdBufferInfoAtPos = function(t3, e3, r4) {
              var i4 = this.config.maxBufferHole, n3 = Ar.bufferInfo(t3, e3, i4);
              if (0 === n3.len && void 0 !== n3.nextStart) {
                var a2 = this.fragmentTracker.getBufferedFrag(e3, r4);
                if (a2 && n3.nextStart < a2.end)
                  return Ar.bufferInfo(t3, e3, Math.max(n3.nextStart, i4));
              }
              return n3;
            }, r3.getMaxBufferLength = function(t3) {
              var e3, r4 = this.config;
              return e3 = t3 ? Math.max(8 * r4.maxBufferSize / t3, r4.maxBufferLength) : r4.maxBufferLength, Math.min(e3, r4.maxMaxBufferLength);
            }, r3.reduceMaxBufferLength = function(t3) {
              var e3 = this.config, r4 = t3 || e3.maxBufferLength;
              return e3.maxMaxBufferLength >= r4 && (e3.maxMaxBufferLength /= 2, this.warn("Reduce max buffer length to " + e3.maxMaxBufferLength + "s"), true);
            }, r3.getNextFragment = function(t3, e3) {
              var r4 = e3.fragments, i4 = r4.length;
              if (!i4)
                return null;
              var n3, a2 = this.config, s2 = r4[0].start;
              if (e3.live) {
                var o2 = a2.initialLiveManifestSize;
                if (i4 < o2)
                  return this.warn("Not enough fragments to start playback (have: " + i4 + ", need: " + o2 + ")"), null;
                e3.PTSKnown || this.startFragRequested || -1 !== this.startPosition || (n3 = this.getInitialLiveFragment(e3, r4), this.startPosition = n3 ? this.hls.liveSyncPosition || n3.start : t3);
              } else
                t3 <= s2 && (n3 = r4[0]);
              if (!n3) {
                var l4 = a2.lowLatencyMode ? e3.partEnd : e3.fragmentEnd;
                n3 = this.getFragmentAtPosition(t3, l4, e3);
              }
              return this.mapToInitFragWhenRequired(n3);
            }, r3.isLoopLoading = function(t3, e3) {
              var r4 = this.fragmentTracker.getState(t3);
              return (r4 === cr || r4 === dr && !!t3.gap) && this.nextLoadPosition > e3;
            }, r3.getNextFragmentLoopLoading = function(t3, e3, r4, i4, n3) {
              var a2 = t3.gap, s2 = this.getNextFragment(this.nextLoadPosition, e3);
              if (null === s2)
                return s2;
              if (t3 = s2, a2 && t3 && !t3.gap && r4.nextStart) {
                var o2 = this.getFwdBufferInfoAtPos(this.mediaBuffer ? this.mediaBuffer : this.media, r4.nextStart, i4);
                if (null !== o2 && r4.len + o2.len >= n3)
                  return this.log('buffer full after gaps in "' + i4 + '" playlist starting at sn: ' + t3.sn), null;
              }
              return t3;
            }, r3.mapToInitFragWhenRequired = function(t3) {
              return null == t3 || !t3.initSegment || null != t3 && t3.initSegment.data || this.bitrateTest ? t3 : t3.initSegment;
            }, r3.getNextPart = function(t3, e3, r4) {
              for (var i4 = -1, n3 = false, a2 = true, s2 = 0, o2 = t3.length; s2 < o2; s2++) {
                var l4 = t3[s2];
                if (a2 = a2 && !l4.independent, i4 > -1 && r4 < l4.start)
                  break;
                var u3 = l4.loaded;
                u3 ? i4 = -1 : (n3 || l4.independent || a2) && l4.fragment === e3 && (i4 = s2), n3 = u3;
              }
              return i4;
            }, r3.loadedEndOfParts = function(t3, e3) {
              var r4 = t3[t3.length - 1];
              return r4 && e3 > r4.start && r4.loaded;
            }, r3.getInitialLiveFragment = function(t3, e3) {
              var r4 = this.fragPrevious, i4 = null;
              if (r4) {
                if (t3.hasProgramDateTime && (this.log("Live playlist, switching playlist, load frag with same PDT: " + r4.programDateTime), i4 = function(t4, e4, r5) {
                  if (null === e4 || !Array.isArray(t4) || !t4.length || !y(e4))
                    return null;
                  if (e4 < (t4[0].programDateTime || 0))
                    return null;
                  if (e4 >= (t4[t4.length - 1].endProgramDateTime || 0))
                    return null;
                  r5 = r5 || 0;
                  for (var i5 = 0; i5 < t4.length; ++i5) {
                    var n4 = t4[i5];
                    if (ze2(e4, r5, n4))
                      return n4;
                  }
                  return null;
                }(e3, r4.endProgramDateTime, this.config.maxFragLookUpTolerance)), !i4) {
                  var n3 = r4.sn + 1;
                  if (n3 >= t3.startSN && n3 <= t3.endSN) {
                    var a2 = e3[n3 - t3.startSN];
                    r4.cc === a2.cc && (i4 = a2, this.log("Live playlist, switching playlist, load frag with next SN: " + i4.sn));
                  }
                  i4 || (i4 = function(t4, e4) {
                    return je(t4, function(t5) {
                      return t5.cc < e4 ? 1 : t5.cc > e4 ? -1 : 0;
                    });
                  }(e3, r4.cc), i4 && this.log("Live playlist, switching playlist, load frag with same CC: " + i4.sn));
                }
              } else {
                var s2 = this.hls.liveSyncPosition;
                null !== s2 && (i4 = this.getFragmentAtPosition(s2, this.bitrateTest ? t3.fragmentEnd : t3.edge, t3));
              }
              return i4;
            }, r3.getFragmentAtPosition = function(t3, e3, r4) {
              var i4, n3 = this.config, a2 = this.fragPrevious, s2 = r4.fragments, o2 = r4.endSN, l4 = r4.fragmentHint, u3 = n3.maxFragLookUpTolerance, h4 = !!(n3.lowLatencyMode && r4.partList && l4);
              if (h4 && l4 && !this.bitrateTest && (s2 = s2.concat(l4), o2 = l4.sn), i4 = t3 < e3 ? qe(a2, s2, t3, t3 > e3 - u3 ? 0 : u3) : s2[s2.length - 1]) {
                var d2 = i4.sn - r4.startSN, c2 = this.fragmentTracker.getState(i4);
                if ((c2 === cr || c2 === dr && i4.gap) && (a2 = i4), a2 && i4.sn === a2.sn && !h4 && a2 && i4.level === a2.level) {
                  var f3 = s2[d2 + 1];
                  i4 = i4.sn < o2 && this.fragmentTracker.getState(f3) !== cr ? f3 : null;
                }
              }
              return i4;
            }, r3.synchronizeToLiveEdge = function(t3) {
              var e3 = this.config, r4 = this.media;
              if (r4) {
                var i4 = this.hls.liveSyncPosition, n3 = r4.currentTime, a2 = t3.fragments[0].start, s2 = t3.edge, o2 = n3 >= a2 - e3.maxFragLookUpTolerance && n3 <= s2;
                if (null !== i4 && r4.duration > i4 && (n3 < i4 || !o2)) {
                  var l4 = void 0 !== e3.liveMaxLatencyDuration ? e3.liveMaxLatencyDuration : e3.liveMaxLatencyDurationCount * t3.targetduration;
                  (!o2 && r4.readyState < 4 || n3 < s2 - l4) && (this.loadedmetadata || (this.nextLoadPosition = i4), r4.readyState && (this.warn("Playback: " + n3.toFixed(3) + " is located too far from the end of live sliding playlist: " + s2 + ", reset currentTime to : " + i4.toFixed(3)), r4.currentTime = i4));
                }
              }
            }, r3.alignPlaylists = function(t3, e3) {
              var r4 = this.levels, i4 = this.levelLastLoaded, n3 = this.fragPrevious, a2 = null !== i4 ? r4[i4] : null, s2 = t3.fragments.length;
              if (!s2)
                return this.warn("No fragments in live playlist"), 0;
              var o2 = t3.fragments[0].start, l4 = !e3, u3 = t3.alignedSliding && y(o2);
              if (l4 || !u3 && !o2) {
                wr(n3, a2, t3);
                var h4 = t3.fragments[0].start;
                return this.log("Live playlist sliding: " + h4.toFixed(2) + " start-sn: " + (e3 ? e3.startSN : "na") + "->" + t3.startSN + " prev-sn: " + (n3 ? n3.sn : "na") + " fragments: " + s2), h4;
              }
              return o2;
            }, r3.waitForCdnTuneIn = function(t3) {
              return t3.live && t3.canBlockReload && t3.partTarget && t3.tuneInGoal > Math.max(t3.partHoldBack, 3 * t3.partTarget);
            }, r3.setStartPosition = function(t3, e3) {
              var r4 = this.startPosition;
              if (r4 < e3 && (r4 = -1), -1 === r4 || -1 === this.lastCurrentTime) {
                var i4 = null !== this.startTimeOffset, n3 = i4 ? this.startTimeOffset : t3.startTimeOffset;
                null !== n3 && y(n3) ? (r4 = e3 + n3, n3 < 0 && (r4 += t3.totalduration), r4 = Math.min(Math.max(e3, r4), e3 + t3.totalduration), this.log("Start time offset " + n3 + " found in " + (i4 ? "multivariant" : "media") + " playlist, adjust startPosition to " + r4), this.startPosition = r4) : t3.live ? r4 = this.hls.liveSyncPosition || e3 : this.startPosition = r4 = 0, this.lastCurrentTime = r4;
              }
              this.nextLoadPosition = r4;
            }, r3.getLoadPosition = function() {
              var t3 = this.media, e3 = 0;
              return this.loadedmetadata && t3 ? e3 = t3.currentTime : this.nextLoadPosition && (e3 = this.nextLoadPosition), e3;
            }, r3.handleFragLoadAborted = function(t3, e3) {
              this.transmuxer && "initSegment" !== t3.sn && t3.stats.aborted && (this.warn("Fragment " + t3.sn + (e3 ? " part" + e3.index : "") + " of level " + t3.level + " was aborted"), this.resetFragmentLoading(t3));
            }, r3.resetFragmentLoading = function(t3) {
              this.fragCurrent && (this.fragContextChanged(t3) || this.state === Gr) || (this.state = Nr);
            }, r3.onFragmentOrKeyLoadError = function(t3, e3) {
              if (e3.chunkMeta && !e3.frag) {
                var r4 = this.getCurrentContext(e3.chunkMeta);
                r4 && (e3.frag = r4.frag);
              }
              var i4 = e3.frag;
              if (i4 && i4.type === t3 && this.levels)
                if (this.fragContextChanged(i4)) {
                  var n3;
                  this.warn("Frag load error must match current frag to retry " + i4.url + " > " + (null == (n3 = this.fragCurrent) ? void 0 : n3.url));
                } else {
                  var a2 = e3.details === S3.FRAG_GAP;
                  a2 && this.fragmentTracker.fragBuffered(i4, true);
                  var s2 = e3.errorAction, o2 = s2 || {}, l4 = o2.action, u3 = o2.retryCount, h4 = void 0 === u3 ? 0 : u3, d2 = o2.retryConfig;
                  if (s2 && l4 === tr && d2) {
                    this.loadedmetadata || (this.startFragRequested = false, this.nextLoadPosition = this.startPosition);
                    var c2 = Ve(d2, h4);
                    this.warn("Fragment " + i4.sn + " of " + t3 + " " + i4.level + " errored with " + e3.details + ", retrying loading " + (h4 + 1) + "/" + d2.maxNumRetry + " in " + c2 + "ms"), s2.resolved = true, this.retryDate = self.performance.now() + c2, this.state = Gr;
                  } else
                    d2 && s2 ? (this.resetFragmentErrors(t3), h4 < d2.maxNumRetry ? a2 || (s2.resolved = true) : D2.warn(e3.details + " reached or exceeded max retry (" + h4 + ")")) : this.state = Wr;
                  this.tickImmediate();
                }
            }, r3.reduceLengthAndFlushBuffer = function(t3) {
              if (this.state === Hr || this.state === Vr) {
                var e3 = t3.parent, r4 = this.getFwdBufferInfo(this.mediaBuffer, e3), i4 = r4 && r4.len > 0.5;
                i4 && this.reduceMaxBufferLength(r4.len);
                var n3 = !i4;
                return n3 && this.warn("Buffer full error while media.currentTime is not buffered, flush " + e3 + " buffer"), t3.frag && (this.fragmentTracker.removeFragment(t3.frag), this.nextLoadPosition = t3.frag.start), this.resetLoadingState(), n3;
              }
              return false;
            }, r3.resetFragmentErrors = function(t3) {
              t3 === de2 && (this.fragCurrent = null), this.loadedmetadata || (this.startFragRequested = false), this.state !== Mr && (this.state = Nr);
            }, r3.afterBufferFlushed = function(t3, e3, r4) {
              if (t3) {
                var i4 = Ar.getBuffered(t3);
                this.fragmentTracker.detectEvictedFragments(e3, i4, r4), this.state === Yr && this.resetLoadingState();
              }
            }, r3.resetLoadingState = function() {
              this.log("Reset loading state"), this.fragCurrent = null, this.fragPrevious = null, this.state = Nr;
            }, r3.resetStartWhenNotLoaded = function(t3) {
              if (!this.loadedmetadata) {
                this.startFragRequested = false;
                var e3 = this.levels ? this.levels[t3].details : null;
                null != e3 && e3.live ? (this.startPosition = -1, this.setStartPosition(e3, 0), this.resetLoadingState()) : this.nextLoadPosition = this.startPosition;
              }
            }, r3.resetWhenMissingContext = function(t3) {
              this.warn("The loading context changed while buffering fragment " + t3.sn + " of level " + t3.level + ". This chunk will not be buffered."), this.removeUnbufferedFrags(), this.resetStartWhenNotLoaded(t3.level), this.resetLoadingState();
            }, r3.removeUnbufferedFrags = function(t3) {
              void 0 === t3 && (t3 = 0), this.fragmentTracker.removeFragmentsInRange(t3, 1 / 0, this.playlistType, false, true);
            }, r3.updateLevelTiming = function(t3, e3, r4, i4) {
              var n3, a2 = this, s2 = r4.details;
              if (s2) {
                if (Object.keys(t3.elementaryStreams).reduce(function(e4, n4) {
                  var o3 = t3.elementaryStreams[n4];
                  if (o3) {
                    var l4 = o3.endPTS - o3.startPTS;
                    if (l4 <= 0)
                      return a2.warn("Could not parse fragment " + t3.sn + " " + n4 + " duration reliably (" + l4 + ")"), e4 || false;
                    var u3 = i4 ? 0 : Oe3(s2, t3, o3.startPTS, o3.endPTS, o3.startDTS, o3.endDTS);
                    return a2.hls.trigger(T2.LEVEL_PTS_UPDATED, { details: s2, level: r4, drift: u3, type: n4, frag: t3, start: o3.startPTS, end: o3.endPTS }), true;
                  }
                  return e4;
                }, false))
                  r4.fragmentError = 0;
                else if (null === (null == (n3 = this.transmuxer) ? void 0 : n3.error)) {
                  var o2 = new Error("Found no media in fragment " + t3.sn + " of level " + r4.id + " resetting transmuxer to fallback to playlist timing");
                  if (this.warn(o2.message), this.hls.trigger(T2.ERROR, { type: E.MEDIA_ERROR, details: S3.FRAG_PARSING_ERROR, fatal: false, error: o2, frag: t3, reason: "Found no media in msn " + t3.sn + ' of level "' + r4.url + '"' }), !this.hls)
                    return;
                  this.resetTransmuxer();
                }
                this.state = Vr, this.hls.trigger(T2.FRAG_PARSED, { frag: t3, part: e3 });
              } else
                this.warn("level.details undefined");
            }, r3.resetTransmuxer = function() {
              this.transmuxer && (this.transmuxer.destroy(), this.transmuxer = null);
            }, r3.recoverWorkerError = function(t3) {
              "demuxerWorker" === t3.event && (this.resetTransmuxer(), this.resetLoadingState());
            }, a(e2, [{ key: "state", get: function() {
              return this._state;
            }, set: function(t3) {
              var e3 = this._state;
              e3 !== t3 && (this._state = t3, this.log(e3 + "->" + t3));
            } }]), e2;
          }(Lr);
          function zr() {
            if ("undefined" != typeof self)
              return self.MediaSource || self.WebKitMediaSource;
          }
          function Qr() {
            return self.SourceBuffer || self.WebKitSourceBuffer;
          }
          function $r(t2, e2) {
            return void 0 === t2 && (t2 = ""), void 0 === e2 && (e2 = 9e4), { type: t2, id: -1, pid: -1, inputTimeScale: e2, sequenceNumber: -1, samples: [], dropped: 0 };
          }
          var Jr = function() {
            function t2() {
              this._audioTrack = void 0, this._id3Track = void 0, this.frameIndex = 0, this.cachedData = null, this.basePTS = null, this.initPTS = null, this.lastPTS = null;
            }
            var e2 = t2.prototype;
            return e2.resetInitSegment = function(t3, e3, r3, i4) {
              this._id3Track = { type: "id3", id: 3, pid: -1, inputTimeScale: 9e4, sequenceNumber: 0, samples: [], dropped: 0 };
            }, e2.resetTimeStamp = function(t3) {
              this.initPTS = t3, this.resetContiguity();
            }, e2.resetContiguity = function() {
              this.basePTS = null, this.lastPTS = null, this.frameIndex = 0;
            }, e2.canParse = function(t3, e3) {
              return false;
            }, e2.appendFrame = function(t3, e3, r3) {
            }, e2.demux = function(t3, e3) {
              this.cachedData && (t3 = _t(this.cachedData, t3), this.cachedData = null);
              var r3, i4 = nt2(t3, 0), n3 = i4 ? i4.length : 0, a2 = this._audioTrack, s2 = this._id3Track, o2 = i4 ? function(t4) {
                for (var e4 = ut(t4), r4 = 0; r4 < e4.length; r4++) {
                  var i5 = e4[r4];
                  if (ot(i5))
                    return gt2(i5);
                }
              }(i4) : void 0, l4 = t3.length;
              for ((null === this.basePTS || 0 === this.frameIndex && y(o2)) && (this.basePTS = Zr(o2, e3, this.initPTS), this.lastPTS = this.basePTS), null === this.lastPTS && (this.lastPTS = this.basePTS), i4 && i4.length > 0 && s2.samples.push({ pts: this.lastPTS, dts: this.lastPTS, data: i4, type: Ee2, duration: Number.POSITIVE_INFINITY }); n3 < l4; ) {
                if (this.canParse(t3, n3)) {
                  var u3 = this.appendFrame(a2, t3, n3);
                  u3 ? (this.frameIndex++, this.lastPTS = u3.sample.pts, r3 = n3 += u3.length) : n3 = l4;
                } else
                  st2(t3, n3) ? (i4 = nt2(t3, n3), s2.samples.push({ pts: this.lastPTS, dts: this.lastPTS, data: i4, type: Ee2, duration: Number.POSITIVE_INFINITY }), r3 = n3 += i4.length) : n3++;
                if (n3 === l4 && r3 !== l4) {
                  var h4 = tt2(t3, r3);
                  this.cachedData ? this.cachedData = _t(this.cachedData, h4) : this.cachedData = h4;
                }
              }
              return { audioTrack: a2, videoTrack: $r(), id3Track: s2, textTrack: $r() };
            }, e2.demuxSampleAes = function(t3, e3, r3) {
              return Promise.reject(new Error("[" + this + "] This demuxer does not support Sample-AES decryption"));
            }, e2.flush = function(t3) {
              var e3 = this.cachedData;
              return e3 && (this.cachedData = null, this.demux(e3, 0)), { audioTrack: this._audioTrack, videoTrack: $r(), id3Track: this._id3Track, textTrack: $r() };
            }, e2.destroy = function() {
            }, t2;
          }(), Zr = function(t2, e2, r3) {
            return y(t2) ? 90 * t2 : 9e4 * e2 + (r3 ? 9e4 * r3.baseTime / r3.timescale : 0);
          };
          function ti(t2, e2) {
            return 255 === t2[e2] && 240 == (246 & t2[e2 + 1]);
          }
          function ei(t2, e2) {
            return 1 & t2[e2 + 1] ? 7 : 9;
          }
          function ri(t2, e2) {
            return (3 & t2[e2 + 3]) << 11 | t2[e2 + 4] << 3 | (224 & t2[e2 + 5]) >>> 5;
          }
          function ii(t2, e2) {
            return e2 + 1 < t2.length && ti(t2, e2);
          }
          function ni(t2, e2) {
            if (ii(t2, e2)) {
              var r3 = ei(t2, e2);
              if (e2 + r3 >= t2.length)
                return false;
              var i4 = ri(t2, e2);
              if (i4 <= r3)
                return false;
              var n3 = e2 + i4;
              return n3 === t2.length || ii(t2, n3);
            }
            return false;
          }
          function ai(t2, e2, r3, i4, n3) {
            if (!t2.samplerate) {
              var a2 = function(t3, e3, r4, i5) {
                var n4, a3, s2, o2, l4 = navigator.userAgent.toLowerCase(), u3 = i5, h4 = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
                n4 = 1 + ((192 & e3[r4 + 2]) >>> 6);
                var d2 = (60 & e3[r4 + 2]) >>> 2;
                if (!(d2 > h4.length - 1))
                  return s2 = (1 & e3[r4 + 2]) << 2, s2 |= (192 & e3[r4 + 3]) >>> 6, D2.log("manifest codec:" + i5 + ", ADTS type:" + n4 + ", samplingIndex:" + d2), /firefox/i.test(l4) ? d2 >= 6 ? (n4 = 5, o2 = new Array(4), a3 = d2 - 3) : (n4 = 2, o2 = new Array(2), a3 = d2) : -1 !== l4.indexOf("android") ? (n4 = 2, o2 = new Array(2), a3 = d2) : (n4 = 5, o2 = new Array(4), i5 && (-1 !== i5.indexOf("mp4a.40.29") || -1 !== i5.indexOf("mp4a.40.5")) || !i5 && d2 >= 6 ? a3 = d2 - 3 : ((i5 && -1 !== i5.indexOf("mp4a.40.2") && (d2 >= 6 && 1 === s2 || /vivaldi/i.test(l4)) || !i5 && 1 === s2) && (n4 = 2, o2 = new Array(2)), a3 = d2)), o2[0] = n4 << 3, o2[0] |= (14 & d2) >> 1, o2[1] |= (1 & d2) << 7, o2[1] |= s2 << 3, 5 === n4 && (o2[1] |= (14 & a3) >> 1, o2[2] = (1 & a3) << 7, o2[2] |= 8, o2[3] = 0), { config: o2, samplerate: h4[d2], channelCount: s2, codec: "mp4a.40." + n4, manifestCodec: u3 };
                t3.trigger(T2.ERROR, { type: E.MEDIA_ERROR, details: S3.FRAG_PARSING_ERROR, fatal: true, reason: "invalid ADTS sampling index:" + d2 });
              }(e2, r3, i4, n3);
              if (!a2)
                return;
              t2.config = a2.config, t2.samplerate = a2.samplerate, t2.channelCount = a2.channelCount, t2.codec = a2.codec, t2.manifestCodec = a2.manifestCodec, D2.log("parsed codec:" + t2.codec + ", rate:" + a2.samplerate + ", channels:" + a2.channelCount);
            }
          }
          function si(t2) {
            return 9216e4 / t2;
          }
          function oi(t2, e2, r3, i4, n3) {
            var a2, s2 = i4 + n3 * si(t2.samplerate), o2 = function(t3, e3) {
              var r4 = ei(t3, e3);
              if (e3 + r4 <= t3.length) {
                var i5 = ri(t3, e3) - r4;
                if (i5 > 0)
                  return { headerLength: r4, frameLength: i5 };
              }
            }(e2, r3);
            if (o2) {
              var l4 = o2.frameLength, u3 = o2.headerLength, h4 = u3 + l4, d2 = Math.max(0, r3 + h4 - e2.length);
              d2 ? (a2 = new Uint8Array(h4 - u3)).set(e2.subarray(r3 + u3, e2.length), 0) : a2 = e2.subarray(r3 + u3, r3 + h4);
              var c2 = { unit: a2, pts: s2 };
              return d2 || t2.samples.push(c2), { sample: c2, length: h4, missing: d2 };
            }
            var f3 = e2.length - r3;
            return (a2 = new Uint8Array(f3)).set(e2.subarray(r3, e2.length), 0), { sample: { unit: a2, pts: s2 }, length: f3, missing: -1 };
          }
          var li = function(t2) {
            function e2(e3, r4) {
              var i4;
              return (i4 = t2.call(this) || this).observer = void 0, i4.config = void 0, i4.observer = e3, i4.config = r4, i4;
            }
            l3(e2, t2);
            var r3 = e2.prototype;
            return r3.resetInitSegment = function(e3, r4, i4, n3) {
              t2.prototype.resetInitSegment.call(this, e3, r4, i4, n3), this._audioTrack = { container: "audio/adts", type: "audio", id: 2, pid: -1, sequenceNumber: 0, segmentCodec: "aac", samples: [], manifestCodec: r4, duration: n3, inputTimeScale: 9e4, dropped: 0 };
            }, e2.probe = function(t3) {
              if (!t3)
                return false;
              for (var e3 = (nt2(t3, 0) || []).length, r4 = t3.length; e3 < r4; e3++)
                if (ni(t3, e3))
                  return D2.log("ADTS sync word found !"), true;
              return false;
            }, r3.canParse = function(t3, e3) {
              return function(t4, e4) {
                return function(t5, e5) {
                  return e5 + 5 < t5.length;
                }(t4, e4) && ti(t4, e4) && ri(t4, e4) <= t4.length - e4;
              }(t3, e3);
            }, r3.appendFrame = function(t3, e3, r4) {
              ai(t3, this.observer, e3, r4, t3.manifestCodec);
              var i4 = oi(t3, e3, r4, this.basePTS, this.frameIndex);
              if (i4 && 0 === i4.missing)
                return i4;
            }, e2;
          }(Jr), ui = /\/emsg[-/]ID3/i, hi = function() {
            function t2(t3, e3) {
              this.remainderData = null, this.timeOffset = 0, this.config = void 0, this.videoTrack = void 0, this.audioTrack = void 0, this.id3Track = void 0, this.txtTrack = void 0, this.config = e3;
            }
            var e2 = t2.prototype;
            return e2.resetTimeStamp = function() {
            }, e2.resetInitSegment = function(t3, e3, r3, i4) {
              var n3 = this.videoTrack = $r("video", 1), a2 = this.audioTrack = $r("audio", 1), s2 = this.txtTrack = $r("text", 1);
              if (this.id3Track = $r("id3", 1), this.timeOffset = 0, null != t3 && t3.byteLength) {
                var o2 = It(t3);
                if (o2.video) {
                  var l4 = o2.video, u3 = l4.id, h4 = l4.timescale, d2 = l4.codec;
                  n3.id = u3, n3.timescale = s2.timescale = h4, n3.codec = d2;
                }
                if (o2.audio) {
                  var c2 = o2.audio, f3 = c2.id, g3 = c2.timescale, v3 = c2.codec;
                  a2.id = f3, a2.timescale = g3, a2.codec = v3;
                }
                s2.id = Et.text, n3.sampleDuration = 0, n3.duration = a2.duration = i4;
              }
            }, e2.resetContiguity = function() {
            }, t2.probe = function(t3) {
              return bt(t3 = t3.length > 16384 ? t3.subarray(0, 16384) : t3, ["moof"]).length > 0;
            }, e2.demux = function(t3, e3) {
              this.timeOffset = e3;
              var r3 = t3, i4 = this.videoTrack, n3 = this.txtTrack;
              if (this.config.progressive) {
                this.remainderData && (r3 = _t(this.remainderData, t3));
                var a2 = function(t4) {
                  var e4 = { valid: null, remainder: null }, r4 = bt(t4, ["moof"]);
                  if (!r4)
                    return e4;
                  if (r4.length < 2)
                    return e4.remainder = t4, e4;
                  var i5 = r4[r4.length - 1];
                  return e4.valid = tt2(t4, 0, i5.byteOffset - 8), e4.remainder = tt2(t4, i5.byteOffset - 8), e4;
                }(r3);
                this.remainderData = a2.remainder, i4.samples = a2.valid || new Uint8Array();
              } else
                i4.samples = r3;
              var s2 = this.extractID3Track(i4, e3);
              return n3.samples = Pt2(e3, i4), { videoTrack: i4, audioTrack: this.audioTrack, id3Track: s2, textTrack: this.txtTrack };
            }, e2.flush = function() {
              var t3 = this.timeOffset, e3 = this.videoTrack, r3 = this.txtTrack;
              e3.samples = this.remainderData || new Uint8Array(), this.remainderData = null;
              var i4 = this.extractID3Track(e3, this.timeOffset);
              return r3.samples = Pt2(t3, e3), { videoTrack: e3, audioTrack: $r(), id3Track: i4, textTrack: $r() };
            }, e2.extractID3Track = function(t3, e3) {
              var r3 = this.id3Track;
              if (t3.samples.length) {
                var i4 = bt(t3.samples, ["emsg"]);
                i4 && i4.forEach(function(t4) {
                  var i5 = function(t5) {
                    var e4 = t5[0], r4 = "", i6 = "", n4 = 0, a3 = 0, s3 = 0, o2 = 0, l4 = 0, u3 = 0;
                    if (0 === e4) {
                      for (; "\0" !== St(t5.subarray(u3, u3 + 1)); )
                        r4 += St(t5.subarray(u3, u3 + 1)), u3 += 1;
                      for (r4 += St(t5.subarray(u3, u3 + 1)), u3 += 1; "\0" !== St(t5.subarray(u3, u3 + 1)); )
                        i6 += St(t5.subarray(u3, u3 + 1)), u3 += 1;
                      i6 += St(t5.subarray(u3, u3 + 1)), u3 += 1, n4 = Rt(t5, 12), a3 = Rt(t5, 16), o2 = Rt(t5, 20), l4 = Rt(t5, 24), u3 = 28;
                    } else if (1 === e4) {
                      n4 = Rt(t5, u3 += 4);
                      var h4 = Rt(t5, u3 += 4), d2 = Rt(t5, u3 += 4);
                      for (u3 += 4, s3 = Math.pow(2, 32) * h4 + d2, Number.isSafeInteger(s3) || (s3 = Number.MAX_SAFE_INTEGER, D2.warn("Presentation time exceeds safe integer limit and wrapped to max safe integer in parsing emsg box")), o2 = Rt(t5, u3), l4 = Rt(t5, u3 += 4), u3 += 4; "\0" !== St(t5.subarray(u3, u3 + 1)); )
                        r4 += St(t5.subarray(u3, u3 + 1)), u3 += 1;
                      for (r4 += St(t5.subarray(u3, u3 + 1)), u3 += 1; "\0" !== St(t5.subarray(u3, u3 + 1)); )
                        i6 += St(t5.subarray(u3, u3 + 1)), u3 += 1;
                      i6 += St(t5.subarray(u3, u3 + 1)), u3 += 1;
                    }
                    return { schemeIdUri: r4, value: i6, timeScale: n4, presentationTime: s3, presentationTimeDelta: a3, eventDuration: o2, id: l4, payload: t5.subarray(u3, t5.byteLength) };
                  }(t4);
                  if (ui.test(i5.schemeIdUri)) {
                    var n3 = y(i5.presentationTime) ? i5.presentationTime / i5.timeScale : e3 + i5.presentationTimeDelta / i5.timeScale, a2 = 4294967295 === i5.eventDuration ? Number.POSITIVE_INFINITY : i5.eventDuration / i5.timeScale;
                    a2 <= 1e-3 && (a2 = Number.POSITIVE_INFINITY);
                    var s2 = i5.payload;
                    r3.samples.push({ data: s2, len: s2.byteLength, dts: n3, pts: n3, type: Le3, duration: a2 });
                  }
                });
              }
              return r3;
            }, e2.demuxSampleAes = function(t3, e3, r3) {
              return Promise.reject(new Error("The MP4 demuxer does not support SAMPLE-AES decryption"));
            }, e2.destroy = function() {
            }, t2;
          }(), di = null, ci = [32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160], fi = [44100, 48e3, 32e3, 22050, 24e3, 16e3, 11025, 12e3, 8e3], gi = [[0, 72, 144, 12], [0, 0, 0, 0], [0, 72, 144, 12], [0, 144, 144, 12]], vi = [0, 1, 1, 4];
          function mi(t2, e2, r3, i4, n3) {
            if (!(r3 + 24 > e2.length)) {
              var a2 = pi(e2, r3);
              if (a2 && r3 + a2.frameLength <= e2.length) {
                var s2 = i4 + n3 * (9e4 * a2.samplesPerFrame / a2.sampleRate), o2 = { unit: e2.subarray(r3, r3 + a2.frameLength), pts: s2, dts: s2 };
                return t2.config = [], t2.channelCount = a2.channelCount, t2.samplerate = a2.sampleRate, t2.samples.push(o2), { sample: o2, length: a2.frameLength, missing: 0 };
              }
            }
          }
          function pi(t2, e2) {
            var r3 = t2[e2 + 1] >> 3 & 3, i4 = t2[e2 + 1] >> 1 & 3, n3 = t2[e2 + 2] >> 4 & 15, a2 = t2[e2 + 2] >> 2 & 3;
            if (1 !== r3 && 0 !== n3 && 15 !== n3 && 3 !== a2) {
              var s2 = t2[e2 + 2] >> 1 & 1, o2 = t2[e2 + 3] >> 6, l4 = 1e3 * ci[14 * (3 === r3 ? 3 - i4 : 3 === i4 ? 3 : 4) + n3 - 1], u3 = fi[3 * (3 === r3 ? 0 : 2 === r3 ? 1 : 2) + a2], h4 = 3 === o2 ? 1 : 2, d2 = gi[r3][i4], c2 = vi[i4], f3 = 8 * d2 * c2, g3 = Math.floor(d2 * l4 / u3 + s2) * c2;
              if (null === di) {
                var v3 = (navigator.userAgent || "").match(/Chrome\/(\d+)/i);
                di = v3 ? parseInt(v3[1]) : 0;
              }
              return !!di && di <= 87 && 2 === i4 && l4 >= 224e3 && 0 === o2 && (t2[e2 + 3] = 128 | t2[e2 + 3]), { sampleRate: u3, channelCount: h4, frameLength: g3, samplesPerFrame: f3 };
            }
          }
          function yi(t2, e2) {
            return 255 === t2[e2] && 224 == (224 & t2[e2 + 1]) && 0 != (6 & t2[e2 + 1]);
          }
          function Ti(t2, e2) {
            return e2 + 1 < t2.length && yi(t2, e2);
          }
          function Ei(t2, e2) {
            if (e2 + 1 < t2.length && yi(t2, e2)) {
              var r3 = pi(t2, e2), i4 = 4;
              null != r3 && r3.frameLength && (i4 = r3.frameLength);
              var n3 = e2 + i4;
              return n3 === t2.length || Ti(t2, n3);
            }
            return false;
          }
          var Si = function() {
            function t2(t3) {
              this.data = void 0, this.bytesAvailable = void 0, this.word = void 0, this.bitsAvailable = void 0, this.data = t3, this.bytesAvailable = t3.byteLength, this.word = 0, this.bitsAvailable = 0;
            }
            var e2 = t2.prototype;
            return e2.loadWord = function() {
              var t3 = this.data, e3 = this.bytesAvailable, r3 = t3.byteLength - e3, i4 = new Uint8Array(4), n3 = Math.min(4, e3);
              if (0 === n3)
                throw new Error("no bytes available");
              i4.set(t3.subarray(r3, r3 + n3)), this.word = new DataView(i4.buffer).getUint32(0), this.bitsAvailable = 8 * n3, this.bytesAvailable -= n3;
            }, e2.skipBits = function(t3) {
              var e3;
              t3 = Math.min(t3, 8 * this.bytesAvailable + this.bitsAvailable), this.bitsAvailable > t3 ? (this.word <<= t3, this.bitsAvailable -= t3) : (t3 -= this.bitsAvailable, t3 -= (e3 = t3 >> 3) << 3, this.bytesAvailable -= e3, this.loadWord(), this.word <<= t3, this.bitsAvailable -= t3);
            }, e2.readBits = function(t3) {
              var e3 = Math.min(this.bitsAvailable, t3), r3 = this.word >>> 32 - e3;
              if (t3 > 32 && D2.error("Cannot read more than 32 bits at a time"), this.bitsAvailable -= e3, this.bitsAvailable > 0)
                this.word <<= e3;
              else {
                if (!(this.bytesAvailable > 0))
                  throw new Error("no bits available");
                this.loadWord();
              }
              return (e3 = t3 - e3) > 0 && this.bitsAvailable ? r3 << e3 | this.readBits(e3) : r3;
            }, e2.skipLZ = function() {
              var t3;
              for (t3 = 0; t3 < this.bitsAvailable; ++t3)
                if (0 != (this.word & 2147483648 >>> t3))
                  return this.word <<= t3, this.bitsAvailable -= t3, t3;
              return this.loadWord(), t3 + this.skipLZ();
            }, e2.skipUEG = function() {
              this.skipBits(1 + this.skipLZ());
            }, e2.skipEG = function() {
              this.skipBits(1 + this.skipLZ());
            }, e2.readUEG = function() {
              var t3 = this.skipLZ();
              return this.readBits(t3 + 1) - 1;
            }, e2.readEG = function() {
              var t3 = this.readUEG();
              return 1 & t3 ? 1 + t3 >>> 1 : -1 * (t3 >>> 1);
            }, e2.readBoolean = function() {
              return 1 === this.readBits(1);
            }, e2.readUByte = function() {
              return this.readBits(8);
            }, e2.readUShort = function() {
              return this.readBits(16);
            }, e2.readUInt = function() {
              return this.readBits(32);
            }, e2.skipScalingList = function(t3) {
              for (var e3 = 8, r3 = 8, i4 = 0; i4 < t3; i4++)
                0 !== r3 && (r3 = (e3 + this.readEG() + 256) % 256), e3 = 0 === r3 ? e3 : r3;
            }, e2.readSPS = function() {
              var t3, e3, r3, i4 = 0, n3 = 0, a2 = 0, s2 = 0, o2 = this.readUByte.bind(this), l4 = this.readBits.bind(this), u3 = this.readUEG.bind(this), h4 = this.readBoolean.bind(this), d2 = this.skipBits.bind(this), c2 = this.skipEG.bind(this), f3 = this.skipUEG.bind(this), g3 = this.skipScalingList.bind(this);
              o2();
              var v3 = o2();
              if (l4(5), d2(3), o2(), f3(), 100 === v3 || 110 === v3 || 122 === v3 || 244 === v3 || 44 === v3 || 83 === v3 || 86 === v3 || 118 === v3 || 128 === v3) {
                var m3 = u3();
                if (3 === m3 && d2(1), f3(), f3(), d2(1), h4())
                  for (e3 = 3 !== m3 ? 8 : 12, r3 = 0; r3 < e3; r3++)
                    h4() && g3(r3 < 6 ? 16 : 64);
              }
              f3();
              var p2 = u3();
              if (0 === p2)
                u3();
              else if (1 === p2)
                for (d2(1), c2(), c2(), t3 = u3(), r3 = 0; r3 < t3; r3++)
                  c2();
              f3(), d2(1);
              var y2 = u3(), T3 = u3(), E2 = l4(1);
              0 === E2 && d2(1), d2(1), h4() && (i4 = u3(), n3 = u3(), a2 = u3(), s2 = u3());
              var S4 = [1, 1];
              if (h4() && h4())
                switch (o2()) {
                  case 1:
                    S4 = [1, 1];
                    break;
                  case 2:
                    S4 = [12, 11];
                    break;
                  case 3:
                    S4 = [10, 11];
                    break;
                  case 4:
                    S4 = [16, 11];
                    break;
                  case 5:
                    S4 = [40, 33];
                    break;
                  case 6:
                    S4 = [24, 11];
                    break;
                  case 7:
                    S4 = [20, 11];
                    break;
                  case 8:
                    S4 = [32, 11];
                    break;
                  case 9:
                    S4 = [80, 33];
                    break;
                  case 10:
                    S4 = [18, 11];
                    break;
                  case 11:
                    S4 = [15, 11];
                    break;
                  case 12:
                    S4 = [64, 33];
                    break;
                  case 13:
                    S4 = [160, 99];
                    break;
                  case 14:
                    S4 = [4, 3];
                    break;
                  case 15:
                    S4 = [3, 2];
                    break;
                  case 16:
                    S4 = [2, 1];
                    break;
                  case 255:
                    S4 = [o2() << 8 | o2(), o2() << 8 | o2()];
                }
              return { width: Math.ceil(16 * (y2 + 1) - 2 * i4 - 2 * n3), height: (2 - E2) * (T3 + 1) * 16 - (E2 ? 2 : 4) * (a2 + s2), pixelRatio: S4 };
            }, e2.readSliceType = function() {
              return this.readUByte(), this.readUEG(), this.readUEG();
            }, t2;
          }(), Li = function() {
            function t2(t3, e3, r3) {
              this.keyData = void 0, this.decrypter = void 0, this.keyData = r3, this.decrypter = new Fr(e3, { removePKCS7Padding: false });
            }
            var e2 = t2.prototype;
            return e2.decryptBuffer = function(t3) {
              return this.decrypter.decrypt(t3, this.keyData.key.buffer, this.keyData.iv.buffer);
            }, e2.decryptAacSample = function(t3, e3, r3) {
              var i4 = this, n3 = t3[e3].unit;
              if (!(n3.length <= 16)) {
                var a2 = n3.subarray(16, n3.length - n3.length % 16), s2 = a2.buffer.slice(a2.byteOffset, a2.byteOffset + a2.length);
                this.decryptBuffer(s2).then(function(a3) {
                  var s3 = new Uint8Array(a3);
                  n3.set(s3, 16), i4.decrypter.isSync() || i4.decryptAacSamples(t3, e3 + 1, r3);
                });
              }
            }, e2.decryptAacSamples = function(t3, e3, r3) {
              for (; ; e3++) {
                if (e3 >= t3.length)
                  return void r3();
                if (!(t3[e3].unit.length < 32 || (this.decryptAacSample(t3, e3, r3), this.decrypter.isSync())))
                  return;
              }
            }, e2.getAvcEncryptedData = function(t3) {
              for (var e3 = 16 * Math.floor((t3.length - 48) / 160) + 16, r3 = new Int8Array(e3), i4 = 0, n3 = 32; n3 < t3.length - 16; n3 += 160, i4 += 16)
                r3.set(t3.subarray(n3, n3 + 16), i4);
              return r3;
            }, e2.getAvcDecryptedUnit = function(t3, e3) {
              for (var r3 = new Uint8Array(e3), i4 = 0, n3 = 32; n3 < t3.length - 16; n3 += 160, i4 += 16)
                t3.set(r3.subarray(i4, i4 + 16), n3);
              return t3;
            }, e2.decryptAvcSample = function(t3, e3, r3, i4, n3) {
              var a2 = this, s2 = Ot(n3.data), o2 = this.getAvcEncryptedData(s2);
              this.decryptBuffer(o2.buffer).then(function(o3) {
                n3.data = a2.getAvcDecryptedUnit(s2, o3), a2.decrypter.isSync() || a2.decryptAvcSamples(t3, e3, r3 + 1, i4);
              });
            }, e2.decryptAvcSamples = function(t3, e3, r3, i4) {
              if (t3 instanceof Uint8Array)
                throw new Error("Cannot decrypt samples of type Uint8Array");
              for (; ; e3++, r3 = 0) {
                if (e3 >= t3.length)
                  return void i4();
                for (var n3 = t3[e3].units; !(r3 >= n3.length); r3++) {
                  var a2 = n3[r3];
                  if (!(a2.data.length <= 48 || 1 !== a2.type && 5 !== a2.type || (this.decryptAvcSample(t3, e3, r3, i4, a2), this.decrypter.isSync())))
                    return;
                }
              }
            }, t2;
          }(), Ri = 188, Ai = function() {
            function t2(t3, e3, r3) {
              this.observer = void 0, this.config = void 0, this.typeSupported = void 0, this.sampleAes = null, this.pmtParsed = false, this.audioCodec = void 0, this.videoCodec = void 0, this._duration = 0, this._pmtId = -1, this._avcTrack = void 0, this._audioTrack = void 0, this._id3Track = void 0, this._txtTrack = void 0, this.aacOverFlow = null, this.avcSample = null, this.remainderData = null, this.observer = t3, this.config = e3, this.typeSupported = r3;
            }
            t2.probe = function(e3) {
              var r3 = t2.syncOffset(e3);
              return r3 > 0 && D2.warn("MPEG2-TS detected but first sync word found @ offset " + r3), -1 !== r3;
            }, t2.syncOffset = function(t3) {
              for (var e3 = t3.length, r3 = Math.min(940, t3.length - Ri) + 1, i4 = 0; i4 < r3; ) {
                for (var n3 = false, a2 = i4; a2 < e3 && 71 === t3[a2]; a2 += Ri)
                  if (n3 || 0 !== bi(t3, a2) || (n3 = true), n3 && a2 + Ri > r3)
                    return i4;
                i4++;
              }
              return -1;
            }, t2.createTrack = function(t3, e3) {
              return { container: "video" === t3 || "audio" === t3 ? "video/mp2t" : void 0, type: t3, id: Et[t3], pid: -1, inputTimeScale: 9e4, sequenceNumber: 0, samples: [], dropped: 0, duration: "audio" === t3 ? e3 : void 0 };
            };
            var e2 = t2.prototype;
            return e2.resetInitSegment = function(e3, r3, i4, n3) {
              this.pmtParsed = false, this._pmtId = -1, this._avcTrack = t2.createTrack("video"), this._audioTrack = t2.createTrack("audio", n3), this._id3Track = t2.createTrack("id3"), this._txtTrack = t2.createTrack("text"), this._audioTrack.segmentCodec = "aac", this.aacOverFlow = null, this.avcSample = null, this.remainderData = null, this.audioCodec = r3, this.videoCodec = i4, this._duration = n3;
            }, e2.resetTimeStamp = function() {
            }, e2.resetContiguity = function() {
              var t3 = this._audioTrack, e3 = this._avcTrack, r3 = this._id3Track;
              t3 && (t3.pesData = null), e3 && (e3.pesData = null), r3 && (r3.pesData = null), this.aacOverFlow = null, this.avcSample = null, this.remainderData = null;
            }, e2.demux = function(e3, r3, i4, n3) {
              var a2;
              void 0 === i4 && (i4 = false), void 0 === n3 && (n3 = false), i4 || (this.sampleAes = null);
              var s2 = this._avcTrack, o2 = this._audioTrack, l4 = this._id3Track, u3 = this._txtTrack, h4 = s2.pid, d2 = s2.pesData, c2 = o2.pid, f3 = l4.pid, g3 = o2.pesData, v3 = l4.pesData, m3 = null, p2 = this.pmtParsed, y2 = this._pmtId, L3 = e3.length;
              if (this.remainderData && (L3 = (e3 = _t(this.remainderData, e3)).length, this.remainderData = null), L3 < Ri && !n3)
                return this.remainderData = e3, { audioTrack: o2, videoTrack: s2, id3Track: l4, textTrack: u3 };
              var R3 = Math.max(0, t2.syncOffset(e3));
              (L3 -= (L3 - R3) % Ri) < e3.byteLength && !n3 && (this.remainderData = new Uint8Array(e3.buffer, L3, e3.buffer.byteLength - L3));
              for (var A3 = 0, k3 = R3; k3 < L3; k3 += Ri)
                if (71 === e3[k3]) {
                  var b3 = !!(64 & e3[k3 + 1]), I3 = bi(e3, k3), w3 = void 0;
                  if ((48 & e3[k3 + 3]) >> 4 > 1) {
                    if ((w3 = k3 + 5 + e3[k3 + 4]) === k3 + Ri)
                      continue;
                  } else
                    w3 = k3 + 4;
                  switch (I3) {
                    case h4:
                      b3 && (d2 && (a2 = wi(d2)) && this.parseAVCPES(s2, u3, a2, false), d2 = { data: [], size: 0 }), d2 && (d2.data.push(e3.subarray(w3, k3 + Ri)), d2.size += k3 + Ri - w3);
                      break;
                    case c2:
                      if (b3) {
                        if (g3 && (a2 = wi(g3)))
                          switch (o2.segmentCodec) {
                            case "aac":
                              this.parseAACPES(o2, a2);
                              break;
                            case "mp3":
                              this.parseMPEGPES(o2, a2);
                          }
                        g3 = { data: [], size: 0 };
                      }
                      g3 && (g3.data.push(e3.subarray(w3, k3 + Ri)), g3.size += k3 + Ri - w3);
                      break;
                    case f3:
                      b3 && (v3 && (a2 = wi(v3)) && this.parseID3PES(l4, a2), v3 = { data: [], size: 0 }), v3 && (v3.data.push(e3.subarray(w3, k3 + Ri)), v3.size += k3 + Ri - w3);
                      break;
                    case 0:
                      b3 && (w3 += e3[w3] + 1), y2 = this._pmtId = Di(e3, w3);
                      break;
                    case y2:
                      b3 && (w3 += e3[w3] + 1);
                      var C3 = Ii(e3, w3, this.typeSupported, i4);
                      (h4 = C3.avc) > 0 && (s2.pid = h4), (c2 = C3.audio) > 0 && (o2.pid = c2, o2.segmentCodec = C3.segmentCodec), (f3 = C3.id3) > 0 && (l4.pid = f3), null === m3 || p2 || (D2.warn("MPEG-TS PMT found at " + k3 + " after unknown PID '" + m3 + "'. Backtracking to sync byte @" + R3 + " to parse all TS packets."), m3 = null, k3 = R3 - 188), p2 = this.pmtParsed = true;
                      break;
                    case 17:
                    case 8191:
                      break;
                    default:
                      m3 = I3;
                  }
                } else
                  A3++;
              if (A3 > 0) {
                var _3 = new Error("Found " + A3 + " TS packet/s that do not start with 0x47");
                this.observer.emit(T2.ERROR, T2.ERROR, { type: E.MEDIA_ERROR, details: S3.FRAG_PARSING_ERROR, fatal: false, error: _3, reason: _3.message });
              }
              s2.pesData = d2, o2.pesData = g3, l4.pesData = v3;
              var P2 = { audioTrack: o2, videoTrack: s2, id3Track: l4, textTrack: u3 };
              return n3 && this.extractRemainingSamples(P2), P2;
            }, e2.flush = function() {
              var t3, e3 = this.remainderData;
              return this.remainderData = null, t3 = e3 ? this.demux(e3, -1, false, true) : { videoTrack: this._avcTrack, audioTrack: this._audioTrack, id3Track: this._id3Track, textTrack: this._txtTrack }, this.extractRemainingSamples(t3), this.sampleAes ? this.decrypt(t3, this.sampleAes) : t3;
            }, e2.extractRemainingSamples = function(t3) {
              var e3, r3 = t3.audioTrack, i4 = t3.videoTrack, n3 = t3.id3Track, a2 = t3.textTrack, s2 = i4.pesData, o2 = r3.pesData, l4 = n3.pesData;
              if (s2 && (e3 = wi(s2)) ? (this.parseAVCPES(i4, a2, e3, true), i4.pesData = null) : i4.pesData = s2, o2 && (e3 = wi(o2))) {
                switch (r3.segmentCodec) {
                  case "aac":
                    this.parseAACPES(r3, e3);
                    break;
                  case "mp3":
                    this.parseMPEGPES(r3, e3);
                }
                r3.pesData = null;
              } else
                null != o2 && o2.size && D2.log("last AAC PES packet truncated,might overlap between fragments"), r3.pesData = o2;
              l4 && (e3 = wi(l4)) ? (this.parseID3PES(n3, e3), n3.pesData = null) : n3.pesData = l4;
            }, e2.demuxSampleAes = function(t3, e3, r3) {
              var i4 = this.demux(t3, r3, true, !this.config.progressive), n3 = this.sampleAes = new Li(this.observer, this.config, e3);
              return this.decrypt(i4, n3);
            }, e2.decrypt = function(t3, e3) {
              return new Promise(function(r3) {
                var i4 = t3.audioTrack, n3 = t3.videoTrack;
                i4.samples && "aac" === i4.segmentCodec ? e3.decryptAacSamples(i4.samples, 0, function() {
                  n3.samples ? e3.decryptAvcSamples(n3.samples, 0, 0, function() {
                    r3(t3);
                  }) : r3(t3);
                }) : n3.samples && e3.decryptAvcSamples(n3.samples, 0, 0, function() {
                  r3(t3);
                });
              });
            }, e2.destroy = function() {
              this._duration = 0;
            }, e2.parseAVCPES = function(t3, e3, r3, i4) {
              var n3, a2 = this, s2 = this.parseAVCNALu(t3, r3.data), o2 = this.avcSample, l4 = false;
              r3.data = null, o2 && s2.length && !t3.audFound && (Ci(o2, t3), o2 = this.avcSample = ki(false, r3.pts, r3.dts, "")), s2.forEach(function(i5) {
                switch (i5.type) {
                  case 1:
                    n3 = true, o2 || (o2 = a2.avcSample = ki(true, r3.pts, r3.dts, "")), o2.frame = true;
                    var s3 = i5.data;
                    if (l4 && s3.length > 4) {
                      var u3 = new Si(s3).readSliceType();
                      2 !== u3 && 4 !== u3 && 7 !== u3 && 9 !== u3 || (o2.key = true);
                    }
                    break;
                  case 5:
                    n3 = true, o2 || (o2 = a2.avcSample = ki(true, r3.pts, r3.dts, "")), o2.key = true, o2.frame = true;
                    break;
                  case 6:
                    n3 = true, Ft(i5.data, 1, r3.pts, e3.samples);
                    break;
                  case 7:
                    if (n3 = true, l4 = true, !t3.sps) {
                      var h4 = i5.data, d2 = new Si(h4).readSPS();
                      t3.width = d2.width, t3.height = d2.height, t3.pixelRatio = d2.pixelRatio, t3.sps = [h4], t3.duration = a2._duration;
                      for (var c2 = h4.subarray(1, 4), f3 = "avc1.", g3 = 0; g3 < 3; g3++) {
                        var v3 = c2[g3].toString(16);
                        v3.length < 2 && (v3 = "0" + v3), f3 += v3;
                      }
                      t3.codec = f3;
                    }
                    break;
                  case 8:
                    n3 = true, t3.pps || (t3.pps = [i5.data]);
                    break;
                  case 9:
                    n3 = false, t3.audFound = true, o2 && Ci(o2, t3), o2 = a2.avcSample = ki(false, r3.pts, r3.dts, "");
                    break;
                  case 12:
                    n3 = true;
                    break;
                  default:
                    n3 = false, o2 && (o2.debug += "unknown NAL " + i5.type + " ");
                }
                o2 && n3 && o2.units.push(i5);
              }), i4 && o2 && (Ci(o2, t3), this.avcSample = null);
            }, e2.getLastNalUnit = function(t3) {
              var e3, r3, i4 = this.avcSample;
              if (i4 && 0 !== i4.units.length || (i4 = t3[t3.length - 1]), null != (e3 = i4) && e3.units) {
                var n3 = i4.units;
                r3 = n3[n3.length - 1];
              }
              return r3;
            }, e2.parseAVCNALu = function(t3, e3) {
              var r3, i4, n3 = e3.byteLength, a2 = t3.naluState || 0, s2 = a2, o2 = [], l4 = 0, u3 = -1, h4 = 0;
              for (-1 === a2 && (u3 = 0, h4 = 31 & e3[0], a2 = 0, l4 = 1); l4 < n3; )
                if (r3 = e3[l4++], a2)
                  if (1 !== a2)
                    if (r3)
                      if (1 === r3) {
                        if (u3 >= 0) {
                          var d2 = { data: e3.subarray(u3, l4 - a2 - 1), type: h4 };
                          o2.push(d2);
                        } else {
                          var c2 = this.getLastNalUnit(t3.samples);
                          if (c2 && (s2 && l4 <= 4 - s2 && c2.state && (c2.data = c2.data.subarray(0, c2.data.byteLength - s2)), (i4 = l4 - a2 - 1) > 0)) {
                            var f3 = new Uint8Array(c2.data.byteLength + i4);
                            f3.set(c2.data, 0), f3.set(e3.subarray(0, i4), c2.data.byteLength), c2.data = f3, c2.state = 0;
                          }
                        }
                        l4 < n3 ? (u3 = l4, h4 = 31 & e3[l4], a2 = 0) : a2 = -1;
                      } else
                        a2 = 0;
                    else
                      a2 = 3;
                  else
                    a2 = r3 ? 0 : 2;
                else
                  a2 = r3 ? 0 : 1;
              if (u3 >= 0 && a2 >= 0) {
                var g3 = { data: e3.subarray(u3, n3), type: h4, state: a2 };
                o2.push(g3);
              }
              if (0 === o2.length) {
                var v3 = this.getLastNalUnit(t3.samples);
                if (v3) {
                  var m3 = new Uint8Array(v3.data.byteLength + e3.byteLength);
                  m3.set(v3.data, 0), m3.set(e3, v3.data.byteLength), v3.data = m3;
                }
              }
              return t3.naluState = a2, o2;
            }, e2.parseAACPES = function(t3, e3) {
              var r3, i4, n3, a2 = 0, s2 = this.aacOverFlow, o2 = e3.data;
              if (s2) {
                this.aacOverFlow = null;
                var l4 = s2.missing, u3 = s2.sample.unit.byteLength;
                if (-1 === l4) {
                  var h4 = new Uint8Array(u3 + o2.byteLength);
                  h4.set(s2.sample.unit, 0), h4.set(o2, u3), o2 = h4;
                } else {
                  var d2 = u3 - l4;
                  s2.sample.unit.set(o2.subarray(0, l4), d2), t3.samples.push(s2.sample), a2 = s2.missing;
                }
              }
              for (r3 = a2, i4 = o2.length; r3 < i4 - 1 && !ii(o2, r3); r3++)
                ;
              if (r3 !== a2) {
                var c2, f3 = r3 < i4 - 1;
                c2 = f3 ? "AAC PES did not start with ADTS header,offset:" + r3 : "No ADTS header found in AAC PES";
                var g3 = new Error(c2);
                if (D2.warn("parsing error: " + c2), this.observer.emit(T2.ERROR, T2.ERROR, { type: E.MEDIA_ERROR, details: S3.FRAG_PARSING_ERROR, fatal: false, levelRetry: f3, error: g3, reason: c2 }), !f3)
                  return;
              }
              if (ai(t3, this.observer, o2, r3, this.audioCodec), void 0 !== e3.pts)
                n3 = e3.pts;
              else {
                if (!s2)
                  return void D2.warn("[tsdemuxer]: AAC PES unknown PTS");
                var v3 = si(t3.samplerate);
                n3 = s2.sample.pts + v3;
              }
              for (var m3, p2 = 0; r3 < i4; ) {
                if (r3 += (m3 = oi(t3, o2, r3, n3, p2)).length, m3.missing) {
                  this.aacOverFlow = m3;
                  break;
                }
                for (p2++; r3 < i4 - 1 && !ii(o2, r3); r3++)
                  ;
              }
            }, e2.parseMPEGPES = function(t3, e3) {
              var r3 = e3.data, i4 = r3.length, n3 = 0, a2 = 0, s2 = e3.pts;
              if (void 0 !== s2)
                for (; a2 < i4; )
                  if (Ti(r3, a2)) {
                    var o2 = mi(t3, r3, a2, s2, n3);
                    if (!o2)
                      break;
                    a2 += o2.length, n3++;
                  } else
                    a2++;
              else
                D2.warn("[tsdemuxer]: MPEG PES unknown PTS");
            }, e2.parseID3PES = function(t3, e3) {
              if (void 0 !== e3.pts) {
                var r3 = o({}, e3, { type: this._avcTrack ? Le3 : Ee2, duration: Number.POSITIVE_INFINITY });
                t3.samples.push(r3);
              } else
                D2.warn("[tsdemuxer]: ID3 PES unknown PTS");
            }, t2;
          }();
          function ki(t2, e2, r3, i4) {
            return { key: t2, frame: false, pts: e2, dts: r3, units: [], debug: i4, length: 0 };
          }
          function bi(t2, e2) {
            return ((31 & t2[e2 + 1]) << 8) + t2[e2 + 2];
          }
          function Di(t2, e2) {
            return (31 & t2[e2 + 10]) << 8 | t2[e2 + 11];
          }
          function Ii(t2, e2, r3, i4) {
            var n3 = { audio: -1, avc: -1, id3: -1, segmentCodec: "aac" }, a2 = e2 + 3 + ((15 & t2[e2 + 1]) << 8 | t2[e2 + 2]) - 4;
            for (e2 += 12 + ((15 & t2[e2 + 10]) << 8 | t2[e2 + 11]); e2 < a2; ) {
              var s2 = bi(t2, e2);
              switch (t2[e2]) {
                case 207:
                  if (!i4) {
                    D2.log("ADTS AAC with AES-128-CBC frame encryption found in unencrypted stream");
                    break;
                  }
                case 15:
                  -1 === n3.audio && (n3.audio = s2);
                  break;
                case 21:
                  -1 === n3.id3 && (n3.id3 = s2);
                  break;
                case 219:
                  if (!i4) {
                    D2.log("H.264 with AES-128-CBC slice encryption found in unencrypted stream");
                    break;
                  }
                case 27:
                  -1 === n3.avc && (n3.avc = s2);
                  break;
                case 3:
                case 4:
                  true !== r3.mpeg && true !== r3.mp3 ? D2.log("MPEG audio found, not supported in this browser") : -1 === n3.audio && (n3.audio = s2, n3.segmentCodec = "mp3");
                  break;
                case 36:
                  D2.warn("Unsupported HEVC stream type found");
              }
              e2 += 5 + ((15 & t2[e2 + 3]) << 8 | t2[e2 + 4]);
            }
            return n3;
          }
          function wi(t2) {
            var e2, r3, i4, n3, a2, s2 = 0, o2 = t2.data;
            if (!t2 || 0 === t2.size)
              return null;
            for (; o2[0].length < 19 && o2.length > 1; ) {
              var l4 = new Uint8Array(o2[0].length + o2[1].length);
              l4.set(o2[0]), l4.set(o2[1], o2[0].length), o2[0] = l4, o2.splice(1, 1);
            }
            if (1 === ((e2 = o2[0])[0] << 16) + (e2[1] << 8) + e2[2]) {
              if ((r3 = (e2[4] << 8) + e2[5]) && r3 > t2.size - 6)
                return null;
              var u3 = e2[7];
              192 & u3 && (n3 = 536870912 * (14 & e2[9]) + 4194304 * (255 & e2[10]) + 16384 * (254 & e2[11]) + 128 * (255 & e2[12]) + (254 & e2[13]) / 2, 64 & u3 ? n3 - (a2 = 536870912 * (14 & e2[14]) + 4194304 * (255 & e2[15]) + 16384 * (254 & e2[16]) + 128 * (255 & e2[17]) + (254 & e2[18]) / 2) > 54e5 && (D2.warn(Math.round((n3 - a2) / 9e4) + "s delta between PTS and DTS, align them"), n3 = a2) : a2 = n3);
              var h4 = (i4 = e2[8]) + 9;
              if (t2.size <= h4)
                return null;
              t2.size -= h4;
              for (var d2 = new Uint8Array(t2.size), c2 = 0, f3 = o2.length; c2 < f3; c2++) {
                var g3 = (e2 = o2[c2]).byteLength;
                if (h4) {
                  if (h4 > g3) {
                    h4 -= g3;
                    continue;
                  }
                  e2 = e2.subarray(h4), g3 -= h4, h4 = 0;
                }
                d2.set(e2, s2), s2 += g3;
              }
              return r3 && (r3 -= i4 + 3), { data: d2, pts: n3, dts: a2, len: r3 };
            }
            return null;
          }
          function Ci(t2, e2) {
            if (t2.units.length && t2.frame) {
              if (void 0 === t2.pts) {
                var r3 = e2.samples, i4 = r3.length;
                if (!i4)
                  return void e2.dropped++;
                var n3 = r3[i4 - 1];
                t2.pts = n3.pts, t2.dts = n3.dts;
              }
              e2.samples.push(t2);
            }
            t2.debug.length && D2.log(t2.pts + "/" + t2.dts + ":" + t2.debug);
          }
          var _i = function(t2) {
            function e2() {
              return t2.apply(this, arguments) || this;
            }
            l3(e2, t2);
            var r3 = e2.prototype;
            return r3.resetInitSegment = function(e3, r4, i4, n3) {
              t2.prototype.resetInitSegment.call(this, e3, r4, i4, n3), this._audioTrack = { container: "audio/mpeg", type: "audio", id: 2, pid: -1, sequenceNumber: 0, segmentCodec: "mp3", samples: [], manifestCodec: r4, duration: n3, inputTimeScale: 9e4, dropped: 0 };
            }, e2.probe = function(t3) {
              if (!t3)
                return false;
              for (var e3 = (nt2(t3, 0) || []).length, r4 = t3.length; e3 < r4; e3++)
                if (Ei(t3, e3))
                  return D2.log("MPEG Audio sync word found !"), true;
              return false;
            }, r3.canParse = function(t3, e3) {
              return function(t4, e4) {
                return yi(t4, e4) && 4 <= t4.length - e4;
              }(t3, e3);
            }, r3.appendFrame = function(t3, e3, r4) {
              if (null !== this.basePTS)
                return mi(t3, e3, r4, this.basePTS, this.frameIndex);
            }, e2;
          }(Jr), Pi = function() {
            function t2() {
            }
            return t2.getSilentFrame = function(t3, e2) {
              if ("mp4a.40.2" === t3) {
                if (1 === e2)
                  return new Uint8Array([0, 200, 0, 128, 35, 128]);
                if (2 === e2)
                  return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
                if (3 === e2)
                  return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142]);
                if (4 === e2)
                  return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56]);
                if (5 === e2)
                  return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 56]);
                if (6 === e2)
                  return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224]);
              } else {
                if (1 === e2)
                  return new Uint8Array([1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                if (2 === e2)
                  return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                if (3 === e2)
                  return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
              }
            }, t2;
          }(), xi = Math.pow(2, 32) - 1, Fi = function() {
            function t2() {
            }
            return t2.init = function() {
              var e2;
              for (e2 in t2.types = { avc1: [], avcC: [], btrt: [], dinf: [], dref: [], esds: [], ftyp: [], hdlr: [], mdat: [], mdhd: [], mdia: [], mfhd: [], minf: [], moof: [], moov: [], mp4a: [], ".mp3": [], mvex: [], mvhd: [], pasp: [], sdtp: [], stbl: [], stco: [], stsc: [], stsd: [], stsz: [], stts: [], tfdt: [], tfhd: [], traf: [], trak: [], trun: [], trex: [], tkhd: [], vmhd: [], smhd: [] }, t2.types)
                t2.types.hasOwnProperty(e2) && (t2.types[e2] = [e2.charCodeAt(0), e2.charCodeAt(1), e2.charCodeAt(2), e2.charCodeAt(3)]);
              var r3 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100, 108, 101, 114, 0]), i4 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0]);
              t2.HDLR_TYPES = { video: r3, audio: i4 };
              var n3 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1]), a2 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
              t2.STTS = t2.STSC = t2.STCO = a2, t2.STSZ = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), t2.VMHD = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]), t2.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]), t2.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]);
              var s2 = new Uint8Array([105, 115, 111, 109]), o2 = new Uint8Array([97, 118, 99, 49]), l4 = new Uint8Array([0, 0, 0, 1]);
              t2.FTYP = t2.box(t2.types.ftyp, s2, l4, s2, o2), t2.DINF = t2.box(t2.types.dinf, t2.box(t2.types.dref, n3));
            }, t2.box = function(t3) {
              for (var e2 = 8, r3 = arguments.length, i4 = new Array(r3 > 1 ? r3 - 1 : 0), n3 = 1; n3 < r3; n3++)
                i4[n3 - 1] = arguments[n3];
              for (var a2 = i4.length, s2 = a2; a2--; )
                e2 += i4[a2].byteLength;
              var o2 = new Uint8Array(e2);
              for (o2[0] = e2 >> 24 & 255, o2[1] = e2 >> 16 & 255, o2[2] = e2 >> 8 & 255, o2[3] = 255 & e2, o2.set(t3, 4), a2 = 0, e2 = 8; a2 < s2; a2++)
                o2.set(i4[a2], e2), e2 += i4[a2].byteLength;
              return o2;
            }, t2.hdlr = function(e2) {
              return t2.box(t2.types.hdlr, t2.HDLR_TYPES[e2]);
            }, t2.mdat = function(e2) {
              return t2.box(t2.types.mdat, e2);
            }, t2.mdhd = function(e2, r3) {
              r3 *= e2;
              var i4 = Math.floor(r3 / (xi + 1)), n3 = Math.floor(r3 % (xi + 1));
              return t2.box(t2.types.mdhd, new Uint8Array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, e2 >> 24 & 255, e2 >> 16 & 255, e2 >> 8 & 255, 255 & e2, i4 >> 24, i4 >> 16 & 255, i4 >> 8 & 255, 255 & i4, n3 >> 24, n3 >> 16 & 255, n3 >> 8 & 255, 255 & n3, 85, 196, 0, 0]));
            }, t2.mdia = function(e2) {
              return t2.box(t2.types.mdia, t2.mdhd(e2.timescale, e2.duration), t2.hdlr(e2.type), t2.minf(e2));
            }, t2.mfhd = function(e2) {
              return t2.box(t2.types.mfhd, new Uint8Array([0, 0, 0, 0, e2 >> 24, e2 >> 16 & 255, e2 >> 8 & 255, 255 & e2]));
            }, t2.minf = function(e2) {
              return "audio" === e2.type ? t2.box(t2.types.minf, t2.box(t2.types.smhd, t2.SMHD), t2.DINF, t2.stbl(e2)) : t2.box(t2.types.minf, t2.box(t2.types.vmhd, t2.VMHD), t2.DINF, t2.stbl(e2));
            }, t2.moof = function(e2, r3, i4) {
              return t2.box(t2.types.moof, t2.mfhd(e2), t2.traf(i4, r3));
            }, t2.moov = function(e2) {
              for (var r3 = e2.length, i4 = []; r3--; )
                i4[r3] = t2.trak(e2[r3]);
              return t2.box.apply(null, [t2.types.moov, t2.mvhd(e2[0].timescale, e2[0].duration)].concat(i4).concat(t2.mvex(e2)));
            }, t2.mvex = function(e2) {
              for (var r3 = e2.length, i4 = []; r3--; )
                i4[r3] = t2.trex(e2[r3]);
              return t2.box.apply(null, [t2.types.mvex].concat(i4));
            }, t2.mvhd = function(e2, r3) {
              r3 *= e2;
              var i4 = Math.floor(r3 / (xi + 1)), n3 = Math.floor(r3 % (xi + 1)), a2 = new Uint8Array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, e2 >> 24 & 255, e2 >> 16 & 255, e2 >> 8 & 255, 255 & e2, i4 >> 24, i4 >> 16 & 255, i4 >> 8 & 255, 255 & i4, n3 >> 24, n3 >> 16 & 255, n3 >> 8 & 255, 255 & n3, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255]);
              return t2.box(t2.types.mvhd, a2);
            }, t2.sdtp = function(e2) {
              var r3, i4, n3 = e2.samples || [], a2 = new Uint8Array(4 + n3.length);
              for (r3 = 0; r3 < n3.length; r3++)
                i4 = n3[r3].flags, a2[r3 + 4] = i4.dependsOn << 4 | i4.isDependedOn << 2 | i4.hasRedundancy;
              return t2.box(t2.types.sdtp, a2);
            }, t2.stbl = function(e2) {
              return t2.box(t2.types.stbl, t2.stsd(e2), t2.box(t2.types.stts, t2.STTS), t2.box(t2.types.stsc, t2.STSC), t2.box(t2.types.stsz, t2.STSZ), t2.box(t2.types.stco, t2.STCO));
            }, t2.avc1 = function(e2) {
              var r3, i4, n3, a2 = [], s2 = [];
              for (r3 = 0; r3 < e2.sps.length; r3++)
                n3 = (i4 = e2.sps[r3]).byteLength, a2.push(n3 >>> 8 & 255), a2.push(255 & n3), a2 = a2.concat(Array.prototype.slice.call(i4));
              for (r3 = 0; r3 < e2.pps.length; r3++)
                n3 = (i4 = e2.pps[r3]).byteLength, s2.push(n3 >>> 8 & 255), s2.push(255 & n3), s2 = s2.concat(Array.prototype.slice.call(i4));
              var o2 = t2.box(t2.types.avcC, new Uint8Array([1, a2[3], a2[4], a2[5], 255, 224 | e2.sps.length].concat(a2).concat([e2.pps.length]).concat(s2))), l4 = e2.width, u3 = e2.height, h4 = e2.pixelRatio[0], d2 = e2.pixelRatio[1];
              return t2.box(t2.types.avc1, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, l4 >> 8 & 255, 255 & l4, u3 >> 8 & 255, 255 & u3, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 18, 100, 97, 105, 108, 121, 109, 111, 116, 105, 111, 110, 47, 104, 108, 115, 46, 106, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 17, 17]), o2, t2.box(t2.types.btrt, new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192])), t2.box(t2.types.pasp, new Uint8Array([h4 >> 24, h4 >> 16 & 255, h4 >> 8 & 255, 255 & h4, d2 >> 24, d2 >> 16 & 255, d2 >> 8 & 255, 255 & d2])));
            }, t2.esds = function(t3) {
              var e2 = t3.config.length;
              return new Uint8Array([0, 0, 0, 0, 3, 23 + e2, 0, 1, 0, 4, 15 + e2, 64, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5].concat([e2]).concat(t3.config).concat([6, 1, 2]));
            }, t2.mp4a = function(e2) {
              var r3 = e2.samplerate;
              return t2.box(t2.types.mp4a, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, e2.channelCount, 0, 16, 0, 0, 0, 0, r3 >> 8 & 255, 255 & r3, 0, 0]), t2.box(t2.types.esds, t2.esds(e2)));
            }, t2.mp3 = function(e2) {
              var r3 = e2.samplerate;
              return t2.box(t2.types[".mp3"], new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, e2.channelCount, 0, 16, 0, 0, 0, 0, r3 >> 8 & 255, 255 & r3, 0, 0]));
            }, t2.stsd = function(e2) {
              return "audio" === e2.type ? "mp3" === e2.segmentCodec && "mp3" === e2.codec ? t2.box(t2.types.stsd, t2.STSD, t2.mp3(e2)) : t2.box(t2.types.stsd, t2.STSD, t2.mp4a(e2)) : t2.box(t2.types.stsd, t2.STSD, t2.avc1(e2));
            }, t2.tkhd = function(e2) {
              var r3 = e2.id, i4 = e2.duration * e2.timescale, n3 = e2.width, a2 = e2.height, s2 = Math.floor(i4 / (xi + 1)), o2 = Math.floor(i4 % (xi + 1));
              return t2.box(t2.types.tkhd, new Uint8Array([1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, r3 >> 24 & 255, r3 >> 16 & 255, r3 >> 8 & 255, 255 & r3, 0, 0, 0, 0, s2 >> 24, s2 >> 16 & 255, s2 >> 8 & 255, 255 & s2, o2 >> 24, o2 >> 16 & 255, o2 >> 8 & 255, 255 & o2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, n3 >> 8 & 255, 255 & n3, 0, 0, a2 >> 8 & 255, 255 & a2, 0, 0]));
            }, t2.traf = function(e2, r3) {
              var i4 = t2.sdtp(e2), n3 = e2.id, a2 = Math.floor(r3 / (xi + 1)), s2 = Math.floor(r3 % (xi + 1));
              return t2.box(t2.types.traf, t2.box(t2.types.tfhd, new Uint8Array([0, 0, 0, 0, n3 >> 24, n3 >> 16 & 255, n3 >> 8 & 255, 255 & n3])), t2.box(t2.types.tfdt, new Uint8Array([1, 0, 0, 0, a2 >> 24, a2 >> 16 & 255, a2 >> 8 & 255, 255 & a2, s2 >> 24, s2 >> 16 & 255, s2 >> 8 & 255, 255 & s2])), t2.trun(e2, i4.length + 16 + 20 + 8 + 16 + 8 + 8), i4);
            }, t2.trak = function(e2) {
              return e2.duration = e2.duration || 4294967295, t2.box(t2.types.trak, t2.tkhd(e2), t2.mdia(e2));
            }, t2.trex = function(e2) {
              var r3 = e2.id;
              return t2.box(t2.types.trex, new Uint8Array([0, 0, 0, 0, r3 >> 24, r3 >> 16 & 255, r3 >> 8 & 255, 255 & r3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]));
            }, t2.trun = function(e2, r3) {
              var i4, n3, a2, s2, o2, l4, u3 = e2.samples || [], h4 = u3.length, d2 = 12 + 16 * h4, c2 = new Uint8Array(d2);
              for (r3 += 8 + d2, c2.set(["video" === e2.type ? 1 : 0, 0, 15, 1, h4 >>> 24 & 255, h4 >>> 16 & 255, h4 >>> 8 & 255, 255 & h4, r3 >>> 24 & 255, r3 >>> 16 & 255, r3 >>> 8 & 255, 255 & r3], 0), i4 = 0; i4 < h4; i4++)
                a2 = (n3 = u3[i4]).duration, s2 = n3.size, o2 = n3.flags, l4 = n3.cts, c2.set([a2 >>> 24 & 255, a2 >>> 16 & 255, a2 >>> 8 & 255, 255 & a2, s2 >>> 24 & 255, s2 >>> 16 & 255, s2 >>> 8 & 255, 255 & s2, o2.isLeading << 2 | o2.dependsOn, o2.isDependedOn << 6 | o2.hasRedundancy << 4 | o2.paddingValue << 1 | o2.isNonSync, 61440 & o2.degradPrio, 15 & o2.degradPrio, l4 >>> 24 & 255, l4 >>> 16 & 255, l4 >>> 8 & 255, 255 & l4], 12 + 16 * i4);
              return t2.box(t2.types.trun, c2);
            }, t2.initSegment = function(e2) {
              t2.types || t2.init();
              var r3 = t2.moov(e2), i4 = new Uint8Array(t2.FTYP.byteLength + r3.byteLength);
              return i4.set(t2.FTYP), i4.set(r3, t2.FTYP.byteLength), i4;
            }, t2;
          }();
          function Oi(t2, e2, r3, i4) {
            void 0 === r3 && (r3 = 1), void 0 === i4 && (i4 = false);
            var n3 = t2 * e2 * r3;
            return i4 ? Math.round(n3) : n3;
          }
          function Mi(t2, e2) {
            return void 0 === e2 && (e2 = false), Oi(t2, 1e3, 1 / 9e4, e2);
          }
          Fi.types = void 0, Fi.HDLR_TYPES = void 0, Fi.STTS = void 0, Fi.STSC = void 0, Fi.STCO = void 0, Fi.STSZ = void 0, Fi.VMHD = void 0, Fi.SMHD = void 0, Fi.STSD = void 0, Fi.FTYP = void 0, Fi.DINF = void 0;
          var Ni = null, Ui = null, Bi = function() {
            function t2(t3, e3, r3, i4) {
              if (this.observer = void 0, this.config = void 0, this.typeSupported = void 0, this.ISGenerated = false, this._initPTS = null, this._initDTS = null, this.nextAvcDts = null, this.nextAudioPts = null, this.videoSampleDuration = null, this.isAudioContiguous = false, this.isVideoContiguous = false, this.observer = t3, this.config = e3, this.typeSupported = r3, this.ISGenerated = false, null === Ni) {
                var n3 = (navigator.userAgent || "").match(/Chrome\/(\d+)/i);
                Ni = n3 ? parseInt(n3[1]) : 0;
              }
              if (null === Ui) {
                var a2 = navigator.userAgent.match(/Safari\/(\d+)/i);
                Ui = a2 ? parseInt(a2[1]) : 0;
              }
            }
            var e2 = t2.prototype;
            return e2.destroy = function() {
            }, e2.resetTimeStamp = function(t3) {
              D2.log("[mp4-remuxer]: initPTS & initDTS reset"), this._initPTS = this._initDTS = t3;
            }, e2.resetNextTimestamp = function() {
              D2.log("[mp4-remuxer]: reset next timestamp"), this.isVideoContiguous = false, this.isAudioContiguous = false;
            }, e2.resetInitSegment = function() {
              D2.log("[mp4-remuxer]: ISGenerated flag reset"), this.ISGenerated = false;
            }, e2.getVideoStartPts = function(t3) {
              var e3 = false, r3 = t3.reduce(function(t4, r4) {
                var i4 = r4.pts - t4;
                return i4 < -4294967296 ? (e3 = true, Gi(t4, r4.pts)) : i4 > 0 ? t4 : r4.pts;
              }, t3[0].pts);
              return e3 && D2.debug("PTS rollover detected"), r3;
            }, e2.remux = function(t3, e3, r3, i4, n3, a2, s2, o2) {
              var l4, u3, h4, d2, c2, f3, g3 = n3, v3 = n3, m3 = t3.pid > -1, p2 = e3.pid > -1, y2 = e3.samples.length, T3 = t3.samples.length > 0, E2 = s2 && y2 > 0 || y2 > 1;
              if ((!m3 || T3) && (!p2 || E2) || this.ISGenerated || s2) {
                this.ISGenerated || (h4 = this.generateIS(t3, e3, n3, a2));
                var S4, L3 = this.isVideoContiguous, R3 = -1;
                if (E2 && (R3 = function(t4) {
                  for (var e4 = 0; e4 < t4.length; e4++)
                    if (t4[e4].key)
                      return e4;
                  return -1;
                }(e3.samples), !L3 && this.config.forceKeyFrameOnDiscontinuity))
                  if (f3 = true, R3 > 0) {
                    D2.warn("[mp4-remuxer]: Dropped " + R3 + " out of " + y2 + " video samples due to a missing keyframe");
                    var A3 = this.getVideoStartPts(e3.samples);
                    e3.samples = e3.samples.slice(R3), e3.dropped += R3, S4 = v3 += (e3.samples[0].pts - A3) / e3.inputTimeScale;
                  } else
                    -1 === R3 && (D2.warn("[mp4-remuxer]: No keyframe found out of " + y2 + " video samples"), f3 = false);
                if (this.ISGenerated) {
                  if (T3 && E2) {
                    var k3 = this.getVideoStartPts(e3.samples), b3 = (Gi(t3.samples[0].pts, k3) - k3) / e3.inputTimeScale;
                    g3 += Math.max(0, b3), v3 += Math.max(0, -b3);
                  }
                  if (T3) {
                    if (t3.samplerate || (D2.warn("[mp4-remuxer]: regenerate InitSegment as audio detected"), h4 = this.generateIS(t3, e3, n3, a2)), u3 = this.remuxAudio(t3, g3, this.isAudioContiguous, a2, p2 || E2 || o2 === de2 ? v3 : void 0), E2) {
                      var I3 = u3 ? u3.endPTS - u3.startPTS : 0;
                      e3.inputTimeScale || (D2.warn("[mp4-remuxer]: regenerate InitSegment as video detected"), h4 = this.generateIS(t3, e3, n3, a2)), l4 = this.remuxVideo(e3, v3, L3, I3);
                    }
                  } else
                    E2 && (l4 = this.remuxVideo(e3, v3, L3, 0));
                  l4 && (l4.firstKeyFrame = R3, l4.independent = -1 !== R3, l4.firstKeyFramePTS = S4);
                }
              }
              return this.ISGenerated && this._initPTS && this._initDTS && (r3.samples.length && (c2 = Ki(r3, n3, this._initPTS, this._initDTS)), i4.samples.length && (d2 = Hi(i4, n3, this._initPTS))), { audio: u3, video: l4, initSegment: h4, independent: f3, text: d2, id3: c2 };
            }, e2.generateIS = function(t3, e3, r3, i4) {
              var n3, a2, s2, o2 = t3.samples, l4 = e3.samples, u3 = this.typeSupported, h4 = {}, d2 = this._initPTS, c2 = !d2 || i4, f3 = "audio/mp4";
              if (c2 && (n3 = a2 = 1 / 0), t3.config && o2.length && (t3.timescale = t3.samplerate, "mp3" === t3.segmentCodec && (u3.mpeg ? (f3 = "audio/mpeg", t3.codec = "") : u3.mp3 && (t3.codec = "mp3")), h4.audio = { id: "audio", container: f3, codec: t3.codec, initSegment: "mp3" === t3.segmentCodec && u3.mpeg ? new Uint8Array(0) : Fi.initSegment([t3]), metadata: { channelCount: t3.channelCount } }, c2 && (s2 = t3.inputTimeScale, d2 && s2 === d2.timescale ? c2 = false : n3 = a2 = o2[0].pts - Math.round(s2 * r3))), e3.sps && e3.pps && l4.length && (e3.timescale = e3.inputTimeScale, h4.video = { id: "main", container: "video/mp4", codec: e3.codec, initSegment: Fi.initSegment([e3]), metadata: { width: e3.width, height: e3.height } }, c2))
                if (s2 = e3.inputTimeScale, d2 && s2 === d2.timescale)
                  c2 = false;
                else {
                  var g3 = this.getVideoStartPts(l4), v3 = Math.round(s2 * r3);
                  a2 = Math.min(a2, Gi(l4[0].dts, g3) - v3), n3 = Math.min(n3, g3 - v3);
                }
              if (Object.keys(h4).length)
                return this.ISGenerated = true, c2 ? (this._initPTS = { baseTime: n3, timescale: s2 }, this._initDTS = { baseTime: a2, timescale: s2 }) : n3 = s2 = void 0, { tracks: h4, initPTS: n3, timescale: s2 };
            }, e2.remuxVideo = function(t3, e3, r3, i4) {
              var n3, a2, s2 = t3.inputTimeScale, l4 = t3.samples, u3 = [], h4 = l4.length, d2 = this._initPTS, c2 = this.nextAvcDts, f3 = 8, g3 = this.videoSampleDuration, v3 = Number.POSITIVE_INFINITY, m3 = Number.NEGATIVE_INFINITY, p2 = false;
              r3 && null !== c2 || (c2 = e3 * s2 - (l4[0].pts - Gi(l4[0].dts, l4[0].pts)));
              for (var y2 = d2.baseTime * s2 / d2.timescale, L3 = 0; L3 < h4; L3++) {
                var R3 = l4[L3];
                R3.pts = Gi(R3.pts - y2, c2), R3.dts = Gi(R3.dts - y2, c2), R3.dts < l4[L3 > 0 ? L3 - 1 : L3].dts && (p2 = true);
              }
              p2 && l4.sort(function(t4, e4) {
                var r4 = t4.dts - e4.dts, i5 = t4.pts - e4.pts;
                return r4 || i5;
              }), n3 = l4[0].dts;
              var A3 = (a2 = l4[l4.length - 1].dts) - n3, k3 = A3 ? Math.round(A3 / (h4 - 1)) : g3 || t3.inputTimeScale / 30;
              if (r3) {
                var b3 = n3 - c2, I3 = b3 > k3, w3 = b3 < -1;
                if ((I3 || w3) && (I3 ? D2.warn("AVC: " + Mi(b3, true) + " ms (" + b3 + "dts) hole between fragments detected, filling it") : D2.warn("AVC: " + Mi(-b3, true) + " ms (" + b3 + "dts) overlapping between fragments detected"), !w3 || c2 > l4[0].pts)) {
                  n3 = c2;
                  var C3 = l4[0].pts - b3;
                  l4[0].dts = n3, l4[0].pts = C3, D2.log("Video: First PTS/DTS adjusted: " + Mi(C3, true) + "/" + Mi(n3, true) + ", delta: " + Mi(b3, true) + " ms");
                }
              }
              n3 = Math.max(0, n3);
              for (var _3 = 0, P2 = 0, x2 = 0; x2 < h4; x2++) {
                for (var F4 = l4[x2], O4 = F4.units, M4 = O4.length, N3 = 0, U3 = 0; U3 < M4; U3++)
                  N3 += O4[U3].data.length;
                P2 += N3, _3 += M4, F4.length = N3, F4.dts = Math.max(F4.dts, n3), v3 = Math.min(F4.pts, v3), m3 = Math.max(F4.pts, m3);
              }
              a2 = l4[h4 - 1].dts;
              var B3, G4 = P2 + 4 * _3 + 8;
              try {
                B3 = new Uint8Array(G4);
              } catch (t4) {
                return void this.observer.emit(T2.ERROR, T2.ERROR, { type: E.MUX_ERROR, details: S3.REMUX_ALLOC_ERROR, fatal: false, error: t4, bytes: G4, reason: "fail allocating video mdat " + G4 });
              }
              var K3 = new DataView(B3.buffer);
              K3.setUint32(0, G4), B3.set(Fi.types.mdat, 4);
              for (var H3 = false, V3 = Number.POSITIVE_INFINITY, Y4 = Number.POSITIVE_INFINITY, W3 = Number.NEGATIVE_INFINITY, j4 = Number.NEGATIVE_INFINITY, q4 = 0; q4 < h4; q4++) {
                for (var X3 = l4[q4], z4 = X3.units, Q4 = 0, $4 = 0, J4 = z4.length; $4 < J4; $4++) {
                  var Z4 = z4[$4], tt3 = Z4.data, et3 = Z4.data.byteLength;
                  K3.setUint32(f3, et3), f3 += 4, B3.set(tt3, f3), f3 += et3, Q4 += 4 + et3;
                }
                var rt3 = void 0;
                if (q4 < h4 - 1)
                  g3 = l4[q4 + 1].dts - X3.dts, rt3 = l4[q4 + 1].pts - X3.pts;
                else {
                  var it3 = this.config, nt3 = q4 > 0 ? X3.dts - l4[q4 - 1].dts : k3;
                  if (rt3 = q4 > 0 ? X3.pts - l4[q4 - 1].pts : k3, it3.stretchShortVideoTrack && null !== this.nextAudioPts) {
                    var at3 = Math.floor(it3.maxBufferHole * s2), st3 = (i4 ? v3 + i4 * s2 : this.nextAudioPts) - X3.pts;
                    st3 > at3 ? ((g3 = st3 - nt3) < 0 ? g3 = nt3 : H3 = true, D2.log("[mp4-remuxer]: It is approximately " + st3 / 90 + " ms to the next segment; using duration " + g3 / 90 + " ms for the last video frame.")) : g3 = nt3;
                  } else
                    g3 = nt3;
                }
                var ot2 = Math.round(X3.pts - X3.dts);
                V3 = Math.min(V3, g3), W3 = Math.max(W3, g3), Y4 = Math.min(Y4, rt3), j4 = Math.max(j4, rt3), u3.push(new Yi(X3.key, g3, Q4, ot2));
              }
              if (u3.length) {
                if (Ni) {
                  if (Ni < 70) {
                    var lt3 = u3[0].flags;
                    lt3.dependsOn = 2, lt3.isNonSync = 0;
                  }
                } else if (Ui && j4 - Y4 < W3 - V3 && k3 / W3 < 0.025 && 0 === u3[0].cts) {
                  D2.warn("Found irregular gaps in sample duration. Using PTS instead of DTS to determine MP4 sample duration.");
                  for (var ut2 = n3, ht2 = 0, dt2 = u3.length; ht2 < dt2; ht2++) {
                    var ct2 = ut2 + u3[ht2].duration, ft3 = ut2 + u3[ht2].cts;
                    if (ht2 < dt2 - 1) {
                      var gt3 = ct2 + u3[ht2 + 1].cts;
                      u3[ht2].duration = gt3 - ft3;
                    } else
                      u3[ht2].duration = ht2 ? u3[ht2 - 1].duration : k3;
                    u3[ht2].cts = 0, ut2 = ct2;
                  }
                }
              }
              g3 = H3 || !g3 ? k3 : g3, this.nextAvcDts = c2 = a2 + g3, this.videoSampleDuration = g3, this.isVideoContiguous = true;
              var vt3 = { data1: Fi.moof(t3.sequenceNumber++, n3, o({}, t3, { samples: u3 })), data2: B3, startPTS: v3 / s2, endPTS: (m3 + g3) / s2, startDTS: n3 / s2, endDTS: c2 / s2, type: "video", hasAudio: false, hasVideo: true, nb: u3.length, dropped: t3.dropped };
              return t3.samples = [], t3.dropped = 0, vt3;
            }, e2.remuxAudio = function(t3, e3, r3, i4, n3) {
              var a2 = t3.inputTimeScale, s2 = a2 / (t3.samplerate ? t3.samplerate : a2), l4 = "aac" === t3.segmentCodec ? 1024 : 1152, u3 = l4 * s2, h4 = this._initPTS, d2 = "mp3" === t3.segmentCodec && this.typeSupported.mpeg, c2 = [], f3 = void 0 !== n3, g3 = t3.samples, v3 = d2 ? 0 : 8, m3 = this.nextAudioPts || -1, p2 = e3 * a2, y2 = h4.baseTime * a2 / h4.timescale;
              if (this.isAudioContiguous = r3 = r3 || g3.length && m3 > 0 && (i4 && Math.abs(p2 - m3) < 9e3 || Math.abs(Gi(g3[0].pts - y2, p2) - m3) < 20 * u3), g3.forEach(function(t4) {
                t4.pts = Gi(t4.pts - y2, p2);
              }), !r3 || m3 < 0) {
                if (g3 = g3.filter(function(t4) {
                  return t4.pts >= 0;
                }), !g3.length)
                  return;
                m3 = 0 === n3 ? 0 : i4 && !f3 ? Math.max(0, p2) : g3[0].pts;
              }
              if ("aac" === t3.segmentCodec)
                for (var L3 = this.config.maxAudioFramesDrift, R3 = 0, A3 = m3; R3 < g3.length; R3++) {
                  var k3 = g3[R3], b3 = k3.pts, I3 = b3 - A3, w3 = Math.abs(1e3 * I3 / a2);
                  if (I3 <= -L3 * u3 && f3)
                    0 === R3 && (D2.warn("Audio frame @ " + (b3 / a2).toFixed(3) + "s overlaps nextAudioPts by " + Math.round(1e3 * I3 / a2) + " ms."), this.nextAudioPts = m3 = A3 = b3);
                  else if (I3 >= L3 * u3 && w3 < 1e4 && f3) {
                    var C3 = Math.round(I3 / u3);
                    (A3 = b3 - C3 * u3) < 0 && (C3--, A3 += u3), 0 === R3 && (this.nextAudioPts = m3 = A3), D2.warn("[mp4-remuxer]: Injecting " + C3 + " audio frame @ " + (A3 / a2).toFixed(3) + "s due to " + Math.round(1e3 * I3 / a2) + " ms gap.");
                    for (var _3 = 0; _3 < C3; _3++) {
                      var P2 = Math.max(A3, 0), x2 = Pi.getSilentFrame(t3.manifestCodec || t3.codec, t3.channelCount);
                      x2 || (D2.log("[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead."), x2 = k3.unit.subarray()), g3.splice(R3, 0, { unit: x2, pts: P2 }), A3 += u3, R3++;
                    }
                  }
                  k3.pts = A3, A3 += u3;
                }
              for (var F4, O4 = null, M4 = null, N3 = 0, U3 = g3.length; U3--; )
                N3 += g3[U3].unit.byteLength;
              for (var B3 = 0, G4 = g3.length; B3 < G4; B3++) {
                var K3 = g3[B3], H3 = K3.unit, V3 = K3.pts;
                if (null !== M4)
                  c2[B3 - 1].duration = Math.round((V3 - M4) / s2);
                else {
                  if (r3 && "aac" === t3.segmentCodec && (V3 = m3), O4 = V3, !(N3 > 0))
                    return;
                  N3 += v3;
                  try {
                    F4 = new Uint8Array(N3);
                  } catch (t4) {
                    return void this.observer.emit(T2.ERROR, T2.ERROR, { type: E.MUX_ERROR, details: S3.REMUX_ALLOC_ERROR, fatal: false, error: t4, bytes: N3, reason: "fail allocating audio mdat " + N3 });
                  }
                  d2 || (new DataView(F4.buffer).setUint32(0, N3), F4.set(Fi.types.mdat, 4));
                }
                F4.set(H3, v3);
                var Y4 = H3.byteLength;
                v3 += Y4, c2.push(new Yi(true, l4, Y4, 0)), M4 = V3;
              }
              var W3 = c2.length;
              if (W3) {
                var j4 = c2[c2.length - 1];
                this.nextAudioPts = m3 = M4 + s2 * j4.duration;
                var q4 = d2 ? new Uint8Array(0) : Fi.moof(t3.sequenceNumber++, O4 / s2, o({}, t3, { samples: c2 }));
                t3.samples = [];
                var X3 = O4 / a2, z4 = m3 / a2, Q4 = { data1: q4, data2: F4, startPTS: X3, endPTS: z4, startDTS: X3, endDTS: z4, type: "audio", hasAudio: true, hasVideo: false, nb: W3 };
                return this.isAudioContiguous = true, Q4;
              }
            }, e2.remuxEmptyAudio = function(t3, e3, r3, i4) {
              var n3 = t3.inputTimeScale, a2 = n3 / (t3.samplerate ? t3.samplerate : n3), s2 = this.nextAudioPts, o2 = this._initDTS, l4 = 9e4 * o2.baseTime / o2.timescale, u3 = (null !== s2 ? s2 : i4.startDTS * n3) + l4, h4 = i4.endDTS * n3 + l4, d2 = 1024 * a2, c2 = Math.ceil((h4 - u3) / d2), f3 = Pi.getSilentFrame(t3.manifestCodec || t3.codec, t3.channelCount);
              if (D2.warn("[mp4-remuxer]: remux empty Audio"), f3) {
                for (var g3 = [], v3 = 0; v3 < c2; v3++) {
                  var m3 = u3 + v3 * d2;
                  g3.push({ unit: f3, pts: m3, dts: m3 });
                }
                return t3.samples = g3, this.remuxAudio(t3, e3, r3, false);
              }
              D2.trace("[mp4-remuxer]: Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec");
            }, t2;
          }();
          function Gi(t2, e2) {
            var r3;
            if (null === e2)
              return t2;
            for (r3 = e2 < t2 ? -8589934592 : 8589934592; Math.abs(t2 - e2) > 4294967296; )
              t2 += r3;
            return t2;
          }
          function Ki(t2, e2, r3, i4) {
            var n3 = t2.samples.length;
            if (n3) {
              for (var a2 = t2.inputTimeScale, s2 = 0; s2 < n3; s2++) {
                var o2 = t2.samples[s2];
                o2.pts = Gi(o2.pts - 9e4 * r3.baseTime / r3.timescale, e2 * a2) / a2, o2.dts = Gi(o2.dts - 9e4 * i4.baseTime / i4.timescale, e2 * a2) / a2;
              }
              var l4 = t2.samples;
              return t2.samples = [], { samples: l4 };
            }
          }
          function Hi(t2, e2, r3) {
            var i4 = t2.samples.length;
            if (i4) {
              for (var n3 = t2.inputTimeScale, a2 = 0; a2 < i4; a2++) {
                var s2 = t2.samples[a2];
                s2.pts = Gi(s2.pts - 9e4 * r3.baseTime / r3.timescale, e2 * n3) / n3;
              }
              t2.samples.sort(function(t3, e3) {
                return t3.pts - e3.pts;
              });
              var o2 = t2.samples;
              return t2.samples = [], { samples: o2 };
            }
          }
          var Vi, Yi = function(t2, e2, r3, i4) {
            this.size = void 0, this.duration = void 0, this.cts = void 0, this.flags = void 0, this.duration = e2, this.size = r3, this.cts = i4, this.flags = new Wi(t2);
          }, Wi = function(t2) {
            this.isLeading = 0, this.isDependedOn = 0, this.hasRedundancy = 0, this.degradPrio = 0, this.dependsOn = 1, this.isNonSync = 1, this.dependsOn = t2 ? 2 : 1, this.isNonSync = t2 ? 0 : 1;
          }, ji = function() {
            function t2() {
              this.emitInitSegment = false, this.audioCodec = void 0, this.videoCodec = void 0, this.initData = void 0, this.initPTS = null, this.initTracks = void 0, this.lastEndTime = null;
            }
            var e2 = t2.prototype;
            return e2.destroy = function() {
            }, e2.resetTimeStamp = function(t3) {
              this.initPTS = t3, this.lastEndTime = null;
            }, e2.resetNextTimestamp = function() {
              this.lastEndTime = null;
            }, e2.resetInitSegment = function(t3, e3, r3, i4) {
              this.audioCodec = e3, this.videoCodec = r3, this.generateInitSegment(function(t4, e4) {
                if (!t4 || !e4)
                  return t4;
                var r4 = e4.keyId;
                return r4 && e4.isCommonEncryption && bt(t4, ["moov", "trak"]).forEach(function(t5) {
                  var e5 = bt(t5, ["mdia", "minf", "stbl", "stsd"])[0].subarray(8), i5 = bt(e5, ["enca"]), n3 = i5.length > 0;
                  n3 || (i5 = bt(e5, ["encv"])), i5.forEach(function(t6) {
                    bt(n3 ? t6.subarray(28) : t6.subarray(78), ["sinf"]).forEach(function(t7) {
                      var e6 = wt(t7);
                      if (e6) {
                        var i6 = e6.subarray(8, 24);
                        i6.some(function(t8) {
                          return 0 !== t8;
                        }) || (D2.log("[eme] Patching keyId in 'enc" + (n3 ? "a" : "v") + ">sinf>>tenc' box: " + pt(i6) + " -> " + pt(r4)), e6.set(r4, 8));
                      }
                    });
                  });
                }), t4;
              }(t3, i4)), this.emitInitSegment = true;
            }, e2.generateInitSegment = function(t3) {
              var e3 = this.audioCodec, r3 = this.videoCodec;
              if (null == t3 || !t3.byteLength)
                return this.initTracks = void 0, void (this.initData = void 0);
              var i4 = this.initData = It(t3);
              e3 || (e3 = qi(i4.audio, F3)), r3 || (r3 = qi(i4.video, O3));
              var n3 = {};
              i4.audio && i4.video ? n3.audiovideo = { container: "video/mp4", codec: e3 + "," + r3, initSegment: t3, id: "main" } : i4.audio ? n3.audio = { container: "audio/mp4", codec: e3, initSegment: t3, id: "audio" } : i4.video ? n3.video = { container: "video/mp4", codec: r3, initSegment: t3, id: "main" } : D2.warn("[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes."), this.initTracks = n3;
            }, e2.remux = function(t3, e3, r3, i4, n3, a2) {
              var s2, o2, l4 = this.initPTS, u3 = this.lastEndTime, h4 = { audio: void 0, video: void 0, text: i4, id3: r3, initSegment: void 0 };
              y(u3) || (u3 = this.lastEndTime = n3 || 0);
              var d2 = e3.samples;
              if (null == d2 || !d2.length)
                return h4;
              var c2 = { initPTS: void 0, timescale: 1 }, f3 = this.initData;
              if (null != (s2 = f3) && s2.length || (this.generateInitSegment(d2), f3 = this.initData), null == (o2 = f3) || !o2.length)
                return D2.warn("[passthrough-remuxer.ts]: Failed to generate initSegment."), h4;
              this.emitInitSegment && (c2.tracks = this.initTracks, this.emitInitSegment = false);
              var g3 = function(t4, e4) {
                return bt(e4, ["moof", "traf"]).reduce(function(e5, r4) {
                  var i5 = bt(r4, ["tfdt"])[0], n4 = i5[0], a3 = bt(r4, ["tfhd"]).reduce(function(e6, r5) {
                    var a4 = Rt(r5, 4), s3 = t4[a4];
                    if (s3) {
                      var o3 = Rt(i5, 4);
                      if (1 === n4) {
                        if (o3 === yt2)
                          return D2.warn("[mp4-demuxer]: Ignoring assumed invalid signed 64-bit track fragment decode time"), e6;
                        o3 *= yt2 + 1, o3 += Rt(i5, 8);
                      }
                      var l5 = o3 / (s3.timescale || 9e4);
                      if (isFinite(l5) && (null === e6 || l5 < e6))
                        return l5;
                    }
                    return e6;
                  }, null);
                  return null !== a3 && isFinite(a3) && (null === e5 || a3 < e5) ? a3 : e5;
                }, null);
              }(f3, d2), v3 = null === g3 ? n3 : g3;
              (function(t4, e4, r4) {
                if (null === t4)
                  return true;
                var i5 = e4 - t4.baseTime / t4.timescale;
                return i5 < 0 && Math.abs(i5 - r4) > 1;
              }(l4, v3, n3) || c2.timescale !== l4.timescale && a2) && (c2.initPTS = v3 - n3, this.initPTS = l4 = { baseTime: c2.initPTS, timescale: 1 });
              var m3 = function(t4, e4) {
                for (var r4 = 0, i5 = 0, n4 = 0, a3 = bt(t4, ["moof", "traf"]), s3 = 0; s3 < a3.length; s3++) {
                  var o3 = a3[s3], l5 = bt(o3, ["tfhd"])[0], u4 = e4[Rt(l5, 4)];
                  if (u4) {
                    var h5 = u4.default, d3 = Rt(l5, 0) | (null == h5 ? void 0 : h5.flags), c3 = null == h5 ? void 0 : h5.duration;
                    8 & d3 && (c3 = Rt(l5, 2 & d3 ? 12 : 8));
                    for (var f4 = u4.timescale || 9e4, g4 = bt(o3, ["trun"]), v4 = 0; v4 < g4.length; v4++)
                      !(r4 = Ct(g4[v4])) && c3 && (r4 = c3 * Rt(g4[v4], 4)), u4.type === O3 ? i5 += r4 / f4 : u4.type === F3 && (n4 += r4 / f4);
                  }
                }
                if (0 === i5 && 0 === n4) {
                  for (var m4 = 0, p3 = bt(t4, ["sidx"]), y2 = 0; y2 < p3.length; y2++) {
                    var T4 = Dt(p3[y2]);
                    null != T4 && T4.references && (m4 += T4.references.reduce(function(t5, e5) {
                      return t5 + e5.info.duration || 0;
                    }, 0));
                  }
                  return m4;
                }
                return i5 || n4;
              }(d2, f3), p2 = t3 ? v3 - l4.baseTime / l4.timescale : u3, T3 = p2 + m3;
              !function(t4, e4, r4) {
                bt(e4, ["moof", "traf"]).forEach(function(e5) {
                  bt(e5, ["tfhd"]).forEach(function(i5) {
                    var n4 = Rt(i5, 4), a3 = t4[n4];
                    if (a3) {
                      var s3 = a3.timescale || 9e4;
                      bt(e5, ["tfdt"]).forEach(function(t5) {
                        var e6 = t5[0], i6 = Rt(t5, 4);
                        if (0 === e6)
                          i6 -= r4 * s3, kt(t5, 4, i6 = Math.max(i6, 0));
                        else {
                          i6 *= Math.pow(2, 32), i6 += Rt(t5, 8), i6 -= r4 * s3, i6 = Math.max(i6, 0);
                          var n5 = Math.floor(i6 / (yt2 + 1)), a4 = Math.floor(i6 % (yt2 + 1));
                          kt(t5, 4, n5), kt(t5, 8, a4);
                        }
                      });
                    }
                  });
                });
              }(f3, d2, l4.baseTime / l4.timescale), m3 > 0 ? this.lastEndTime = T3 : (D2.warn("Duration parsed from mp4 should be greater than zero"), this.resetNextTimestamp());
              var E2 = !!f3.audio, S4 = !!f3.video, L3 = "";
              E2 && (L3 += "audio"), S4 && (L3 += "video");
              var R3 = { data1: d2, startPTS: p2, startDTS: p2, endPTS: T3, endDTS: T3, type: L3, hasAudio: E2, hasVideo: S4, nb: 1, dropped: 0 };
              return h4.audio = "audio" === R3.type ? R3 : void 0, h4.video = "audio" !== R3.type ? R3 : void 0, h4.initSegment = c2, h4.id3 = Ki(r3, n3, l4, l4), i4.samples.length && (h4.text = Hi(i4, n3, l4)), h4;
            }, t2;
          }();
          function qi(t2, e2) {
            var r3 = null == t2 ? void 0 : t2.codec;
            return r3 && r3.length > 4 ? r3 : "hvc1" === r3 || "hev1" === r3 ? "hvc1.1.c.L120.90" : "av01" === r3 ? "av01.0.04M.08" : "avc1" === r3 || e2 === O3 ? "avc1.42e01e" : "mp4a.40.5";
          }
          try {
            Vi = self.performance.now.bind(self.performance);
          } catch (t2) {
            D2.debug("Unable to use Performance API on this environment"), Vi = "undefined" != typeof self && self.Date.now;
          }
          var Xi = [{ demux: hi, remux: ji }, { demux: Ai, remux: Bi }, { demux: li, remux: Bi }, { demux: _i, remux: Bi }], zi = function() {
            function t2(t3, e3, r3, i4, n3) {
              this.async = false, this.observer = void 0, this.typeSupported = void 0, this.config = void 0, this.vendor = void 0, this.id = void 0, this.demuxer = void 0, this.remuxer = void 0, this.decrypter = void 0, this.probe = void 0, this.decryptionPromise = null, this.transmuxConfig = void 0, this.currentTransmuxState = void 0, this.observer = t3, this.typeSupported = e3, this.config = r3, this.vendor = i4, this.id = n3;
            }
            var e2 = t2.prototype;
            return e2.configure = function(t3) {
              this.transmuxConfig = t3, this.decrypter && this.decrypter.reset();
            }, e2.push = function(t3, e3, r3, i4) {
              var n3 = this, a2 = r3.transmuxing;
              a2.executeStart = Vi();
              var s2 = new Uint8Array(t3), o2 = this.currentTransmuxState, l4 = this.transmuxConfig;
              i4 && (this.currentTransmuxState = i4);
              var u3 = i4 || o2, h4 = u3.contiguous, d2 = u3.discontinuity, c2 = u3.trackSwitch, f3 = u3.accurateTimeOffset, g3 = u3.timeOffset, v3 = u3.initSegmentChange, m3 = l4.audioCodec, p2 = l4.videoCodec, y2 = l4.defaultInitPts, L3 = l4.duration, R3 = l4.initSegmentData, A3 = function(t4, e4) {
                var r4 = null;
                return t4.byteLength > 0 && null != e4 && null != e4.key && null !== e4.iv && null != e4.method && (r4 = e4), r4;
              }(s2, e3);
              if (A3 && "AES-128" === A3.method) {
                var k3 = this.getDecrypter();
                if (!k3.isSync())
                  return this.decryptionPromise = k3.webCryptoDecrypt(s2, A3.key.buffer, A3.iv.buffer).then(function(t4) {
                    var e4 = n3.push(t4, null, r3);
                    return n3.decryptionPromise = null, e4;
                  }), this.decryptionPromise;
                var b3 = k3.softwareDecrypt(s2, A3.key.buffer, A3.iv.buffer);
                if (r3.part > -1 && (b3 = k3.flush()), !b3)
                  return a2.executeEnd = Vi(), Qi(r3);
                s2 = new Uint8Array(b3);
              }
              var I3 = this.needsProbing(d2, c2);
              if (I3) {
                var w3 = this.configureTransmuxer(s2);
                if (w3)
                  return D2.warn("[transmuxer] " + w3.message), this.observer.emit(T2.ERROR, T2.ERROR, { type: E.MEDIA_ERROR, details: S3.FRAG_PARSING_ERROR, fatal: false, error: w3, reason: w3.message }), a2.executeEnd = Vi(), Qi(r3);
              }
              (d2 || c2 || v3 || I3) && this.resetInitSegment(R3, m3, p2, L3, e3), (d2 || v3 || I3) && this.resetInitialTimestamp(y2), h4 || this.resetContiguity();
              var C3 = this.transmux(s2, A3, g3, f3, r3), _3 = this.currentTransmuxState;
              return _3.contiguous = true, _3.discontinuity = false, _3.trackSwitch = false, a2.executeEnd = Vi(), C3;
            }, e2.flush = function(t3) {
              var e3 = this, r3 = t3.transmuxing;
              r3.executeStart = Vi();
              var i4 = this.decrypter, n3 = this.currentTransmuxState, a2 = this.decryptionPromise;
              if (a2)
                return a2.then(function() {
                  return e3.flush(t3);
                });
              var s2 = [], o2 = n3.timeOffset;
              if (i4) {
                var l4 = i4.flush();
                l4 && s2.push(this.push(l4, null, t3));
              }
              var u3 = this.demuxer, h4 = this.remuxer;
              if (!u3 || !h4)
                return r3.executeEnd = Vi(), [Qi(t3)];
              var d2 = u3.flush(o2);
              return $i(d2) ? d2.then(function(r4) {
                return e3.flushRemux(s2, r4, t3), s2;
              }) : (this.flushRemux(s2, d2, t3), s2);
            }, e2.flushRemux = function(t3, e3, r3) {
              var i4 = e3.audioTrack, n3 = e3.videoTrack, a2 = e3.id3Track, s2 = e3.textTrack, o2 = this.currentTransmuxState, l4 = o2.accurateTimeOffset, u3 = o2.timeOffset;
              D2.log("[transmuxer.ts]: Flushed fragment " + r3.sn + (r3.part > -1 ? " p: " + r3.part : "") + " of level " + r3.level);
              var h4 = this.remuxer.remux(i4, n3, a2, s2, u3, l4, true, this.id);
              t3.push({ remuxResult: h4, chunkMeta: r3 }), r3.transmuxing.executeEnd = Vi();
            }, e2.resetInitialTimestamp = function(t3) {
              var e3 = this.demuxer, r3 = this.remuxer;
              e3 && r3 && (e3.resetTimeStamp(t3), r3.resetTimeStamp(t3));
            }, e2.resetContiguity = function() {
              var t3 = this.demuxer, e3 = this.remuxer;
              t3 && e3 && (t3.resetContiguity(), e3.resetNextTimestamp());
            }, e2.resetInitSegment = function(t3, e3, r3, i4, n3) {
              var a2 = this.demuxer, s2 = this.remuxer;
              a2 && s2 && (a2.resetInitSegment(t3, e3, r3, i4), s2.resetInitSegment(t3, e3, r3, n3));
            }, e2.destroy = function() {
              this.demuxer && (this.demuxer.destroy(), this.demuxer = void 0), this.remuxer && (this.remuxer.destroy(), this.remuxer = void 0);
            }, e2.transmux = function(t3, e3, r3, i4, n3) {
              return e3 && "SAMPLE-AES" === e3.method ? this.transmuxSampleAes(t3, e3, r3, i4, n3) : this.transmuxUnencrypted(t3, r3, i4, n3);
            }, e2.transmuxUnencrypted = function(t3, e3, r3, i4) {
              var n3 = this.demuxer.demux(t3, e3, false, !this.config.progressive), a2 = n3.audioTrack, s2 = n3.videoTrack, o2 = n3.id3Track, l4 = n3.textTrack;
              return { remuxResult: this.remuxer.remux(a2, s2, o2, l4, e3, r3, false, this.id), chunkMeta: i4 };
            }, e2.transmuxSampleAes = function(t3, e3, r3, i4, n3) {
              var a2 = this;
              return this.demuxer.demuxSampleAes(t3, e3, r3).then(function(t4) {
                return { remuxResult: a2.remuxer.remux(t4.audioTrack, t4.videoTrack, t4.id3Track, t4.textTrack, r3, i4, false, a2.id), chunkMeta: n3 };
              });
            }, e2.configureTransmuxer = function(t3) {
              for (var e3, r3 = this.config, i4 = this.observer, n3 = this.typeSupported, a2 = this.vendor, s2 = 0, o2 = Xi.length; s2 < o2; s2++)
                if (Xi[s2].demux.probe(t3)) {
                  e3 = Xi[s2];
                  break;
                }
              if (!e3)
                return new Error("Failed to find demuxer by probing fragment data");
              var l4 = this.demuxer, u3 = this.remuxer, h4 = e3.remux, d2 = e3.demux;
              u3 && u3 instanceof h4 || (this.remuxer = new h4(i4, r3, n3, a2)), l4 && l4 instanceof d2 || (this.demuxer = new d2(i4, r3, n3), this.probe = d2.probe);
            }, e2.needsProbing = function(t3, e3) {
              return !this.demuxer || !this.remuxer || t3 || e3;
            }, e2.getDecrypter = function() {
              var t3 = this.decrypter;
              return t3 || (t3 = this.decrypter = new Fr(this.config)), t3;
            }, t2;
          }(), Qi = function(t2) {
            return { remuxResult: {}, chunkMeta: t2 };
          };
          function $i(t2) {
            return "then" in t2 && t2.then instanceof Function;
          }
          var Ji = function(t2, e2, r3, i4, n3) {
            this.audioCodec = void 0, this.videoCodec = void 0, this.initSegmentData = void 0, this.duration = void 0, this.defaultInitPts = void 0, this.audioCodec = t2, this.videoCodec = e2, this.initSegmentData = r3, this.duration = i4, this.defaultInitPts = n3 || null;
          }, Zi = function(t2, e2, r3, i4, n3, a2) {
            this.discontinuity = void 0, this.contiguous = void 0, this.accurateTimeOffset = void 0, this.trackSwitch = void 0, this.timeOffset = void 0, this.initSegmentChange = void 0, this.discontinuity = t2, this.contiguous = e2, this.accurateTimeOffset = r3, this.trackSwitch = i4, this.timeOffset = n3, this.initSegmentChange = a2;
          }, tn = {};
          !function(t2) {
            var e2 = Object.prototype.hasOwnProperty, r3 = "~";
            function i4() {
            }
            function n3(t3, e3, r4) {
              this.fn = t3, this.context = e3, this.once = r4 || false;
            }
            function a2(t3, e3, i5, a3, s3) {
              if ("function" != typeof i5)
                throw new TypeError("The listener must be a function");
              var o3 = new n3(i5, a3 || t3, s3), l4 = r3 ? r3 + e3 : e3;
              return t3._events[l4] ? t3._events[l4].fn ? t3._events[l4] = [t3._events[l4], o3] : t3._events[l4].push(o3) : (t3._events[l4] = o3, t3._eventsCount++), t3;
            }
            function s2(t3, e3) {
              0 == --t3._eventsCount ? t3._events = new i4() : delete t3._events[e3];
            }
            function o2() {
              this._events = new i4(), this._eventsCount = 0;
            }
            Object.create && (i4.prototype = /* @__PURE__ */ Object.create(null), new i4().__proto__ || (r3 = false)), o2.prototype.eventNames = function() {
              var t3, i5, n4 = [];
              if (0 === this._eventsCount)
                return n4;
              for (i5 in t3 = this._events)
                e2.call(t3, i5) && n4.push(r3 ? i5.slice(1) : i5);
              return Object.getOwnPropertySymbols ? n4.concat(Object.getOwnPropertySymbols(t3)) : n4;
            }, o2.prototype.listeners = function(t3) {
              var e3 = r3 ? r3 + t3 : t3, i5 = this._events[e3];
              if (!i5)
                return [];
              if (i5.fn)
                return [i5.fn];
              for (var n4 = 0, a3 = i5.length, s3 = new Array(a3); n4 < a3; n4++)
                s3[n4] = i5[n4].fn;
              return s3;
            }, o2.prototype.listenerCount = function(t3) {
              var e3 = r3 ? r3 + t3 : t3, i5 = this._events[e3];
              return i5 ? i5.fn ? 1 : i5.length : 0;
            }, o2.prototype.emit = function(t3, e3, i5, n4, a3, s3) {
              var o3 = r3 ? r3 + t3 : t3;
              if (!this._events[o3])
                return false;
              var l4, u3, h4 = this._events[o3], d2 = arguments.length;
              if (h4.fn) {
                switch (h4.once && this.removeListener(t3, h4.fn, void 0, true), d2) {
                  case 1:
                    return h4.fn.call(h4.context), true;
                  case 2:
                    return h4.fn.call(h4.context, e3), true;
                  case 3:
                    return h4.fn.call(h4.context, e3, i5), true;
                  case 4:
                    return h4.fn.call(h4.context, e3, i5, n4), true;
                  case 5:
                    return h4.fn.call(h4.context, e3, i5, n4, a3), true;
                  case 6:
                    return h4.fn.call(h4.context, e3, i5, n4, a3, s3), true;
                }
                for (u3 = 1, l4 = new Array(d2 - 1); u3 < d2; u3++)
                  l4[u3 - 1] = arguments[u3];
                h4.fn.apply(h4.context, l4);
              } else {
                var c2, f3 = h4.length;
                for (u3 = 0; u3 < f3; u3++)
                  switch (h4[u3].once && this.removeListener(t3, h4[u3].fn, void 0, true), d2) {
                    case 1:
                      h4[u3].fn.call(h4[u3].context);
                      break;
                    case 2:
                      h4[u3].fn.call(h4[u3].context, e3);
                      break;
                    case 3:
                      h4[u3].fn.call(h4[u3].context, e3, i5);
                      break;
                    case 4:
                      h4[u3].fn.call(h4[u3].context, e3, i5, n4);
                      break;
                    default:
                      if (!l4)
                        for (c2 = 1, l4 = new Array(d2 - 1); c2 < d2; c2++)
                          l4[c2 - 1] = arguments[c2];
                      h4[u3].fn.apply(h4[u3].context, l4);
                  }
              }
              return true;
            }, o2.prototype.on = function(t3, e3, r4) {
              return a2(this, t3, e3, r4, false);
            }, o2.prototype.once = function(t3, e3, r4) {
              return a2(this, t3, e3, r4, true);
            }, o2.prototype.removeListener = function(t3, e3, i5, n4) {
              var a3 = r3 ? r3 + t3 : t3;
              if (!this._events[a3])
                return this;
              if (!e3)
                return s2(this, a3), this;
              var o3 = this._events[a3];
              if (o3.fn)
                o3.fn !== e3 || n4 && !o3.once || i5 && o3.context !== i5 || s2(this, a3);
              else {
                for (var l4 = 0, u3 = [], h4 = o3.length; l4 < h4; l4++)
                  (o3[l4].fn !== e3 || n4 && !o3[l4].once || i5 && o3[l4].context !== i5) && u3.push(o3[l4]);
                u3.length ? this._events[a3] = 1 === u3.length ? u3[0] : u3 : s2(this, a3);
              }
              return this;
            }, o2.prototype.removeAllListeners = function(t3) {
              var e3;
              return t3 ? (e3 = r3 ? r3 + t3 : t3, this._events[e3] && s2(this, e3)) : (this._events = new i4(), this._eventsCount = 0), this;
            }, o2.prototype.off = o2.prototype.removeListener, o2.prototype.addListener = o2.prototype.on, o2.prefixed = r3, o2.EventEmitter = o2, t2.exports = o2;
          }({ get exports() {
            return tn;
          }, set exports(t2) {
            tn = t2;
          } });
          var en = tn;
          function rn(t2, e2) {
            if (!((r3 = e2.remuxResult).audio || r3.video || r3.text || r3.id3 || r3.initSegment))
              return false;
            var r3, i4 = [], n3 = e2.remuxResult, a2 = n3.audio, s2 = n3.video;
            return a2 && nn(i4, a2), s2 && nn(i4, s2), t2.postMessage({ event: "transmuxComplete", data: e2 }, i4), true;
          }
          function nn(t2, e2) {
            e2.data1 && t2.push(e2.data1.buffer), e2.data2 && t2.push(e2.data2.buffer);
          }
          function an(t2, e2, r3) {
            e2.reduce(function(e3, r4) {
              return rn(t2, r4) || e3;
            }, false) || t2.postMessage({ event: "transmuxComplete", data: e2[0] }), t2.postMessage({ event: "flush", data: r3 });
          }
          void 0 !== e && e && function(t2) {
            var e2 = new en(), r3 = function(e3, r4) {
              t2.postMessage({ event: e3, data: r4 });
            };
            e2.on(T2.FRAG_DECRYPTED, r3), e2.on(T2.ERROR, r3);
            var i4 = function() {
              var t3 = function(t4) {
                var e4 = function(e5) {
                  r3("workerLog", { logType: t4, message: e5 });
                };
                D2[t4] = e4;
              };
              for (var e3 in D2)
                t3(e3);
            };
            t2.addEventListener("message", function(n3) {
              var a2 = n3.data;
              switch (a2.cmd) {
                case "init":
                  var s2 = JSON.parse(a2.config);
                  t2.transmuxer = new zi(e2, a2.typeSupported, s2, a2.vendor, a2.id), b2(s2.debug, a2.id), i4(), r3("init", null);
                  break;
                case "configure":
                  t2.transmuxer.configure(a2.config);
                  break;
                case "demux":
                  var o2 = t2.transmuxer.push(a2.data, a2.decryptdata, a2.chunkMeta, a2.state);
                  $i(o2) ? (t2.transmuxer.async = true, o2.then(function(e3) {
                    rn(t2, e3);
                  }).catch(function(t3) {
                    r3(T2.ERROR, { type: E.MEDIA_ERROR, details: S3.FRAG_PARSING_ERROR, chunkMeta: a2.chunkMeta, fatal: false, error: t3, err: t3, reason: "transmuxer-worker push error" });
                  })) : (t2.transmuxer.async = false, rn(t2, o2));
                  break;
                case "flush":
                  var l4 = a2.chunkMeta, u3 = t2.transmuxer.flush(l4);
                  $i(u3) || t2.transmuxer.async ? ($i(u3) || (u3 = Promise.resolve(u3)), u3.then(function(e3) {
                    an(t2, e3, l4);
                  }).catch(function(t3) {
                    r3(T2.ERROR, { type: E.MEDIA_ERROR, details: S3.FRAG_PARSING_ERROR, chunkMeta: a2.chunkMeta, fatal: false, error: t3, err: t3, reason: "transmuxer-worker flush error" });
                  })) : an(t2, u3, l4);
              }
            });
          }(self);
          var sn = zr() || { isTypeSupported: function() {
            return false;
          } }, on = function() {
            function e2(e3, r4, i4, n3) {
              var a2 = this;
              this.error = null, this.hls = void 0, this.id = void 0, this.observer = void 0, this.frag = null, this.part = null, this.useWorker = void 0, this.workerContext = null, this.onwmsg = void 0, this.transmuxer = null, this.onTransmuxComplete = void 0, this.onFlush = void 0;
              var s2 = e3.config;
              this.hls = e3, this.id = r4, this.useWorker = !!s2.enableWorker, this.onTransmuxComplete = i4, this.onFlush = n3;
              var o2 = function(t2, e4) {
                (e4 = e4 || {}).frag = a2.frag, e4.id = a2.id, t2 === T2.ERROR && (a2.error = e4.error), a2.hls.trigger(t2, e4);
              };
              this.observer = new en(), this.observer.on(T2.FRAG_DECRYPTED, o2), this.observer.on(T2.ERROR, o2);
              var l4, u3, h4, d2, c2 = { mp4: sn.isTypeSupported("video/mp4"), mpeg: sn.isTypeSupported("audio/mpeg"), mp3: sn.isTypeSupported('audio/mp4; codecs="mp3"') }, f3 = navigator.vendor;
              if (!this.useWorker || "undefined" == typeof Worker || (s2.workerPath, 0))
                this.transmuxer = new zi(this.observer, c2, s2, f3, r4);
              else
                try {
                  s2.workerPath ? (D2.log("loading Web Worker " + s2.workerPath + ' for "' + r4 + '"'), this.workerContext = (h4 = s2.workerPath, d2 = new self.URL(h4, self.location.href).href, { worker: new self.Worker(d2), scriptURL: d2 })) : (D2.log('injecting Web Worker for "' + r4 + '"'), this.workerContext = (l4 = new self.Blob(["var exports={};var module={exports:exports};function define(f){f()};define.amd=true;(" + t.toString() + ")(true);"], { type: "text/javascript" }), u3 = self.URL.createObjectURL(l4), { worker: new self.Worker(u3), objectURL: u3 })), this.onwmsg = function(t2) {
                    return a2.onWorkerMessage(t2);
                  };
                  var g3 = this.workerContext.worker;
                  g3.addEventListener("message", this.onwmsg), g3.onerror = function(t2) {
                    var e4 = new Error(t2.message + "  (" + t2.filename + ":" + t2.lineno + ")");
                    s2.enableWorker = false, D2.warn('Error in "' + r4 + '" Web Worker, fallback to inline'), a2.hls.trigger(T2.ERROR, { type: E.OTHER_ERROR, details: S3.INTERNAL_EXCEPTION, fatal: false, event: "demuxerWorker", error: e4 });
                  }, g3.postMessage({ cmd: "init", typeSupported: c2, vendor: f3, id: r4, config: JSON.stringify(s2) });
                } catch (t2) {
                  D2.warn('Error setting up "' + r4 + '" Web Worker, fallback to inline', t2), this.resetWorker(), this.error = null, this.transmuxer = new zi(this.observer, c2, s2, f3, r4);
                }
            }
            var r3 = e2.prototype;
            return r3.resetWorker = function() {
              if (this.workerContext) {
                var t2 = this.workerContext, e3 = t2.worker, r4 = t2.objectURL;
                r4 && self.URL.revokeObjectURL(r4), e3.removeEventListener("message", this.onwmsg), e3.onerror = null, e3.terminate(), this.workerContext = null;
              }
            }, r3.destroy = function() {
              if (this.workerContext)
                this.resetWorker(), this.onwmsg = void 0;
              else {
                var t2 = this.transmuxer;
                t2 && (t2.destroy(), this.transmuxer = null);
              }
              var e3 = this.observer;
              e3 && e3.removeAllListeners(), this.frag = null, this.observer = null, this.hls = null;
            }, r3.push = function(t2, e3, r4, i4, n3, a2, s2, o2, l4, u3) {
              var h4, d2, c2 = this;
              l4.transmuxing.start = self.performance.now();
              var f3 = this.transmuxer, g3 = a2 ? a2.start : n3.start, v3 = n3.decryptdata, m3 = this.frag, p2 = !(m3 && n3.cc === m3.cc), y2 = !(m3 && l4.level === m3.level), T3 = m3 ? l4.sn - m3.sn : -1, E2 = this.part ? l4.part - this.part.index : -1, S4 = 0 === T3 && l4.id > 1 && l4.id === (null == m3 ? void 0 : m3.stats.chunkCount), L3 = !y2 && (1 === T3 || 0 === T3 && (1 === E2 || S4 && E2 <= 0)), R3 = self.performance.now();
              (y2 || T3 || 0 === n3.stats.parsing.start) && (n3.stats.parsing.start = R3), !a2 || !E2 && L3 || (a2.stats.parsing.start = R3);
              var A3 = !(m3 && (null == (h4 = n3.initSegment) ? void 0 : h4.url) === (null == (d2 = m3.initSegment) ? void 0 : d2.url)), k3 = new Zi(p2, L3, o2, y2, g3, A3);
              if (!L3 || p2 || A3) {
                D2.log("[transmuxer-interface, " + n3.type + "]: Starting new transmux session for sn: " + l4.sn + " p: " + l4.part + " level: " + l4.level + " id: " + l4.id + "\n        discontinuity: " + p2 + "\n        trackSwitch: " + y2 + "\n        contiguous: " + L3 + "\n        accurateTimeOffset: " + o2 + "\n        timeOffset: " + g3 + "\n        initSegmentChange: " + A3);
                var b3 = new Ji(r4, i4, e3, s2, u3);
                this.configureTransmuxer(b3);
              }
              if (this.frag = n3, this.part = a2, this.workerContext)
                this.workerContext.worker.postMessage({ cmd: "demux", data: t2, decryptdata: v3, chunkMeta: l4, state: k3 }, t2 instanceof ArrayBuffer ? [t2] : []);
              else if (f3) {
                var I3 = f3.push(t2, v3, l4, k3);
                $i(I3) ? (f3.async = true, I3.then(function(t3) {
                  c2.handleTransmuxComplete(t3);
                }).catch(function(t3) {
                  c2.transmuxerError(t3, l4, "transmuxer-interface push error");
                })) : (f3.async = false, this.handleTransmuxComplete(I3));
              }
            }, r3.flush = function(t2) {
              var e3 = this;
              t2.transmuxing.start = self.performance.now();
              var r4 = this.transmuxer;
              if (this.workerContext)
                this.workerContext.worker.postMessage({ cmd: "flush", chunkMeta: t2 });
              else if (r4) {
                var i4 = r4.flush(t2);
                $i(i4) || r4.async ? ($i(i4) || (i4 = Promise.resolve(i4)), i4.then(function(r5) {
                  e3.handleFlushResult(r5, t2);
                }).catch(function(r5) {
                  e3.transmuxerError(r5, t2, "transmuxer-interface flush error");
                })) : this.handleFlushResult(i4, t2);
              }
            }, r3.transmuxerError = function(t2, e3, r4) {
              this.hls && (this.error = t2, this.hls.trigger(T2.ERROR, { type: E.MEDIA_ERROR, details: S3.FRAG_PARSING_ERROR, chunkMeta: e3, fatal: false, error: t2, err: t2, reason: r4 }));
            }, r3.handleFlushResult = function(t2, e3) {
              var r4 = this;
              t2.forEach(function(t3) {
                r4.handleTransmuxComplete(t3);
              }), this.onFlush(e3);
            }, r3.onWorkerMessage = function(t2) {
              var e3 = t2.data, r4 = this.hls;
              switch (e3.event) {
                case "init":
                  var i4, n3 = null == (i4 = this.workerContext) ? void 0 : i4.objectURL;
                  n3 && self.URL.revokeObjectURL(n3);
                  break;
                case "transmuxComplete":
                  this.handleTransmuxComplete(e3.data);
                  break;
                case "flush":
                  this.onFlush(e3.data);
                  break;
                case "workerLog":
                  D2[e3.data.logType] && D2[e3.data.logType](e3.data.message);
                  break;
                default:
                  e3.data = e3.data || {}, e3.data.frag = this.frag, e3.data.id = this.id, r4.trigger(e3.event, e3.data);
              }
            }, r3.configureTransmuxer = function(t2) {
              var e3 = this.transmuxer;
              this.workerContext ? this.workerContext.worker.postMessage({ cmd: "configure", config: t2 }) : e3 && e3.configure(t2);
            }, r3.handleTransmuxComplete = function(t2) {
              t2.chunkMeta.transmuxing.end = self.performance.now(), this.onTransmuxComplete(t2);
            }, e2;
          }(), ln = function() {
            function t2(t3, e3, r3, i4) {
              this.config = void 0, this.media = null, this.fragmentTracker = void 0, this.hls = void 0, this.nudgeRetry = 0, this.stallReported = false, this.stalled = null, this.moved = false, this.seeking = false, this.config = t3, this.media = e3, this.fragmentTracker = r3, this.hls = i4;
            }
            var e2 = t2.prototype;
            return e2.destroy = function() {
              this.media = null, this.hls = this.fragmentTracker = null;
            }, e2.poll = function(t3, e3) {
              var r3 = this.config, i4 = this.media, n3 = this.stalled;
              if (null !== i4) {
                var a2 = i4.currentTime, s2 = i4.seeking, o2 = this.seeking && !s2, l4 = !this.seeking && s2;
                if (this.seeking = s2, a2 === t3) {
                  if (l4 || o2)
                    this.stalled = null;
                  else if (!(i4.paused && !s2 || i4.ended || 0 === i4.playbackRate) && Ar.getBuffered(i4).length) {
                    var u3 = Ar.bufferInfo(i4, a2, 0), h4 = u3.len > 0, d2 = u3.nextStart || 0;
                    if (h4 || d2) {
                      if (s2) {
                        var c2 = u3.len > 2, f3 = !d2 || e3 && e3.start <= a2 || d2 - a2 > 2 && !this.fragmentTracker.getPartialFragment(a2);
                        if (c2 || f3)
                          return;
                        this.moved = false;
                      }
                      if (!this.moved && null !== this.stalled) {
                        var g3, v3 = Math.max(d2, u3.start || 0) - a2, m3 = this.hls.levels ? this.hls.levels[this.hls.currentLevel] : null, p2 = (null == m3 || null == (g3 = m3.details) ? void 0 : g3.live) ? 2 * m3.details.targetduration : 2, y2 = this.fragmentTracker.getPartialFragment(a2);
                        if (v3 > 0 && (v3 <= p2 || y2))
                          return void this._trySkipBufferHole(y2);
                      }
                      var T3 = self.performance.now();
                      if (null !== n3) {
                        var E2 = T3 - n3;
                        if (s2 || !(E2 >= 250) || (this._reportStall(u3), this.media)) {
                          var S4 = Ar.bufferInfo(i4, a2, r3.maxBufferHole);
                          this._tryFixBufferStall(S4, E2);
                        }
                      } else
                        this.stalled = T3;
                    }
                  }
                } else if (this.moved = true, null !== n3) {
                  if (this.stallReported) {
                    var L3 = self.performance.now() - n3;
                    D2.warn("playback not stuck anymore @" + a2 + ", after " + Math.round(L3) + "ms"), this.stallReported = false;
                  }
                  this.stalled = null, this.nudgeRetry = 0;
                }
              }
            }, e2._tryFixBufferStall = function(t3, e3) {
              var r3 = this.config, i4 = this.fragmentTracker, n3 = this.media;
              if (null !== n3) {
                var a2 = n3.currentTime, s2 = i4.getPartialFragment(a2);
                if (s2 && (this._trySkipBufferHole(s2) || !this.media))
                  return;
                (t3.len > r3.maxBufferHole || t3.nextStart && t3.nextStart - a2 < r3.maxBufferHole) && e3 > 1e3 * r3.highBufferWatchdogPeriod && (D2.warn("Trying to nudge playhead over buffer-hole"), this.stalled = null, this._tryNudgeBuffer());
              }
            }, e2._reportStall = function(t3) {
              var e3 = this.hls, r3 = this.media;
              if (!this.stallReported && r3) {
                this.stallReported = true;
                var i4 = new Error("Playback stalling at @" + r3.currentTime + " due to low buffer (" + JSON.stringify(t3) + ")");
                D2.warn(i4.message), e3.trigger(T2.ERROR, { type: E.MEDIA_ERROR, details: S3.BUFFER_STALLED_ERROR, fatal: false, error: i4, buffer: t3.len });
              }
            }, e2._trySkipBufferHole = function(t3) {
              var e3 = this.config, r3 = this.hls, i4 = this.media;
              if (null === i4)
                return 0;
              var n3 = i4.currentTime, a2 = Ar.bufferInfo(i4, n3, 0), s2 = n3 < a2.start ? a2.start : a2.nextStart;
              if (s2) {
                var o2 = a2.len <= e3.maxBufferHole, l4 = a2.len > 0 && a2.len < 1 && i4.readyState < 3, u3 = s2 - n3;
                if (u3 > 0 && (o2 || l4)) {
                  if (u3 > e3.maxBufferHole) {
                    var h4 = this.fragmentTracker, d2 = false;
                    if (0 === n3) {
                      var c2 = h4.getAppendedFrag(0, he2);
                      c2 && s2 < c2.end && (d2 = true);
                    }
                    if (!d2) {
                      var f3 = t3 || h4.getAppendedFrag(n3, he2);
                      if (f3) {
                        for (var g3 = false, v3 = f3.end; v3 < s2; ) {
                          var m3 = h4.getPartialFragment(v3);
                          if (!m3) {
                            g3 = true;
                            break;
                          }
                          v3 += m3.duration;
                        }
                        if (g3)
                          return 0;
                      }
                    }
                  }
                  var p2 = Math.max(s2 + 0.05, n3 + 0.1);
                  if (D2.warn("skipping hole, adjusting currentTime from " + n3 + " to " + p2), this.moved = true, this.stalled = null, i4.currentTime = p2, t3 && !t3.gap) {
                    var y2 = new Error("fragment loaded with buffer holes, seeking from " + n3 + " to " + p2);
                    r3.trigger(T2.ERROR, { type: E.MEDIA_ERROR, details: S3.BUFFER_SEEK_OVER_HOLE, fatal: false, error: y2, reason: y2.message, frag: t3 });
                  }
                  return p2;
                }
              }
              return 0;
            }, e2._tryNudgeBuffer = function() {
              var t3 = this.config, e3 = this.hls, r3 = this.media, i4 = this.nudgeRetry;
              if (null !== r3) {
                var n3 = r3.currentTime;
                if (this.nudgeRetry++, i4 < t3.nudgeMaxRetry) {
                  var a2 = n3 + (i4 + 1) * t3.nudgeOffset, s2 = new Error("Nudging 'currentTime' from " + n3 + " to " + a2);
                  D2.warn(s2.message), r3.currentTime = a2, e3.trigger(T2.ERROR, { type: E.MEDIA_ERROR, details: S3.BUFFER_NUDGE_ON_STALL, error: s2, fatal: false });
                } else {
                  var o2 = new Error("Playhead still not moving while enough data buffered @" + n3 + " after " + t3.nudgeMaxRetry + " nudges");
                  D2.error(o2.message), e3.trigger(T2.ERROR, { type: E.MEDIA_ERROR, details: S3.BUFFER_STALLED_ERROR, error: o2, fatal: true });
                }
              }
            }, t2;
          }(), un = function(t2) {
            function e2(e3, r4, i4) {
              var n3;
              return (n3 = t2.call(this, e3, r4, i4, "[stream-controller]", he2) || this).audioCodecSwap = false, n3.gapController = null, n3.level = -1, n3._forceStartLoad = false, n3.altAudio = false, n3.audioOnly = false, n3.fragPlaying = null, n3.onvplaying = null, n3.onvseeked = null, n3.fragLastKbps = 0, n3.couldBacktrack = false, n3.backtrackFragment = null, n3.audioCodecSwitch = false, n3.videoBuffer = null, n3._registerListeners(), n3;
            }
            l3(e2, t2);
            var r3 = e2.prototype;
            return r3._registerListeners = function() {
              var t3 = this.hls;
              t3.on(T2.MEDIA_ATTACHED, this.onMediaAttached, this), t3.on(T2.MEDIA_DETACHING, this.onMediaDetaching, this), t3.on(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.on(T2.MANIFEST_PARSED, this.onManifestParsed, this), t3.on(T2.LEVEL_LOADING, this.onLevelLoading, this), t3.on(T2.LEVEL_LOADED, this.onLevelLoaded, this), t3.on(T2.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this), t3.on(T2.ERROR, this.onError, this), t3.on(T2.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t3.on(T2.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), t3.on(T2.BUFFER_CREATED, this.onBufferCreated, this), t3.on(T2.BUFFER_FLUSHED, this.onBufferFlushed, this), t3.on(T2.LEVELS_UPDATED, this.onLevelsUpdated, this), t3.on(T2.FRAG_BUFFERED, this.onFragBuffered, this);
            }, r3._unregisterListeners = function() {
              var t3 = this.hls;
              t3.off(T2.MEDIA_ATTACHED, this.onMediaAttached, this), t3.off(T2.MEDIA_DETACHING, this.onMediaDetaching, this), t3.off(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.off(T2.MANIFEST_PARSED, this.onManifestParsed, this), t3.off(T2.LEVEL_LOADED, this.onLevelLoaded, this), t3.off(T2.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this), t3.off(T2.ERROR, this.onError, this), t3.off(T2.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t3.off(T2.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), t3.off(T2.BUFFER_CREATED, this.onBufferCreated, this), t3.off(T2.BUFFER_FLUSHED, this.onBufferFlushed, this), t3.off(T2.LEVELS_UPDATED, this.onLevelsUpdated, this), t3.off(T2.FRAG_BUFFERED, this.onFragBuffered, this);
            }, r3.onHandlerDestroying = function() {
              this._unregisterListeners(), this.onMediaDetaching();
            }, r3.startLoad = function(t3) {
              if (this.levels) {
                var e3 = this.lastCurrentTime, r4 = this.hls;
                if (this.stopLoad(), this.setInterval(100), this.level = -1, !this.startFragRequested) {
                  var i4 = r4.startLevel;
                  -1 === i4 && (r4.config.testBandwidth && this.levels.length > 1 ? (i4 = 0, this.bitrateTest = true) : i4 = r4.nextAutoLevel), this.level = r4.nextLoadLevel = i4, this.loadedmetadata = false;
                }
                e3 > 0 && -1 === t3 && (this.log("Override startPosition with lastCurrentTime @" + e3.toFixed(3)), t3 = e3), this.state = Nr, this.nextLoadPosition = this.startPosition = this.lastCurrentTime = t3, this.tick();
              } else
                this._forceStartLoad = true, this.state = Mr;
            }, r3.stopLoad = function() {
              this._forceStartLoad = false, t2.prototype.stopLoad.call(this);
            }, r3.doTick = function() {
              switch (this.state) {
                case qr:
                  var t3, e3 = this.levels, r4 = this.level, i4 = null == e3 || null == (t3 = e3[r4]) ? void 0 : t3.details;
                  if (i4 && (!i4.live || this.levelLastLoaded === this.level)) {
                    if (this.waitForCdnTuneIn(i4))
                      break;
                    this.state = Nr;
                    break;
                  }
                  break;
                case Gr:
                  var n3, a2 = self.performance.now(), s2 = this.retryDate;
                  (!s2 || a2 >= s2 || null != (n3 = this.media) && n3.seeking) && (this.resetStartWhenNotLoaded(this.level), this.state = Nr);
              }
              this.state === Nr && this.doTickIdle(), this.onTickEnd();
            }, r3.onTickEnd = function() {
              t2.prototype.onTickEnd.call(this), this.checkBuffer(), this.checkFragmentChanged();
            }, r3.doTickIdle = function() {
              var t3 = this.hls, e3 = this.levelLastLoaded, r4 = this.levels, i4 = this.media, n3 = t3.config, a2 = t3.nextLoadLevel;
              if (null !== e3 && (i4 || !this.startFragRequested && n3.startFragPrefetch) && (!this.altAudio || !this.audioOnly) && null != r4 && r4[a2]) {
                var s2 = r4[a2], o2 = this.getMainFwdBufferInfo();
                if (null !== o2) {
                  var l4 = this.getLevelDetails();
                  if (l4 && this._streamEnded(o2, l4)) {
                    var u3 = {};
                    return this.altAudio && (u3.type = "video"), this.hls.trigger(T2.BUFFER_EOS, u3), void (this.state = Yr);
                  }
                  t3.loadLevel !== a2 && -1 === t3.manualLevel && this.log("Adapting to level " + a2 + " from level " + this.level), this.level = t3.nextLoadLevel = a2;
                  var h4 = s2.details;
                  if (!h4 || this.state === qr || h4.live && this.levelLastLoaded !== a2)
                    return this.level = a2, void (this.state = qr);
                  var d2 = o2.len, c2 = this.getMaxBufferLength(s2.maxBitrate);
                  if (!(d2 >= c2)) {
                    this.backtrackFragment && this.backtrackFragment.start > o2.end && (this.backtrackFragment = null);
                    var f3 = this.backtrackFragment ? this.backtrackFragment.start : o2.end, g3 = this.getNextFragment(f3, h4);
                    if (this.couldBacktrack && !this.fragPrevious && g3 && "initSegment" !== g3.sn && this.fragmentTracker.getState(g3) !== cr) {
                      var v3, m3 = (null != (v3 = this.backtrackFragment) ? v3 : g3).sn - h4.startSN, p2 = h4.fragments[m3 - 1];
                      p2 && g3.cc === p2.cc && (g3 = p2, this.fragmentTracker.removeFragment(p2));
                    } else
                      this.backtrackFragment && o2.len && (this.backtrackFragment = null);
                    if (g3 && this.isLoopLoading(g3, f3)) {
                      if (!g3.gap) {
                        var y2 = this.audioOnly && !this.altAudio ? F3 : O3, E2 = (y2 === O3 ? this.videoBuffer : this.mediaBuffer) || this.media;
                        E2 && this.afterBufferFlushed(E2, y2, he2);
                      }
                      g3 = this.getNextFragmentLoopLoading(g3, h4, o2, he2, c2);
                    }
                    g3 && (!g3.initSegment || g3.initSegment.data || this.bitrateTest || (g3 = g3.initSegment), this.loadFragment(g3, s2, f3));
                  }
                }
              }
            }, r3.loadFragment = function(e3, r4, i4) {
              var n3 = this.fragmentTracker.getState(e3);
              this.fragCurrent = e3, n3 === ur ? "initSegment" === e3.sn ? this._loadInitSegment(e3, r4) : this.bitrateTest ? (this.log("Fragment " + e3.sn + " of level " + e3.level + " is being downloaded to test bitrate and will not be buffered"), this._loadBitrateTestFrag(e3, r4)) : (this.startFragRequested = true, t2.prototype.loadFragment.call(this, e3, r4, i4)) : this.clearTrackerIfNeeded(e3);
            }, r3.getAppendedFrag = function(t3) {
              var e3 = this.fragmentTracker.getAppendedFrag(t3, he2);
              return e3 && "fragment" in e3 ? e3.fragment : e3;
            }, r3.getBufferedFrag = function(t3) {
              return this.fragmentTracker.getBufferedFrag(t3, he2);
            }, r3.followingBufferedFrag = function(t3) {
              return t3 ? this.getBufferedFrag(t3.end + 0.5) : null;
            }, r3.immediateLevelSwitch = function() {
              this.abortCurrentFrag(), this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
            }, r3.nextLevelSwitch = function() {
              var t3 = this.levels, e3 = this.media;
              if (null != e3 && e3.readyState) {
                var r4, i4 = this.getAppendedFrag(e3.currentTime);
                if (i4 && i4.start > 1 && this.flushMainBuffer(0, i4.start - 1), !e3.paused && t3) {
                  var n3 = t3[this.hls.nextLoadLevel], a2 = this.fragLastKbps;
                  r4 = a2 && this.fragCurrent ? this.fragCurrent.duration * n3.maxBitrate / (1e3 * a2) + 1 : 0;
                } else
                  r4 = 0;
                var s2 = this.getBufferedFrag(e3.currentTime + r4);
                if (s2) {
                  var o2 = this.followingBufferedFrag(s2);
                  if (o2) {
                    this.abortCurrentFrag();
                    var l4 = o2.maxStartPTS ? o2.maxStartPTS : o2.start, u3 = o2.duration, h4 = Math.max(s2.end, l4 + Math.min(Math.max(u3 - this.config.maxFragLookUpTolerance, 0.5 * u3), 0.75 * u3));
                    this.flushMainBuffer(h4, Number.POSITIVE_INFINITY);
                  }
                }
              }
            }, r3.abortCurrentFrag = function() {
              var t3 = this.fragCurrent;
              switch (this.fragCurrent = null, this.backtrackFragment = null, t3 && (t3.abortRequests(), this.fragmentTracker.removeFragment(t3)), this.state) {
                case Ur:
                case Br:
                case Gr:
                case Hr:
                case Vr:
                  this.state = Nr;
              }
              this.nextLoadPosition = this.getLoadPosition();
            }, r3.flushMainBuffer = function(e3, r4) {
              t2.prototype.flushMainBuffer.call(this, e3, r4, this.altAudio ? "video" : null);
            }, r3.onMediaAttached = function(e3, r4) {
              t2.prototype.onMediaAttached.call(this, e3, r4);
              var i4 = r4.media;
              this.onvplaying = this.onMediaPlaying.bind(this), this.onvseeked = this.onMediaSeeked.bind(this), i4.addEventListener("playing", this.onvplaying), i4.addEventListener("seeked", this.onvseeked), this.gapController = new ln(this.config, i4, this.fragmentTracker, this.hls);
            }, r3.onMediaDetaching = function() {
              var e3 = this.media;
              e3 && this.onvplaying && this.onvseeked && (e3.removeEventListener("playing", this.onvplaying), e3.removeEventListener("seeked", this.onvseeked), this.onvplaying = this.onvseeked = null, this.videoBuffer = null), this.fragPlaying = null, this.gapController && (this.gapController.destroy(), this.gapController = null), t2.prototype.onMediaDetaching.call(this);
            }, r3.onMediaPlaying = function() {
              this.tick();
            }, r3.onMediaSeeked = function() {
              var t3 = this.media, e3 = t3 ? t3.currentTime : null;
              y(e3) && this.log("Media seeked to " + e3.toFixed(3));
              var r4 = this.getMainFwdBufferInfo();
              null !== r4 && 0 !== r4.len ? this.tick() : this.warn('Main forward buffer length on "seeked" event ' + (r4 ? r4.len : "empty") + ")");
            }, r3.onManifestLoading = function() {
              this.log("Trigger BUFFER_RESET"), this.hls.trigger(T2.BUFFER_RESET, void 0), this.fragmentTracker.removeAllFragments(), this.couldBacktrack = false, this.startPosition = this.lastCurrentTime = 0, this.fragPlaying = null, this.backtrackFragment = null;
            }, r3.onManifestParsed = function(t3, e3) {
              var r4, i4, n3, a2 = false, s2 = false;
              e3.levels.forEach(function(t4) {
                (r4 = t4.audioCodec) && (-1 !== r4.indexOf("mp4a.40.2") && (a2 = true), -1 !== r4.indexOf("mp4a.40.5") && (s2 = true));
              }), this.audioCodecSwitch = a2 && s2 && !("function" == typeof (null == (n3 = Qr()) || null == (i4 = n3.prototype) ? void 0 : i4.changeType)), this.audioCodecSwitch && this.log("Both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC"), this.levels = e3.levels, this.startFragRequested = false;
            }, r3.onLevelLoading = function(t3, e3) {
              var r4 = this.levels;
              if (r4 && this.state === Nr) {
                var i4 = r4[e3.level];
                (!i4.details || i4.details.live && this.levelLastLoaded !== e3.level || this.waitForCdnTuneIn(i4.details)) && (this.state = qr);
              }
            }, r3.onLevelLoaded = function(t3, e3) {
              var r4, i4 = this.levels, n3 = e3.level, a2 = e3.details, s2 = a2.totalduration;
              if (i4) {
                this.log("Level " + n3 + " loaded [" + a2.startSN + "," + a2.endSN + "], cc [" + a2.startCC + ", " + a2.endCC + "] duration:" + s2);
                var o2 = i4[n3], l4 = this.fragCurrent;
                !l4 || this.state !== Br && this.state !== Gr || l4.level === e3.level && l4.urlId === o2.urlId || !l4.loader || this.abortCurrentFrag();
                var u3 = 0;
                if (a2.live || null != (r4 = o2.details) && r4.live) {
                  if (a2.fragments[0] || (a2.deltaUpdateFailed = true), a2.deltaUpdateFailed)
                    return;
                  u3 = this.alignPlaylists(a2, o2.details);
                }
                if (o2.details = a2, this.levelLastLoaded = n3, this.hls.trigger(T2.LEVEL_UPDATED, { details: a2, level: n3 }), this.state === qr) {
                  if (this.waitForCdnTuneIn(a2))
                    return;
                  this.state = Nr;
                }
                this.startFragRequested ? a2.live && this.synchronizeToLiveEdge(a2) : this.setStartPosition(a2, u3), this.tick();
              } else
                this.warn("Levels were reset while loading level " + n3);
            }, r3._handleFragmentLoadProgress = function(t3) {
              var e3, r4 = t3.frag, i4 = t3.part, n3 = t3.payload, a2 = this.levels;
              if (a2) {
                var s2 = a2[r4.level], o2 = s2.details;
                if (!o2)
                  return this.warn("Dropping fragment " + r4.sn + " of level " + r4.level + " after level details were reset"), void this.fragmentTracker.removeFragment(r4);
                var l4 = s2.videoCodec, u3 = o2.PTSKnown || !o2.live, h4 = null == (e3 = r4.initSegment) ? void 0 : e3.data, d2 = this._getAudioCodec(s2), c2 = this.transmuxer = this.transmuxer || new on(this.hls, he2, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this)), f3 = i4 ? i4.index : -1, g3 = -1 !== f3, v3 = new kr(r4.level, r4.sn, r4.stats.chunkCount, n3.byteLength, f3, g3), m3 = this.initPTS[r4.cc];
                c2.push(n3, h4, d2, l4, r4, i4, o2.totalduration, u3, v3, m3);
              } else
                this.warn("Levels were reset while fragment load was in progress. Fragment " + r4.sn + " of level " + r4.level + " will not be buffered");
            }, r3.onAudioTrackSwitching = function(t3, e3) {
              var r4 = this.altAudio;
              if (!e3.url) {
                if (this.mediaBuffer !== this.media) {
                  this.log("Switching on main audio, use media.buffered to schedule main fragment loading"), this.mediaBuffer = this.media;
                  var i4 = this.fragCurrent;
                  i4 && (this.log("Switching to main audio track, cancel main fragment load"), i4.abortRequests(), this.fragmentTracker.removeFragment(i4)), this.resetTransmuxer(), this.resetLoadingState();
                } else
                  this.audioOnly && this.resetTransmuxer();
                var n3 = this.hls;
                r4 && (n3.trigger(T2.BUFFER_FLUSHING, { startOffset: 0, endOffset: Number.POSITIVE_INFINITY, type: null }), this.fragmentTracker.removeAllFragments()), n3.trigger(T2.AUDIO_TRACK_SWITCHED, e3);
              }
            }, r3.onAudioTrackSwitched = function(t3, e3) {
              var r4 = e3.id, i4 = !!this.hls.audioTracks[r4].url;
              if (i4) {
                var n3 = this.videoBuffer;
                n3 && this.mediaBuffer !== n3 && (this.log("Switching on alternate audio, use video.buffered to schedule main fragment loading"), this.mediaBuffer = n3);
              }
              this.altAudio = i4, this.tick();
            }, r3.onBufferCreated = function(t3, e3) {
              var r4, i4, n3 = e3.tracks, a2 = false;
              for (var s2 in n3) {
                var o2 = n3[s2];
                if ("main" === o2.id) {
                  if (i4 = s2, r4 = o2, "video" === s2) {
                    var l4 = n3[s2];
                    l4 && (this.videoBuffer = l4.buffer);
                  }
                } else
                  a2 = true;
              }
              a2 && r4 ? (this.log("Alternate track found, use " + i4 + ".buffered to schedule main fragment loading"), this.mediaBuffer = r4.buffer) : this.mediaBuffer = this.media;
            }, r3.onFragBuffered = function(t3, e3) {
              var r4 = e3.frag, i4 = e3.part;
              if (!r4 || r4.type === he2) {
                if (this.fragContextChanged(r4))
                  return this.warn("Fragment " + r4.sn + (i4 ? " p: " + i4.index : "") + " of level " + r4.level + " finished buffering, but was aborted. state: " + this.state), void (this.state === Vr && (this.state = Nr));
                var n3 = i4 ? i4.stats : r4.stats;
                this.fragLastKbps = Math.round(8 * n3.total / (n3.buffering.end - n3.loading.first)), "initSegment" !== r4.sn && (this.fragPrevious = r4), this.fragBufferedComplete(r4, i4);
              }
            }, r3.onError = function(t3, e3) {
              var r4;
              if (e3.fatal)
                this.state = Wr;
              else
                switch (e3.details) {
                  case S3.FRAG_GAP:
                  case S3.FRAG_PARSING_ERROR:
                  case S3.FRAG_DECRYPT_ERROR:
                  case S3.FRAG_LOAD_ERROR:
                  case S3.FRAG_LOAD_TIMEOUT:
                  case S3.KEY_LOAD_ERROR:
                  case S3.KEY_LOAD_TIMEOUT:
                    this.onFragmentOrKeyLoadError(he2, e3);
                    break;
                  case S3.LEVEL_LOAD_ERROR:
                  case S3.LEVEL_LOAD_TIMEOUT:
                  case S3.LEVEL_PARSING_ERROR:
                    e3.levelRetry || this.state !== qr || (null == (r4 = e3.context) ? void 0 : r4.type) !== oe2 || (this.state = Nr);
                    break;
                  case S3.BUFFER_FULL_ERROR:
                    if (!e3.parent || "main" !== e3.parent)
                      return;
                    this.reduceLengthAndFlushBuffer(e3) && this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
                    break;
                  case S3.INTERNAL_EXCEPTION:
                    this.recoverWorkerError(e3);
                }
            }, r3.checkBuffer = function() {
              var t3 = this.media, e3 = this.gapController;
              if (t3 && e3 && t3.readyState) {
                if (this.loadedmetadata || !Ar.getBuffered(t3).length) {
                  var r4 = this.state !== Nr ? this.fragCurrent : null;
                  e3.poll(this.lastCurrentTime, r4);
                }
                this.lastCurrentTime = t3.currentTime;
              }
            }, r3.onFragLoadEmergencyAborted = function() {
              this.state = Nr, this.loadedmetadata || (this.startFragRequested = false, this.nextLoadPosition = this.startPosition), this.tickImmediate();
            }, r3.onBufferFlushed = function(t3, e3) {
              var r4 = e3.type;
              if (r4 !== F3 || this.audioOnly && !this.altAudio) {
                var i4 = (r4 === O3 ? this.videoBuffer : this.mediaBuffer) || this.media;
                this.afterBufferFlushed(i4, r4, he2);
              }
            }, r3.onLevelsUpdated = function(t3, e3) {
              this.levels = e3.levels;
            }, r3.swapAudioCodec = function() {
              this.audioCodecSwap = !this.audioCodecSwap;
            }, r3.seekToStartPos = function() {
              var t3 = this.media;
              if (t3) {
                var e3 = t3.currentTime, r4 = this.startPosition;
                if (r4 >= 0 && e3 < r4) {
                  if (t3.seeking)
                    return void this.log("could not seek to " + r4 + ", already seeking at " + e3);
                  var i4 = Ar.getBuffered(t3), n3 = (i4.length ? i4.start(0) : 0) - r4;
                  n3 > 0 && (n3 < this.config.maxBufferHole || n3 < this.config.maxFragLookUpTolerance) && (this.log("adjusting start position by " + n3 + " to match buffer start"), r4 += n3, this.startPosition = r4), this.log("seek to target start position " + r4 + " from current time " + e3), t3.currentTime = r4;
                }
              }
            }, r3._getAudioCodec = function(t3) {
              var e3 = this.config.defaultAudioCodec || t3.audioCodec;
              return this.audioCodecSwap && e3 && (this.log("Swapping audio codec"), e3 = -1 !== e3.indexOf("mp4a.40.5") ? "mp4a.40.2" : "mp4a.40.5"), e3;
            }, r3._loadBitrateTestFrag = function(t3, e3) {
              var r4 = this;
              t3.bitrateTest = true, this._doFragLoad(t3, e3).then(function(i4) {
                var n3 = r4.hls;
                if (i4 && !r4.fragContextChanged(t3)) {
                  e3.fragmentError = 0, r4.state = Nr, r4.startFragRequested = false, r4.bitrateTest = false;
                  var a2 = t3.stats;
                  a2.parsing.start = a2.parsing.end = a2.buffering.start = a2.buffering.end = self.performance.now(), n3.trigger(T2.FRAG_LOADED, i4), t3.bitrateTest = false;
                }
              });
            }, r3._handleTransmuxComplete = function(t3) {
              var e3, r4 = "main", i4 = this.hls, n3 = t3.remuxResult, a2 = t3.chunkMeta, s2 = this.getCurrentContext(a2);
              if (s2) {
                var o2 = s2.frag, l4 = s2.part, u3 = s2.level, h4 = n3.video, d2 = n3.text, c2 = n3.id3, f3 = n3.initSegment, g3 = u3.details, v3 = this.altAudio ? void 0 : n3.audio;
                if (this.fragContextChanged(o2))
                  this.fragmentTracker.removeFragment(o2);
                else {
                  if (this.state = Hr, f3) {
                    f3.tracks && (this._bufferInitSegment(u3, f3.tracks, o2, a2), i4.trigger(T2.FRAG_PARSING_INIT_SEGMENT, { frag: o2, id: r4, tracks: f3.tracks }));
                    var m3 = f3.initPTS, p2 = f3.timescale;
                    y(m3) && (this.initPTS[o2.cc] = { baseTime: m3, timescale: p2 }, i4.trigger(T2.INIT_PTS_FOUND, { frag: o2, id: r4, initPTS: m3, timescale: p2 }));
                  }
                  if (h4 && false !== n3.independent) {
                    if (g3) {
                      var E2 = h4.startPTS, S4 = h4.endPTS, L3 = h4.startDTS, R3 = h4.endDTS;
                      if (l4)
                        l4.elementaryStreams[h4.type] = { startPTS: E2, endPTS: S4, startDTS: L3, endDTS: R3 };
                      else if (h4.firstKeyFrame && h4.independent && 1 === a2.id && (this.couldBacktrack = true), h4.dropped && h4.independent) {
                        var A3 = this.getMainFwdBufferInfo();
                        if ((A3 ? A3.end : this.getLoadPosition()) + this.config.maxBufferHole < (h4.firstKeyFramePTS ? h4.firstKeyFramePTS : E2) - this.config.maxBufferHole)
                          return void this.backtrack(o2);
                        o2.setElementaryStreamInfo(h4.type, o2.start, S4, o2.start, R3, true);
                      }
                      o2.setElementaryStreamInfo(h4.type, E2, S4, L3, R3), this.backtrackFragment && (this.backtrackFragment = o2), this.bufferFragmentData(h4, o2, l4, a2);
                    }
                  } else if (false === n3.independent)
                    return void this.backtrack(o2);
                  if (v3) {
                    var k3 = v3.startPTS, b3 = v3.endPTS, D3 = v3.startDTS, I3 = v3.endDTS;
                    l4 && (l4.elementaryStreams[F3] = { startPTS: k3, endPTS: b3, startDTS: D3, endDTS: I3 }), o2.setElementaryStreamInfo(F3, k3, b3, D3, I3), this.bufferFragmentData(v3, o2, l4, a2);
                  }
                  if (g3 && null != c2 && null != (e3 = c2.samples) && e3.length) {
                    var w3 = { id: r4, frag: o2, details: g3, samples: c2.samples };
                    i4.trigger(T2.FRAG_PARSING_METADATA, w3);
                  }
                  if (g3 && d2) {
                    var C3 = { id: r4, frag: o2, details: g3, samples: d2.samples };
                    i4.trigger(T2.FRAG_PARSING_USERDATA, C3);
                  }
                }
              } else
                this.resetWhenMissingContext(a2);
            }, r3._bufferInitSegment = function(t3, e3, r4, i4) {
              var n3 = this;
              if (this.state === Hr) {
                this.audioOnly = !!e3.audio && !e3.video, this.altAudio && !this.audioOnly && delete e3.audio;
                var a2 = e3.audio, s2 = e3.video, o2 = e3.audiovideo;
                if (a2) {
                  var l4 = t3.audioCodec, u3 = navigator.userAgent.toLowerCase();
                  this.audioCodecSwitch && (l4 && (l4 = -1 !== l4.indexOf("mp4a.40.5") ? "mp4a.40.2" : "mp4a.40.5"), 1 !== a2.metadata.channelCount && -1 === u3.indexOf("firefox") && (l4 = "mp4a.40.5")), -1 !== u3.indexOf("android") && "audio/mpeg" !== a2.container && (l4 = "mp4a.40.2", this.log("Android: force audio codec to " + l4)), t3.audioCodec && t3.audioCodec !== l4 && this.log('Swapping manifest audio codec "' + t3.audioCodec + '" for "' + l4 + '"'), a2.levelCodec = l4, a2.id = "main", this.log("Init audio buffer, container:" + a2.container + ", codecs[selected/level/parsed]=[" + (l4 || "") + "/" + (t3.audioCodec || "") + "/" + a2.codec + "]");
                }
                s2 && (s2.levelCodec = t3.videoCodec, s2.id = "main", this.log("Init video buffer, container:" + s2.container + ", codecs[level/parsed]=[" + (t3.videoCodec || "") + "/" + s2.codec + "]")), o2 && this.log("Init audiovideo buffer, container:" + o2.container + ", codecs[level/parsed]=[" + (t3.attrs.CODECS || "") + "/" + o2.codec + "]"), this.hls.trigger(T2.BUFFER_CODECS, e3), Object.keys(e3).forEach(function(t4) {
                  var a3 = e3[t4].initSegment;
                  null != a3 && a3.byteLength && n3.hls.trigger(T2.BUFFER_APPENDING, { type: t4, data: a3, frag: r4, part: null, chunkMeta: i4, parent: r4.type });
                }), this.tick();
              }
            }, r3.getMainFwdBufferInfo = function() {
              return this.getFwdBufferInfo(this.mediaBuffer ? this.mediaBuffer : this.media, he2);
            }, r3.backtrack = function(t3) {
              this.couldBacktrack = true, this.backtrackFragment = t3, this.resetTransmuxer(), this.flushBufferGap(t3), this.fragmentTracker.removeFragment(t3), this.fragPrevious = null, this.nextLoadPosition = t3.start, this.state = Nr;
            }, r3.checkFragmentChanged = function() {
              var t3 = this.media, e3 = null;
              if (t3 && t3.readyState > 1 && false === t3.seeking) {
                var r4 = t3.currentTime;
                if (Ar.isBuffered(t3, r4) ? e3 = this.getAppendedFrag(r4) : Ar.isBuffered(t3, r4 + 0.1) && (e3 = this.getAppendedFrag(r4 + 0.1)), e3) {
                  this.backtrackFragment = null;
                  var i4 = this.fragPlaying, n3 = e3.level;
                  i4 && e3.sn === i4.sn && i4.level === n3 && e3.urlId === i4.urlId || (this.fragPlaying = e3, this.hls.trigger(T2.FRAG_CHANGED, { frag: e3 }), i4 && i4.level === n3 || this.hls.trigger(T2.LEVEL_SWITCHED, { level: n3 }));
                }
              }
            }, a(e2, [{ key: "nextLevel", get: function() {
              var t3 = this.nextBufferedFrag;
              return t3 ? t3.level : -1;
            } }, { key: "currentFrag", get: function() {
              var t3 = this.media;
              return t3 ? this.fragPlaying || this.getAppendedFrag(t3.currentTime) : null;
            } }, { key: "currentProgramDateTime", get: function() {
              var t3 = this.media;
              if (t3) {
                var e3 = t3.currentTime, r4 = this.currentFrag;
                if (r4 && y(e3) && y(r4.programDateTime)) {
                  var i4 = r4.programDateTime + 1e3 * (e3 - r4.start);
                  return new Date(i4);
                }
              }
              return null;
            } }, { key: "currentLevel", get: function() {
              var t3 = this.currentFrag;
              return t3 ? t3.level : -1;
            } }, { key: "nextBufferedFrag", get: function() {
              var t3 = this.currentFrag;
              return t3 ? this.followingBufferedFrag(t3) : null;
            } }, { key: "forceStartLoad", get: function() {
              return this._forceStartLoad;
            } }]), e2;
          }(Xr), hn = function() {
            function t2(t3, e3, r3) {
              void 0 === e3 && (e3 = 0), void 0 === r3 && (r3 = 0), this.halfLife = void 0, this.alpha_ = void 0, this.estimate_ = void 0, this.totalWeight_ = void 0, this.halfLife = t3, this.alpha_ = t3 ? Math.exp(Math.log(0.5) / t3) : 0, this.estimate_ = e3, this.totalWeight_ = r3;
            }
            var e2 = t2.prototype;
            return e2.sample = function(t3, e3) {
              var r3 = Math.pow(this.alpha_, t3);
              this.estimate_ = e3 * (1 - r3) + r3 * this.estimate_, this.totalWeight_ += t3;
            }, e2.getTotalWeight = function() {
              return this.totalWeight_;
            }, e2.getEstimate = function() {
              if (this.alpha_) {
                var t3 = 1 - Math.pow(this.alpha_, this.totalWeight_);
                if (t3)
                  return this.estimate_ / t3;
              }
              return this.estimate_;
            }, t2;
          }(), dn = function() {
            function t2(t3, e3, r3, i4) {
              void 0 === i4 && (i4 = 100), this.defaultEstimate_ = void 0, this.minWeight_ = void 0, this.minDelayMs_ = void 0, this.slow_ = void 0, this.fast_ = void 0, this.defaultTTFB_ = void 0, this.ttfb_ = void 0, this.defaultEstimate_ = r3, this.minWeight_ = 1e-3, this.minDelayMs_ = 50, this.slow_ = new hn(t3), this.fast_ = new hn(e3), this.defaultTTFB_ = i4, this.ttfb_ = new hn(t3);
            }
            var e2 = t2.prototype;
            return e2.update = function(t3, e3) {
              var r3 = this.slow_, i4 = this.fast_, n3 = this.ttfb_;
              r3.halfLife !== t3 && (this.slow_ = new hn(t3, r3.getEstimate(), r3.getTotalWeight())), i4.halfLife !== e3 && (this.fast_ = new hn(e3, i4.getEstimate(), i4.getTotalWeight())), n3.halfLife !== t3 && (this.ttfb_ = new hn(t3, n3.getEstimate(), n3.getTotalWeight()));
            }, e2.sample = function(t3, e3) {
              var r3 = (t3 = Math.max(t3, this.minDelayMs_)) / 1e3, i4 = 8 * e3 / r3;
              this.fast_.sample(r3, i4), this.slow_.sample(r3, i4);
            }, e2.sampleTTFB = function(t3) {
              var e3 = t3 / 1e3, r3 = Math.sqrt(2) * Math.exp(-Math.pow(e3, 2) / 2);
              this.ttfb_.sample(r3, Math.max(t3, 5));
            }, e2.canEstimate = function() {
              return this.fast_.getTotalWeight() >= this.minWeight_;
            }, e2.getEstimate = function() {
              return this.canEstimate() ? Math.min(this.fast_.getEstimate(), this.slow_.getEstimate()) : this.defaultEstimate_;
            }, e2.getEstimateTTFB = function() {
              return this.ttfb_.getTotalWeight() >= this.minWeight_ ? this.ttfb_.getEstimate() : this.defaultTTFB_;
            }, e2.destroy = function() {
            }, t2;
          }(), cn = function() {
            function t2(t3) {
              this.hls = void 0, this.lastLevelLoadSec = 0, this.lastLoadedFragLevel = 0, this._nextAutoLevel = -1, this.timer = -1, this.onCheck = this._abandonRulesCheck.bind(this), this.fragCurrent = null, this.partCurrent = null, this.bitrateTestDelay = 0, this.bwEstimator = void 0, this.hls = t3;
              var e3 = t3.config;
              this.bwEstimator = new dn(e3.abrEwmaSlowVoD, e3.abrEwmaFastVoD, e3.abrEwmaDefaultEstimate), this.registerListeners();
            }
            var e2 = t2.prototype;
            return e2.registerListeners = function() {
              var t3 = this.hls;
              t3.on(T2.FRAG_LOADING, this.onFragLoading, this), t3.on(T2.FRAG_LOADED, this.onFragLoaded, this), t3.on(T2.FRAG_BUFFERED, this.onFragBuffered, this), t3.on(T2.LEVEL_SWITCHING, this.onLevelSwitching, this), t3.on(T2.LEVEL_LOADED, this.onLevelLoaded, this);
            }, e2.unregisterListeners = function() {
              var t3 = this.hls;
              t3.off(T2.FRAG_LOADING, this.onFragLoading, this), t3.off(T2.FRAG_LOADED, this.onFragLoaded, this), t3.off(T2.FRAG_BUFFERED, this.onFragBuffered, this), t3.off(T2.LEVEL_SWITCHING, this.onLevelSwitching, this), t3.off(T2.LEVEL_LOADED, this.onLevelLoaded, this);
            }, e2.destroy = function() {
              this.unregisterListeners(), this.clearTimer(), this.hls = this.onCheck = null, this.fragCurrent = this.partCurrent = null;
            }, e2.onFragLoading = function(t3, e3) {
              var r3, i4 = e3.frag;
              this.ignoreFragment(i4) || (this.fragCurrent = i4, this.partCurrent = null != (r3 = e3.part) ? r3 : null, this.clearTimer(), this.timer = self.setInterval(this.onCheck, 100));
            }, e2.onLevelSwitching = function(t3, e3) {
              this.clearTimer();
            }, e2.getTimeToLoadFrag = function(t3, e3, r3, i4) {
              return t3 + r3 / e3 + (i4 ? this.lastLevelLoadSec : 0);
            }, e2.onLevelLoaded = function(t3, e3) {
              var r3 = this.hls.config, i4 = e3.stats, n3 = i4.total, a2 = i4.bwEstimate;
              y(n3) && y(a2) && (this.lastLevelLoadSec = 8 * n3 / a2), e3.details.live ? this.bwEstimator.update(r3.abrEwmaSlowLive, r3.abrEwmaFastLive) : this.bwEstimator.update(r3.abrEwmaSlowVoD, r3.abrEwmaFastVoD);
            }, e2._abandonRulesCheck = function() {
              var t3 = this.fragCurrent, e3 = this.partCurrent, r3 = this.hls, i4 = r3.autoLevelEnabled, n3 = r3.media;
              if (t3 && n3) {
                var a2 = performance.now(), s2 = e3 ? e3.stats : t3.stats, o2 = e3 ? e3.duration : t3.duration, l4 = a2 - s2.loading.start;
                if (s2.aborted || s2.loaded && s2.loaded === s2.total || 0 === t3.level)
                  return this.clearTimer(), void (this._nextAutoLevel = -1);
                if (i4 && !n3.paused && n3.playbackRate && n3.readyState) {
                  var u3 = r3.mainForwardBufferInfo;
                  if (null !== u3) {
                    var h4 = this.bwEstimator.getEstimateTTFB(), d2 = Math.abs(n3.playbackRate);
                    if (!(l4 <= Math.max(h4, o2 / (2 * d2) * 1e3))) {
                      var c2 = u3.len / d2;
                      if (!(c2 >= 2 * o2 / d2)) {
                        var f3 = s2.loading.first ? s2.loading.first - s2.loading.start : -1, g3 = s2.loaded && f3 > -1, v3 = this.bwEstimator.getEstimate(), m3 = r3.levels, p2 = r3.minAutoLevel, E2 = m3[t3.level], S4 = s2.total || Math.max(s2.loaded, Math.round(o2 * E2.maxBitrate / 8)), L3 = l4 - f3;
                        L3 < 1 && g3 && (L3 = Math.min(l4, 8 * s2.loaded / v3));
                        var R3 = g3 ? 1e3 * s2.loaded / L3 : 0, A3 = R3 ? (S4 - s2.loaded) / R3 : 8 * S4 / v3 + h4 / 1e3;
                        if (!(A3 <= c2)) {
                          var k3, b3 = R3 ? 8 * R3 : v3, I3 = Number.POSITIVE_INFINITY;
                          for (k3 = t3.level - 1; k3 > p2; k3--) {
                            var w3 = m3[k3].maxBitrate;
                            if ((I3 = this.getTimeToLoadFrag(h4 / 1e3, b3, o2 * w3, !m3[k3].details)) < c2)
                              break;
                          }
                          I3 >= A3 || I3 > 10 * o2 || (r3.nextLoadLevel = k3, g3 ? this.bwEstimator.sample(l4 - Math.min(h4, f3), s2.loaded) : this.bwEstimator.sampleTTFB(l4), this.clearTimer(), D2.warn("[abr] Fragment " + t3.sn + (e3 ? " part " + e3.index : "") + " of level " + t3.level + " is loading too slowly;\n      Time to underbuffer: " + c2.toFixed(3) + " s\n      Estimated load time for current fragment: " + A3.toFixed(3) + " s\n      Estimated load time for down switch fragment: " + I3.toFixed(3) + " s\n      TTFB estimate: " + f3 + "\n      Current BW estimate: " + (y(v3) ? (v3 / 1024).toFixed(3) : "Unknown") + " Kb/s\n      New BW estimate: " + (this.bwEstimator.getEstimate() / 1024).toFixed(3) + " Kb/s\n      Aborting and switching to level " + k3), t3.loader && (this.fragCurrent = this.partCurrent = null, t3.abortRequests()), r3.trigger(T2.FRAG_LOAD_EMERGENCY_ABORTED, { frag: t3, part: e3, stats: s2 }));
                        }
                      }
                    }
                  }
                }
              }
            }, e2.onFragLoaded = function(t3, e3) {
              var r3 = e3.frag, i4 = e3.part, n3 = i4 ? i4.stats : r3.stats;
              if (r3.type === he2 && this.bwEstimator.sampleTTFB(n3.loading.first - n3.loading.start), !this.ignoreFragment(r3)) {
                if (this.clearTimer(), this.lastLoadedFragLevel = r3.level, this._nextAutoLevel = -1, this.hls.config.abrMaxWithRealBitrate) {
                  var a2 = i4 ? i4.duration : r3.duration, s2 = this.hls.levels[r3.level], o2 = (s2.loaded ? s2.loaded.bytes : 0) + n3.loaded, l4 = (s2.loaded ? s2.loaded.duration : 0) + a2;
                  s2.loaded = { bytes: o2, duration: l4 }, s2.realBitrate = Math.round(8 * o2 / l4);
                }
                if (r3.bitrateTest) {
                  var u3 = { stats: n3, frag: r3, part: i4, id: r3.type };
                  this.onFragBuffered(T2.FRAG_BUFFERED, u3), r3.bitrateTest = false;
                }
              }
            }, e2.onFragBuffered = function(t3, e3) {
              var r3 = e3.frag, i4 = e3.part, n3 = null != i4 && i4.stats.loaded ? i4.stats : r3.stats;
              if (!n3.aborted && !this.ignoreFragment(r3)) {
                var a2 = n3.parsing.end - n3.loading.start - Math.min(n3.loading.first - n3.loading.start, this.bwEstimator.getEstimateTTFB());
                this.bwEstimator.sample(a2, n3.loaded), n3.bwEstimate = this.bwEstimator.getEstimate(), r3.bitrateTest ? this.bitrateTestDelay = a2 / 1e3 : this.bitrateTestDelay = 0;
              }
            }, e2.ignoreFragment = function(t3) {
              return t3.type !== he2 || "initSegment" === t3.sn;
            }, e2.clearTimer = function() {
              self.clearInterval(this.timer);
            }, e2.getNextABRAutoLevel = function() {
              var t3 = this.fragCurrent, e3 = this.partCurrent, r3 = this.hls, i4 = r3.maxAutoLevel, n3 = r3.config, a2 = r3.minAutoLevel, s2 = r3.media, o2 = e3 ? e3.duration : t3 ? t3.duration : 0, l4 = s2 && 0 !== s2.playbackRate ? Math.abs(s2.playbackRate) : 1, u3 = this.bwEstimator ? this.bwEstimator.getEstimate() : n3.abrEwmaDefaultEstimate, h4 = r3.mainForwardBufferInfo, d2 = (h4 ? h4.len : 0) / l4, c2 = this.findBestLevel(u3, a2, i4, d2, n3.abrBandWidthFactor, n3.abrBandWidthUpFactor);
              if (c2 >= 0)
                return c2;
              D2.trace("[abr] " + (d2 ? "rebuffering expected" : "buffer is empty") + ", finding optimal quality level");
              var f3 = o2 ? Math.min(o2, n3.maxStarvationDelay) : n3.maxStarvationDelay, g3 = n3.abrBandWidthFactor, v3 = n3.abrBandWidthUpFactor;
              if (!d2) {
                var m3 = this.bitrateTestDelay;
                m3 && (f3 = (o2 ? Math.min(o2, n3.maxLoadingDelay) : n3.maxLoadingDelay) - m3, D2.trace("[abr] bitrate test took " + Math.round(1e3 * m3) + "ms, set first fragment max fetchDuration to " + Math.round(1e3 * f3) + " ms"), g3 = v3 = 1);
              }
              return c2 = this.findBestLevel(u3, a2, i4, d2 + f3, g3, v3), Math.max(c2, 0);
            }, e2.findBestLevel = function(t3, e3, r3, i4, n3, a2) {
              for (var s2, o2 = this.fragCurrent, l4 = this.partCurrent, u3 = this.lastLoadedFragLevel, h4 = this.hls.levels, d2 = h4[u3], c2 = !(null == d2 || null == (s2 = d2.details) || !s2.live), f3 = null == d2 ? void 0 : d2.codecSet, g3 = l4 ? l4.duration : o2 ? o2.duration : 0, v3 = this.bwEstimator.getEstimateTTFB() / 1e3, m3 = e3, p2 = -1, T3 = r3; T3 >= e3; T3--) {
                var E2 = h4[T3];
                if (!E2 || f3 && E2.codecSet !== f3)
                  E2 && (m3 = Math.min(T3, m3), p2 = Math.max(T3, p2));
                else {
                  -1 !== p2 && D2.trace("[abr] Skipped level(s) " + m3 + "-" + p2 + ' with CODECS:"' + h4[p2].attrs.CODECS + '"; not compatible with "' + d2.attrs.CODECS + '"');
                  var S4 = E2.details, L3 = (l4 ? null == S4 ? void 0 : S4.partTarget : null == S4 ? void 0 : S4.averagetargetduration) || g3, R3 = void 0;
                  R3 = T3 <= u3 ? n3 * t3 : a2 * t3;
                  var A3 = h4[T3].maxBitrate, k3 = this.getTimeToLoadFrag(v3, R3, A3 * L3, void 0 === S4);
                  if (D2.trace("[abr] level:" + T3 + " adjustedbw-bitrate:" + Math.round(R3 - A3) + " avgDuration:" + L3.toFixed(1) + " maxFetchDuration:" + i4.toFixed(1) + " fetchDuration:" + k3.toFixed(1)), R3 > A3 && (0 === k3 || !y(k3) || c2 && !this.bitrateTestDelay || k3 < i4))
                    return T3;
                }
              }
              return -1;
            }, a(t2, [{ key: "nextAutoLevel", get: function() {
              var t3 = this._nextAutoLevel, e3 = this.bwEstimator;
              if (-1 !== t3 && !e3.canEstimate())
                return t3;
              var r3 = this.getNextABRAutoLevel();
              if (-1 !== t3) {
                var i4 = this.hls.levels;
                if (i4.length > Math.max(t3, r3) && i4[t3].loadError <= i4[r3].loadError)
                  return t3;
              }
              return -1 !== t3 && (r3 = Math.min(t3, r3)), r3;
            }, set: function(t3) {
              this._nextAutoLevel = t3;
            } }]), t2;
          }(), fn = function() {
            function t2() {
              this.chunks = [], this.dataLength = 0;
            }
            var e2 = t2.prototype;
            return e2.push = function(t3) {
              this.chunks.push(t3), this.dataLength += t3.length;
            }, e2.flush = function() {
              var t3, e3 = this.chunks, r3 = this.dataLength;
              return e3.length ? (t3 = 1 === e3.length ? e3[0] : function(t4, e4) {
                for (var r4 = new Uint8Array(e4), i4 = 0, n3 = 0; n3 < t4.length; n3++) {
                  var a2 = t4[n3];
                  r4.set(a2, i4), i4 += a2.length;
                }
                return r4;
              }(e3, r3), this.reset(), t3) : new Uint8Array(0);
            }, e2.reset = function() {
              this.chunks.length = 0, this.dataLength = 0;
            }, t2;
          }(), gn = function(t2) {
            function e2(e3, r4, i4) {
              var n3;
              return (n3 = t2.call(this, e3, r4, i4, "[audio-stream-controller]", de2) || this).videoBuffer = null, n3.videoTrackCC = -1, n3.waitingVideoCC = -1, n3.bufferedTrack = null, n3.switchingTrack = null, n3.trackId = -1, n3.waitingData = null, n3.mainDetails = null, n3.bufferFlushed = false, n3.cachedTrackLoadedData = null, n3._registerListeners(), n3;
            }
            l3(e2, t2);
            var r3 = e2.prototype;
            return r3.onHandlerDestroying = function() {
              this._unregisterListeners(), this.mainDetails = null, this.bufferedTrack = null, this.switchingTrack = null;
            }, r3._registerListeners = function() {
              var t3 = this.hls;
              t3.on(T2.MEDIA_ATTACHED, this.onMediaAttached, this), t3.on(T2.MEDIA_DETACHING, this.onMediaDetaching, this), t3.on(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.on(T2.LEVEL_LOADED, this.onLevelLoaded, this), t3.on(T2.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this), t3.on(T2.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t3.on(T2.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t3.on(T2.ERROR, this.onError, this), t3.on(T2.BUFFER_RESET, this.onBufferReset, this), t3.on(T2.BUFFER_CREATED, this.onBufferCreated, this), t3.on(T2.BUFFER_FLUSHED, this.onBufferFlushed, this), t3.on(T2.INIT_PTS_FOUND, this.onInitPtsFound, this), t3.on(T2.FRAG_BUFFERED, this.onFragBuffered, this);
            }, r3._unregisterListeners = function() {
              var t3 = this.hls;
              t3.off(T2.MEDIA_ATTACHED, this.onMediaAttached, this), t3.off(T2.MEDIA_DETACHING, this.onMediaDetaching, this), t3.off(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.off(T2.LEVEL_LOADED, this.onLevelLoaded, this), t3.off(T2.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this), t3.off(T2.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t3.off(T2.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t3.off(T2.ERROR, this.onError, this), t3.off(T2.BUFFER_RESET, this.onBufferReset, this), t3.off(T2.BUFFER_CREATED, this.onBufferCreated, this), t3.off(T2.BUFFER_FLUSHED, this.onBufferFlushed, this), t3.off(T2.INIT_PTS_FOUND, this.onInitPtsFound, this), t3.off(T2.FRAG_BUFFERED, this.onFragBuffered, this);
            }, r3.onInitPtsFound = function(t3, e3) {
              var r4 = e3.frag, i4 = e3.id, n3 = e3.initPTS, a2 = e3.timescale;
              if ("main" === i4) {
                var s2 = r4.cc;
                this.initPTS[r4.cc] = { baseTime: n3, timescale: a2 }, this.log("InitPTS for cc: " + s2 + " found from main: " + n3), this.videoTrackCC = s2, this.state === jr && this.tick();
              }
            }, r3.startLoad = function(t3) {
              if (!this.levels)
                return this.startPosition = t3, void (this.state = Mr);
              var e3 = this.lastCurrentTime;
              this.stopLoad(), this.setInterval(100), e3 > 0 && -1 === t3 ? (this.log("Override startPosition with lastCurrentTime @" + e3.toFixed(3)), t3 = e3, this.state = Nr) : (this.loadedmetadata = false, this.state = Kr), this.nextLoadPosition = this.startPosition = this.lastCurrentTime = t3, this.tick();
            }, r3.doTick = function() {
              switch (this.state) {
                case Nr:
                  this.doTickIdle();
                  break;
                case Kr:
                  var e3, r4 = this.levels, i4 = this.trackId, n3 = null == r4 || null == (e3 = r4[i4]) ? void 0 : e3.details;
                  if (n3) {
                    if (this.waitForCdnTuneIn(n3))
                      break;
                    this.state = jr;
                  }
                  break;
                case Gr:
                  var a2, s2 = performance.now(), o2 = this.retryDate;
                  (!o2 || s2 >= o2 || null != (a2 = this.media) && a2.seeking) && (this.log("RetryDate reached, switch back to IDLE state"), this.resetStartWhenNotLoaded(this.trackId), this.state = Nr);
                  break;
                case jr:
                  var l4 = this.waitingData;
                  if (l4) {
                    var u3 = l4.frag, h4 = l4.part, d2 = l4.cache, c2 = l4.complete;
                    if (void 0 !== this.initPTS[u3.cc]) {
                      this.waitingData = null, this.waitingVideoCC = -1, this.state = Br;
                      var f3 = { frag: u3, part: h4, payload: d2.flush(), networkDetails: null };
                      this._handleFragmentLoadProgress(f3), c2 && t2.prototype._handleFragmentLoadComplete.call(this, f3);
                    } else if (this.videoTrackCC !== this.waitingVideoCC)
                      this.log("Waiting fragment cc (" + u3.cc + ") cancelled because video is at cc " + this.videoTrackCC), this.clearWaitingFragment();
                    else {
                      var g3 = this.getLoadPosition(), v3 = Ar.bufferInfo(this.mediaBuffer, g3, this.config.maxBufferHole);
                      Xe2(v3.end, this.config.maxFragLookUpTolerance, u3) < 0 && (this.log("Waiting fragment cc (" + u3.cc + ") @ " + u3.start + " cancelled because another fragment at " + v3.end + " is needed"), this.clearWaitingFragment());
                    }
                  } else
                    this.state = Nr;
              }
              this.onTickEnd();
            }, r3.clearWaitingFragment = function() {
              var t3 = this.waitingData;
              t3 && (this.fragmentTracker.removeFragment(t3.frag), this.waitingData = null, this.waitingVideoCC = -1, this.state = Nr);
            }, r3.resetLoadingState = function() {
              this.clearWaitingFragment(), t2.prototype.resetLoadingState.call(this);
            }, r3.onTickEnd = function() {
              var t3 = this.media;
              null != t3 && t3.readyState && (this.lastCurrentTime = t3.currentTime);
            }, r3.doTickIdle = function() {
              var t3 = this.hls, e3 = this.levels, r4 = this.media, i4 = this.trackId, n3 = t3.config;
              if (null != e3 && e3[i4] && (r4 || !this.startFragRequested && n3.startFragPrefetch)) {
                var a2 = e3[i4], s2 = a2.details;
                if (!s2 || s2.live && this.levelLastLoaded !== i4 || this.waitForCdnTuneIn(s2))
                  this.state = Kr;
                else {
                  var o2 = this.mediaBuffer ? this.mediaBuffer : this.media;
                  this.bufferFlushed && o2 && (this.bufferFlushed = false, this.afterBufferFlushed(o2, F3, de2));
                  var l4 = this.getFwdBufferInfo(o2, de2);
                  if (null !== l4) {
                    var u3 = this.bufferedTrack, h4 = this.switchingTrack;
                    if (!h4 && this._streamEnded(l4, s2))
                      return t3.trigger(T2.BUFFER_EOS, { type: "audio" }), void (this.state = Yr);
                    var d2 = this.getFwdBufferInfo(this.videoBuffer ? this.videoBuffer : this.media, he2), c2 = l4.len, f3 = this.getMaxBufferLength(null == d2 ? void 0 : d2.len);
                    if (!(c2 >= f3) || h4) {
                      var g3 = s2.fragments[0].start, v3 = l4.end;
                      if (h4 && r4) {
                        var m3 = this.getLoadPosition();
                        u3 && h4.attrs !== u3.attrs && (v3 = m3), s2.PTSKnown && m3 < g3 && (l4.end > g3 || l4.nextStart) && (this.log("Alt audio track ahead of main track, seek to start of alt audio track"), r4.currentTime = g3 + 0.05);
                      }
                      var p2 = this.getNextFragment(v3, s2), y2 = false;
                      if (p2 && this.isLoopLoading(p2, v3) && (y2 = !!p2.gap, p2 = this.getNextFragmentLoopLoading(p2, s2, l4, he2, f3)), p2) {
                        var E2 = d2 && p2.start > d2.end + s2.targetduration;
                        if (E2 || (null == d2 || !d2.len) && l4.len) {
                          var S4 = this.fragmentTracker.getBufferedFrag(p2.start, he2);
                          if (null === S4)
                            return;
                          if (y2 || (y2 = !!S4.gap || !!E2 && 0 === d2.len), E2 && !y2 || y2 && l4.nextStart && l4.nextStart < S4.end)
                            return;
                        }
                        this.loadFragment(p2, a2, v3);
                      } else
                        this.bufferFlushed = true;
                    }
                  }
                }
              }
            }, r3.getMaxBufferLength = function(e3) {
              var r4 = t2.prototype.getMaxBufferLength.call(this);
              return e3 ? Math.min(Math.max(r4, e3), this.config.maxMaxBufferLength) : r4;
            }, r3.onMediaDetaching = function() {
              this.videoBuffer = null, t2.prototype.onMediaDetaching.call(this);
            }, r3.onAudioTracksUpdated = function(t3, e3) {
              var r4 = e3.audioTracks;
              this.resetTransmuxer(), this.levels = r4.map(function(t4) {
                return new xe2(t4);
              });
            }, r3.onAudioTrackSwitching = function(t3, e3) {
              var r4 = !!e3.url;
              this.trackId = e3.id;
              var i4 = this.fragCurrent;
              i4 && (i4.abortRequests(), this.removeUnbufferedFrags(i4.start)), this.resetLoadingState(), r4 ? this.setInterval(100) : this.resetTransmuxer(), r4 ? (this.switchingTrack = e3, this.state = Nr) : (this.switchingTrack = null, this.bufferedTrack = e3, this.state = Mr), this.tick();
            }, r3.onManifestLoading = function() {
              this.mainDetails = null, this.fragmentTracker.removeAllFragments(), this.startPosition = this.lastCurrentTime = 0, this.bufferFlushed = false, this.bufferedTrack = null, this.switchingTrack = null;
            }, r3.onLevelLoaded = function(t3, e3) {
              this.mainDetails = e3.details, null !== this.cachedTrackLoadedData && (this.hls.trigger(T2.AUDIO_TRACK_LOADED, this.cachedTrackLoadedData), this.cachedTrackLoadedData = null);
            }, r3.onAudioTrackLoaded = function(t3, e3) {
              var r4;
              if (null != this.mainDetails) {
                var i4 = this.levels, n3 = e3.details, a2 = e3.id;
                if (i4) {
                  this.log("Track " + a2 + " loaded [" + n3.startSN + "," + n3.endSN + "],duration:" + n3.totalduration);
                  var s2 = i4[a2], o2 = 0;
                  if (n3.live || null != (r4 = s2.details) && r4.live) {
                    var l4 = this.mainDetails;
                    if (n3.fragments[0] || (n3.deltaUpdateFailed = true), n3.deltaUpdateFailed || !l4)
                      return;
                    !s2.details && n3.hasProgramDateTime && l4.hasProgramDateTime ? (Cr(n3, l4), o2 = n3.fragments[0].start) : o2 = this.alignPlaylists(n3, s2.details);
                  }
                  s2.details = n3, this.levelLastLoaded = a2, this.startFragRequested || !this.mainDetails && n3.live || this.setStartPosition(s2.details, o2), this.state !== Kr || this.waitForCdnTuneIn(n3) || (this.state = Nr), this.tick();
                } else
                  this.warn("Audio tracks were reset while loading level " + a2);
              } else
                this.cachedTrackLoadedData = e3;
            }, r3._handleFragmentLoadProgress = function(t3) {
              var e3, r4 = t3.frag, i4 = t3.part, n3 = t3.payload, a2 = this.config, s2 = this.trackId, o2 = this.levels;
              if (o2) {
                var l4 = o2[s2];
                if (l4) {
                  var u3 = l4.details;
                  if (!u3)
                    return this.warn("Audio track details undefined on fragment load progress"), void this.removeUnbufferedFrags(r4.start);
                  var h4 = a2.defaultAudioCodec || l4.audioCodec || "mp4a.40.2", d2 = this.transmuxer;
                  d2 || (d2 = this.transmuxer = new on(this.hls, de2, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this)));
                  var c2 = this.initPTS[r4.cc], f3 = null == (e3 = r4.initSegment) ? void 0 : e3.data;
                  if (void 0 !== c2) {
                    var g3 = i4 ? i4.index : -1, v3 = -1 !== g3, m3 = new kr(r4.level, r4.sn, r4.stats.chunkCount, n3.byteLength, g3, v3);
                    d2.push(n3, f3, h4, "", r4, i4, u3.totalduration, false, m3, c2);
                  } else
                    this.log("Unknown video PTS for cc " + r4.cc + ", waiting for video PTS before demuxing audio frag " + r4.sn + " of [" + u3.startSN + " ," + u3.endSN + "],track " + s2), (this.waitingData = this.waitingData || { frag: r4, part: i4, cache: new fn(), complete: false }).cache.push(new Uint8Array(n3)), this.waitingVideoCC = this.videoTrackCC, this.state = jr;
                } else
                  this.warn("Audio track is undefined on fragment load progress");
              } else
                this.warn("Audio tracks were reset while fragment load was in progress. Fragment " + r4.sn + " of level " + r4.level + " will not be buffered");
            }, r3._handleFragmentLoadComplete = function(e3) {
              this.waitingData ? this.waitingData.complete = true : t2.prototype._handleFragmentLoadComplete.call(this, e3);
            }, r3.onBufferReset = function() {
              this.mediaBuffer = this.videoBuffer = null, this.loadedmetadata = false;
            }, r3.onBufferCreated = function(t3, e3) {
              var r4 = e3.tracks.audio;
              r4 && (this.mediaBuffer = r4.buffer || null), e3.tracks.video && (this.videoBuffer = e3.tracks.video.buffer || null);
            }, r3.onFragBuffered = function(t3, e3) {
              var r4, n3 = e3.frag, a2 = e3.part;
              if (n3.type === de2)
                if (this.fragContextChanged(n3))
                  this.warn("Fragment " + n3.sn + (a2 ? " p: " + a2.index : "") + " of level " + n3.level + " finished buffering, but was aborted. state: " + this.state + ", audioSwitch: " + (this.switchingTrack ? this.switchingTrack.name : "false"));
                else {
                  if ("initSegment" !== n3.sn) {
                    this.fragPrevious = n3;
                    var s2 = this.switchingTrack;
                    s2 && (this.bufferedTrack = s2, this.switchingTrack = null, this.hls.trigger(T2.AUDIO_TRACK_SWITCHED, i3({}, s2)));
                  }
                  this.fragBufferedComplete(n3, a2);
                }
              else
                this.loadedmetadata || n3.type !== he2 || null != (r4 = this.videoBuffer || this.media) && r4.buffered.length && (this.loadedmetadata = true);
            }, r3.onError = function(e3, r4) {
              var i4;
              if (r4.fatal)
                this.state = Wr;
              else
                switch (r4.details) {
                  case S3.FRAG_GAP:
                  case S3.FRAG_PARSING_ERROR:
                  case S3.FRAG_DECRYPT_ERROR:
                  case S3.FRAG_LOAD_ERROR:
                  case S3.FRAG_LOAD_TIMEOUT:
                  case S3.KEY_LOAD_ERROR:
                  case S3.KEY_LOAD_TIMEOUT:
                    this.onFragmentOrKeyLoadError(de2, r4);
                    break;
                  case S3.AUDIO_TRACK_LOAD_ERROR:
                  case S3.AUDIO_TRACK_LOAD_TIMEOUT:
                  case S3.LEVEL_PARSING_ERROR:
                    r4.levelRetry || this.state !== Kr || (null == (i4 = r4.context) ? void 0 : i4.type) !== le2 || (this.state = Nr);
                    break;
                  case S3.BUFFER_FULL_ERROR:
                    if (!r4.parent || "audio" !== r4.parent)
                      return;
                    this.reduceLengthAndFlushBuffer(r4) && (this.bufferedTrack = null, t2.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, "audio"));
                    break;
                  case S3.INTERNAL_EXCEPTION:
                    this.recoverWorkerError(r4);
                }
            }, r3.onBufferFlushed = function(t3, e3) {
              e3.type === F3 && (this.bufferFlushed = true, this.state === Yr && (this.state = Nr));
            }, r3._handleTransmuxComplete = function(t3) {
              var e3, r4 = "audio", i4 = this.hls, n3 = t3.remuxResult, a2 = t3.chunkMeta, s2 = this.getCurrentContext(a2);
              if (s2) {
                var l4 = s2.frag, u3 = s2.part, h4 = s2.level.details, d2 = n3.audio, c2 = n3.text, f3 = n3.id3, g3 = n3.initSegment;
                if (!this.fragContextChanged(l4) && h4) {
                  if (this.state = Hr, this.switchingTrack && d2 && this.completeAudioSwitch(this.switchingTrack), null != g3 && g3.tracks && (this._bufferInitSegment(g3.tracks, l4, a2), i4.trigger(T2.FRAG_PARSING_INIT_SEGMENT, { frag: l4, id: r4, tracks: g3.tracks })), d2) {
                    var v3 = d2.startPTS, m3 = d2.endPTS, p2 = d2.startDTS, y2 = d2.endDTS;
                    u3 && (u3.elementaryStreams[F3] = { startPTS: v3, endPTS: m3, startDTS: p2, endDTS: y2 }), l4.setElementaryStreamInfo(F3, v3, m3, p2, y2), this.bufferFragmentData(d2, l4, u3, a2);
                  }
                  if (null != f3 && null != (e3 = f3.samples) && e3.length) {
                    var E2 = o({ id: r4, frag: l4, details: h4 }, f3);
                    i4.trigger(T2.FRAG_PARSING_METADATA, E2);
                  }
                  if (c2) {
                    var S4 = o({ id: r4, frag: l4, details: h4 }, c2);
                    i4.trigger(T2.FRAG_PARSING_USERDATA, S4);
                  }
                } else
                  this.fragmentTracker.removeFragment(l4);
              } else
                this.resetWhenMissingContext(a2);
            }, r3._bufferInitSegment = function(t3, e3, r4) {
              if (this.state === Hr) {
                t3.video && delete t3.video;
                var i4 = t3.audio;
                if (i4) {
                  i4.levelCodec = i4.codec, i4.id = "audio", this.log("Init audio buffer, container:" + i4.container + ", codecs[parsed]=[" + i4.codec + "]"), this.hls.trigger(T2.BUFFER_CODECS, t3);
                  var n3 = i4.initSegment;
                  if (null != n3 && n3.byteLength) {
                    var a2 = { type: "audio", frag: e3, part: null, chunkMeta: r4, parent: e3.type, data: n3 };
                    this.hls.trigger(T2.BUFFER_APPENDING, a2);
                  }
                  this.tick();
                }
              }
            }, r3.loadFragment = function(e3, r4, i4) {
              var n3, a2 = this.fragmentTracker.getState(e3);
              this.fragCurrent = e3, this.switchingTrack || a2 === ur || a2 === dr ? "initSegment" === e3.sn ? this._loadInitSegment(e3, r4) : null != (n3 = r4.details) && n3.live && !this.initPTS[e3.cc] ? (this.log("Waiting for video PTS in continuity counter " + e3.cc + " of live stream before loading audio fragment " + e3.sn + " of level " + this.trackId), this.state = jr) : (this.startFragRequested = true, t2.prototype.loadFragment.call(this, e3, r4, i4)) : this.clearTrackerIfNeeded(e3);
            }, r3.completeAudioSwitch = function(e3) {
              var r4 = this.hls, n3 = this.media, a2 = this.bufferedTrack, s2 = null == a2 ? void 0 : a2.attrs, o2 = e3.attrs;
              n3 && s2 && (s2.CHANNELS !== o2.CHANNELS || s2.NAME !== o2.NAME || s2.LANGUAGE !== o2.LANGUAGE) && (this.log("Switching audio track : flushing all audio"), t2.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, "audio")), this.bufferedTrack = e3, this.switchingTrack = null, r4.trigger(T2.AUDIO_TRACK_SWITCHED, i3({}, e3));
            }, e2;
          }(Xr), vn = function(t2) {
            function e2(e3) {
              var r4;
              return (r4 = t2.call(this, e3, "[audio-track-controller]") || this).tracks = [], r4.groupId = null, r4.tracksInGroup = [], r4.trackId = -1, r4.currentTrack = null, r4.selectDefaultTrack = true, r4.registerListeners(), r4;
            }
            l3(e2, t2);
            var r3 = e2.prototype;
            return r3.registerListeners = function() {
              var t3 = this.hls;
              t3.on(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.on(T2.MANIFEST_PARSED, this.onManifestParsed, this), t3.on(T2.LEVEL_LOADING, this.onLevelLoading, this), t3.on(T2.LEVEL_SWITCHING, this.onLevelSwitching, this), t3.on(T2.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t3.on(T2.ERROR, this.onError, this);
            }, r3.unregisterListeners = function() {
              var t3 = this.hls;
              t3.off(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.off(T2.MANIFEST_PARSED, this.onManifestParsed, this), t3.off(T2.LEVEL_LOADING, this.onLevelLoading, this), t3.off(T2.LEVEL_SWITCHING, this.onLevelSwitching, this), t3.off(T2.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t3.off(T2.ERROR, this.onError, this);
            }, r3.destroy = function() {
              this.unregisterListeners(), this.tracks.length = 0, this.tracksInGroup.length = 0, this.currentTrack = null, t2.prototype.destroy.call(this);
            }, r3.onManifestLoading = function() {
              this.tracks = [], this.groupId = null, this.tracksInGroup = [], this.trackId = -1, this.currentTrack = null, this.selectDefaultTrack = true;
            }, r3.onManifestParsed = function(t3, e3) {
              this.tracks = e3.audioTracks || [];
            }, r3.onAudioTrackLoaded = function(t3, e3) {
              var r4 = e3.id, i4 = e3.groupId, n3 = e3.details, a2 = this.tracksInGroup[r4];
              if (a2 && a2.groupId === i4) {
                var s2 = a2.details;
                a2.details = e3.details, this.log("audio-track " + r4 + ' "' + a2.name + '" lang:' + a2.lang + " group:" + i4 + " loaded [" + n3.startSN + "-" + n3.endSN + "]"), r4 === this.trackId && this.playlistLoaded(r4, e3, s2);
              } else
                this.warn("Track with id:" + r4 + " and group:" + i4 + " not found in active group " + a2.groupId);
            }, r3.onLevelLoading = function(t3, e3) {
              this.switchLevel(e3.level);
            }, r3.onLevelSwitching = function(t3, e3) {
              this.switchLevel(e3.level);
            }, r3.switchLevel = function(t3) {
              var e3 = this.hls.levels[t3];
              if (null != e3 && e3.audioGroupIds) {
                var r4 = e3.audioGroupIds[e3.urlId];
                if (this.groupId !== r4) {
                  this.groupId = r4 || null;
                  var i4 = this.tracks.filter(function(t4) {
                    return !r4 || t4.groupId === r4;
                  });
                  this.selectDefaultTrack && !i4.some(function(t4) {
                    return t4.default;
                  }) && (this.selectDefaultTrack = false), this.tracksInGroup = i4;
                  var n3 = { audioTracks: i4 };
                  this.log("Updating audio tracks, " + i4.length + " track(s) found in group:" + r4), this.hls.trigger(T2.AUDIO_TRACKS_UPDATED, n3), this.selectInitialTrack();
                } else
                  this.shouldReloadPlaylist(this.currentTrack) && this.setAudioTrack(this.trackId);
              }
            }, r3.onError = function(t3, e3) {
              !e3.fatal && e3.context && e3.context.type === le2 && e3.context.id === this.trackId && e3.context.groupId === this.groupId && (this.requestScheduled = -1, this.checkRetry(e3));
            }, r3.setAudioTrack = function(t3) {
              var e3 = this.tracksInGroup;
              if (t3 < 0 || t3 >= e3.length)
                this.warn("Invalid id passed to audio-track controller");
              else {
                this.clearTimer();
                var r4 = this.currentTrack;
                e3[this.trackId];
                var n3 = e3[t3], a2 = n3.groupId, s2 = n3.name;
                if (this.log("Switching to audio-track " + t3 + ' "' + s2 + '" lang:' + n3.lang + " group:" + a2), this.trackId = t3, this.currentTrack = n3, this.selectDefaultTrack = false, this.hls.trigger(T2.AUDIO_TRACK_SWITCHING, i3({}, n3)), !n3.details || n3.details.live) {
                  var o2 = this.switchParams(n3.url, null == r4 ? void 0 : r4.details);
                  this.loadPlaylist(o2);
                }
              }
            }, r3.selectInitialTrack = function() {
              var t3 = this.tracksInGroup, e3 = this.findTrackId(this.currentTrack) | this.findTrackId(null);
              if (-1 !== e3)
                this.setAudioTrack(e3);
              else {
                var r4 = new Error("No track found for running audio group-ID: " + this.groupId + " track count: " + t3.length);
                this.warn(r4.message), this.hls.trigger(T2.ERROR, { type: E.MEDIA_ERROR, details: S3.AUDIO_TRACK_LOAD_ERROR, fatal: true, error: r4 });
              }
            }, r3.findTrackId = function(t3) {
              for (var e3 = this.tracksInGroup, r4 = 0; r4 < e3.length; r4++) {
                var i4 = e3[r4];
                if (!this.selectDefaultTrack || i4.default) {
                  if (!t3 || t3.attrs["STABLE-RENDITION-ID"] === i4.attrs["STABLE-RENDITION-ID"])
                    return i4.id;
                  if (t3.name === i4.name && t3.lang === i4.lang)
                    return i4.id;
                }
              }
              return -1;
            }, r3.loadPlaylist = function(e3) {
              t2.prototype.loadPlaylist.call(this);
              var r4 = this.tracksInGroup[this.trackId];
              if (this.shouldLoadPlaylist(r4)) {
                var i4 = r4.id, n3 = r4.groupId, a2 = r4.url;
                if (e3)
                  try {
                    a2 = e3.addDirectives(a2);
                  } catch (t3) {
                    this.warn("Could not construct new URL with HLS Delivery Directives: " + t3);
                  }
                this.log("loading audio-track playlist " + i4 + ' "' + r4.name + '" lang:' + r4.lang + " group:" + n3), this.clearTimer(), this.hls.trigger(T2.AUDIO_TRACK_LOADING, { url: a2, id: i4, groupId: n3, deliveryDirectives: e3 || null });
              }
            }, a(e2, [{ key: "audioTracks", get: function() {
              return this.tracksInGroup;
            } }, { key: "audioTrack", get: function() {
              return this.trackId;
            }, set: function(t3) {
              this.selectDefaultTrack = false, this.setAudioTrack(t3);
            } }]), e2;
          }(ar);
          function mn(t2, e2) {
            if (t2.length !== e2.length)
              return false;
            for (var r3 = 0; r3 < t2.length; r3++)
              if (!pn(t2[r3].attrs, e2[r3].attrs))
                return false;
            return true;
          }
          function pn(t2, e2) {
            var r3 = t2["STABLE-RENDITION-ID"];
            return r3 ? r3 === e2["STABLE-RENDITION-ID"] : !["LANGUAGE", "NAME", "CHARACTERISTICS", "AUTOSELECT", "DEFAULT", "FORCED"].some(function(r4) {
              return t2[r4] !== e2[r4];
            });
          }
          var yn = function(t2) {
            function e2(e3, r4, i4) {
              var n3;
              return (n3 = t2.call(this, e3, r4, i4, "[subtitle-stream-controller]", ce2) || this).levels = [], n3.currentTrackId = -1, n3.tracksBuffered = [], n3.mainDetails = null, n3._registerListeners(), n3;
            }
            l3(e2, t2);
            var r3 = e2.prototype;
            return r3.onHandlerDestroying = function() {
              this._unregisterListeners(), this.mainDetails = null;
            }, r3._registerListeners = function() {
              var t3 = this.hls;
              t3.on(T2.MEDIA_ATTACHED, this.onMediaAttached, this), t3.on(T2.MEDIA_DETACHING, this.onMediaDetaching, this), t3.on(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.on(T2.LEVEL_LOADED, this.onLevelLoaded, this), t3.on(T2.ERROR, this.onError, this), t3.on(T2.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t3.on(T2.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this), t3.on(T2.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t3.on(T2.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this), t3.on(T2.BUFFER_FLUSHING, this.onBufferFlushing, this), t3.on(T2.FRAG_BUFFERED, this.onFragBuffered, this);
            }, r3._unregisterListeners = function() {
              var t3 = this.hls;
              t3.off(T2.MEDIA_ATTACHED, this.onMediaAttached, this), t3.off(T2.MEDIA_DETACHING, this.onMediaDetaching, this), t3.off(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.off(T2.LEVEL_LOADED, this.onLevelLoaded, this), t3.off(T2.ERROR, this.onError, this), t3.off(T2.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t3.off(T2.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this), t3.off(T2.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t3.off(T2.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this), t3.off(T2.BUFFER_FLUSHING, this.onBufferFlushing, this), t3.off(T2.FRAG_BUFFERED, this.onFragBuffered, this);
            }, r3.startLoad = function(t3) {
              this.stopLoad(), this.state = Nr, this.setInterval(500), this.nextLoadPosition = this.startPosition = this.lastCurrentTime = t3, this.tick();
            }, r3.onManifestLoading = function() {
              this.mainDetails = null, this.fragmentTracker.removeAllFragments();
            }, r3.onMediaDetaching = function() {
              this.tracksBuffered = [], t2.prototype.onMediaDetaching.call(this);
            }, r3.onLevelLoaded = function(t3, e3) {
              this.mainDetails = e3.details;
            }, r3.onSubtitleFragProcessed = function(t3, e3) {
              var r4 = e3.frag, i4 = e3.success;
              if (this.fragPrevious = r4, this.state = Nr, i4) {
                var n3 = this.tracksBuffered[this.currentTrackId];
                if (n3) {
                  for (var a2, s2 = r4.start, o2 = 0; o2 < n3.length; o2++)
                    if (s2 >= n3[o2].start && s2 <= n3[o2].end) {
                      a2 = n3[o2];
                      break;
                    }
                  var l4 = r4.start + r4.duration;
                  a2 ? a2.end = l4 : (a2 = { start: s2, end: l4 }, n3.push(a2)), this.fragmentTracker.fragBuffered(r4);
                }
              }
            }, r3.onBufferFlushing = function(t3, e3) {
              var r4 = e3.startOffset, i4 = e3.endOffset;
              if (0 === r4 && i4 !== Number.POSITIVE_INFINITY) {
                var n3 = this.currentTrackId, a2 = this.levels;
                if (!a2.length || !a2[n3] || !a2[n3].details)
                  return;
                var s2 = i4 - a2[n3].details.targetduration;
                if (s2 <= 0)
                  return;
                e3.endOffsetSubtitles = Math.max(0, s2), this.tracksBuffered.forEach(function(t4) {
                  for (var e4 = 0; e4 < t4.length; )
                    if (t4[e4].end <= s2)
                      t4.shift();
                    else {
                      if (!(t4[e4].start < s2))
                        break;
                      t4[e4].start = s2, e4++;
                    }
                }), this.fragmentTracker.removeFragmentsInRange(r4, s2, ce2);
              }
            }, r3.onFragBuffered = function(t3, e3) {
              var r4;
              this.loadedmetadata || e3.frag.type !== he2 || null != (r4 = this.media) && r4.buffered.length && (this.loadedmetadata = true);
            }, r3.onError = function(t3, e3) {
              var r4 = e3.frag;
              (null == r4 ? void 0 : r4.type) === ce2 && (this.fragCurrent && this.fragCurrent.abortRequests(), this.state !== Mr && (this.state = Nr));
            }, r3.onSubtitleTracksUpdated = function(t3, e3) {
              var r4 = this, i4 = e3.subtitleTracks;
              mn(this.levels, i4) ? this.levels = i4.map(function(t4) {
                return new xe2(t4);
              }) : (this.tracksBuffered = [], this.levels = i4.map(function(t4) {
                var e4 = new xe2(t4);
                return r4.tracksBuffered[e4.id] = [], e4;
              }), this.fragmentTracker.removeFragmentsInRange(0, Number.POSITIVE_INFINITY, ce2), this.fragPrevious = null, this.mediaBuffer = null);
            }, r3.onSubtitleTrackSwitch = function(t3, e3) {
              if (this.currentTrackId = e3.id, this.levels.length && -1 !== this.currentTrackId) {
                var r4 = this.levels[this.currentTrackId];
                null != r4 && r4.details ? this.mediaBuffer = this.mediaBufferTimeRanges : this.mediaBuffer = null, r4 && this.setInterval(500);
              } else
                this.clearInterval();
            }, r3.onSubtitleTrackLoaded = function(t3, e3) {
              var r4, i4 = e3.details, n3 = e3.id, a2 = this.currentTrackId, s2 = this.levels;
              if (s2.length) {
                var o2 = s2[a2];
                if (!(n3 >= s2.length || n3 !== a2) && o2) {
                  this.mediaBuffer = this.mediaBufferTimeRanges;
                  var l4 = 0;
                  if (i4.live || null != (r4 = o2.details) && r4.live) {
                    var u3 = this.mainDetails;
                    if (i4.deltaUpdateFailed || !u3)
                      return;
                    var h4 = u3.fragments[0];
                    o2.details ? 0 === (l4 = this.alignPlaylists(i4, o2.details)) && h4 && Ue3(i4, l4 = h4.start) : i4.hasProgramDateTime && u3.hasProgramDateTime ? (Cr(i4, u3), l4 = i4.fragments[0].start) : h4 && Ue3(i4, l4 = h4.start);
                  }
                  o2.details = i4, this.levelLastLoaded = n3, this.startFragRequested || !this.mainDetails && i4.live || this.setStartPosition(o2.details, l4), this.tick(), i4.live && !this.fragCurrent && this.media && this.state === Nr && (qe(null, i4.fragments, this.media.currentTime, 0) || (this.warn("Subtitle playlist not aligned with playback"), o2.details = void 0));
                }
              }
            }, r3._handleFragmentLoadComplete = function(t3) {
              var e3 = this, r4 = t3.frag, i4 = t3.payload, n3 = r4.decryptdata, a2 = this.hls;
              if (!this.fragContextChanged(r4) && i4 && i4.byteLength > 0 && n3 && n3.key && n3.iv && "AES-128" === n3.method) {
                var s2 = performance.now();
                this.decrypter.decrypt(new Uint8Array(i4), n3.key.buffer, n3.iv.buffer).catch(function(t4) {
                  throw a2.trigger(T2.ERROR, { type: E.MEDIA_ERROR, details: S3.FRAG_DECRYPT_ERROR, fatal: false, error: t4, reason: t4.message, frag: r4 }), t4;
                }).then(function(t4) {
                  var e4 = performance.now();
                  a2.trigger(T2.FRAG_DECRYPTED, { frag: r4, payload: t4, stats: { tstart: s2, tdecrypt: e4 } });
                }).catch(function(t4) {
                  e3.warn(t4.name + ": " + t4.message), e3.state = Nr;
                });
              }
            }, r3.doTick = function() {
              if (this.media) {
                if (this.state === Nr) {
                  var t3 = this.currentTrackId, e3 = this.levels, r4 = e3[t3];
                  if (!e3.length || !r4 || !r4.details)
                    return;
                  var i4 = r4.details, n3 = i4.targetduration, a2 = this.config, s2 = this.getLoadPosition(), o2 = Ar.bufferedInfo(this.tracksBuffered[this.currentTrackId] || [], s2 - n3, a2.maxBufferHole), l4 = o2.end, u3 = o2.len, h4 = this.getFwdBufferInfo(this.media, he2);
                  if (u3 > this.getMaxBufferLength(null == h4 ? void 0 : h4.len) + n3)
                    return;
                  var d2 = i4.fragments, c2 = d2.length, f3 = i4.edge, g3 = null, v3 = this.fragPrevious;
                  if (l4 < f3) {
                    var m3 = a2.maxFragLookUpTolerance;
                    !(g3 = qe(v3, d2, Math.max(d2[0].start, l4), m3)) && v3 && v3.start < d2[0].start && (g3 = d2[0]);
                  } else
                    g3 = d2[c2 - 1];
                  if (!g3)
                    return;
                  g3 = this.mapToInitFragWhenRequired(g3), this.fragmentTracker.getState(g3) === ur && this.loadFragment(g3, r4, l4);
                }
              } else
                this.state = Nr;
            }, r3.getMaxBufferLength = function(e3) {
              var r4 = t2.prototype.getMaxBufferLength.call(this);
              return e3 ? Math.max(r4, e3) : r4;
            }, r3.loadFragment = function(e3, r4, i4) {
              this.fragCurrent = e3, "initSegment" === e3.sn ? this._loadInitSegment(e3, r4) : (this.startFragRequested = true, t2.prototype.loadFragment.call(this, e3, r4, i4));
            }, a(e2, [{ key: "mediaBufferTimeRanges", get: function() {
              return new Tn(this.tracksBuffered[this.currentTrackId] || []);
            } }]), e2;
          }(Xr), Tn = function(t2) {
            this.buffered = void 0;
            var e2 = function(e3, r3, i4) {
              if ((r3 >>>= 0) > i4 - 1)
                throw new DOMException("Failed to execute '" + e3 + "' on 'TimeRanges': The index provided (" + r3 + ") is greater than the maximum bound (" + i4 + ")");
              return t2[r3][e3];
            };
            this.buffered = { get length() {
              return t2.length;
            }, end: function(r3) {
              return e2("end", r3, t2.length);
            }, start: function(r3) {
              return e2("start", r3, t2.length);
            } };
          }, En = function(t2) {
            function e2(e3) {
              var r4;
              return (r4 = t2.call(this, e3, "[subtitle-track-controller]") || this).media = null, r4.tracks = [], r4.groupId = null, r4.tracksInGroup = [], r4.trackId = -1, r4.selectDefaultTrack = true, r4.queuedDefaultTrack = -1, r4.trackChangeListener = function() {
                return r4.onTextTracksChanged();
              }, r4.asyncPollTrackChange = function() {
                return r4.pollTrackChange(0);
              }, r4.useTextTrackPolling = false, r4.subtitlePollingInterval = -1, r4._subtitleDisplay = true, r4.registerListeners(), r4;
            }
            l3(e2, t2);
            var r3 = e2.prototype;
            return r3.destroy = function() {
              this.unregisterListeners(), this.tracks.length = 0, this.tracksInGroup.length = 0, this.trackChangeListener = this.asyncPollTrackChange = null, t2.prototype.destroy.call(this);
            }, r3.registerListeners = function() {
              var t3 = this.hls;
              t3.on(T2.MEDIA_ATTACHED, this.onMediaAttached, this), t3.on(T2.MEDIA_DETACHING, this.onMediaDetaching, this), t3.on(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.on(T2.MANIFEST_PARSED, this.onManifestParsed, this), t3.on(T2.LEVEL_LOADING, this.onLevelLoading, this), t3.on(T2.LEVEL_SWITCHING, this.onLevelSwitching, this), t3.on(T2.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t3.on(T2.ERROR, this.onError, this);
            }, r3.unregisterListeners = function() {
              var t3 = this.hls;
              t3.off(T2.MEDIA_ATTACHED, this.onMediaAttached, this), t3.off(T2.MEDIA_DETACHING, this.onMediaDetaching, this), t3.off(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.off(T2.MANIFEST_PARSED, this.onManifestParsed, this), t3.off(T2.LEVEL_LOADING, this.onLevelLoading, this), t3.off(T2.LEVEL_SWITCHING, this.onLevelSwitching, this), t3.off(T2.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t3.off(T2.ERROR, this.onError, this);
            }, r3.onMediaAttached = function(t3, e3) {
              this.media = e3.media, this.media && (this.queuedDefaultTrack > -1 && (this.subtitleTrack = this.queuedDefaultTrack, this.queuedDefaultTrack = -1), this.useTextTrackPolling = !(this.media.textTracks && "onchange" in this.media.textTracks), this.useTextTrackPolling ? this.pollTrackChange(500) : this.media.textTracks.addEventListener("change", this.asyncPollTrackChange));
            }, r3.pollTrackChange = function(t3) {
              self.clearInterval(this.subtitlePollingInterval), this.subtitlePollingInterval = self.setInterval(this.trackChangeListener, t3);
            }, r3.onMediaDetaching = function() {
              this.media && (self.clearInterval(this.subtitlePollingInterval), this.useTextTrackPolling || this.media.textTracks.removeEventListener("change", this.asyncPollTrackChange), this.trackId > -1 && (this.queuedDefaultTrack = this.trackId), Sn(this.media.textTracks).forEach(function(t3) {
                ye3(t3);
              }), this.subtitleTrack = -1, this.media = null);
            }, r3.onManifestLoading = function() {
              this.tracks = [], this.groupId = null, this.tracksInGroup = [], this.trackId = -1, this.selectDefaultTrack = true;
            }, r3.onManifestParsed = function(t3, e3) {
              this.tracks = e3.subtitleTracks;
            }, r3.onSubtitleTrackLoaded = function(t3, e3) {
              var r4 = e3.id, i4 = e3.details, n3 = this.trackId, a2 = this.tracksInGroup[n3];
              if (a2) {
                var s2 = a2.details;
                a2.details = e3.details, this.log("subtitle track " + r4 + " loaded [" + i4.startSN + "-" + i4.endSN + "]"), r4 === this.trackId && this.playlistLoaded(r4, e3, s2);
              } else
                this.warn("Invalid subtitle track id " + r4);
            }, r3.onLevelLoading = function(t3, e3) {
              this.switchLevel(e3.level);
            }, r3.onLevelSwitching = function(t3, e3) {
              this.switchLevel(e3.level);
            }, r3.switchLevel = function(t3) {
              var e3 = this.hls.levels[t3];
              if (null != e3 && e3.textGroupIds) {
                var r4 = e3.textGroupIds[e3.urlId], i4 = this.tracksInGroup ? this.tracksInGroup[this.trackId] : void 0;
                if (this.groupId !== r4) {
                  var n3 = this.tracks.filter(function(t4) {
                    return !r4 || t4.groupId === r4;
                  });
                  this.tracksInGroup = n3;
                  var a2 = this.findTrackId(null == i4 ? void 0 : i4.name) || this.findTrackId();
                  this.groupId = r4 || null;
                  var s2 = { subtitleTracks: n3 };
                  this.log("Updating subtitle tracks, " + n3.length + ' track(s) found in "' + r4 + '" group-id'), this.hls.trigger(T2.SUBTITLE_TRACKS_UPDATED, s2), -1 !== a2 && this.setSubtitleTrack(a2, i4);
                } else
                  this.shouldReloadPlaylist(i4) && this.setSubtitleTrack(this.trackId, i4);
              }
            }, r3.findTrackId = function(t3) {
              for (var e3 = this.tracksInGroup, r4 = 0; r4 < e3.length; r4++) {
                var i4 = e3[r4];
                if ((!this.selectDefaultTrack || i4.default) && (!t3 || t3 === i4.name))
                  return i4.id;
              }
              return -1;
            }, r3.onError = function(t3, e3) {
              !e3.fatal && e3.context && e3.context.type === ue2 && e3.context.id === this.trackId && e3.context.groupId === this.groupId && this.checkRetry(e3);
            }, r3.loadPlaylist = function(e3) {
              t2.prototype.loadPlaylist.call(this);
              var r4 = this.tracksInGroup[this.trackId];
              if (this.shouldLoadPlaylist(r4)) {
                var i4 = r4.id, n3 = r4.groupId, a2 = r4.url;
                if (e3)
                  try {
                    a2 = e3.addDirectives(a2);
                  } catch (t3) {
                    this.warn("Could not construct new URL with HLS Delivery Directives: " + t3);
                  }
                this.log("Loading subtitle playlist for id " + i4), this.hls.trigger(T2.SUBTITLE_TRACK_LOADING, { url: a2, id: i4, groupId: n3, deliveryDirectives: e3 || null });
              }
            }, r3.toggleTrackModes = function(t3) {
              var e3 = this, r4 = this.media, i4 = this.trackId;
              if (r4) {
                var n3 = Sn(r4.textTracks), a2 = n3.filter(function(t4) {
                  return t4.groupId === e3.groupId;
                });
                if (-1 === t3)
                  [].slice.call(n3).forEach(function(t4) {
                    t4.mode = "disabled";
                  });
                else {
                  var s2 = a2[i4];
                  s2 && (s2.mode = "disabled");
                }
                var o2 = a2[t3];
                o2 && (o2.mode = this.subtitleDisplay ? "showing" : "hidden");
              }
            }, r3.setSubtitleTrack = function(t3, e3) {
              var r4, i4 = this.tracksInGroup;
              if (this.media) {
                if (this.trackId !== t3 && this.toggleTrackModes(t3), !(this.trackId === t3 && (-1 === t3 || null != (r4 = i4[t3]) && r4.details) || t3 < -1 || t3 >= i4.length)) {
                  this.clearTimer();
                  var n3 = i4[t3];
                  if (this.log("Switching to subtitle-track " + t3 + (n3 ? ' "' + n3.name + '" lang:' + n3.lang + " group:" + n3.groupId : "")), this.trackId = t3, n3) {
                    var a2 = n3.id, s2 = n3.groupId, o2 = void 0 === s2 ? "" : s2, l4 = n3.name, u3 = n3.type, h4 = n3.url;
                    this.hls.trigger(T2.SUBTITLE_TRACK_SWITCH, { id: a2, groupId: o2, name: l4, type: u3, url: h4 });
                    var d2 = this.switchParams(n3.url, null == e3 ? void 0 : e3.details);
                    this.loadPlaylist(d2);
                  } else
                    this.hls.trigger(T2.SUBTITLE_TRACK_SWITCH, { id: t3 });
                }
              } else
                this.queuedDefaultTrack = t3;
            }, r3.onTextTracksChanged = function() {
              if (this.useTextTrackPolling || self.clearInterval(this.subtitlePollingInterval), this.media && this.hls.config.renderTextTracksNatively) {
                for (var t3 = -1, e3 = Sn(this.media.textTracks), r4 = 0; r4 < e3.length; r4++)
                  if ("hidden" === e3[r4].mode)
                    t3 = r4;
                  else if ("showing" === e3[r4].mode) {
                    t3 = r4;
                    break;
                  }
                this.subtitleTrack !== t3 && (this.subtitleTrack = t3);
              }
            }, a(e2, [{ key: "subtitleDisplay", get: function() {
              return this._subtitleDisplay;
            }, set: function(t3) {
              this._subtitleDisplay = t3, this.trackId > -1 && this.toggleTrackModes(this.trackId);
            } }, { key: "subtitleTracks", get: function() {
              return this.tracksInGroup;
            } }, { key: "subtitleTrack", get: function() {
              return this.trackId;
            }, set: function(t3) {
              this.selectDefaultTrack = false;
              var e3 = this.tracksInGroup ? this.tracksInGroup[this.trackId] : void 0;
              this.setSubtitleTrack(t3, e3);
            } }]), e2;
          }(ar);
          function Sn(t2) {
            for (var e2 = [], r3 = 0; r3 < t2.length; r3++) {
              var i4 = t2[r3];
              "subtitles" !== i4.kind && "captions" !== i4.kind || !i4.label || e2.push(t2[r3]);
            }
            return e2;
          }
          var Ln = function() {
            function t2(t3) {
              this.buffers = void 0, this.queues = { video: [], audio: [], audiovideo: [] }, this.buffers = t3;
            }
            var e2 = t2.prototype;
            return e2.append = function(t3, e3) {
              var r3 = this.queues[e3];
              r3.push(t3), 1 === r3.length && this.buffers[e3] && this.executeNext(e3);
            }, e2.insertAbort = function(t3, e3) {
              this.queues[e3].unshift(t3), this.executeNext(e3);
            }, e2.appendBlocker = function(t3) {
              var e3, r3 = new Promise(function(t4) {
                e3 = t4;
              }), i4 = { execute: e3, onStart: function() {
              }, onComplete: function() {
              }, onError: function() {
              } };
              return this.append(i4, t3), r3;
            }, e2.executeNext = function(t3) {
              var e3 = this.buffers, r3 = this.queues, i4 = e3[t3], n3 = r3[t3];
              if (n3.length) {
                var a2 = n3[0];
                try {
                  a2.execute();
                } catch (e4) {
                  D2.warn("[buffer-operation-queue]: Unhandled exception executing the current operation"), a2.onError(e4), null != i4 && i4.updating || (n3.shift(), this.executeNext(t3));
                }
              }
            }, e2.shiftAndExecuteNext = function(t3) {
              this.queues[t3].shift(), this.executeNext(t3);
            }, e2.current = function(t3) {
              return this.queues[t3][0];
            }, t2;
          }(), Rn = zr(), An = /([ha]vc.)(?:\.[^.,]+)+/, kn = function() {
            function t2(t3) {
              var e3 = this;
              this.details = null, this._objectUrl = null, this.operationQueue = void 0, this.listeners = void 0, this.hls = void 0, this.bufferCodecEventsExpected = 0, this._bufferCodecEventsTotal = 0, this.media = null, this.mediaSource = null, this.lastMpegAudioChunk = null, this.appendError = 0, this.tracks = {}, this.pendingTracks = {}, this.sourceBuffer = void 0, this._onMediaSourceOpen = function() {
                var t4 = e3.media, r3 = e3.mediaSource;
                D2.log("[buffer-controller]: Media source opened"), t4 && (t4.removeEventListener("emptied", e3._onMediaEmptied), e3.updateMediaElementDuration(), e3.hls.trigger(T2.MEDIA_ATTACHED, { media: t4 })), r3 && r3.removeEventListener("sourceopen", e3._onMediaSourceOpen), e3.checkPendingTracks();
              }, this._onMediaSourceClose = function() {
                D2.log("[buffer-controller]: Media source closed");
              }, this._onMediaSourceEnded = function() {
                D2.log("[buffer-controller]: Media source ended");
              }, this._onMediaEmptied = function() {
                var t4 = e3.media, r3 = e3._objectUrl;
                t4 && t4.src !== r3 && D2.error("Media element src was set while attaching MediaSource (" + r3 + " > " + t4.src + ")");
              }, this.hls = t3, this._initSourceBuffer(), this.registerListeners();
            }
            var e2 = t2.prototype;
            return e2.hasSourceTypes = function() {
              return this.getSourceBufferTypes().length > 0 || Object.keys(this.pendingTracks).length > 0;
            }, e2.destroy = function() {
              this.unregisterListeners(), this.details = null, this.lastMpegAudioChunk = null;
            }, e2.registerListeners = function() {
              var t3 = this.hls;
              t3.on(T2.MEDIA_ATTACHING, this.onMediaAttaching, this), t3.on(T2.MEDIA_DETACHING, this.onMediaDetaching, this), t3.on(T2.MANIFEST_PARSED, this.onManifestParsed, this), t3.on(T2.BUFFER_RESET, this.onBufferReset, this), t3.on(T2.BUFFER_APPENDING, this.onBufferAppending, this), t3.on(T2.BUFFER_CODECS, this.onBufferCodecs, this), t3.on(T2.BUFFER_EOS, this.onBufferEos, this), t3.on(T2.BUFFER_FLUSHING, this.onBufferFlushing, this), t3.on(T2.LEVEL_UPDATED, this.onLevelUpdated, this), t3.on(T2.FRAG_PARSED, this.onFragParsed, this), t3.on(T2.FRAG_CHANGED, this.onFragChanged, this);
            }, e2.unregisterListeners = function() {
              var t3 = this.hls;
              t3.off(T2.MEDIA_ATTACHING, this.onMediaAttaching, this), t3.off(T2.MEDIA_DETACHING, this.onMediaDetaching, this), t3.off(T2.MANIFEST_PARSED, this.onManifestParsed, this), t3.off(T2.BUFFER_RESET, this.onBufferReset, this), t3.off(T2.BUFFER_APPENDING, this.onBufferAppending, this), t3.off(T2.BUFFER_CODECS, this.onBufferCodecs, this), t3.off(T2.BUFFER_EOS, this.onBufferEos, this), t3.off(T2.BUFFER_FLUSHING, this.onBufferFlushing, this), t3.off(T2.LEVEL_UPDATED, this.onLevelUpdated, this), t3.off(T2.FRAG_PARSED, this.onFragParsed, this), t3.off(T2.FRAG_CHANGED, this.onFragChanged, this);
            }, e2._initSourceBuffer = function() {
              this.sourceBuffer = {}, this.operationQueue = new Ln(this.sourceBuffer), this.listeners = { audio: [], video: [], audiovideo: [] }, this.lastMpegAudioChunk = null;
            }, e2.onManifestParsed = function(t3, e3) {
              var r3 = 2;
              (e3.audio && !e3.video || !e3.altAudio) && (r3 = 1), this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = r3, this.details = null, D2.log(this.bufferCodecEventsExpected + " bufferCodec event(s) expected");
            }, e2.onMediaAttaching = function(t3, e3) {
              var r3 = this.media = e3.media;
              if (r3 && Rn) {
                var i4 = this.mediaSource = new Rn();
                i4.addEventListener("sourceopen", this._onMediaSourceOpen), i4.addEventListener("sourceended", this._onMediaSourceEnded), i4.addEventListener("sourceclose", this._onMediaSourceClose), r3.src = self.URL.createObjectURL(i4), this._objectUrl = r3.src, r3.addEventListener("emptied", this._onMediaEmptied);
              }
            }, e2.onMediaDetaching = function() {
              var t3 = this.media, e3 = this.mediaSource, r3 = this._objectUrl;
              if (e3) {
                if (D2.log("[buffer-controller]: media source detaching"), "open" === e3.readyState)
                  try {
                    e3.endOfStream();
                  } catch (t4) {
                    D2.warn("[buffer-controller]: onMediaDetaching: " + t4.message + " while calling endOfStream");
                  }
                this.onBufferReset(), e3.removeEventListener("sourceopen", this._onMediaSourceOpen), e3.removeEventListener("sourceended", this._onMediaSourceEnded), e3.removeEventListener("sourceclose", this._onMediaSourceClose), t3 && (t3.removeEventListener("emptied", this._onMediaEmptied), r3 && self.URL.revokeObjectURL(r3), t3.src === r3 ? (t3.removeAttribute("src"), t3.load()) : D2.warn("[buffer-controller]: media.src was changed by a third party - skip cleanup")), this.mediaSource = null, this.media = null, this._objectUrl = null, this.bufferCodecEventsExpected = this._bufferCodecEventsTotal, this.pendingTracks = {}, this.tracks = {};
              }
              this.hls.trigger(T2.MEDIA_DETACHED, void 0);
            }, e2.onBufferReset = function() {
              var t3 = this;
              this.getSourceBufferTypes().forEach(function(e3) {
                var r3 = t3.sourceBuffer[e3];
                try {
                  r3 && (t3.removeBufferListeners(e3), t3.mediaSource && t3.mediaSource.removeSourceBuffer(r3), t3.sourceBuffer[e3] = void 0);
                } catch (t4) {
                  D2.warn("[buffer-controller]: Failed to reset the " + e3 + " buffer", t4);
                }
              }), this._initSourceBuffer();
            }, e2.onBufferCodecs = function(t3, e3) {
              var r3 = this, i4 = this.getSourceBufferTypes().length;
              Object.keys(e3).forEach(function(t4) {
                if (i4) {
                  var n3 = r3.tracks[t4];
                  if (n3 && "function" == typeof n3.buffer.changeType) {
                    var a2 = e3[t4], s2 = a2.id, o2 = a2.codec, l4 = a2.levelCodec, u3 = a2.container, h4 = a2.metadata, d2 = (n3.levelCodec || n3.codec).replace(An, "$1"), c2 = (l4 || o2).replace(An, "$1");
                    if (d2 !== c2) {
                      var f3 = u3 + ";codecs=" + (l4 || o2);
                      r3.appendChangeType(t4, f3), D2.log("[buffer-controller]: switching codec " + d2 + " to " + c2), r3.tracks[t4] = { buffer: n3.buffer, codec: o2, container: u3, levelCodec: l4, metadata: h4, id: s2 };
                    }
                  }
                } else
                  r3.pendingTracks[t4] = e3[t4];
              }), i4 || (this.bufferCodecEventsExpected = Math.max(this.bufferCodecEventsExpected - 1, 0), this.mediaSource && "open" === this.mediaSource.readyState && this.checkPendingTracks());
            }, e2.appendChangeType = function(t3, e3) {
              var r3 = this, i4 = this.operationQueue, n3 = { execute: function() {
                var n4 = r3.sourceBuffer[t3];
                n4 && (D2.log("[buffer-controller]: changing " + t3 + " sourceBuffer type to " + e3), n4.changeType(e3)), i4.shiftAndExecuteNext(t3);
              }, onStart: function() {
              }, onComplete: function() {
              }, onError: function(e4) {
                D2.warn("[buffer-controller]: Failed to change " + t3 + " SourceBuffer type", e4);
              } };
              i4.append(n3, t3);
            }, e2.onBufferAppending = function(t3, e3) {
              var r3 = this, i4 = this.hls, n3 = this.operationQueue, a2 = this.tracks, s2 = e3.data, o2 = e3.type, l4 = e3.frag, u3 = e3.part, h4 = e3.chunkMeta, d2 = h4.buffering[o2], c2 = self.performance.now();
              d2.start = c2;
              var f3 = l4.stats.buffering, g3 = u3 ? u3.stats.buffering : null;
              0 === f3.start && (f3.start = c2), g3 && 0 === g3.start && (g3.start = c2);
              var v3 = a2.audio, m3 = false;
              "audio" === o2 && "audio/mpeg" === (null == v3 ? void 0 : v3.container) && (m3 = !this.lastMpegAudioChunk || 1 === h4.id || this.lastMpegAudioChunk.sn !== h4.sn, this.lastMpegAudioChunk = h4);
              var p2 = l4.start, y2 = { execute: function() {
                if (d2.executeStart = self.performance.now(), m3) {
                  var t4 = r3.sourceBuffer[o2];
                  if (t4) {
                    var e4 = p2 - t4.timestampOffset;
                    Math.abs(e4) >= 0.1 && (D2.log("[buffer-controller]: Updating audio SourceBuffer timestampOffset to " + p2 + " (delta: " + e4 + ") sn: " + l4.sn + ")"), t4.timestampOffset = p2);
                  }
                }
                r3.appendExecutor(s2, o2);
              }, onStart: function() {
              }, onComplete: function() {
                var t4 = self.performance.now();
                d2.executeEnd = d2.end = t4, 0 === f3.first && (f3.first = t4), g3 && 0 === g3.first && (g3.first = t4);
                var e4 = r3.sourceBuffer, i5 = {};
                for (var n4 in e4)
                  i5[n4] = Ar.getBuffered(e4[n4]);
                r3.appendError = 0, r3.hls.trigger(T2.BUFFER_APPENDED, { type: o2, frag: l4, part: u3, chunkMeta: h4, parent: l4.type, timeRanges: i5 });
              }, onError: function(t4) {
                D2.error("[buffer-controller]: Error encountered while trying to append to the " + o2 + " SourceBuffer", t4);
                var e4 = { type: E.MEDIA_ERROR, parent: l4.type, details: S3.BUFFER_APPEND_ERROR, frag: l4, part: u3, chunkMeta: h4, error: t4, err: t4, fatal: false };
                t4.code === DOMException.QUOTA_EXCEEDED_ERR ? e4.details = S3.BUFFER_FULL_ERROR : (r3.appendError++, e4.details = S3.BUFFER_APPEND_ERROR, r3.appendError > i4.config.appendErrorMaxRetry && (D2.error("[buffer-controller]: Failed " + i4.config.appendErrorMaxRetry + " times to append segment in sourceBuffer"), e4.fatal = true)), i4.trigger(T2.ERROR, e4);
              } };
              n3.append(y2, o2);
            }, e2.onBufferFlushing = function(t3, e3) {
              var r3 = this, i4 = this.operationQueue, n3 = function(t4) {
                return { execute: r3.removeExecutor.bind(r3, t4, e3.startOffset, e3.endOffset), onStart: function() {
                }, onComplete: function() {
                  r3.hls.trigger(T2.BUFFER_FLUSHED, { type: t4 });
                }, onError: function(e4) {
                  D2.warn("[buffer-controller]: Failed to remove from " + t4 + " SourceBuffer", e4);
                } };
              };
              e3.type ? i4.append(n3(e3.type), e3.type) : this.getSourceBufferTypes().forEach(function(t4) {
                i4.append(n3(t4), t4);
              });
            }, e2.onFragParsed = function(t3, e3) {
              var r3 = this, i4 = e3.frag, n3 = e3.part, a2 = [], s2 = n3 ? n3.elementaryStreams : i4.elementaryStreams;
              s2[M3] ? a2.push("audiovideo") : (s2[F3] && a2.push("audio"), s2[O3] && a2.push("video")), 0 === a2.length && D2.warn("Fragments must have at least one ElementaryStreamType set. type: " + i4.type + " level: " + i4.level + " sn: " + i4.sn), this.blockBuffers(function() {
                var t4 = self.performance.now();
                i4.stats.buffering.end = t4, n3 && (n3.stats.buffering.end = t4);
                var e4 = n3 ? n3.stats : i4.stats;
                r3.hls.trigger(T2.FRAG_BUFFERED, { frag: i4, part: n3, stats: e4, id: i4.type });
              }, a2);
            }, e2.onFragChanged = function(t3, e3) {
              this.flushBackBuffer();
            }, e2.onBufferEos = function(t3, e3) {
              var r3 = this;
              this.getSourceBufferTypes().reduce(function(t4, i4) {
                var n3 = r3.sourceBuffer[i4];
                return !n3 || e3.type && e3.type !== i4 || (n3.ending = true, n3.ended || (n3.ended = true, D2.log("[buffer-controller]: " + i4 + " sourceBuffer now EOS"))), t4 && !(n3 && !n3.ended);
              }, true) && (D2.log("[buffer-controller]: Queueing mediaSource.endOfStream()"), this.blockBuffers(function() {
                r3.getSourceBufferTypes().forEach(function(t5) {
                  var e4 = r3.sourceBuffer[t5];
                  e4 && (e4.ending = false);
                });
                var t4 = r3.mediaSource;
                t4 && "open" === t4.readyState ? (D2.log("[buffer-controller]: Calling mediaSource.endOfStream()"), t4.endOfStream()) : t4 && D2.info("[buffer-controller]: Could not call mediaSource.endOfStream(). mediaSource.readyState: " + t4.readyState);
              }));
            }, e2.onLevelUpdated = function(t3, e3) {
              var r3 = e3.details;
              r3.fragments.length && (this.details = r3, this.getSourceBufferTypes().length ? this.blockBuffers(this.updateMediaElementDuration.bind(this)) : this.updateMediaElementDuration());
            }, e2.flushBackBuffer = function() {
              var t3 = this.hls, e3 = this.details, r3 = this.media, i4 = this.sourceBuffer;
              if (r3 && null !== e3) {
                var n3 = this.getSourceBufferTypes();
                if (n3.length) {
                  var a2 = e3.live && null !== t3.config.liveBackBufferLength ? t3.config.liveBackBufferLength : t3.config.backBufferLength;
                  if (y(a2) && !(a2 < 0)) {
                    var s2 = r3.currentTime, o2 = e3.levelTargetDuration, l4 = Math.max(a2, o2), u3 = Math.floor(s2 / o2) * o2 - l4;
                    n3.forEach(function(r4) {
                      var n4 = i4[r4];
                      if (n4) {
                        var a3 = Ar.getBuffered(n4);
                        if (a3.length > 0 && u3 > a3.start(0)) {
                          if (t3.trigger(T2.BACK_BUFFER_REACHED, { bufferEnd: u3 }), e3.live)
                            t3.trigger(T2.LIVE_BACK_BUFFER_REACHED, { bufferEnd: u3 });
                          else if (n4.ended && a3.end(a3.length - 1) - s2 < 2 * o2)
                            return void D2.info("[buffer-controller]: Cannot flush " + r4 + " back buffer while SourceBuffer is in ended state");
                          t3.trigger(T2.BUFFER_FLUSHING, { startOffset: 0, endOffset: u3, type: r4 });
                        }
                      }
                    });
                  }
                }
              }
            }, e2.updateMediaElementDuration = function() {
              if (this.details && this.media && this.mediaSource && "open" === this.mediaSource.readyState) {
                var t3 = this.details, e3 = this.hls, r3 = this.media, i4 = this.mediaSource, n3 = t3.fragments[0].start + t3.totalduration, a2 = r3.duration, s2 = y(i4.duration) ? i4.duration : 0;
                t3.live && e3.config.liveDurationInfinity ? (D2.log("[buffer-controller]: Media Source duration is set to Infinity"), i4.duration = 1 / 0, this.updateSeekableRange(t3)) : (n3 > s2 && n3 > a2 || !y(a2)) && (D2.log("[buffer-controller]: Updating Media Source duration to " + n3.toFixed(3)), i4.duration = n3);
              }
            }, e2.updateSeekableRange = function(t3) {
              var e3 = this.mediaSource, r3 = t3.fragments;
              if (r3.length && t3.live && null != e3 && e3.setLiveSeekableRange) {
                var i4 = Math.max(0, r3[0].start), n3 = Math.max(i4, i4 + t3.totalduration);
                e3.setLiveSeekableRange(i4, n3);
              }
            }, e2.checkPendingTracks = function() {
              var t3 = this.bufferCodecEventsExpected, e3 = this.operationQueue, r3 = this.pendingTracks, i4 = Object.keys(r3).length;
              if (i4 && !t3 || 2 === i4) {
                this.createSourceBuffers(r3), this.pendingTracks = {};
                var n3 = this.getSourceBufferTypes();
                if (n3.length)
                  this.hls.trigger(T2.BUFFER_CREATED, { tracks: this.tracks }), n3.forEach(function(t4) {
                    e3.executeNext(t4);
                  });
                else {
                  var a2 = new Error("could not create source buffer for media codec(s)");
                  this.hls.trigger(T2.ERROR, { type: E.MEDIA_ERROR, details: S3.BUFFER_INCOMPATIBLE_CODECS_ERROR, fatal: true, error: a2, reason: a2.message });
                }
              }
            }, e2.createSourceBuffers = function(t3) {
              var e3 = this.sourceBuffer, r3 = this.mediaSource;
              if (!r3)
                throw Error("createSourceBuffers called when mediaSource was null");
              for (var i4 in t3)
                if (!e3[i4]) {
                  var n3 = t3[i4];
                  if (!n3)
                    throw Error("source buffer exists for track " + i4 + ", however track does not");
                  var a2 = n3.levelCodec || n3.codec, s2 = n3.container + ";codecs=" + a2;
                  D2.log("[buffer-controller]: creating sourceBuffer(" + s2 + ")");
                  try {
                    var o2 = e3[i4] = r3.addSourceBuffer(s2), l4 = i4;
                    this.addBufferListener(l4, "updatestart", this._onSBUpdateStart), this.addBufferListener(l4, "updateend", this._onSBUpdateEnd), this.addBufferListener(l4, "error", this._onSBUpdateError), this.tracks[i4] = { buffer: o2, codec: a2, container: n3.container, levelCodec: n3.levelCodec, metadata: n3.metadata, id: n3.id };
                  } catch (t4) {
                    D2.error("[buffer-controller]: error while trying to add sourceBuffer: " + t4.message), this.hls.trigger(T2.ERROR, { type: E.MEDIA_ERROR, details: S3.BUFFER_ADD_CODEC_ERROR, fatal: false, error: t4, mimeType: s2 });
                  }
                }
            }, e2._onSBUpdateStart = function(t3) {
              this.operationQueue.current(t3).onStart();
            }, e2._onSBUpdateEnd = function(t3) {
              var e3 = this.operationQueue;
              e3.current(t3).onComplete(), e3.shiftAndExecuteNext(t3);
            }, e2._onSBUpdateError = function(t3, e3) {
              var r3 = new Error(t3 + " SourceBuffer error");
              D2.error("[buffer-controller]: " + r3, e3), this.hls.trigger(T2.ERROR, { type: E.MEDIA_ERROR, details: S3.BUFFER_APPENDING_ERROR, error: r3, fatal: false });
              var i4 = this.operationQueue.current(t3);
              i4 && i4.onError(e3);
            }, e2.removeExecutor = function(t3, e3, r3) {
              var i4 = this.media, n3 = this.mediaSource, a2 = this.operationQueue, s2 = this.sourceBuffer[t3];
              if (!i4 || !n3 || !s2)
                return D2.warn("[buffer-controller]: Attempting to remove from the " + t3 + " SourceBuffer, but it does not exist"), void a2.shiftAndExecuteNext(t3);
              var o2 = y(i4.duration) ? i4.duration : 1 / 0, l4 = y(n3.duration) ? n3.duration : 1 / 0, u3 = Math.max(0, e3), h4 = Math.min(r3, o2, l4);
              h4 > u3 && !s2.ending ? (s2.ended = false, D2.log("[buffer-controller]: Removing [" + u3 + "," + h4 + "] from the " + t3 + " SourceBuffer"), s2.remove(u3, h4)) : a2.shiftAndExecuteNext(t3);
            }, e2.appendExecutor = function(t3, e3) {
              var r3 = this.operationQueue, i4 = this.sourceBuffer[e3];
              if (!i4)
                return D2.warn("[buffer-controller]: Attempting to append to the " + e3 + " SourceBuffer, but it does not exist"), void r3.shiftAndExecuteNext(e3);
              i4.ended = false, i4.appendBuffer(t3);
            }, e2.blockBuffers = function(t3, e3) {
              var r3 = this;
              if (void 0 === e3 && (e3 = this.getSourceBufferTypes()), !e3.length)
                return D2.log("[buffer-controller]: Blocking operation requested, but no SourceBuffers exist"), void Promise.resolve().then(t3);
              var i4 = this.operationQueue, n3 = e3.map(function(t4) {
                return i4.appendBlocker(t4);
              });
              Promise.all(n3).then(function() {
                t3(), e3.forEach(function(t4) {
                  var e4 = r3.sourceBuffer[t4];
                  null != e4 && e4.updating || i4.shiftAndExecuteNext(t4);
                });
              });
            }, e2.getSourceBufferTypes = function() {
              return Object.keys(this.sourceBuffer);
            }, e2.addBufferListener = function(t3, e3, r3) {
              var i4 = this.sourceBuffer[t3];
              if (i4) {
                var n3 = r3.bind(this, t3);
                this.listeners[t3].push({ event: e3, listener: n3 }), i4.addEventListener(e3, n3);
              }
            }, e2.removeBufferListeners = function(t3) {
              var e3 = this.sourceBuffer[t3];
              e3 && this.listeners[t3].forEach(function(t4) {
                e3.removeEventListener(t4.event, t4.listener);
              });
            }, t2;
          }(), bn = { 42: 225, 92: 233, 94: 237, 95: 243, 96: 250, 123: 231, 124: 247, 125: 209, 126: 241, 127: 9608, 128: 174, 129: 176, 130: 189, 131: 191, 132: 8482, 133: 162, 134: 163, 135: 9834, 136: 224, 137: 32, 138: 232, 139: 226, 140: 234, 141: 238, 142: 244, 143: 251, 144: 193, 145: 201, 146: 211, 147: 218, 148: 220, 149: 252, 150: 8216, 151: 161, 152: 42, 153: 8217, 154: 9473, 155: 169, 156: 8480, 157: 8226, 158: 8220, 159: 8221, 160: 192, 161: 194, 162: 199, 163: 200, 164: 202, 165: 203, 166: 235, 167: 206, 168: 207, 169: 239, 170: 212, 171: 217, 172: 249, 173: 219, 174: 171, 175: 187, 176: 195, 177: 227, 178: 205, 179: 204, 180: 236, 181: 210, 182: 242, 183: 213, 184: 245, 185: 123, 186: 125, 187: 92, 188: 94, 189: 95, 190: 124, 191: 8764, 192: 196, 193: 228, 194: 214, 195: 246, 196: 223, 197: 165, 198: 164, 199: 9475, 200: 197, 201: 229, 202: 216, 203: 248, 204: 9487, 205: 9491, 206: 9495, 207: 9499 }, Dn = function(t2) {
            var e2 = t2;
            return bn.hasOwnProperty(t2) && (e2 = bn[t2]), String.fromCharCode(e2);
          }, In = 15, wn = 100, Cn = { 17: 1, 18: 3, 21: 5, 22: 7, 23: 9, 16: 11, 19: 12, 20: 14 }, _n = { 17: 2, 18: 4, 21: 6, 22: 8, 23: 10, 19: 13, 20: 15 }, Pn = { 25: 1, 26: 3, 29: 5, 30: 7, 31: 9, 24: 11, 27: 12, 28: 14 }, xn = { 25: 2, 26: 4, 29: 6, 30: 8, 31: 10, 27: 13, 28: 15 }, Fn = ["white", "green", "blue", "cyan", "red", "yellow", "magenta", "black", "transparent"], On = function() {
            function t2() {
              this.time = null, this.verboseLevel = 0;
            }
            return t2.prototype.log = function(t3, e2) {
              if (this.verboseLevel >= t3) {
                var r3 = "function" == typeof e2 ? e2() : e2;
                D2.log(this.time + " [" + t3 + "] " + r3);
              }
            }, t2;
          }(), Mn = function(t2) {
            for (var e2 = [], r3 = 0; r3 < t2.length; r3++)
              e2.push(t2[r3].toString(16));
            return e2;
          }, Nn = function() {
            function t2(t3, e3, r3, i4, n3) {
              this.foreground = void 0, this.underline = void 0, this.italics = void 0, this.background = void 0, this.flash = void 0, this.foreground = t3 || "white", this.underline = e3 || false, this.italics = r3 || false, this.background = i4 || "black", this.flash = n3 || false;
            }
            var e2 = t2.prototype;
            return e2.reset = function() {
              this.foreground = "white", this.underline = false, this.italics = false, this.background = "black", this.flash = false;
            }, e2.setStyles = function(t3) {
              for (var e3 = ["foreground", "underline", "italics", "background", "flash"], r3 = 0; r3 < e3.length; r3++) {
                var i4 = e3[r3];
                t3.hasOwnProperty(i4) && (this[i4] = t3[i4]);
              }
            }, e2.isDefault = function() {
              return "white" === this.foreground && !this.underline && !this.italics && "black" === this.background && !this.flash;
            }, e2.equals = function(t3) {
              return this.foreground === t3.foreground && this.underline === t3.underline && this.italics === t3.italics && this.background === t3.background && this.flash === t3.flash;
            }, e2.copy = function(t3) {
              this.foreground = t3.foreground, this.underline = t3.underline, this.italics = t3.italics, this.background = t3.background, this.flash = t3.flash;
            }, e2.toString = function() {
              return "color=" + this.foreground + ", underline=" + this.underline + ", italics=" + this.italics + ", background=" + this.background + ", flash=" + this.flash;
            }, t2;
          }(), Un = function() {
            function t2(t3, e3, r3, i4, n3, a2) {
              this.uchar = void 0, this.penState = void 0, this.uchar = t3 || " ", this.penState = new Nn(e3, r3, i4, n3, a2);
            }
            var e2 = t2.prototype;
            return e2.reset = function() {
              this.uchar = " ", this.penState.reset();
            }, e2.setChar = function(t3, e3) {
              this.uchar = t3, this.penState.copy(e3);
            }, e2.setPenState = function(t3) {
              this.penState.copy(t3);
            }, e2.equals = function(t3) {
              return this.uchar === t3.uchar && this.penState.equals(t3.penState);
            }, e2.copy = function(t3) {
              this.uchar = t3.uchar, this.penState.copy(t3.penState);
            }, e2.isEmpty = function() {
              return " " === this.uchar && this.penState.isDefault();
            }, t2;
          }(), Bn = function() {
            function t2(t3) {
              this.chars = void 0, this.pos = void 0, this.currPenState = void 0, this.cueStartTime = void 0, this.logger = void 0, this.chars = [];
              for (var e3 = 0; e3 < wn; e3++)
                this.chars.push(new Un());
              this.logger = t3, this.pos = 0, this.currPenState = new Nn();
            }
            var e2 = t2.prototype;
            return e2.equals = function(t3) {
              for (var e3 = true, r3 = 0; r3 < wn; r3++)
                if (!this.chars[r3].equals(t3.chars[r3])) {
                  e3 = false;
                  break;
                }
              return e3;
            }, e2.copy = function(t3) {
              for (var e3 = 0; e3 < wn; e3++)
                this.chars[e3].copy(t3.chars[e3]);
            }, e2.isEmpty = function() {
              for (var t3 = true, e3 = 0; e3 < wn; e3++)
                if (!this.chars[e3].isEmpty()) {
                  t3 = false;
                  break;
                }
              return t3;
            }, e2.setCursor = function(t3) {
              this.pos !== t3 && (this.pos = t3), this.pos < 0 ? (this.logger.log(3, "Negative cursor position " + this.pos), this.pos = 0) : this.pos > wn && (this.logger.log(3, "Too large cursor position " + this.pos), this.pos = wn);
            }, e2.moveCursor = function(t3) {
              var e3 = this.pos + t3;
              if (t3 > 1)
                for (var r3 = this.pos + 1; r3 < e3 + 1; r3++)
                  this.chars[r3].setPenState(this.currPenState);
              this.setCursor(e3);
            }, e2.backSpace = function() {
              this.moveCursor(-1), this.chars[this.pos].setChar(" ", this.currPenState);
            }, e2.insertChar = function(t3) {
              var e3 = this;
              t3 >= 144 && this.backSpace();
              var r3 = Dn(t3);
              this.pos >= wn ? this.logger.log(0, function() {
                return "Cannot insert " + t3.toString(16) + " (" + r3 + ") at position " + e3.pos + ". Skipping it!";
              }) : (this.chars[this.pos].setChar(r3, this.currPenState), this.moveCursor(1));
            }, e2.clearFromPos = function(t3) {
              var e3;
              for (e3 = t3; e3 < wn; e3++)
                this.chars[e3].reset();
            }, e2.clear = function() {
              this.clearFromPos(0), this.pos = 0, this.currPenState.reset();
            }, e2.clearToEndOfRow = function() {
              this.clearFromPos(this.pos);
            }, e2.getTextString = function() {
              for (var t3 = [], e3 = true, r3 = 0; r3 < wn; r3++) {
                var i4 = this.chars[r3].uchar;
                " " !== i4 && (e3 = false), t3.push(i4);
              }
              return e3 ? "" : t3.join("");
            }, e2.setPenStyles = function(t3) {
              this.currPenState.setStyles(t3), this.chars[this.pos].setPenState(this.currPenState);
            }, t2;
          }(), Gn = function() {
            function t2(t3) {
              this.rows = void 0, this.currRow = void 0, this.nrRollUpRows = void 0, this.lastOutputScreen = void 0, this.logger = void 0, this.rows = [];
              for (var e3 = 0; e3 < In; e3++)
                this.rows.push(new Bn(t3));
              this.logger = t3, this.currRow = 14, this.nrRollUpRows = null, this.lastOutputScreen = null, this.reset();
            }
            var e2 = t2.prototype;
            return e2.reset = function() {
              for (var t3 = 0; t3 < In; t3++)
                this.rows[t3].clear();
              this.currRow = 14;
            }, e2.equals = function(t3) {
              for (var e3 = true, r3 = 0; r3 < In; r3++)
                if (!this.rows[r3].equals(t3.rows[r3])) {
                  e3 = false;
                  break;
                }
              return e3;
            }, e2.copy = function(t3) {
              for (var e3 = 0; e3 < In; e3++)
                this.rows[e3].copy(t3.rows[e3]);
            }, e2.isEmpty = function() {
              for (var t3 = true, e3 = 0; e3 < In; e3++)
                if (!this.rows[e3].isEmpty()) {
                  t3 = false;
                  break;
                }
              return t3;
            }, e2.backSpace = function() {
              this.rows[this.currRow].backSpace();
            }, e2.clearToEndOfRow = function() {
              this.rows[this.currRow].clearToEndOfRow();
            }, e2.insertChar = function(t3) {
              this.rows[this.currRow].insertChar(t3);
            }, e2.setPen = function(t3) {
              this.rows[this.currRow].setPenStyles(t3);
            }, e2.moveCursor = function(t3) {
              this.rows[this.currRow].moveCursor(t3);
            }, e2.setCursor = function(t3) {
              this.logger.log(2, "setCursor: " + t3), this.rows[this.currRow].setCursor(t3);
            }, e2.setPAC = function(t3) {
              this.logger.log(2, function() {
                return "pacData = " + JSON.stringify(t3);
              });
              var e3 = t3.row - 1;
              if (this.nrRollUpRows && e3 < this.nrRollUpRows - 1 && (e3 = this.nrRollUpRows - 1), this.nrRollUpRows && this.currRow !== e3) {
                for (var r3 = 0; r3 < In; r3++)
                  this.rows[r3].clear();
                var i4 = this.currRow + 1 - this.nrRollUpRows, n3 = this.lastOutputScreen;
                if (n3) {
                  var a2 = n3.rows[i4].cueStartTime, s2 = this.logger.time;
                  if (a2 && null !== s2 && a2 < s2)
                    for (var o2 = 0; o2 < this.nrRollUpRows; o2++)
                      this.rows[e3 - this.nrRollUpRows + o2 + 1].copy(n3.rows[i4 + o2]);
                }
              }
              this.currRow = e3;
              var l4 = this.rows[this.currRow];
              if (null !== t3.indent) {
                var u3 = t3.indent, h4 = Math.max(u3 - 1, 0);
                l4.setCursor(t3.indent), t3.color = l4.chars[h4].penState.foreground;
              }
              var d2 = { foreground: t3.color, underline: t3.underline, italics: t3.italics, background: "black", flash: false };
              this.setPen(d2);
            }, e2.setBkgData = function(t3) {
              this.logger.log(2, function() {
                return "bkgData = " + JSON.stringify(t3);
              }), this.backSpace(), this.setPen(t3), this.insertChar(32);
            }, e2.setRollUpRows = function(t3) {
              this.nrRollUpRows = t3;
            }, e2.rollUp = function() {
              var t3 = this;
              if (null !== this.nrRollUpRows) {
                this.logger.log(1, function() {
                  return t3.getDisplayText();
                });
                var e3 = this.currRow + 1 - this.nrRollUpRows, r3 = this.rows.splice(e3, 1)[0];
                r3.clear(), this.rows.splice(this.currRow, 0, r3), this.logger.log(2, "Rolling up");
              } else
                this.logger.log(3, "roll_up but nrRollUpRows not set yet");
            }, e2.getDisplayText = function(t3) {
              t3 = t3 || false;
              for (var e3 = [], r3 = "", i4 = -1, n3 = 0; n3 < In; n3++) {
                var a2 = this.rows[n3].getTextString();
                a2 && (i4 = n3 + 1, t3 ? e3.push("Row " + i4 + ": '" + a2 + "'") : e3.push(a2.trim()));
              }
              return e3.length > 0 && (r3 = t3 ? "[" + e3.join(" | ") + "]" : e3.join("\n")), r3;
            }, e2.getTextAndFormat = function() {
              return this.rows;
            }, t2;
          }(), Kn = function() {
            function t2(t3, e3, r3) {
              this.chNr = void 0, this.outputFilter = void 0, this.mode = void 0, this.verbose = void 0, this.displayedMemory = void 0, this.nonDisplayedMemory = void 0, this.lastOutputScreen = void 0, this.currRollUpRow = void 0, this.writeScreen = void 0, this.cueStartTime = void 0, this.logger = void 0, this.chNr = t3, this.outputFilter = e3, this.mode = null, this.verbose = 0, this.displayedMemory = new Gn(r3), this.nonDisplayedMemory = new Gn(r3), this.lastOutputScreen = new Gn(r3), this.currRollUpRow = this.displayedMemory.rows[14], this.writeScreen = this.displayedMemory, this.mode = null, this.cueStartTime = null, this.logger = r3;
            }
            var e2 = t2.prototype;
            return e2.reset = function() {
              this.mode = null, this.displayedMemory.reset(), this.nonDisplayedMemory.reset(), this.lastOutputScreen.reset(), this.outputFilter.reset(), this.currRollUpRow = this.displayedMemory.rows[14], this.writeScreen = this.displayedMemory, this.mode = null, this.cueStartTime = null;
            }, e2.getHandler = function() {
              return this.outputFilter;
            }, e2.setHandler = function(t3) {
              this.outputFilter = t3;
            }, e2.setPAC = function(t3) {
              this.writeScreen.setPAC(t3);
            }, e2.setBkgData = function(t3) {
              this.writeScreen.setBkgData(t3);
            }, e2.setMode = function(t3) {
              t3 !== this.mode && (this.mode = t3, this.logger.log(2, function() {
                return "MODE=" + t3;
              }), "MODE_POP-ON" === this.mode ? this.writeScreen = this.nonDisplayedMemory : (this.writeScreen = this.displayedMemory, this.writeScreen.reset()), "MODE_ROLL-UP" !== this.mode && (this.displayedMemory.nrRollUpRows = null, this.nonDisplayedMemory.nrRollUpRows = null), this.mode = t3);
            }, e2.insertChars = function(t3) {
              for (var e3 = this, r3 = 0; r3 < t3.length; r3++)
                this.writeScreen.insertChar(t3[r3]);
              var i4 = this.writeScreen === this.displayedMemory ? "DISP" : "NON_DISP";
              this.logger.log(2, function() {
                return i4 + ": " + e3.writeScreen.getDisplayText(true);
              }), "MODE_PAINT-ON" !== this.mode && "MODE_ROLL-UP" !== this.mode || (this.logger.log(1, function() {
                return "DISPLAYED: " + e3.displayedMemory.getDisplayText(true);
              }), this.outputDataUpdate());
            }, e2.ccRCL = function() {
              this.logger.log(2, "RCL - Resume Caption Loading"), this.setMode("MODE_POP-ON");
            }, e2.ccBS = function() {
              this.logger.log(2, "BS - BackSpace"), "MODE_TEXT" !== this.mode && (this.writeScreen.backSpace(), this.writeScreen === this.displayedMemory && this.outputDataUpdate());
            }, e2.ccAOF = function() {
            }, e2.ccAON = function() {
            }, e2.ccDER = function() {
              this.logger.log(2, "DER- Delete to End of Row"), this.writeScreen.clearToEndOfRow(), this.outputDataUpdate();
            }, e2.ccRU = function(t3) {
              this.logger.log(2, "RU(" + t3 + ") - Roll Up"), this.writeScreen = this.displayedMemory, this.setMode("MODE_ROLL-UP"), this.writeScreen.setRollUpRows(t3);
            }, e2.ccFON = function() {
              this.logger.log(2, "FON - Flash On"), this.writeScreen.setPen({ flash: true });
            }, e2.ccRDC = function() {
              this.logger.log(2, "RDC - Resume Direct Captioning"), this.setMode("MODE_PAINT-ON");
            }, e2.ccTR = function() {
              this.logger.log(2, "TR"), this.setMode("MODE_TEXT");
            }, e2.ccRTD = function() {
              this.logger.log(2, "RTD"), this.setMode("MODE_TEXT");
            }, e2.ccEDM = function() {
              this.logger.log(2, "EDM - Erase Displayed Memory"), this.displayedMemory.reset(), this.outputDataUpdate(true);
            }, e2.ccCR = function() {
              this.logger.log(2, "CR - Carriage Return"), this.writeScreen.rollUp(), this.outputDataUpdate(true);
            }, e2.ccENM = function() {
              this.logger.log(2, "ENM - Erase Non-displayed Memory"), this.nonDisplayedMemory.reset();
            }, e2.ccEOC = function() {
              var t3 = this;
              if (this.logger.log(2, "EOC - End Of Caption"), "MODE_POP-ON" === this.mode) {
                var e3 = this.displayedMemory;
                this.displayedMemory = this.nonDisplayedMemory, this.nonDisplayedMemory = e3, this.writeScreen = this.nonDisplayedMemory, this.logger.log(1, function() {
                  return "DISP: " + t3.displayedMemory.getDisplayText();
                });
              }
              this.outputDataUpdate(true);
            }, e2.ccTO = function(t3) {
              this.logger.log(2, "TO(" + t3 + ") - Tab Offset"), this.writeScreen.moveCursor(t3);
            }, e2.ccMIDROW = function(t3) {
              var e3 = { flash: false };
              if (e3.underline = t3 % 2 == 1, e3.italics = t3 >= 46, e3.italics)
                e3.foreground = "white";
              else {
                var r3 = Math.floor(t3 / 2) - 16;
                e3.foreground = ["white", "green", "blue", "cyan", "red", "yellow", "magenta"][r3];
              }
              this.logger.log(2, "MIDROW: " + JSON.stringify(e3)), this.writeScreen.setPen(e3);
            }, e2.outputDataUpdate = function(t3) {
              void 0 === t3 && (t3 = false);
              var e3 = this.logger.time;
              null !== e3 && this.outputFilter && (null !== this.cueStartTime || this.displayedMemory.isEmpty() ? this.displayedMemory.equals(this.lastOutputScreen) || (this.outputFilter.newCue(this.cueStartTime, e3, this.lastOutputScreen), t3 && this.outputFilter.dispatchCue && this.outputFilter.dispatchCue(), this.cueStartTime = this.displayedMemory.isEmpty() ? null : e3) : this.cueStartTime = e3, this.lastOutputScreen.copy(this.displayedMemory));
            }, e2.cueSplitAtTime = function(t3) {
              this.outputFilter && (this.displayedMemory.isEmpty() || (this.outputFilter.newCue && this.outputFilter.newCue(this.cueStartTime, t3, this.displayedMemory), this.cueStartTime = t3));
            }, t2;
          }(), Hn = function() {
            function t2(t3, e3, r3) {
              this.channels = void 0, this.currentChannel = 0, this.cmdHistory = void 0, this.logger = void 0;
              var i4 = new On();
              this.channels = [null, new Kn(t3, e3, i4), new Kn(t3 + 1, r3, i4)], this.cmdHistory = { a: null, b: null }, this.logger = i4;
            }
            var e2 = t2.prototype;
            return e2.getHandler = function(t3) {
              return this.channels[t3].getHandler();
            }, e2.setHandler = function(t3, e3) {
              this.channels[t3].setHandler(e3);
            }, e2.addData = function(t3, e3) {
              var r3, i4, n3, a2 = false;
              this.logger.time = t3;
              for (var s2 = 0; s2 < e3.length; s2 += 2)
                if (i4 = 127 & e3[s2], n3 = 127 & e3[s2 + 1], 0 !== i4 || 0 !== n3) {
                  if (this.logger.log(3, "[" + Mn([e3[s2], e3[s2 + 1]]) + "] -> (" + Mn([i4, n3]) + ")"), (r3 = this.parseCmd(i4, n3)) || (r3 = this.parseMidrow(i4, n3)), r3 || (r3 = this.parsePAC(i4, n3)), r3 || (r3 = this.parseBackgroundAttributes(i4, n3)), !r3 && (a2 = this.parseChars(i4, n3))) {
                    var o2 = this.currentChannel;
                    o2 && o2 > 0 ? this.channels[o2].insertChars(a2) : this.logger.log(2, "No channel found yet. TEXT-MODE?");
                  }
                  r3 || a2 || this.logger.log(2, "Couldn't parse cleaned data " + Mn([i4, n3]) + " orig: " + Mn([e3[s2], e3[s2 + 1]]));
                }
            }, e2.parseCmd = function(t3, e3) {
              var r3 = this.cmdHistory;
              if (!((20 === t3 || 28 === t3 || 21 === t3 || 29 === t3) && e3 >= 32 && e3 <= 47 || (23 === t3 || 31 === t3) && e3 >= 33 && e3 <= 35))
                return false;
              if (Yn(t3, e3, r3))
                return Vn(null, null, r3), this.logger.log(3, "Repeated command (" + Mn([t3, e3]) + ") is dropped"), true;
              var i4 = 20 === t3 || 21 === t3 || 23 === t3 ? 1 : 2, n3 = this.channels[i4];
              return 20 === t3 || 21 === t3 || 28 === t3 || 29 === t3 ? 32 === e3 ? n3.ccRCL() : 33 === e3 ? n3.ccBS() : 34 === e3 ? n3.ccAOF() : 35 === e3 ? n3.ccAON() : 36 === e3 ? n3.ccDER() : 37 === e3 ? n3.ccRU(2) : 38 === e3 ? n3.ccRU(3) : 39 === e3 ? n3.ccRU(4) : 40 === e3 ? n3.ccFON() : 41 === e3 ? n3.ccRDC() : 42 === e3 ? n3.ccTR() : 43 === e3 ? n3.ccRTD() : 44 === e3 ? n3.ccEDM() : 45 === e3 ? n3.ccCR() : 46 === e3 ? n3.ccENM() : 47 === e3 && n3.ccEOC() : n3.ccTO(e3 - 32), Vn(t3, e3, r3), this.currentChannel = i4, true;
            }, e2.parseMidrow = function(t3, e3) {
              var r3 = 0;
              if ((17 === t3 || 25 === t3) && e3 >= 32 && e3 <= 47) {
                if ((r3 = 17 === t3 ? 1 : 2) !== this.currentChannel)
                  return this.logger.log(0, "Mismatch channel in midrow parsing"), false;
                var i4 = this.channels[r3];
                return !!i4 && (i4.ccMIDROW(e3), this.logger.log(3, "MIDROW (" + Mn([t3, e3]) + ")"), true);
              }
              return false;
            }, e2.parsePAC = function(t3, e3) {
              var r3, i4 = this.cmdHistory;
              if (!((t3 >= 17 && t3 <= 23 || t3 >= 25 && t3 <= 31) && e3 >= 64 && e3 <= 127 || (16 === t3 || 24 === t3) && e3 >= 64 && e3 <= 95))
                return false;
              if (Yn(t3, e3, i4))
                return Vn(null, null, i4), true;
              var n3 = t3 <= 23 ? 1 : 2;
              r3 = e3 >= 64 && e3 <= 95 ? 1 === n3 ? Cn[t3] : Pn[t3] : 1 === n3 ? _n[t3] : xn[t3];
              var a2 = this.channels[n3];
              return !!a2 && (a2.setPAC(this.interpretPAC(r3, e3)), Vn(t3, e3, i4), this.currentChannel = n3, true);
            }, e2.interpretPAC = function(t3, e3) {
              var r3, i4 = { color: null, italics: false, indent: null, underline: false, row: t3 };
              return r3 = e3 > 95 ? e3 - 96 : e3 - 64, i4.underline = 1 == (1 & r3), r3 <= 13 ? i4.color = ["white", "green", "blue", "cyan", "red", "yellow", "magenta", "white"][Math.floor(r3 / 2)] : r3 <= 15 ? (i4.italics = true, i4.color = "white") : i4.indent = 4 * Math.floor((r3 - 16) / 2), i4;
            }, e2.parseChars = function(t3, e3) {
              var r3, i4, n3 = null, a2 = null;
              if (t3 >= 25 ? (r3 = 2, a2 = t3 - 8) : (r3 = 1, a2 = t3), a2 >= 17 && a2 <= 19 ? (i4 = 17 === a2 ? e3 + 80 : 18 === a2 ? e3 + 112 : e3 + 144, this.logger.log(2, "Special char '" + Dn(i4) + "' in channel " + r3), n3 = [i4]) : t3 >= 32 && t3 <= 127 && (n3 = 0 === e3 ? [t3] : [t3, e3]), n3) {
                var s2 = Mn(n3);
                this.logger.log(3, "Char codes =  " + s2.join(",")), Vn(t3, e3, this.cmdHistory);
              }
              return n3;
            }, e2.parseBackgroundAttributes = function(t3, e3) {
              var r3;
              if (!((16 === t3 || 24 === t3) && e3 >= 32 && e3 <= 47 || (23 === t3 || 31 === t3) && e3 >= 45 && e3 <= 47))
                return false;
              var i4 = {};
              16 === t3 || 24 === t3 ? (r3 = Math.floor((e3 - 32) / 2), i4.background = Fn[r3], e3 % 2 == 1 && (i4.background = i4.background + "_semi")) : 45 === e3 ? i4.background = "transparent" : (i4.foreground = "black", 47 === e3 && (i4.underline = true));
              var n3 = t3 <= 23 ? 1 : 2;
              return this.channels[n3].setBkgData(i4), Vn(t3, e3, this.cmdHistory), true;
            }, e2.reset = function() {
              for (var t3 = 0; t3 < Object.keys(this.channels).length; t3++) {
                var e3 = this.channels[t3];
                e3 && e3.reset();
              }
              this.cmdHistory = { a: null, b: null };
            }, e2.cueSplitAtTime = function(t3) {
              for (var e3 = 0; e3 < this.channels.length; e3++) {
                var r3 = this.channels[e3];
                r3 && r3.cueSplitAtTime(t3);
              }
            }, t2;
          }();
          function Vn(t2, e2, r3) {
            r3.a = t2, r3.b = e2;
          }
          function Yn(t2, e2, r3) {
            return r3.a === t2 && r3.b === e2;
          }
          var Wn = function() {
            function t2(t3, e3) {
              this.timelineController = void 0, this.cueRanges = [], this.trackName = void 0, this.startTime = null, this.endTime = null, this.screen = null, this.timelineController = t3, this.trackName = e3;
            }
            var e2 = t2.prototype;
            return e2.dispatchCue = function() {
              null !== this.startTime && (this.timelineController.addCues(this.trackName, this.startTime, this.endTime, this.screen, this.cueRanges), this.startTime = null);
            }, e2.newCue = function(t3, e3, r3) {
              (null === this.startTime || this.startTime > t3) && (this.startTime = t3), this.endTime = e3, this.screen = r3, this.timelineController.createCaptionsTrack(this.trackName);
            }, e2.reset = function() {
              this.cueRanges = [], this.startTime = null;
            }, t2;
          }(), jn = function() {
            if ("undefined" != typeof self && self.VTTCue)
              return self.VTTCue;
            var t2 = ["", "lr", "rl"], e2 = ["start", "middle", "end", "left", "right"];
            function r3(t3, e3) {
              if ("string" != typeof e3)
                return false;
              if (!Array.isArray(t3))
                return false;
              var r4 = e3.toLowerCase();
              return !!~t3.indexOf(r4) && r4;
            }
            function i4(t3) {
              return r3(e2, t3);
            }
            function n3(t3) {
              for (var e3 = arguments.length, r4 = new Array(e3 > 1 ? e3 - 1 : 0), i5 = 1; i5 < e3; i5++)
                r4[i5 - 1] = arguments[i5];
              for (var n4 = 1; n4 < arguments.length; n4++) {
                var a3 = arguments[n4];
                for (var s2 in a3)
                  t3[s2] = a3[s2];
              }
              return t3;
            }
            function a2(e3, a3, s2) {
              var o2 = this, l4 = { enumerable: true };
              o2.hasBeenReset = false;
              var u3 = "", h4 = false, d2 = e3, c2 = a3, f3 = s2, g3 = null, v3 = "", m3 = true, p2 = "auto", y2 = "start", T3 = 50, E2 = "middle", S4 = 50, L3 = "middle";
              Object.defineProperty(o2, "id", n3({}, l4, { get: function() {
                return u3;
              }, set: function(t3) {
                u3 = "" + t3;
              } })), Object.defineProperty(o2, "pauseOnExit", n3({}, l4, { get: function() {
                return h4;
              }, set: function(t3) {
                h4 = !!t3;
              } })), Object.defineProperty(o2, "startTime", n3({}, l4, { get: function() {
                return d2;
              }, set: function(t3) {
                if ("number" != typeof t3)
                  throw new TypeError("Start time must be set to a number.");
                d2 = t3, this.hasBeenReset = true;
              } })), Object.defineProperty(o2, "endTime", n3({}, l4, { get: function() {
                return c2;
              }, set: function(t3) {
                if ("number" != typeof t3)
                  throw new TypeError("End time must be set to a number.");
                c2 = t3, this.hasBeenReset = true;
              } })), Object.defineProperty(o2, "text", n3({}, l4, { get: function() {
                return f3;
              }, set: function(t3) {
                f3 = "" + t3, this.hasBeenReset = true;
              } })), Object.defineProperty(o2, "region", n3({}, l4, { get: function() {
                return g3;
              }, set: function(t3) {
                g3 = t3, this.hasBeenReset = true;
              } })), Object.defineProperty(o2, "vertical", n3({}, l4, { get: function() {
                return v3;
              }, set: function(e4) {
                var i5 = function(e5) {
                  return r3(t2, e5);
                }(e4);
                if (false === i5)
                  throw new SyntaxError("An invalid or illegal string was specified.");
                v3 = i5, this.hasBeenReset = true;
              } })), Object.defineProperty(o2, "snapToLines", n3({}, l4, { get: function() {
                return m3;
              }, set: function(t3) {
                m3 = !!t3, this.hasBeenReset = true;
              } })), Object.defineProperty(o2, "line", n3({}, l4, { get: function() {
                return p2;
              }, set: function(t3) {
                if ("number" != typeof t3 && "auto" !== t3)
                  throw new SyntaxError("An invalid number or illegal string was specified.");
                p2 = t3, this.hasBeenReset = true;
              } })), Object.defineProperty(o2, "lineAlign", n3({}, l4, { get: function() {
                return y2;
              }, set: function(t3) {
                var e4 = i4(t3);
                if (!e4)
                  throw new SyntaxError("An invalid or illegal string was specified.");
                y2 = e4, this.hasBeenReset = true;
              } })), Object.defineProperty(o2, "position", n3({}, l4, { get: function() {
                return T3;
              }, set: function(t3) {
                if (t3 < 0 || t3 > 100)
                  throw new Error("Position must be between 0 and 100.");
                T3 = t3, this.hasBeenReset = true;
              } })), Object.defineProperty(o2, "positionAlign", n3({}, l4, { get: function() {
                return E2;
              }, set: function(t3) {
                var e4 = i4(t3);
                if (!e4)
                  throw new SyntaxError("An invalid or illegal string was specified.");
                E2 = e4, this.hasBeenReset = true;
              } })), Object.defineProperty(o2, "size", n3({}, l4, { get: function() {
                return S4;
              }, set: function(t3) {
                if (t3 < 0 || t3 > 100)
                  throw new Error("Size must be between 0 and 100.");
                S4 = t3, this.hasBeenReset = true;
              } })), Object.defineProperty(o2, "align", n3({}, l4, { get: function() {
                return L3;
              }, set: function(t3) {
                var e4 = i4(t3);
                if (!e4)
                  throw new SyntaxError("An invalid or illegal string was specified.");
                L3 = e4, this.hasBeenReset = true;
              } })), o2.displayState = void 0;
            }
            return a2.prototype.getCueAsHTML = function() {
              return self.WebVTT.convertCueToDOMTree(self, this.text);
            }, a2;
          }(), qn = function() {
            function t2() {
            }
            return t2.prototype.decode = function(t3, e2) {
              if (!t3)
                return "";
              if ("string" != typeof t3)
                throw new Error("Error - expected string data.");
              return decodeURIComponent(encodeURIComponent(t3));
            }, t2;
          }();
          function Xn(t2) {
            function e2(t3, e3, r4, i4) {
              return 3600 * (0 | t3) + 60 * (0 | e3) + (0 | r4) + parseFloat(i4 || 0);
            }
            var r3 = t2.match(/^(?:(\d+):)?(\d{2}):(\d{2})(\.\d+)?/);
            return r3 ? parseFloat(r3[2]) > 59 ? e2(r3[2], r3[3], 0, r3[4]) : e2(r3[1], r3[2], r3[3], r3[4]) : null;
          }
          var zn = function() {
            function t2() {
              this.values = /* @__PURE__ */ Object.create(null);
            }
            var e2 = t2.prototype;
            return e2.set = function(t3, e3) {
              this.get(t3) || "" === e3 || (this.values[t3] = e3);
            }, e2.get = function(t3, e3, r3) {
              return r3 ? this.has(t3) ? this.values[t3] : e3[r3] : this.has(t3) ? this.values[t3] : e3;
            }, e2.has = function(t3) {
              return t3 in this.values;
            }, e2.alt = function(t3, e3, r3) {
              for (var i4 = 0; i4 < r3.length; ++i4)
                if (e3 === r3[i4]) {
                  this.set(t3, e3);
                  break;
                }
            }, e2.integer = function(t3, e3) {
              /^-?\d+$/.test(e3) && this.set(t3, parseInt(e3, 10));
            }, e2.percent = function(t3, e3) {
              if (/^([\d]{1,3})(\.[\d]*)?%$/.test(e3)) {
                var r3 = parseFloat(e3);
                if (r3 >= 0 && r3 <= 100)
                  return this.set(t3, r3), true;
              }
              return false;
            }, t2;
          }();
          function Qn(t2, e2, r3, i4) {
            var n3 = i4 ? t2.split(i4) : [t2];
            for (var a2 in n3)
              if ("string" == typeof n3[a2]) {
                var s2 = n3[a2].split(r3);
                2 === s2.length && e2(s2[0], s2[1]);
              }
          }
          var $n = new jn(0, 0, ""), Jn = "middle" === $n.align ? "middle" : "center";
          function Zn(t2, e2, r3) {
            var i4 = t2;
            function n3() {
              var e3 = Xn(t2);
              if (null === e3)
                throw new Error("Malformed timestamp: " + i4);
              return t2 = t2.replace(/^[^\sa-zA-Z-]+/, ""), e3;
            }
            function a2() {
              t2 = t2.replace(/^\s+/, "");
            }
            if (a2(), e2.startTime = n3(), a2(), "-->" !== t2.slice(0, 3))
              throw new Error("Malformed time stamp (time stamps must be separated by '-->'): " + i4);
            t2 = t2.slice(3), a2(), e2.endTime = n3(), a2(), function(t3, e3) {
              var i5 = new zn();
              Qn(t3, function(t4, e4) {
                var n5;
                switch (t4) {
                  case "region":
                    for (var a4 = r3.length - 1; a4 >= 0; a4--)
                      if (r3[a4].id === e4) {
                        i5.set(t4, r3[a4].region);
                        break;
                      }
                    break;
                  case "vertical":
                    i5.alt(t4, e4, ["rl", "lr"]);
                    break;
                  case "line":
                    n5 = e4.split(","), i5.integer(t4, n5[0]), i5.percent(t4, n5[0]) && i5.set("snapToLines", false), i5.alt(t4, n5[0], ["auto"]), 2 === n5.length && i5.alt("lineAlign", n5[1], ["start", Jn, "end"]);
                    break;
                  case "position":
                    n5 = e4.split(","), i5.percent(t4, n5[0]), 2 === n5.length && i5.alt("positionAlign", n5[1], ["start", Jn, "end", "line-left", "line-right", "auto"]);
                    break;
                  case "size":
                    i5.percent(t4, e4);
                    break;
                  case "align":
                    i5.alt(t4, e4, ["start", Jn, "end", "left", "right"]);
                }
              }, /:/, /\s/), e3.region = i5.get("region", null), e3.vertical = i5.get("vertical", "");
              var n4 = i5.get("line", "auto");
              "auto" === n4 && -1 === $n.line && (n4 = -1), e3.line = n4, e3.lineAlign = i5.get("lineAlign", "start"), e3.snapToLines = i5.get("snapToLines", true), e3.size = i5.get("size", 100), e3.align = i5.get("align", Jn);
              var a3 = i5.get("position", "auto");
              "auto" === a3 && 50 === $n.position && (a3 = "start" === e3.align || "left" === e3.align ? 0 : "end" === e3.align || "right" === e3.align ? 100 : 50), e3.position = a3;
            }(t2, e2);
          }
          function ta(t2) {
            return t2.replace(/<br(?: \/)?>/gi, "\n");
          }
          var ea = function() {
            function t2() {
              this.state = "INITIAL", this.buffer = "", this.decoder = new qn(), this.regionList = [], this.cue = null, this.oncue = void 0, this.onparsingerror = void 0, this.onflush = void 0;
            }
            var e2 = t2.prototype;
            return e2.parse = function(t3) {
              var e3 = this;
              function r3() {
                var t4 = e3.buffer, r4 = 0;
                for (t4 = ta(t4); r4 < t4.length && "\r" !== t4[r4] && "\n" !== t4[r4]; )
                  ++r4;
                var i5 = t4.slice(0, r4);
                return "\r" === t4[r4] && ++r4, "\n" === t4[r4] && ++r4, e3.buffer = t4.slice(r4), i5;
              }
              t3 && (e3.buffer += e3.decoder.decode(t3, { stream: true }));
              try {
                var i4 = "";
                if ("INITIAL" === e3.state) {
                  if (!/\r\n|\n/.test(e3.buffer))
                    return this;
                  var n3 = (i4 = r3()).match(/^(ï»¿)?WEBVTT([ \t].*)?$/);
                  if (null == n3 || !n3[0])
                    throw new Error("Malformed WebVTT signature.");
                  e3.state = "HEADER";
                }
                for (var a2 = false; e3.buffer; ) {
                  if (!/\r\n|\n/.test(e3.buffer))
                    return this;
                  switch (a2 ? a2 = false : i4 = r3(), e3.state) {
                    case "HEADER":
                      /:/.test(i4) ? Qn(i4, function(t4, e4) {
                      }, /:/) : i4 || (e3.state = "ID");
                      continue;
                    case "NOTE":
                      i4 || (e3.state = "ID");
                      continue;
                    case "ID":
                      if (/^NOTE($|[ \t])/.test(i4)) {
                        e3.state = "NOTE";
                        break;
                      }
                      if (!i4)
                        continue;
                      if (e3.cue = new jn(0, 0, ""), e3.state = "CUE", -1 === i4.indexOf("-->")) {
                        e3.cue.id = i4;
                        continue;
                      }
                    case "CUE":
                      if (!e3.cue) {
                        e3.state = "BADCUE";
                        continue;
                      }
                      try {
                        Zn(i4, e3.cue, e3.regionList);
                      } catch (t4) {
                        e3.cue = null, e3.state = "BADCUE";
                        continue;
                      }
                      e3.state = "CUETEXT";
                      continue;
                    case "CUETEXT":
                      var s2 = -1 !== i4.indexOf("-->");
                      if (!i4 || s2 && (a2 = true)) {
                        e3.oncue && e3.cue && e3.oncue(e3.cue), e3.cue = null, e3.state = "ID";
                        continue;
                      }
                      if (null === e3.cue)
                        continue;
                      e3.cue.text && (e3.cue.text += "\n"), e3.cue.text += i4;
                      continue;
                    case "BADCUE":
                      i4 || (e3.state = "ID");
                  }
                }
              } catch (t4) {
                "CUETEXT" === e3.state && e3.cue && e3.oncue && e3.oncue(e3.cue), e3.cue = null, e3.state = "INITIAL" === e3.state ? "BADWEBVTT" : "BADCUE";
              }
              return this;
            }, e2.flush = function() {
              var t3 = this;
              try {
                if ((t3.cue || "HEADER" === t3.state) && (t3.buffer += "\n\n", t3.parse()), "INITIAL" === t3.state || "BADWEBVTT" === t3.state)
                  throw new Error("Malformed WebVTT signature.");
              } catch (e3) {
                t3.onparsingerror && t3.onparsingerror(e3);
              }
              return t3.onflush && t3.onflush(), this;
            }, t2;
          }(), ra = /\r\n|\n\r|\n|\r/g, ia = function(t2, e2, r3) {
            return void 0 === r3 && (r3 = 0), t2.slice(r3, r3 + e2.length) === e2;
          }, na = function(t2) {
            for (var e2 = 5381, r3 = t2.length; r3; )
              e2 = 33 * e2 ^ t2.charCodeAt(--r3);
            return (e2 >>> 0).toString();
          };
          function aa(t2, e2, r3) {
            return na(t2.toString()) + na(e2.toString()) + na(r3);
          }
          function sa(t2, e2, r3, i4, n3, a2, s2) {
            var o2, l4, u3, h4 = new ea(), d2 = vt2(new Uint8Array(t2)).trim().replace(ra, "\n").split("\n"), c2 = [], f3 = (o2 = e2.baseTime, void 0 === (l4 = e2.timescale) && (l4 = 1), Oi(o2, 9e4, 1 / l4)), g3 = "00:00.000", v3 = 0, m3 = 0, p2 = true;
            h4.oncue = function(t3) {
              var e3 = r3[i4], a3 = r3.ccOffset, s3 = (v3 - f3) / 9e4;
              null != e3 && e3.new && (void 0 !== m3 ? a3 = r3.ccOffset = e3.start : function(t4, e4, r4) {
                var i5 = t4[e4], n4 = t4[i5.prevCC];
                if (!n4 || !n4.new && i5.new)
                  return t4.ccOffset = t4.presentationOffset = i5.start, void (i5.new = false);
                for (; null != (a4 = n4) && a4.new; ) {
                  var a4;
                  t4.ccOffset += i5.start - n4.start, i5.new = false, n4 = t4[(i5 = n4).prevCC];
                }
                t4.presentationOffset = r4;
              }(r3, i4, s3)), s3 && (a3 = s3 - r3.presentationOffset);
              var o3 = t3.endTime - t3.startTime, l5 = Gi(9e4 * (t3.startTime + a3 - m3), 9e4 * n3) / 9e4;
              t3.startTime = Math.max(l5, 0), t3.endTime = Math.max(l5 + o3, 0);
              var u4 = t3.text.trim();
              t3.text = decodeURIComponent(encodeURIComponent(u4)), t3.id || (t3.id = aa(t3.startTime, t3.endTime, u4)), t3.endTime > 0 && c2.push(t3);
            }, h4.onparsingerror = function(t3) {
              u3 = t3;
            }, h4.onflush = function() {
              u3 ? s2(u3) : a2(c2);
            }, d2.forEach(function(t3) {
              if (p2) {
                if (ia(t3, "X-TIMESTAMP-MAP=")) {
                  p2 = false, t3.slice(16).split(",").forEach(function(t4) {
                    ia(t4, "LOCAL:") ? g3 = t4.slice(6) : ia(t4, "MPEGTS:") && (v3 = parseInt(t4.slice(7)));
                  });
                  try {
                    m3 = function(t4) {
                      var e3 = parseInt(t4.slice(-3)), r4 = parseInt(t4.slice(-6, -4)), i5 = parseInt(t4.slice(-9, -7)), n4 = t4.length > 9 ? parseInt(t4.substring(0, t4.indexOf(":"))) : 0;
                      if (!(y(e3) && y(r4) && y(i5) && y(n4)))
                        throw Error("Malformed X-TIMESTAMP-MAP: Local:" + t4);
                      return e3 += 1e3 * r4, (e3 += 6e4 * i5) + 36e5 * n4;
                    }(g3) / 1e3;
                  } catch (t4) {
                    u3 = t4;
                  }
                  return;
                }
                "" === t3 && (p2 = false);
              }
              h4.parse(t3 + "\n");
            }), h4.flush();
          }
          var oa = "stpp.ttml.im1t", la = /^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/, ua = /^(\d*(?:\.\d*)?)(h|m|s|ms|f|t)$/, ha = { left: "start", center: "center", right: "end", start: "start", end: "end" };
          function da(t2, e2, r3, i4) {
            var n3 = bt(new Uint8Array(t2), ["mdat"]);
            if (0 !== n3.length) {
              var a2, s2, l4, u3, h4 = n3.map(function(t3) {
                return vt2(t3);
              }), d2 = (a2 = e2.baseTime, s2 = 1, void 0 === (l4 = e2.timescale) && (l4 = 1), void 0 === u3 && (u3 = false), Oi(a2, s2, 1 / l4, u3));
              try {
                h4.forEach(function(t3) {
                  return r3(function(t4, e3) {
                    var r4 = new DOMParser().parseFromString(t4, "text/xml").getElementsByTagName("tt")[0];
                    if (!r4)
                      throw new Error("Invalid ttml");
                    var i5 = { frameRate: 30, subFrameRate: 1, frameRateMultiplier: 0, tickRate: 0 }, n4 = Object.keys(i5).reduce(function(t5, e4) {
                      return t5[e4] = r4.getAttribute("ttp:" + e4) || i5[e4], t5;
                    }, {}), a3 = "preserve" !== r4.getAttribute("xml:space"), s3 = fa(ca(r4, "styling", "style")), l5 = fa(ca(r4, "layout", "region")), u4 = ca(r4, "body", "[begin]");
                    return [].map.call(u4, function(t5) {
                      var r5 = ga(t5, a3);
                      if (!r5 || !t5.hasAttribute("begin"))
                        return null;
                      var i6 = pa(t5.getAttribute("begin"), n4), u5 = pa(t5.getAttribute("dur"), n4), h5 = pa(t5.getAttribute("end"), n4);
                      if (null === i6)
                        throw ma(t5);
                      if (null === h5) {
                        if (null === u5)
                          throw ma(t5);
                        h5 = i6 + u5;
                      }
                      var d3 = new jn(i6 - e3, h5 - e3, r5);
                      d3.id = aa(d3.startTime, d3.endTime, d3.text);
                      var c2 = function(t6, e4, r6) {
                        var i7 = "http://www.w3.org/ns/ttml#styling", n5 = null, a4 = ["displayAlign", "textAlign", "color", "backgroundColor", "fontSize", "fontFamily"], s4 = null != t6 && t6.hasAttribute("style") ? t6.getAttribute("style") : null;
                        return s4 && r6.hasOwnProperty(s4) && (n5 = r6[s4]), a4.reduce(function(r7, a5) {
                          var s5 = va(e4, i7, a5) || va(t6, i7, a5) || va(n5, i7, a5);
                          return s5 && (r7[a5] = s5), r7;
                        }, {});
                      }(l5[t5.getAttribute("region")], s3[t5.getAttribute("style")], s3), f3 = c2.textAlign;
                      if (f3) {
                        var g3 = ha[f3];
                        g3 && (d3.lineAlign = g3), d3.align = f3;
                      }
                      return o(d3, c2), d3;
                    }).filter(function(t5) {
                      return null !== t5;
                    });
                  }(t3, d2));
                });
              } catch (t3) {
                i4(t3);
              }
            } else
              i4(new Error("Could not parse IMSC1 mdat"));
          }
          function ca(t2, e2, r3) {
            var i4 = t2.getElementsByTagName(e2)[0];
            return i4 ? [].slice.call(i4.querySelectorAll(r3)) : [];
          }
          function fa(t2) {
            return t2.reduce(function(t3, e2) {
              var r3 = e2.getAttribute("xml:id");
              return r3 && (t3[r3] = e2), t3;
            }, {});
          }
          function ga(t2, e2) {
            return [].slice.call(t2.childNodes).reduce(function(t3, r3, i4) {
              var n3;
              return "br" === r3.nodeName && i4 ? t3 + "\n" : null != (n3 = r3.childNodes) && n3.length ? ga(r3, e2) : e2 ? t3 + r3.textContent.trim().replace(/\s+/g, " ") : t3 + r3.textContent;
            }, "");
          }
          function va(t2, e2, r3) {
            return t2 && t2.hasAttributeNS(e2, r3) ? t2.getAttributeNS(e2, r3) : null;
          }
          function ma(t2) {
            return new Error("Could not parse ttml timestamp " + t2);
          }
          function pa(t2, e2) {
            if (!t2)
              return null;
            var r3 = Xn(t2);
            return null === r3 && (la.test(t2) ? r3 = function(t3, e3) {
              var r4 = la.exec(t3), i4 = (0 | r4[4]) + (0 | r4[5]) / e3.subFrameRate;
              return 3600 * (0 | r4[1]) + 60 * (0 | r4[2]) + (0 | r4[3]) + i4 / e3.frameRate;
            }(t2, e2) : ua.test(t2) && (r3 = function(t3, e3) {
              var r4 = ua.exec(t3), i4 = Number(r4[1]);
              switch (r4[2]) {
                case "h":
                  return 3600 * i4;
                case "m":
                  return 60 * i4;
                case "ms":
                  return 1e3 * i4;
                case "f":
                  return i4 / e3.frameRate;
                case "t":
                  return i4 / e3.tickRate;
              }
              return i4;
            }(t2, e2))), r3;
          }
          var ya = function() {
            function t2(t3) {
              if (this.hls = void 0, this.media = null, this.config = void 0, this.enabled = true, this.Cues = void 0, this.textTracks = [], this.tracks = [], this.initPTS = [], this.unparsedVttFrags = [], this.captionsTracks = {}, this.nonNativeCaptionsTracks = {}, this.cea608Parser1 = void 0, this.cea608Parser2 = void 0, this.lastSn = -1, this.lastPartIndex = -1, this.prevCC = -1, this.vttCCs = { ccOffset: 0, presentationOffset: 0, 0: { start: 0, prevCC: -1, new: true } }, this.captionsProperties = void 0, this.hls = t3, this.config = t3.config, this.Cues = t3.config.cueHandler, this.captionsProperties = { textTrack1: { label: this.config.captionsTextTrack1Label, languageCode: this.config.captionsTextTrack1LanguageCode }, textTrack2: { label: this.config.captionsTextTrack2Label, languageCode: this.config.captionsTextTrack2LanguageCode }, textTrack3: { label: this.config.captionsTextTrack3Label, languageCode: this.config.captionsTextTrack3LanguageCode }, textTrack4: { label: this.config.captionsTextTrack4Label, languageCode: this.config.captionsTextTrack4LanguageCode } }, this.config.enableCEA708Captions) {
                var e3 = new Wn(this, "textTrack1"), r3 = new Wn(this, "textTrack2"), i4 = new Wn(this, "textTrack3"), n3 = new Wn(this, "textTrack4");
                this.cea608Parser1 = new Hn(1, e3, r3), this.cea608Parser2 = new Hn(3, i4, n3);
              }
              t3.on(T2.MEDIA_ATTACHING, this.onMediaAttaching, this), t3.on(T2.MEDIA_DETACHING, this.onMediaDetaching, this), t3.on(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.on(T2.MANIFEST_LOADED, this.onManifestLoaded, this), t3.on(T2.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t3.on(T2.FRAG_LOADING, this.onFragLoading, this), t3.on(T2.FRAG_LOADED, this.onFragLoaded, this), t3.on(T2.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this), t3.on(T2.FRAG_DECRYPTED, this.onFragDecrypted, this), t3.on(T2.INIT_PTS_FOUND, this.onInitPtsFound, this), t3.on(T2.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this), t3.on(T2.BUFFER_FLUSHING, this.onBufferFlushing, this);
            }
            var e2 = t2.prototype;
            return e2.destroy = function() {
              var t3 = this.hls;
              t3.off(T2.MEDIA_ATTACHING, this.onMediaAttaching, this), t3.off(T2.MEDIA_DETACHING, this.onMediaDetaching, this), t3.off(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.off(T2.MANIFEST_LOADED, this.onManifestLoaded, this), t3.off(T2.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t3.off(T2.FRAG_LOADING, this.onFragLoading, this), t3.off(T2.FRAG_LOADED, this.onFragLoaded, this), t3.off(T2.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this), t3.off(T2.FRAG_DECRYPTED, this.onFragDecrypted, this), t3.off(T2.INIT_PTS_FOUND, this.onInitPtsFound, this), t3.off(T2.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this), t3.off(T2.BUFFER_FLUSHING, this.onBufferFlushing, this), this.hls = this.config = this.cea608Parser1 = this.cea608Parser2 = null;
            }, e2.addCues = function(t3, e3, r3, i4, n3) {
              for (var a2, s2, o2, l4, u3 = false, h4 = n3.length; h4--; ) {
                var d2 = n3[h4], c2 = (a2 = d2[0], s2 = d2[1], o2 = e3, l4 = r3, Math.min(s2, l4) - Math.max(a2, o2));
                if (c2 >= 0 && (d2[0] = Math.min(d2[0], e3), d2[1] = Math.max(d2[1], r3), u3 = true, c2 / (r3 - e3) > 0.5))
                  return;
              }
              if (u3 || n3.push([e3, r3]), this.config.renderTextTracksNatively) {
                var f3 = this.captionsTracks[t3];
                this.Cues.newCue(f3, e3, r3, i4);
              } else {
                var g3 = this.Cues.newCue(null, e3, r3, i4);
                this.hls.trigger(T2.CUES_PARSED, { type: "captions", cues: g3, track: t3 });
              }
            }, e2.onInitPtsFound = function(t3, e3) {
              var r3 = this, i4 = e3.frag, n3 = e3.id, a2 = e3.initPTS, s2 = e3.timescale, o2 = this.unparsedVttFrags;
              "main" === n3 && (this.initPTS[i4.cc] = { baseTime: a2, timescale: s2 }), o2.length && (this.unparsedVttFrags = [], o2.forEach(function(t4) {
                r3.onFragLoaded(T2.FRAG_LOADED, t4);
              }));
            }, e2.getExistingTrack = function(t3) {
              var e3 = this.media;
              if (e3)
                for (var r3 = 0; r3 < e3.textTracks.length; r3++) {
                  var i4 = e3.textTracks[r3];
                  if (i4[t3])
                    return i4;
                }
              return null;
            }, e2.createCaptionsTrack = function(t3) {
              this.config.renderTextTracksNatively ? this.createNativeTrack(t3) : this.createNonNativeTrack(t3);
            }, e2.createNativeTrack = function(t3) {
              if (!this.captionsTracks[t3]) {
                var e3 = this.captionsProperties, r3 = this.captionsTracks, i4 = this.media, n3 = e3[t3], a2 = n3.label, s2 = n3.languageCode, o2 = this.getExistingTrack(t3);
                if (o2)
                  r3[t3] = o2, ye3(r3[t3]), me3(r3[t3], i4);
                else {
                  var l4 = this.createTextTrack("captions", a2, s2);
                  l4 && (l4[t3] = true, r3[t3] = l4);
                }
              }
            }, e2.createNonNativeTrack = function(t3) {
              if (!this.nonNativeCaptionsTracks[t3]) {
                var e3 = this.captionsProperties[t3];
                if (e3) {
                  var r3 = { _id: t3, label: e3.label, kind: "captions", default: !!e3.media && !!e3.media.default, closedCaptions: e3.media };
                  this.nonNativeCaptionsTracks[t3] = r3, this.hls.trigger(T2.NON_NATIVE_TEXT_TRACKS_FOUND, { tracks: [r3] });
                }
              }
            }, e2.createTextTrack = function(t3, e3, r3) {
              var i4 = this.media;
              if (i4)
                return i4.addTextTrack(t3, e3, r3);
            }, e2.onMediaAttaching = function(t3, e3) {
              this.media = e3.media, this._cleanTracks();
            }, e2.onMediaDetaching = function() {
              var t3 = this.captionsTracks;
              Object.keys(t3).forEach(function(e3) {
                ye3(t3[e3]), delete t3[e3];
              }), this.nonNativeCaptionsTracks = {};
            }, e2.onManifestLoading = function() {
              this.lastSn = -1, this.lastPartIndex = -1, this.prevCC = -1, this.vttCCs = { ccOffset: 0, presentationOffset: 0, 0: { start: 0, prevCC: -1, new: true } }, this._cleanTracks(), this.tracks = [], this.captionsTracks = {}, this.nonNativeCaptionsTracks = {}, this.textTracks = [], this.unparsedVttFrags = this.unparsedVttFrags || [], this.initPTS = [], this.cea608Parser1 && this.cea608Parser2 && (this.cea608Parser1.reset(), this.cea608Parser2.reset());
            }, e2._cleanTracks = function() {
              var t3 = this.media;
              if (t3) {
                var e3 = t3.textTracks;
                if (e3)
                  for (var r3 = 0; r3 < e3.length; r3++)
                    ye3(e3[r3]);
              }
            }, e2.onSubtitleTracksUpdated = function(t3, e3) {
              var r3 = this, i4 = e3.subtitleTracks || [], n3 = i4.some(function(t4) {
                return t4.textCodec === oa;
              });
              if (this.config.enableWebVTT || n3 && this.config.enableIMSC1) {
                if (mn(this.tracks, i4))
                  return void (this.tracks = i4);
                if (this.textTracks = [], this.tracks = i4, this.config.renderTextTracksNatively) {
                  var a2 = this.media ? this.media.textTracks : null;
                  this.tracks.forEach(function(t4, e4) {
                    var i5;
                    if (a2 && e4 < a2.length) {
                      for (var n4 = null, s3 = 0; s3 < a2.length; s3++)
                        if (Ta(a2[s3], t4)) {
                          n4 = a2[s3];
                          break;
                        }
                      n4 && (i5 = n4);
                    }
                    if (i5)
                      ye3(i5);
                    else {
                      var o2 = r3._captionsOrSubtitlesFromCharacteristics(t4);
                      (i5 = r3.createTextTrack(o2, t4.name, t4.lang)) && (i5.mode = "disabled");
                    }
                    i5 && (i5.groupId = t4.groupId, r3.textTracks.push(i5));
                  });
                } else if (this.tracks.length) {
                  var s2 = this.tracks.map(function(t4) {
                    return { label: t4.name, kind: t4.type.toLowerCase(), default: t4.default, subtitleTrack: t4 };
                  });
                  this.hls.trigger(T2.NON_NATIVE_TEXT_TRACKS_FOUND, { tracks: s2 });
                }
              }
            }, e2._captionsOrSubtitlesFromCharacteristics = function(t3) {
              if (t3.attrs.CHARACTERISTICS) {
                var e3 = /transcribes-spoken-dialog/gi.test(t3.attrs.CHARACTERISTICS), r3 = /describes-music-and-sound/gi.test(t3.attrs.CHARACTERISTICS);
                if (e3 && r3)
                  return "captions";
              }
              return "subtitles";
            }, e2.onManifestLoaded = function(t3, e3) {
              var r3 = this;
              this.config.enableCEA708Captions && e3.captions && e3.captions.forEach(function(t4) {
                var e4 = /(?:CC|SERVICE)([1-4])/.exec(t4.instreamId);
                if (e4) {
                  var i4 = "textTrack" + e4[1], n3 = r3.captionsProperties[i4];
                  n3 && (n3.label = t4.name, t4.lang && (n3.languageCode = t4.lang), n3.media = t4);
                }
              });
            }, e2.closedCaptionsForLevel = function(t3) {
              var e3 = this.hls.levels[t3.level];
              return null == e3 ? void 0 : e3.attrs["CLOSED-CAPTIONS"];
            }, e2.onFragLoading = function(t3, e3) {
              var r3 = this.cea608Parser1, i4 = this.cea608Parser2, n3 = this.lastSn, a2 = this.lastPartIndex;
              if (this.enabled && r3 && i4 && e3.frag.type === he2) {
                var s2, o2, l4 = e3.frag.sn, u3 = null != (s2 = null == e3 || null == (o2 = e3.part) ? void 0 : o2.index) ? s2 : -1;
                l4 === n3 + 1 || l4 === n3 && u3 === a2 + 1 || (r3.reset(), i4.reset()), this.lastSn = l4, this.lastPartIndex = u3;
              }
            }, e2.onFragLoaded = function(t3, e3) {
              var r3 = e3.frag, i4 = e3.payload, n3 = this.initPTS, a2 = this.unparsedVttFrags;
              if (r3.type === ce2)
                if (i4.byteLength) {
                  if (!n3[r3.cc])
                    return a2.push(e3), void (n3.length && this.hls.trigger(T2.SUBTITLE_FRAG_PROCESSED, { success: false, frag: r3, error: new Error("Missing initial subtitle PTS") }));
                  var s2 = r3.decryptdata, o2 = "stats" in e3;
                  if (null == s2 || !s2.encrypted || o2) {
                    var l4 = this.tracks[r3.level], u3 = this.vttCCs;
                    u3[r3.cc] || (u3[r3.cc] = { start: r3.start, prevCC: this.prevCC, new: true }, this.prevCC = r3.cc), l4 && l4.textCodec === oa ? this._parseIMSC1(r3, i4) : this._parseVTTs(r3, i4, u3);
                  }
                } else
                  this.hls.trigger(T2.SUBTITLE_FRAG_PROCESSED, { success: false, frag: r3, error: new Error("Empty subtitle payload") });
            }, e2._parseIMSC1 = function(t3, e3) {
              var r3 = this, i4 = this.hls;
              da(e3, this.initPTS[t3.cc], function(e4) {
                r3._appendCues(e4, t3.level), i4.trigger(T2.SUBTITLE_FRAG_PROCESSED, { success: true, frag: t3 });
              }, function(e4) {
                D2.log("Failed to parse IMSC1: " + e4), i4.trigger(T2.SUBTITLE_FRAG_PROCESSED, { success: false, frag: t3, error: e4 });
              });
            }, e2._parseVTTs = function(t3, e3, r3) {
              var i4, n3 = this, a2 = this.hls;
              sa(null != (i4 = t3.initSegment) && i4.data ? _t(t3.initSegment.data, new Uint8Array(e3)) : e3, this.initPTS[t3.cc], r3, t3.cc, t3.start, function(e4) {
                n3._appendCues(e4, t3.level), a2.trigger(T2.SUBTITLE_FRAG_PROCESSED, { success: true, frag: t3 });
              }, function(r4) {
                n3._fallbackToIMSC1(t3, e3), D2.log("Failed to parse VTT cue: " + r4), a2.trigger(T2.SUBTITLE_FRAG_PROCESSED, { success: false, frag: t3, error: r4 });
              });
            }, e2._fallbackToIMSC1 = function(t3, e3) {
              var r3 = this, i4 = this.tracks[t3.level];
              i4.textCodec || da(e3, this.initPTS[t3.cc], function() {
                i4.textCodec = oa, r3._parseIMSC1(t3, e3);
              }, function() {
                i4.textCodec = "wvtt";
              });
            }, e2._appendCues = function(t3, e3) {
              var r3 = this.hls;
              if (this.config.renderTextTracksNatively) {
                var i4 = this.textTracks[e3];
                if (!i4 || "disabled" === i4.mode)
                  return;
                t3.forEach(function(t4) {
                  return pe2(i4, t4);
                });
              } else {
                var n3 = this.tracks[e3];
                if (!n3)
                  return;
                var a2 = n3.default ? "default" : "subtitles" + e3;
                r3.trigger(T2.CUES_PARSED, { type: "subtitles", cues: t3, track: a2 });
              }
            }, e2.onFragDecrypted = function(t3, e3) {
              var r3 = e3.frag;
              if (r3.type === ce2) {
                if (!this.initPTS[r3.cc])
                  return void this.unparsedVttFrags.push(e3);
                this.onFragLoaded(T2.FRAG_LOADED, e3);
              }
            }, e2.onSubtitleTracksCleared = function() {
              this.tracks = [], this.captionsTracks = {};
            }, e2.onFragParsingUserdata = function(t3, e3) {
              var r3 = this.cea608Parser1, i4 = this.cea608Parser2;
              if (this.enabled && r3 && i4) {
                var n3 = e3.frag, a2 = e3.samples;
                if (n3.type !== he2 || "NONE" !== this.closedCaptionsForLevel(n3))
                  for (var s2 = 0; s2 < a2.length; s2++) {
                    var o2 = a2[s2].bytes;
                    if (o2) {
                      var l4 = this.extractCea608Data(o2);
                      r3.addData(a2[s2].pts, l4[0]), i4.addData(a2[s2].pts, l4[1]);
                    }
                  }
              }
            }, e2.onBufferFlushing = function(t3, e3) {
              var r3 = e3.startOffset, i4 = e3.endOffset, n3 = e3.endOffsetSubtitles, a2 = e3.type, s2 = this.media;
              if (s2 && !(s2.currentTime < i4)) {
                if (!a2 || "video" === a2) {
                  var o2 = this.captionsTracks;
                  Object.keys(o2).forEach(function(t4) {
                    return Te3(o2[t4], r3, i4);
                  });
                }
                if (this.config.renderTextTracksNatively && 0 === r3 && void 0 !== n3) {
                  var l4 = this.textTracks;
                  Object.keys(l4).forEach(function(t4) {
                    return Te3(l4[t4], r3, n3);
                  });
                }
              }
            }, e2.extractCea608Data = function(t3) {
              for (var e3 = [[], []], r3 = 31 & t3[0], i4 = 2, n3 = 0; n3 < r3; n3++) {
                var a2 = t3[i4++], s2 = 127 & t3[i4++], o2 = 127 & t3[i4++];
                if ((0 !== s2 || 0 !== o2) && 0 != (4 & a2)) {
                  var l4 = 3 & a2;
                  0 !== l4 && 1 !== l4 || (e3[l4].push(s2), e3[l4].push(o2));
                }
              }
              return e3;
            }, t2;
          }();
          function Ta(t2, e2) {
            return !!t2 && t2.label === e2.name && !(t2.textTrack1 || t2.textTrack2);
          }
          var Ea = function() {
            function t2(t3) {
              this.hls = void 0, this.autoLevelCapping = void 0, this.firstLevel = void 0, this.media = void 0, this.restrictedLevels = void 0, this.timer = void 0, this.clientRect = void 0, this.streamController = void 0, this.hls = t3, this.autoLevelCapping = Number.POSITIVE_INFINITY, this.firstLevel = -1, this.media = null, this.restrictedLevels = [], this.timer = void 0, this.clientRect = null, this.registerListeners();
            }
            var e2 = t2.prototype;
            return e2.setStreamController = function(t3) {
              this.streamController = t3;
            }, e2.destroy = function() {
              this.unregisterListener(), this.hls.config.capLevelToPlayerSize && this.stopCapping(), this.media = null, this.clientRect = null, this.hls = this.streamController = null;
            }, e2.registerListeners = function() {
              var t3 = this.hls;
              t3.on(T2.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this), t3.on(T2.MEDIA_ATTACHING, this.onMediaAttaching, this), t3.on(T2.MANIFEST_PARSED, this.onManifestParsed, this), t3.on(T2.BUFFER_CODECS, this.onBufferCodecs, this), t3.on(T2.MEDIA_DETACHING, this.onMediaDetaching, this);
            }, e2.unregisterListener = function() {
              var t3 = this.hls;
              t3.off(T2.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this), t3.off(T2.MEDIA_ATTACHING, this.onMediaAttaching, this), t3.off(T2.MANIFEST_PARSED, this.onManifestParsed, this), t3.off(T2.BUFFER_CODECS, this.onBufferCodecs, this), t3.off(T2.MEDIA_DETACHING, this.onMediaDetaching, this);
            }, e2.onFpsDropLevelCapping = function(t3, e3) {
              var r3 = this.hls.levels[e3.droppedLevel];
              this.isLevelAllowed(r3) && this.restrictedLevels.push({ bitrate: r3.bitrate, height: r3.height, width: r3.width });
            }, e2.onMediaAttaching = function(t3, e3) {
              this.media = e3.media instanceof HTMLVideoElement ? e3.media : null, this.clientRect = null;
            }, e2.onManifestParsed = function(t3, e3) {
              var r3 = this.hls;
              this.restrictedLevels = [], this.firstLevel = e3.firstLevel, r3.config.capLevelToPlayerSize && e3.video && this.startCapping();
            }, e2.onBufferCodecs = function(t3, e3) {
              this.hls.config.capLevelToPlayerSize && e3.video && this.startCapping();
            }, e2.onMediaDetaching = function() {
              this.stopCapping();
            }, e2.detectPlayerSize = function() {
              if (this.media && this.mediaHeight > 0 && this.mediaWidth > 0) {
                var t3 = this.hls.levels;
                if (t3.length) {
                  var e3 = this.hls;
                  e3.autoLevelCapping = this.getMaxLevel(t3.length - 1), e3.autoLevelCapping > this.autoLevelCapping && this.streamController && this.streamController.nextLevelSwitch(), this.autoLevelCapping = e3.autoLevelCapping;
                }
              }
            }, e2.getMaxLevel = function(e3) {
              var r3 = this, i4 = this.hls.levels;
              if (!i4.length)
                return -1;
              var n3 = i4.filter(function(t3, i5) {
                return r3.isLevelAllowed(t3) && i5 <= e3;
              });
              return this.clientRect = null, t2.getMaxLevelByMediaSize(n3, this.mediaWidth, this.mediaHeight);
            }, e2.startCapping = function() {
              this.timer || (this.autoLevelCapping = Number.POSITIVE_INFINITY, this.hls.firstLevel = this.getMaxLevel(this.firstLevel), self.clearInterval(this.timer), this.timer = self.setInterval(this.detectPlayerSize.bind(this), 1e3), this.detectPlayerSize());
            }, e2.stopCapping = function() {
              this.restrictedLevels = [], this.firstLevel = -1, this.autoLevelCapping = Number.POSITIVE_INFINITY, this.timer && (self.clearInterval(this.timer), this.timer = void 0);
            }, e2.getDimensions = function() {
              if (this.clientRect)
                return this.clientRect;
              var t3 = this.media, e3 = { width: 0, height: 0 };
              if (t3) {
                var r3 = t3.getBoundingClientRect();
                e3.width = r3.width, e3.height = r3.height, e3.width || e3.height || (e3.width = r3.right - r3.left || t3.width || 0, e3.height = r3.bottom - r3.top || t3.height || 0);
              }
              return this.clientRect = e3, e3;
            }, e2.isLevelAllowed = function(t3) {
              return !this.restrictedLevels.some(function(e3) {
                return t3.bitrate === e3.bitrate && t3.width === e3.width && t3.height === e3.height;
              });
            }, t2.getMaxLevelByMediaSize = function(t3, e3, r3) {
              if (null == t3 || !t3.length)
                return -1;
              for (var i4, n3, a2 = t3.length - 1, s2 = 0; s2 < t3.length; s2 += 1) {
                var o2 = t3[s2];
                if ((o2.width >= e3 || o2.height >= r3) && (i4 = o2, !(n3 = t3[s2 + 1]) || i4.width !== n3.width || i4.height !== n3.height)) {
                  a2 = s2;
                  break;
                }
              }
              return a2;
            }, a(t2, [{ key: "mediaWidth", get: function() {
              return this.getDimensions().width * this.contentScaleFactor;
            } }, { key: "mediaHeight", get: function() {
              return this.getDimensions().height * this.contentScaleFactor;
            } }, { key: "contentScaleFactor", get: function() {
              var t3 = 1;
              if (!this.hls.config.ignoreDevicePixelRatio)
                try {
                  t3 = self.devicePixelRatio;
                } catch (t4) {
                }
              return t3;
            } }]), t2;
          }(), Sa = function() {
            function t2(t3) {
              this.hls = void 0, this.isVideoPlaybackQualityAvailable = false, this.timer = void 0, this.media = null, this.lastTime = void 0, this.lastDroppedFrames = 0, this.lastDecodedFrames = 0, this.streamController = void 0, this.hls = t3, this.registerListeners();
            }
            var e2 = t2.prototype;
            return e2.setStreamController = function(t3) {
              this.streamController = t3;
            }, e2.registerListeners = function() {
              this.hls.on(T2.MEDIA_ATTACHING, this.onMediaAttaching, this);
            }, e2.unregisterListeners = function() {
              this.hls.off(T2.MEDIA_ATTACHING, this.onMediaAttaching, this);
            }, e2.destroy = function() {
              this.timer && clearInterval(this.timer), this.unregisterListeners(), this.isVideoPlaybackQualityAvailable = false, this.media = null;
            }, e2.onMediaAttaching = function(t3, e3) {
              var r3 = this.hls.config;
              if (r3.capLevelOnFPSDrop) {
                var i4 = e3.media instanceof self.HTMLVideoElement ? e3.media : null;
                this.media = i4, i4 && "function" == typeof i4.getVideoPlaybackQuality && (this.isVideoPlaybackQualityAvailable = true), self.clearInterval(this.timer), this.timer = self.setInterval(this.checkFPSInterval.bind(this), r3.fpsDroppedMonitoringPeriod);
              }
            }, e2.checkFPS = function(t3, e3, r3) {
              var i4 = performance.now();
              if (e3) {
                if (this.lastTime) {
                  var n3 = i4 - this.lastTime, a2 = r3 - this.lastDroppedFrames, s2 = e3 - this.lastDecodedFrames, o2 = 1e3 * a2 / n3, l4 = this.hls;
                  if (l4.trigger(T2.FPS_DROP, { currentDropped: a2, currentDecoded: s2, totalDroppedFrames: r3 }), o2 > 0 && a2 > l4.config.fpsDroppedMonitoringThreshold * s2) {
                    var u3 = l4.currentLevel;
                    D2.warn("drop FPS ratio greater than max allowed value for currentLevel: " + u3), u3 > 0 && (-1 === l4.autoLevelCapping || l4.autoLevelCapping >= u3) && (u3 -= 1, l4.trigger(T2.FPS_DROP_LEVEL_CAPPING, { level: u3, droppedLevel: l4.currentLevel }), l4.autoLevelCapping = u3, this.streamController.nextLevelSwitch());
                  }
                }
                this.lastTime = i4, this.lastDroppedFrames = r3, this.lastDecodedFrames = e3;
              }
            }, e2.checkFPSInterval = function() {
              var t3 = this.media;
              if (t3)
                if (this.isVideoPlaybackQualityAvailable) {
                  var e3 = t3.getVideoPlaybackQuality();
                  this.checkFPS(t3, e3.totalVideoFrames, e3.droppedVideoFrames);
                } else
                  this.checkFPS(t3, t3.webkitDecodedFrameCount, t3.webkitDroppedFrameCount);
            }, t2;
          }(), La = "[eme]", Ra = function() {
            function t2(e3) {
              this.hls = void 0, this.config = void 0, this.media = null, this.keyFormatPromise = null, this.keySystemAccessPromises = {}, this._requestLicenseFailureCount = 0, this.mediaKeySessions = [], this.keyIdToKeySessionPromise = {}, this.setMediaKeysQueue = t2.CDMCleanupPromise ? [t2.CDMCleanupPromise] : [], this.onMediaEncrypted = this._onMediaEncrypted.bind(this), this.onWaitingForKey = this._onWaitingForKey.bind(this), this.debug = D2.debug.bind(D2, La), this.log = D2.log.bind(D2, La), this.warn = D2.warn.bind(D2, La), this.error = D2.error.bind(D2, La), this.hls = e3, this.config = e3.config, this.registerListeners();
            }
            var e2 = t2.prototype;
            return e2.destroy = function() {
              this.unregisterListeners(), this.onMediaDetached();
              var t3 = this.config;
              t3.requestMediaKeySystemAccessFunc = null, t3.licenseXhrSetup = t3.licenseResponseCallback = void 0, t3.drmSystems = t3.drmSystemOptions = {}, this.hls = this.onMediaEncrypted = this.onWaitingForKey = this.keyIdToKeySessionPromise = null, this.config = null;
            }, e2.registerListeners = function() {
              this.hls.on(T2.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.on(T2.MEDIA_DETACHED, this.onMediaDetached, this), this.hls.on(T2.MANIFEST_LOADED, this.onManifestLoaded, this);
            }, e2.unregisterListeners = function() {
              this.hls.off(T2.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.off(T2.MEDIA_DETACHED, this.onMediaDetached, this), this.hls.off(T2.MANIFEST_LOADED, this.onManifestLoaded, this);
            }, e2.getLicenseServerUrl = function(t3) {
              var e3 = this.config, r3 = e3.drmSystems, i4 = e3.widevineLicenseUrl, n3 = r3[t3];
              if (n3)
                return n3.licenseUrl;
              if (t3 === Y3.WIDEVINE && i4)
                return i4;
              throw new Error('no license server URL configured for key-system "' + t3 + '"');
            }, e2.getServerCertificateUrl = function(t3) {
              var e3 = this.config.drmSystems[t3];
              if (e3)
                return e3.serverCertificateUrl;
              this.log('No Server Certificate in config.drmSystems["' + t3 + '"]');
            }, e2.attemptKeySystemAccess = function(t3) {
              var e3 = this, r3 = this.hls.levels, i4 = function(t4, e4, r4) {
                return !!t4 && r4.indexOf(t4) === e4;
              }, n3 = r3.map(function(t4) {
                return t4.audioCodec;
              }).filter(i4), a2 = r3.map(function(t4) {
                return t4.videoCodec;
              }).filter(i4);
              return n3.length + a2.length === 0 && a2.push("avc1.42e01e"), new Promise(function(r4, i5) {
                !function t4(s2) {
                  var o2 = s2.shift();
                  e3.getMediaKeysPromise(o2, n3, a2).then(function(t5) {
                    return r4({ keySystem: o2, mediaKeys: t5 });
                  }).catch(function(e4) {
                    s2.length ? t4(s2) : i5(e4 instanceof Aa ? e4 : new Aa({ type: E.KEY_SYSTEM_ERROR, details: S3.KEY_SYSTEM_NO_ACCESS, error: e4, fatal: true }, e4.message));
                  });
                }(t3);
              });
            }, e2.requestMediaKeySystemAccess = function(t3, e3) {
              var r3 = this.config.requestMediaKeySystemAccessFunc;
              if ("function" != typeof r3) {
                var i4 = "Configured requestMediaKeySystemAccess is not a function " + r3;
                return null === Z3 && "http:" === self.location.protocol && (i4 = "navigator.requestMediaKeySystemAccess is not available over insecure protocol " + location.protocol), Promise.reject(new Error(i4));
              }
              return r3(t3, e3);
            }, e2.getMediaKeysPromise = function(t3, e3, r3) {
              var i4 = this, n3 = function(t4, e4, r4, i5) {
                var n4;
                switch (t4) {
                  case Y3.FAIRPLAY:
                    n4 = ["cenc", "sinf"];
                    break;
                  case Y3.WIDEVINE:
                  case Y3.PLAYREADY:
                    n4 = ["cenc"];
                    break;
                  case Y3.CLEARKEY:
                    n4 = ["cenc", "keyids"];
                    break;
                  default:
                    throw new Error("Unknown key-system: " + t4);
                }
                return function(t5, e5, r5, i6) {
                  return [{ initDataTypes: t5, persistentState: i6.persistentState || "not-allowed", distinctiveIdentifier: i6.distinctiveIdentifier || "not-allowed", sessionTypes: i6.sessionTypes || [i6.sessionType || "temporary"], audioCapabilities: e5.map(function(t6) {
                    return { contentType: 'audio/mp4; codecs="' + t6 + '"', robustness: i6.audioRobustness || "", encryptionScheme: i6.audioEncryptionScheme || null };
                  }), videoCapabilities: r5.map(function(t6) {
                    return { contentType: 'video/mp4; codecs="' + t6 + '"', robustness: i6.videoRobustness || "", encryptionScheme: i6.videoEncryptionScheme || null };
                  }) }];
                }(n4, e4, r4, i5);
              }(t3, e3, r3, this.config.drmSystemOptions), a2 = this.keySystemAccessPromises[t3], s2 = null == a2 ? void 0 : a2.keySystemAccess;
              if (!s2) {
                this.log('Requesting encrypted media "' + t3 + '" key-system access with config: ' + JSON.stringify(n3)), s2 = this.requestMediaKeySystemAccess(t3, n3);
                var o2 = this.keySystemAccessPromises[t3] = { keySystemAccess: s2 };
                return s2.catch(function(e4) {
                  i4.log('Failed to obtain access to key-system "' + t3 + '": ' + e4);
                }), s2.then(function(e4) {
                  i4.log('Access for key-system "' + e4.keySystem + '" obtained');
                  var r4 = i4.fetchServerCertificate(t3);
                  return i4.log('Create media-keys for "' + t3 + '"'), o2.mediaKeys = e4.createMediaKeys().then(function(e5) {
                    return i4.log('Media-keys created for "' + t3 + '"'), r4.then(function(r5) {
                      return r5 ? i4.setMediaKeysServerCertificate(e5, t3, r5) : e5;
                    });
                  }), o2.mediaKeys.catch(function(e5) {
                    i4.error('Failed to create media-keys for "' + t3 + '"}: ' + e5);
                  }), o2.mediaKeys;
                });
              }
              return s2.then(function() {
                return a2.mediaKeys;
              });
            }, e2.createMediaKeySessionContext = function(t3) {
              var e3 = t3.decryptdata, r3 = t3.keySystem, i4 = t3.mediaKeys;
              this.log('Creating key-system session "' + r3 + '" keyId: ' + pt(e3.keyId || []));
              var n3 = i4.createSession(), a2 = { decryptdata: e3, keySystem: r3, mediaKeys: i4, mediaKeysSession: n3, keyStatus: "status-pending" };
              return this.mediaKeySessions.push(a2), a2;
            }, e2.renewKeySession = function(t3) {
              var e3 = t3.decryptdata;
              if (e3.pssh) {
                var r3 = this.createMediaKeySessionContext(t3), i4 = this.getKeyIdString(e3);
                this.keyIdToKeySessionPromise[i4] = this.generateRequestWithPreferredKeySession(r3, "cenc", e3.pssh, "expired");
              } else
                this.warn("Could not renew expired session. Missing pssh initData.");
              this.removeSession(t3);
            }, e2.getKeyIdString = function(t3) {
              if (!t3)
                throw new Error("Could not read keyId of undefined decryptdata");
              if (null === t3.keyId)
                throw new Error("keyId is null");
              return pt(t3.keyId);
            }, e2.updateKeySession = function(t3, e3) {
              var r3, i4 = t3.mediaKeysSession;
              return this.log('Updating key-session "' + i4.sessionId + '" for keyID ' + pt((null == (r3 = t3.decryptdata) ? void 0 : r3.keyId) || []) + "\n      } (data length: " + (e3 ? e3.byteLength : e3) + ")"), i4.update(e3);
            }, e2.selectKeySystemFormat = function(t3) {
              var e3 = Object.keys(t3.levelkeys || {});
              return this.keyFormatPromise || (this.log("Selecting key-system from fragment (sn: " + t3.sn + " " + t3.type + ": " + t3.level + ") key formats " + e3.join(", ")), this.keyFormatPromise = this.getKeyFormatPromise(e3)), this.keyFormatPromise;
            }, e2.getKeyFormatPromise = function(t3) {
              var e3 = this;
              return new Promise(function(r3, i4) {
                var n3 = J3(e3.config), a2 = t3.map(z3).filter(function(t4) {
                  return !!t4 && -1 !== n3.indexOf(t4);
                });
                return e3.getKeySystemSelectionPromise(a2).then(function(t4) {
                  var e4 = t4.keySystem, n4 = $3(e4);
                  n4 ? r3(n4) : i4(new Error('Unable to find format for key-system "' + e4 + '"'));
                }).catch(i4);
              });
            }, e2.loadKey = function(t3) {
              var e3 = this, r3 = t3.keyInfo.decryptdata, i4 = this.getKeyIdString(r3), n3 = "(keyId: " + i4 + ' format: "' + r3.keyFormat + '" method: ' + r3.method + " uri: " + r3.uri + ")";
              this.log("Starting session for key " + n3);
              var a2 = this.keyIdToKeySessionPromise[i4];
              return a2 || (a2 = this.keyIdToKeySessionPromise[i4] = this.getKeySystemForKeyPromise(r3).then(function(i5) {
                var a3 = i5.keySystem, s2 = i5.mediaKeys;
                return e3.throwIfDestroyed(), e3.log("Handle encrypted media sn: " + t3.frag.sn + " " + t3.frag.type + ": " + t3.frag.level + " using key " + n3), e3.attemptSetMediaKeys(a3, s2).then(function() {
                  e3.throwIfDestroyed();
                  var t4 = e3.createMediaKeySessionContext({ keySystem: a3, mediaKeys: s2, decryptdata: r3 });
                  return e3.generateRequestWithPreferredKeySession(t4, "cenc", r3.pssh, "playlist-key");
                });
              })).catch(function(t4) {
                return e3.handleError(t4);
              }), a2;
            }, e2.throwIfDestroyed = function(t3) {
              if (!this.hls)
                throw new Error("invalid state");
            }, e2.handleError = function(t3) {
              this.hls && (this.error(t3.message), t3 instanceof Aa ? this.hls.trigger(T2.ERROR, t3.data) : this.hls.trigger(T2.ERROR, { type: E.KEY_SYSTEM_ERROR, details: S3.KEY_SYSTEM_NO_KEYS, error: t3, fatal: true }));
            }, e2.getKeySystemForKeyPromise = function(t3) {
              var e3 = this.getKeyIdString(t3), r3 = this.keyIdToKeySessionPromise[e3];
              if (!r3) {
                var i4 = z3(t3.keyFormat), n3 = i4 ? [i4] : J3(this.config);
                return this.attemptKeySystemAccess(n3);
              }
              return r3;
            }, e2.getKeySystemSelectionPromise = function(t3) {
              if (t3.length || (t3 = J3(this.config)), 0 === t3.length)
                throw new Aa({ type: E.KEY_SYSTEM_ERROR, details: S3.KEY_SYSTEM_NO_CONFIGURED_LICENSE, fatal: true }, "Missing key-system license configuration options " + JSON.stringify({ drmSystems: this.config.drmSystems }));
              return this.attemptKeySystemAccess(t3);
            }, e2._onMediaEncrypted = function(t3) {
              var e3 = this, r3 = t3.initDataType, i4 = t3.initData;
              if (this.debug('"' + t3.type + '" event: init data type: "' + r3 + '"'), null !== i4) {
                var n3, a2;
                if ("sinf" === r3 && this.config.drmSystems[Y3.FAIRPLAY]) {
                  var s2 = St(new Uint8Array(i4));
                  try {
                    var o2 = K2(JSON.parse(s2).sinf), l4 = wt(new Uint8Array(o2));
                    if (!l4)
                      return;
                    n3 = l4.subarray(8, 24), a2 = Y3.FAIRPLAY;
                  } catch (t4) {
                    return void this.warn('Failed to parse sinf "encrypted" event message initData');
                  }
                } else {
                  var u3 = function(t4) {
                    if (!(t4 instanceof ArrayBuffer) || t4.byteLength < 32)
                      return null;
                    var e4 = { version: 0, systemId: "", kids: null, data: null }, r4 = new DataView(t4), i5 = r4.getUint32(0);
                    if (t4.byteLength !== i5 && i5 > 44)
                      return null;
                    if (1886614376 !== r4.getUint32(4))
                      return null;
                    if (e4.version = r4.getUint32(8) >>> 24, e4.version > 1)
                      return null;
                    e4.systemId = pt(new Uint8Array(t4, 12, 16));
                    var n4 = r4.getUint32(28);
                    if (0 === e4.version) {
                      if (i5 - 32 < n4)
                        return null;
                      e4.data = new Uint8Array(t4, 32, n4);
                    } else if (1 === e4.version) {
                      e4.kids = [];
                      for (var a3 = 0; a3 < n4; a3++)
                        e4.kids.push(new Uint8Array(t4, 32 + 16 * a3, 16));
                    }
                    return e4;
                  }(i4);
                  if (null === u3)
                    return;
                  0 === u3.version && u3.systemId === Q3 && u3.data && (n3 = u3.data.subarray(8, 24)), a2 = function(t4) {
                    if (t4 === Q3)
                      return Y3.WIDEVINE;
                  }(u3.systemId);
                }
                if (a2 && n3) {
                  for (var h4 = pt(n3), d2 = this.keyIdToKeySessionPromise, c2 = this.mediaKeySessions, f3 = d2[h4], g3 = function() {
                    var t4 = c2[v3], a3 = t4.decryptdata;
                    if (a3.pssh || !a3.keyId)
                      return "continue";
                    var s3 = pt(a3.keyId);
                    return h4 === s3 || -1 !== a3.uri.replace(/-/g, "").indexOf(h4) ? (f3 = d2[s3], delete d2[s3], a3.pssh = new Uint8Array(i4), a3.keyId = n3, f3 = d2[h4] = f3.then(function() {
                      return e3.generateRequestWithPreferredKeySession(t4, r3, i4, "encrypted-event-key-match");
                    }), "break") : void 0;
                  }, v3 = 0; v3 < c2.length; v3++) {
                    var m3 = g3();
                    if ("continue" !== m3 && "break" === m3)
                      break;
                  }
                  f3 || (f3 = d2[h4] = this.getKeySystemSelectionPromise([a2]).then(function(t4) {
                    var a3, s3 = t4.keySystem, o3 = t4.mediaKeys;
                    e3.throwIfDestroyed();
                    var l5 = new Ut("ISO-23001-7", h4, null != (a3 = $3(s3)) ? a3 : "");
                    return l5.pssh = new Uint8Array(i4), l5.keyId = n3, e3.attemptSetMediaKeys(s3, o3).then(function() {
                      e3.throwIfDestroyed();
                      var t5 = e3.createMediaKeySessionContext({ decryptdata: l5, keySystem: s3, mediaKeys: o3 });
                      return e3.generateRequestWithPreferredKeySession(t5, r3, i4, "encrypted-event-no-match");
                    });
                  })), f3.catch(function(t4) {
                    return e3.handleError(t4);
                  });
                }
              }
            }, e2._onWaitingForKey = function(t3) {
              this.log('"' + t3.type + '" event');
            }, e2.attemptSetMediaKeys = function(t3, e3) {
              var r3 = this, i4 = this.setMediaKeysQueue.slice();
              this.log('Setting media-keys for "' + t3 + '"');
              var n3 = Promise.all(i4).then(function() {
                if (!r3.media)
                  throw new Error("Attempted to set mediaKeys without media element attached");
                return r3.media.setMediaKeys(e3);
              });
              return this.setMediaKeysQueue.push(n3), n3.then(function() {
                r3.log('Media-keys set for "' + t3 + '"'), i4.push(n3), r3.setMediaKeysQueue = r3.setMediaKeysQueue.filter(function(t4) {
                  return -1 === i4.indexOf(t4);
                });
              });
            }, e2.generateRequestWithPreferredKeySession = function(t3, e3, r3, i4) {
              var n3, a2, s2 = this, o2 = null == (n3 = this.config.drmSystems) || null == (a2 = n3[t3.keySystem]) ? void 0 : a2.generateRequest;
              if (o2)
                try {
                  var l4 = o2.call(this.hls, e3, r3, t3);
                  if (!l4)
                    throw new Error("Invalid response from configured generateRequest filter");
                  e3 = l4.initDataType, r3 = t3.decryptdata.pssh = l4.initData ? new Uint8Array(l4.initData) : null;
                } catch (t4) {
                  var u3;
                  if (this.warn(t4.message), null != (u3 = this.hls) && u3.config.debug)
                    throw t4;
                }
              if (null === r3)
                return this.log('Skipping key-session request for "' + i4 + '" (no initData)'), Promise.resolve(t3);
              var h4 = this.getKeyIdString(t3.decryptdata);
              this.log('Generating key-session request for "' + i4 + '": ' + h4 + " (init data type: " + e3 + " length: " + (r3 ? r3.byteLength : null) + ")");
              var d2 = new en();
              t3.mediaKeysSession.onmessage = function(e4) {
                var r4 = t3.mediaKeysSession;
                if (r4) {
                  var i5 = e4.messageType, n4 = e4.message;
                  s2.log('"' + i5 + '" message event for session "' + r4.sessionId + '" message size: ' + n4.byteLength), "license-request" === i5 || "license-renewal" === i5 ? s2.renewLicense(t3, n4).catch(function(t4) {
                    s2.handleError(t4), d2.emit("error", t4);
                  }) : "license-release" === i5 ? t3.keySystem === Y3.FAIRPLAY && (s2.updateKeySession(t3, V2("acknowledged")), s2.removeSession(t3)) : s2.warn('unhandled media key message type "' + i5 + '"');
                } else
                  d2.emit("error", new Error("invalid state"));
              }, t3.mediaKeysSession.onkeystatuseschange = function(e4) {
                if (t3.mediaKeysSession) {
                  s2.onKeyStatusChange(t3);
                  var r4 = t3.keyStatus;
                  d2.emit("keyStatus", r4), "expired" === r4 && (s2.warn(t3.keySystem + " expired for key " + h4), s2.renewKeySession(t3));
                } else
                  d2.emit("error", new Error("invalid state"));
              };
              var c2 = new Promise(function(t4, e4) {
                d2.on("error", e4), d2.on("keyStatus", function(r4) {
                  r4.startsWith("usable") ? t4() : "output-restricted" === r4 ? e4(new Aa({ type: E.KEY_SYSTEM_ERROR, details: S3.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED, fatal: false }, "HDCP level output restricted")) : "internal-error" === r4 ? e4(new Aa({ type: E.KEY_SYSTEM_ERROR, details: S3.KEY_SYSTEM_STATUS_INTERNAL_ERROR, fatal: true }, 'key status changed to "' + r4 + '"')) : "expired" === r4 ? e4(new Error("key expired while generating request")) : s2.warn('unhandled key status change "' + r4 + '"');
                });
              });
              return t3.mediaKeysSession.generateRequest(e3, r3).then(function() {
                var e4;
                s2.log('Request generated for key-session "' + (null == (e4 = t3.mediaKeysSession) ? void 0 : e4.sessionId) + '" keyId: ' + h4);
              }).catch(function(t4) {
                throw new Aa({ type: E.KEY_SYSTEM_ERROR, details: S3.KEY_SYSTEM_NO_SESSION, error: t4, fatal: false }, "Error generating key-session request: " + t4);
              }).then(function() {
                return c2;
              }).catch(function(e4) {
                throw d2.removeAllListeners(), s2.removeSession(t3), e4;
              }).then(function() {
                return d2.removeAllListeners(), t3;
              });
            }, e2.onKeyStatusChange = function(t3) {
              var e3 = this;
              t3.mediaKeysSession.keyStatuses.forEach(function(r3, i4) {
                e3.log('key status change "' + r3 + '" for keyStatuses keyId: ' + pt("buffer" in i4 ? new Uint8Array(i4.buffer, i4.byteOffset, i4.byteLength) : new Uint8Array(i4)) + " session keyId: " + pt(new Uint8Array(t3.decryptdata.keyId || [])) + " uri: " + t3.decryptdata.uri), t3.keyStatus = r3;
              });
            }, e2.fetchServerCertificate = function(t3) {
              var e3 = this.config, r3 = new (0, e3.loader)(e3), n3 = this.getServerCertificateUrl(t3);
              return n3 ? (this.log('Fetching serverCertificate for "' + t3 + '"'), new Promise(function(a2, s2) {
                var o2 = { responseType: "arraybuffer", url: n3 }, l4 = e3.certLoadPolicy.default, u3 = { loadPolicy: l4, timeout: l4.maxLoadTimeMs, maxRetry: 0, retryDelay: 0, maxRetryDelay: 0 }, h4 = { onSuccess: function(t4, e4, r4, i4) {
                  a2(t4.data);
                }, onError: function(e4, r4, a3, l5) {
                  s2(new Aa({ type: E.KEY_SYSTEM_ERROR, details: S3.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED, fatal: true, networkDetails: a3, response: i3({ url: o2.url, data: void 0 }, e4) }, '"' + t3 + '" certificate request failed (' + n3 + "). Status: " + e4.code + " (" + e4.text + ")"));
                }, onTimeout: function(e4, r4, i4) {
                  s2(new Aa({ type: E.KEY_SYSTEM_ERROR, details: S3.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED, fatal: true, networkDetails: i4, response: { url: o2.url, data: void 0 } }, '"' + t3 + '" certificate request timed out (' + n3 + ")"));
                }, onAbort: function(t4, e4, r4) {
                  s2(new Error("aborted"));
                } };
                r3.load(o2, u3, h4);
              })) : Promise.resolve();
            }, e2.setMediaKeysServerCertificate = function(t3, e3, r3) {
              var i4 = this;
              return new Promise(function(n3, a2) {
                t3.setServerCertificate(r3).then(function(a3) {
                  i4.log("setServerCertificate " + (a3 ? "success" : "not supported by CDM") + " (" + (null == r3 ? void 0 : r3.byteLength) + ') on "' + e3 + '"'), n3(t3);
                }).catch(function(t4) {
                  a2(new Aa({ type: E.KEY_SYSTEM_ERROR, details: S3.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED, error: t4, fatal: true }, t4.message));
                });
              });
            }, e2.renewLicense = function(t3, e3) {
              var r3 = this;
              return this.requestLicense(t3, new Uint8Array(e3)).then(function(e4) {
                return r3.updateKeySession(t3, new Uint8Array(e4)).catch(function(t4) {
                  throw new Aa({ type: E.KEY_SYSTEM_ERROR, details: S3.KEY_SYSTEM_SESSION_UPDATE_FAILED, error: t4, fatal: true }, t4.message);
                });
              });
            }, e2.setupLicenseXHR = function(t3, e3, r3, i4) {
              var n3 = this, a2 = this.config.licenseXhrSetup;
              return a2 ? Promise.resolve().then(function() {
                if (!r3.decryptdata)
                  throw new Error("Key removed");
                return a2.call(n3.hls, t3, e3, r3, i4);
              }).catch(function(s2) {
                if (!r3.decryptdata)
                  throw s2;
                return t3.open("POST", e3, true), a2.call(n3.hls, t3, e3, r3, i4);
              }).then(function(r4) {
                return t3.readyState || t3.open("POST", e3, true), { xhr: t3, licenseChallenge: r4 || i4 };
              }) : (t3.open("POST", e3, true), Promise.resolve({ xhr: t3, licenseChallenge: i4 }));
            }, e2.requestLicense = function(t3, e3) {
              var r3 = this, i4 = this.config.keyLoadPolicy.default;
              return new Promise(function(n3, a2) {
                var s2 = r3.getLicenseServerUrl(t3.keySystem);
                r3.log("Sending license request to URL: " + s2);
                var o2 = new XMLHttpRequest();
                o2.responseType = "arraybuffer", o2.onreadystatechange = function() {
                  if (!r3.hls || !t3.mediaKeysSession)
                    return a2(new Error("invalid state"));
                  if (4 === o2.readyState)
                    if (200 === o2.status) {
                      r3._requestLicenseFailureCount = 0;
                      var l4 = o2.response;
                      r3.log("License received " + (l4 instanceof ArrayBuffer ? l4.byteLength : l4));
                      var u3 = r3.config.licenseResponseCallback;
                      if (u3)
                        try {
                          l4 = u3.call(r3.hls, o2, s2, t3);
                        } catch (t4) {
                          r3.error(t4);
                        }
                      n3(l4);
                    } else {
                      var h4 = i4.errorRetry, d2 = h4 ? h4.maxNumRetry : 0;
                      if (r3._requestLicenseFailureCount++, r3._requestLicenseFailureCount > d2 || o2.status >= 400 && o2.status < 500)
                        a2(new Aa({ type: E.KEY_SYSTEM_ERROR, details: S3.KEY_SYSTEM_LICENSE_REQUEST_FAILED, fatal: true, networkDetails: o2, response: { url: s2, data: void 0, code: o2.status, text: o2.statusText } }, "License Request XHR failed (" + s2 + "). Status: " + o2.status + " (" + o2.statusText + ")"));
                      else {
                        var c2 = d2 - r3._requestLicenseFailureCount + 1;
                        r3.warn("Retrying license request, " + c2 + " attempts left"), r3.requestLicense(t3, e3).then(n3, a2);
                      }
                    }
                }, t3.licenseXhr && t3.licenseXhr.readyState !== XMLHttpRequest.DONE && t3.licenseXhr.abort(), t3.licenseXhr = o2, r3.setupLicenseXHR(o2, s2, t3, e3).then(function(t4) {
                  var e4 = t4.xhr, r4 = t4.licenseChallenge;
                  e4.send(r4);
                });
              });
            }, e2.onMediaAttached = function(t3, e3) {
              if (this.config.emeEnabled) {
                var r3 = e3.media;
                this.media = r3, r3.addEventListener("encrypted", this.onMediaEncrypted), r3.addEventListener("waitingforkey", this.onWaitingForKey);
              }
            }, e2.onMediaDetached = function() {
              var e3 = this, r3 = this.media, i4 = this.mediaKeySessions;
              r3 && (r3.removeEventListener("encrypted", this.onMediaEncrypted), r3.removeEventListener("waitingforkey", this.onWaitingForKey), this.media = null), this._requestLicenseFailureCount = 0, this.setMediaKeysQueue = [], this.mediaKeySessions = [], this.keyIdToKeySessionPromise = {}, Ut.clearKeyUriToKeyIdMap();
              var n3 = i4.length;
              t2.CDMCleanupPromise = Promise.all(i4.map(function(t3) {
                return e3.removeSession(t3);
              }).concat(null == r3 ? void 0 : r3.setMediaKeys(null).catch(function(t3) {
                e3.log("Could not clear media keys: " + t3 + ". media.src: " + (null == r3 ? void 0 : r3.src));
              }))).then(function() {
                n3 && (e3.log("finished closing key sessions and clearing media keys"), i4.length = 0);
              }).catch(function(t3) {
                e3.log("Could not close sessions and clear media keys: " + t3 + ". media.src: " + (null == r3 ? void 0 : r3.src));
              });
            }, e2.onManifestLoaded = function(t3, e3) {
              var r3 = e3.sessionKeys;
              if (r3 && this.config.emeEnabled && !this.keyFormatPromise) {
                var i4 = r3.reduce(function(t4, e4) {
                  return -1 === t4.indexOf(e4.keyFormat) && t4.push(e4.keyFormat), t4;
                }, []);
                this.log("Selecting key-system from session-keys " + i4.join(", ")), this.keyFormatPromise = this.getKeyFormatPromise(i4);
              }
            }, e2.removeSession = function(t3) {
              var e3 = this, r3 = t3.mediaKeysSession, i4 = t3.licenseXhr;
              if (r3) {
                this.log("Remove licenses and keys and close session " + r3.sessionId), r3.onmessage = null, r3.onkeystatuseschange = null, i4 && i4.readyState !== XMLHttpRequest.DONE && i4.abort(), t3.mediaKeysSession = t3.decryptdata = t3.licenseXhr = void 0;
                var n3 = this.mediaKeySessions.indexOf(t3);
                return n3 > -1 && this.mediaKeySessions.splice(n3, 1), r3.remove().catch(function(t4) {
                  e3.log("Could not remove session: " + t4);
                }).then(function() {
                  return r3.close();
                }).catch(function(t4) {
                  e3.log("Could not close session: " + t4);
                });
              }
            }, t2;
          }();
          Ra.CDMCleanupPromise = void 0;
          var Aa = function(t2) {
            function e2(e3, r3) {
              var i4;
              return (i4 = t2.call(this, r3) || this).data = void 0, e3.error || (e3.error = new Error(r3)), i4.data = e3, e3.err = e3.error, i4;
            }
            return l3(e2, t2), e2;
          }(f2(Error)), ka = "m", ba = "a", Da = "v", Ia = "av", wa = "i", Ca = "tt", _a = function() {
            function t2(e3) {
              var r3 = this;
              this.hls = void 0, this.config = void 0, this.media = void 0, this.sid = void 0, this.cid = void 0, this.useHeaders = false, this.initialized = false, this.starved = false, this.buffering = true, this.audioBuffer = void 0, this.videoBuffer = void 0, this.onWaiting = function() {
                r3.initialized && (r3.starved = true), r3.buffering = true;
              }, this.onPlaying = function() {
                r3.initialized || (r3.initialized = true), r3.buffering = false;
              }, this.applyPlaylistData = function(t3) {
                try {
                  r3.apply(t3, { ot: ka, su: !r3.initialized });
                } catch (t4) {
                  D2.warn("Could not generate manifest CMCD data.", t4);
                }
              }, this.applyFragmentData = function(t3) {
                try {
                  var e4 = t3.frag, i5 = r3.hls.levels[e4.level], n4 = r3.getObjectType(e4), a2 = { d: 1e3 * e4.duration, ot: n4 };
                  n4 !== Da && n4 !== ba && n4 != Ia || (a2.br = i5.bitrate / 1e3, a2.tb = r3.getTopBandwidth(n4) / 1e3, a2.bl = r3.getBufferLength(n4)), r3.apply(t3, a2);
                } catch (t4) {
                  D2.warn("Could not generate segment CMCD data.", t4);
                }
              }, this.hls = e3;
              var i4 = this.config = e3.config, n3 = i4.cmcd;
              null != n3 && (i4.pLoader = this.createPlaylistLoader(), i4.fLoader = this.createFragmentLoader(), this.sid = n3.sessionId || t2.uuid(), this.cid = n3.contentId, this.useHeaders = true === n3.useHeaders, this.registerListeners());
            }
            var e2 = t2.prototype;
            return e2.registerListeners = function() {
              var t3 = this.hls;
              t3.on(T2.MEDIA_ATTACHED, this.onMediaAttached, this), t3.on(T2.MEDIA_DETACHED, this.onMediaDetached, this), t3.on(T2.BUFFER_CREATED, this.onBufferCreated, this);
            }, e2.unregisterListeners = function() {
              var t3 = this.hls;
              t3.off(T2.MEDIA_ATTACHED, this.onMediaAttached, this), t3.off(T2.MEDIA_DETACHED, this.onMediaDetached, this), t3.off(T2.BUFFER_CREATED, this.onBufferCreated, this);
            }, e2.destroy = function() {
              this.unregisterListeners(), this.onMediaDetached(), this.hls = this.config = this.audioBuffer = this.videoBuffer = null;
            }, e2.onMediaAttached = function(t3, e3) {
              this.media = e3.media, this.media.addEventListener("waiting", this.onWaiting), this.media.addEventListener("playing", this.onPlaying);
            }, e2.onMediaDetached = function() {
              this.media && (this.media.removeEventListener("waiting", this.onWaiting), this.media.removeEventListener("playing", this.onPlaying), this.media = null);
            }, e2.onBufferCreated = function(t3, e3) {
              var r3, i4;
              this.audioBuffer = null == (r3 = e3.tracks.audio) ? void 0 : r3.buffer, this.videoBuffer = null == (i4 = e3.tracks.video) ? void 0 : i4.buffer;
            }, e2.createData = function() {
              var t3;
              return { v: 1, sf: "h", sid: this.sid, cid: this.cid, pr: null == (t3 = this.media) ? void 0 : t3.playbackRate, mtp: this.hls.bandwidthEstimate / 1e3 };
            }, e2.apply = function(e3, r3) {
              void 0 === r3 && (r3 = {}), o(r3, this.createData());
              var i4 = r3.ot === wa || r3.ot === Da || r3.ot === Ia;
              if (this.starved && i4 && (r3.bs = true, r3.su = true, this.starved = false), null == r3.su && (r3.su = this.buffering), this.useHeaders) {
                var n3 = t2.toHeaders(r3);
                if (!Object.keys(n3).length)
                  return;
                e3.headers || (e3.headers = {}), o(e3.headers, n3);
              } else {
                var a2 = t2.toQuery(r3);
                if (!a2)
                  return;
                e3.url = t2.appendQueryToUri(e3.url, a2);
              }
            }, e2.getObjectType = function(t3) {
              var e3 = t3.type;
              return "subtitle" === e3 ? Ca : "initSegment" === t3.sn ? wa : "audio" === e3 ? ba : "main" === e3 ? this.hls.audioTracks.length ? Da : Ia : void 0;
            }, e2.getTopBandwidth = function(t3) {
              var e3, r3 = 0, i4 = this.hls;
              if (t3 === ba)
                e3 = i4.audioTracks;
              else {
                var n3 = i4.maxAutoLevel, a2 = n3 > -1 ? n3 + 1 : i4.levels.length;
                e3 = i4.levels.slice(0, a2);
              }
              for (var s2, o2 = v2(e3); !(s2 = o2()).done; ) {
                var l4 = s2.value;
                l4.bitrate > r3 && (r3 = l4.bitrate);
              }
              return r3 > 0 ? r3 : NaN;
            }, e2.getBufferLength = function(t3) {
              var e3 = this.hls.media, r3 = t3 === ba ? this.audioBuffer : this.videoBuffer;
              return r3 && e3 ? 1e3 * Ar.bufferInfo(r3, e3.currentTime, this.config.maxBufferHole).len : NaN;
            }, e2.createPlaylistLoader = function() {
              var t3 = this.config.pLoader, e3 = this.applyPlaylistData, r3 = t3 || this.config.loader;
              return function() {
                function t4(t5) {
                  this.loader = void 0, this.loader = new r3(t5);
                }
                var i4 = t4.prototype;
                return i4.destroy = function() {
                  this.loader.destroy();
                }, i4.abort = function() {
                  this.loader.abort();
                }, i4.load = function(t5, r4, i5) {
                  e3(t5), this.loader.load(t5, r4, i5);
                }, a(t4, [{ key: "stats", get: function() {
                  return this.loader.stats;
                } }, { key: "context", get: function() {
                  return this.loader.context;
                } }]), t4;
              }();
            }, e2.createFragmentLoader = function() {
              var t3 = this.config.fLoader, e3 = this.applyFragmentData, r3 = t3 || this.config.loader;
              return function() {
                function t4(t5) {
                  this.loader = void 0, this.loader = new r3(t5);
                }
                var i4 = t4.prototype;
                return i4.destroy = function() {
                  this.loader.destroy();
                }, i4.abort = function() {
                  this.loader.abort();
                }, i4.load = function(t5, r4, i5) {
                  e3(t5), this.loader.load(t5, r4, i5);
                }, a(t4, [{ key: "stats", get: function() {
                  return this.loader.stats;
                } }, { key: "context", get: function() {
                  return this.loader.context;
                } }]), t4;
              }();
            }, t2.uuid = function() {
              var t3 = URL.createObjectURL(new Blob()), e3 = t3.toString();
              return URL.revokeObjectURL(t3), e3.slice(e3.lastIndexOf("/") + 1);
            }, t2.serialize = function(t3) {
              for (var e3, r3 = [], i4 = function(t4) {
                return !Number.isNaN(t4) && null != t4 && "" !== t4 && false !== t4;
              }, n3 = function(t4) {
                return Math.round(t4);
              }, a2 = function(t4) {
                return 100 * n3(t4 / 100);
              }, s2 = { br: n3, d: n3, bl: a2, dl: a2, mtp: a2, nor: function(t4) {
                return encodeURIComponent(t4);
              }, rtp: a2, tb: n3 }, o2 = v2(Object.keys(t3 || {}).sort()); !(e3 = o2()).done; ) {
                var l4 = e3.value, u3 = t3[l4];
                if (i4(u3) && !("v" === l4 && 1 === u3 || "pr" == l4 && 1 === u3)) {
                  var h4 = s2[l4];
                  h4 && (u3 = h4(u3));
                  var d2 = typeof u3, c2 = void 0;
                  c2 = "ot" === l4 || "sf" === l4 || "st" === l4 ? l4 + "=" + u3 : "boolean" === d2 ? l4 : "number" === d2 ? l4 + "=" + u3 : l4 + "=" + JSON.stringify(u3), r3.push(c2);
                }
              }
              return r3.join(",");
            }, t2.toHeaders = function(e3) {
              for (var r3 = {}, i4 = ["Object", "Request", "Session", "Status"], n3 = [{}, {}, {}, {}], a2 = { br: 0, d: 0, ot: 0, tb: 0, bl: 1, dl: 1, mtp: 1, nor: 1, nrr: 1, su: 1, cid: 2, pr: 2, sf: 2, sid: 2, st: 2, v: 2, bs: 3, rtp: 3 }, s2 = 0, o2 = Object.keys(e3); s2 < o2.length; s2++) {
                var l4 = o2[s2];
                n3[null != a2[l4] ? a2[l4] : 1][l4] = e3[l4];
              }
              for (var u3 = 0; u3 < n3.length; u3++) {
                var h4 = t2.serialize(n3[u3]);
                h4 && (r3["CMCD-" + i4[u3]] = h4);
              }
              return r3;
            }, t2.toQuery = function(e3) {
              return "CMCD=" + encodeURIComponent(t2.serialize(e3));
            }, t2.appendQueryToUri = function(t3, e3) {
              if (!e3)
                return t3;
              var r3 = t3.includes("?") ? "&" : "?";
              return "" + t3 + r3 + e3;
            }, t2;
          }(), Pa = function() {
            function t2(t3) {
              this.hls = void 0, this.log = void 0, this.loader = null, this.uri = null, this.pathwayId = ".", this.pathwayPriority = null, this.timeToLoad = 300, this.reloadTimer = -1, this.updated = 0, this.started = false, this.enabled = true, this.levels = null, this.audioTracks = null, this.subtitleTracks = null, this.penalizedPathways = {}, this.hls = t3, this.log = D2.log.bind(D2, "[content-steering]:"), this.registerListeners();
            }
            var e2 = t2.prototype;
            return e2.registerListeners = function() {
              var t3 = this.hls;
              t3.on(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.on(T2.MANIFEST_LOADED, this.onManifestLoaded, this), t3.on(T2.MANIFEST_PARSED, this.onManifestParsed, this), t3.on(T2.ERROR, this.onError, this);
            }, e2.unregisterListeners = function() {
              var t3 = this.hls;
              t3 && (t3.off(T2.MANIFEST_LOADING, this.onManifestLoading, this), t3.off(T2.MANIFEST_LOADED, this.onManifestLoaded, this), t3.off(T2.MANIFEST_PARSED, this.onManifestParsed, this), t3.off(T2.ERROR, this.onError, this));
            }, e2.startLoad = function() {
              if (this.started = true, self.clearTimeout(this.reloadTimer), this.enabled && this.uri)
                if (this.updated) {
                  var t3 = Math.max(1e3 * this.timeToLoad - (performance.now() - this.updated), 0);
                  this.scheduleRefresh(this.uri, t3);
                } else
                  this.loadSteeringManifest(this.uri);
            }, e2.stopLoad = function() {
              this.started = false, this.loader && (this.loader.destroy(), this.loader = null), self.clearTimeout(this.reloadTimer);
            }, e2.destroy = function() {
              this.unregisterListeners(), this.stopLoad(), this.hls = null, this.levels = this.audioTracks = this.subtitleTracks = null;
            }, e2.removeLevel = function(t3) {
              var e3 = this.levels;
              e3 && (this.levels = e3.filter(function(e4) {
                return e4 !== t3;
              }));
            }, e2.onManifestLoading = function() {
              this.stopLoad(), this.enabled = true, this.timeToLoad = 300, this.updated = 0, this.uri = null, this.pathwayId = ".", this.levels = this.audioTracks = this.subtitleTracks = null;
            }, e2.onManifestLoaded = function(t3, e3) {
              var r3 = e3.contentSteering;
              null !== r3 && (this.pathwayId = r3.pathwayId, this.uri = r3.uri, this.started && this.startLoad());
            }, e2.onManifestParsed = function(t3, e3) {
              this.audioTracks = e3.audioTracks, this.subtitleTracks = e3.subtitleTracks;
            }, e2.onError = function(t3, e3) {
              var r3 = e3.errorAction;
              if ((null == r3 ? void 0 : r3.action) === Ze && r3.flags === rr) {
                var i4 = this.pathwayPriority, n3 = this.pathwayId;
                this.penalizedPathways[n3] || (this.penalizedPathways[n3] = performance.now()), !i4 && this.levels && (i4 = this.levels.reduce(function(t4, e4) {
                  return -1 === t4.indexOf(e4.pathwayId) && t4.push(e4.pathwayId), t4;
                }, [])), i4 && i4.length > 1 && (this.updatePathwayPriority(i4), r3.resolved = this.pathwayId !== n3);
              }
            }, e2.filterParsedLevels = function(t3) {
              this.levels = t3;
              var e3 = this.getLevelsForPathway(this.pathwayId);
              if (0 === e3.length) {
                var r3 = t3[0].pathwayId;
                this.log("No levels found in Pathway " + this.pathwayId + '. Setting initial Pathway to "' + r3 + '"'), e3 = this.getLevelsForPathway(r3), this.pathwayId = r3;
              }
              return e3.length !== t3.length ? (this.log("Found " + e3.length + "/" + t3.length + ' levels in Pathway "' + this.pathwayId + '"'), e3) : t3;
            }, e2.getLevelsForPathway = function(t3) {
              return null === this.levels ? [] : this.levels.filter(function(e3) {
                return t3 === e3.pathwayId;
              });
            }, e2.updatePathwayPriority = function(t3) {
              var e3;
              this.pathwayPriority = t3;
              var r3 = this.penalizedPathways, i4 = performance.now();
              Object.keys(r3).forEach(function(t4) {
                i4 - r3[t4] > 3e5 && delete r3[t4];
              });
              for (var n3 = 0; n3 < t3.length; n3++) {
                var a2 = t3[n3];
                if (!r3[a2]) {
                  if (a2 === this.pathwayId)
                    return;
                  var s2 = this.hls.nextLoadLevel, o2 = this.hls.levels[s2];
                  if ((e3 = this.getLevelsForPathway(a2)).length > 0) {
                    this.log('Setting Pathway to "' + a2 + '"'), this.pathwayId = a2, this.hls.trigger(T2.LEVELS_UPDATED, { levels: e3 });
                    var l4 = this.hls.levels[s2];
                    o2 && l4 && this.levels && (l4.attrs["STABLE-VARIANT-ID"] !== o2.attrs["STABLE-VARIANT-ID"] && l4.bitrate !== o2.bitrate && this.log("Unstable Pathways change from bitrate " + o2.bitrate + " to " + l4.bitrate), this.hls.nextLoadLevel = s2);
                    break;
                  }
                }
              }
            }, e2.clonePathways = function(t3) {
              var e3 = this, r3 = this.levels;
              if (r3) {
                var i4 = {}, n3 = {};
                t3.forEach(function(t4) {
                  var a2 = t4.ID, s2 = t4["BASE-ID"], l4 = t4["URI-REPLACEMENT"];
                  if (!r3.some(function(t5) {
                    return t5.pathwayId === a2;
                  })) {
                    var u3 = e3.getLevelsForPathway(s2).map(function(t5) {
                      var e4 = o({}, t5);
                      e4.details = void 0, e4.url = Fa(t5.uri, t5.attrs["STABLE-VARIANT-ID"], "PER-VARIANT-URIS", l4);
                      var r4 = new C2(t5.attrs);
                      r4["PATHWAY-ID"] = a2;
                      var s3 = r4.AUDIO && r4.AUDIO + "_clone_" + a2, u4 = r4.SUBTITLES && r4.SUBTITLES + "_clone_" + a2;
                      s3 && (i4[r4.AUDIO] = s3, r4.AUDIO = s3), u4 && (n3[r4.SUBTITLES] = u4, r4.SUBTITLES = u4), e4.attrs = r4;
                      var h4 = new xe2(e4);
                      return or(h4, "audio", s3), or(h4, "text", u4), h4;
                    });
                    r3.push.apply(r3, u3), xa(e3.audioTracks, i4, l4, a2), xa(e3.subtitleTracks, n3, l4, a2);
                  }
                });
              }
            }, e2.loadSteeringManifest = function(t3) {
              var e3, r3 = this, i4 = this.hls.config, n3 = i4.loader;
              this.loader && this.loader.destroy(), this.loader = new n3(i4);
              try {
                e3 = new self.URL(t3);
              } catch (e4) {
                return this.enabled = false, void this.log("Failed to parse Steering Manifest URI: " + t3);
              }
              if ("data:" !== e3.protocol) {
                var a2 = 0 | (this.hls.bandwidthEstimate || i4.abrEwmaDefaultEstimate);
                e3.searchParams.set("_HLS_pathway", this.pathwayId), e3.searchParams.set("_HLS_throughput", "" + a2);
              }
              var s2 = { responseType: "json", url: e3.href }, o2 = i4.steeringManifestLoadPolicy.default, l4 = o2.errorRetry || o2.timeoutRetry || {}, u3 = { loadPolicy: o2, timeout: o2.maxLoadTimeMs, maxRetry: l4.maxNumRetry || 0, retryDelay: l4.retryDelayMs || 0, maxRetryDelay: l4.maxRetryDelayMs || 0 }, h4 = { onSuccess: function(t4, i5, n4, a3) {
                r3.log('Loaded steering manifest: "' + e3 + '"');
                var s3 = t4.data;
                if (1 === s3.VERSION) {
                  r3.updated = performance.now(), r3.timeToLoad = s3.TTL;
                  var o3 = s3["RELOAD-URI"], l5 = s3["PATHWAY-CLONES"], u4 = s3["PATHWAY-PRIORITY"];
                  if (o3)
                    try {
                      r3.uri = new self.URL(o3, e3).href;
                    } catch (t5) {
                      return r3.enabled = false, void r3.log("Failed to parse Steering Manifest RELOAD-URI: " + o3);
                    }
                  r3.scheduleRefresh(r3.uri || n4.url), l5 && r3.clonePathways(l5), u4 && r3.updatePathwayPriority(u4);
                } else
                  r3.log("Steering VERSION " + s3.VERSION + " not supported!");
              }, onError: function(t4, e4, i5, n4) {
                if (r3.log("Error loading steering manifest: " + t4.code + " " + t4.text + " (" + e4.url + ")"), r3.stopLoad(), 410 === t4.code)
                  return r3.enabled = false, void r3.log("Steering manifest " + e4.url + " no longer available");
                var a3 = 1e3 * r3.timeToLoad;
                if (429 !== t4.code)
                  r3.scheduleRefresh(r3.uri || e4.url, a3);
                else {
                  var s3 = r3.loader;
                  if ("function" == typeof (null == s3 ? void 0 : s3.getResponseHeader)) {
                    var o3 = s3.getResponseHeader("Retry-After");
                    o3 && (a3 = 1e3 * parseFloat(o3));
                  }
                  r3.log("Steering manifest " + e4.url + " rate limited");
                }
              }, onTimeout: function(t4, e4, i5) {
                r3.log("Timeout loading steering manifest (" + e4.url + ")"), r3.scheduleRefresh(r3.uri || e4.url);
              } };
              this.log("Requesting steering manifest: " + e3), this.loader.load(s2, u3, h4);
            }, e2.scheduleRefresh = function(t3, e3) {
              var r3 = this;
              void 0 === e3 && (e3 = 1e3 * this.timeToLoad), self.clearTimeout(this.reloadTimer), this.reloadTimer = self.setTimeout(function() {
                r3.loadSteeringManifest(t3);
              }, e3);
            }, t2;
          }();
          function xa(t2, e2, r3, i4) {
            t2 && Object.keys(e2).forEach(function(n3) {
              var a2 = t2.filter(function(t3) {
                return t3.groupId === n3;
              }).map(function(t3) {
                var a3 = o({}, t3);
                return a3.details = void 0, a3.attrs = new C2(a3.attrs), a3.url = a3.attrs.URI = Fa(t3.url, t3.attrs["STABLE-RENDITION-ID"], "PER-RENDITION-URIS", r3), a3.groupId = a3.attrs["GROUP-ID"] = e2[n3], a3.attrs["PATHWAY-ID"] = i4, a3;
              });
              t2.push.apply(t2, a2);
            });
          }
          function Fa(t2, e2, r3, i4) {
            var n3, a2 = i4.HOST, s2 = i4.PARAMS, o2 = i4[r3];
            e2 && (n3 = null == o2 ? void 0 : o2[e2]) && (t2 = n3);
            var l4 = new self.URL(t2);
            return a2 && !n3 && (l4.host = a2), s2 && Object.keys(s2).sort().forEach(function(t3) {
              t3 && l4.searchParams.set(t3, s2[t3]);
            }), l4.href;
          }
          var Oa = /^age:\s*[\d.]+\s*$/im, Ma = function() {
            function t2(t3) {
              this.xhrSetup = void 0, this.requestTimeout = void 0, this.retryTimeout = void 0, this.retryDelay = void 0, this.config = null, this.callbacks = null, this.context = void 0, this.loader = null, this.stats = void 0, this.xhrSetup = t3 && t3.xhrSetup || null, this.stats = new x(), this.retryDelay = 0;
            }
            var e2 = t2.prototype;
            return e2.destroy = function() {
              this.callbacks = null, this.abortInternal(), this.loader = null, this.config = null;
            }, e2.abortInternal = function() {
              var t3 = this.loader;
              self.clearTimeout(this.requestTimeout), self.clearTimeout(this.retryTimeout), t3 && (t3.onreadystatechange = null, t3.onprogress = null, 4 !== t3.readyState && (this.stats.aborted = true, t3.abort()));
            }, e2.abort = function() {
              var t3;
              this.abortInternal(), null != (t3 = this.callbacks) && t3.onAbort && this.callbacks.onAbort(this.stats, this.context, this.loader);
            }, e2.load = function(t3, e3, r3) {
              if (this.stats.loading.start)
                throw new Error("Loader can only be used once.");
              this.stats.loading.start = self.performance.now(), this.context = t3, this.config = e3, this.callbacks = r3, this.loadInternal();
            }, e2.loadInternal = function() {
              var t3 = this, e3 = this.config, r3 = this.context;
              if (e3) {
                var i4 = this.loader = new self.XMLHttpRequest(), n3 = this.stats;
                n3.loading.first = 0, n3.loaded = 0;
                var a2 = this.xhrSetup;
                a2 ? Promise.resolve().then(function() {
                  if (!t3.stats.aborted)
                    return a2(i4, r3.url);
                }).catch(function(t4) {
                  return i4.open("GET", r3.url, true), a2(i4, r3.url);
                }).then(function() {
                  t3.stats.aborted || t3.openAndSendXhr(i4, r3, e3);
                }).catch(function(e4) {
                  t3.callbacks.onError({ code: i4.status, text: e4.message }, r3, i4, n3);
                }) : this.openAndSendXhr(i4, r3, e3);
              }
            }, e2.openAndSendXhr = function(t3, e3, r3) {
              t3.readyState || t3.open("GET", e3.url, true);
              var i4 = this.context.headers, n3 = r3.loadPolicy, a2 = n3.maxTimeToFirstByteMs, s2 = n3.maxLoadTimeMs;
              if (i4)
                for (var o2 in i4)
                  t3.setRequestHeader(o2, i4[o2]);
              e3.rangeEnd && t3.setRequestHeader("Range", "bytes=" + e3.rangeStart + "-" + (e3.rangeEnd - 1)), t3.onreadystatechange = this.readystatechange.bind(this), t3.onprogress = this.loadprogress.bind(this), t3.responseType = e3.responseType, self.clearTimeout(this.requestTimeout), r3.timeout = a2 && y(a2) ? a2 : s2, this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), r3.timeout), t3.send();
            }, e2.readystatechange = function() {
              var t3 = this.context, e3 = this.loader, r3 = this.stats;
              if (t3 && e3) {
                var i4 = e3.readyState, n3 = this.config;
                if (!r3.aborted && i4 >= 2 && (0 === r3.loading.first && (r3.loading.first = Math.max(self.performance.now(), r3.loading.start), n3.timeout !== n3.loadPolicy.maxLoadTimeMs && (self.clearTimeout(this.requestTimeout), n3.timeout = n3.loadPolicy.maxLoadTimeMs, this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), n3.loadPolicy.maxLoadTimeMs - (r3.loading.first - r3.loading.start)))), 4 === i4)) {
                  self.clearTimeout(this.requestTimeout), e3.onreadystatechange = null, e3.onprogress = null;
                  var a2 = e3.status, s2 = "text" !== e3.responseType;
                  if (a2 >= 200 && a2 < 300 && (s2 && e3.response || null !== e3.responseText)) {
                    r3.loading.end = Math.max(self.performance.now(), r3.loading.first);
                    var o2 = s2 ? e3.response : e3.responseText, l4 = "arraybuffer" === e3.responseType ? o2.byteLength : o2.length;
                    if (r3.loaded = r3.total = l4, r3.bwEstimate = 8e3 * r3.total / (r3.loading.end - r3.loading.first), !this.callbacks)
                      return;
                    var u3 = this.callbacks.onProgress;
                    if (u3 && u3(r3, t3, o2, e3), !this.callbacks)
                      return;
                    var h4 = { url: e3.responseURL, data: o2, code: a2 };
                    this.callbacks.onSuccess(h4, r3, t3, e3);
                  } else {
                    var d2 = n3.loadPolicy.errorRetry;
                    We(d2, r3.retry, false, a2) ? this.retry(d2) : (D2.error(a2 + " while loading " + t3.url), this.callbacks.onError({ code: a2, text: e3.statusText }, t3, e3, r3));
                  }
                }
              }
            }, e2.loadtimeout = function() {
              var t3, e3 = null == (t3 = this.config) ? void 0 : t3.loadPolicy.timeoutRetry;
              if (We(e3, this.stats.retry, true))
                this.retry(e3);
              else {
                D2.warn("timeout while loading " + this.context.url);
                var r3 = this.callbacks;
                r3 && (this.abortInternal(), r3.onTimeout(this.stats, this.context, this.loader));
              }
            }, e2.retry = function(t3) {
              var e3 = this.context, r3 = this.stats;
              this.retryDelay = Ve(t3, r3.retry), r3.retry++, D2.warn((status ? "HTTP Status " + status : "Timeout") + " while loading " + e3.url + ", retrying " + r3.retry + "/" + t3.maxNumRetry + " in " + this.retryDelay + "ms"), this.abortInternal(), this.loader = null, self.clearTimeout(this.retryTimeout), this.retryTimeout = self.setTimeout(this.loadInternal.bind(this), this.retryDelay);
            }, e2.loadprogress = function(t3) {
              var e3 = this.stats;
              e3.loaded = t3.loaded, t3.lengthComputable && (e3.total = t3.total);
            }, e2.getCacheAge = function() {
              var t3 = null;
              if (this.loader && Oa.test(this.loader.getAllResponseHeaders())) {
                var e3 = this.loader.getResponseHeader("age");
                t3 = e3 ? parseFloat(e3) : null;
              }
              return t3;
            }, e2.getResponseHeader = function(t3) {
              return this.loader && new RegExp("^" + t3 + ":\\s*[\\d.]+\\s*$", "im").test(this.loader.getAllResponseHeaders()) ? this.loader.getResponseHeader(t3) : null;
            }, t2;
          }(), Na = /(\d+)-(\d+)\/(\d+)/, Ua = function() {
            function t2(t3) {
              this.fetchSetup = void 0, this.requestTimeout = void 0, this.request = void 0, this.response = void 0, this.controller = void 0, this.context = void 0, this.config = null, this.callbacks = null, this.stats = void 0, this.loader = null, this.fetchSetup = t3.fetchSetup || Ba, this.controller = new self.AbortController(), this.stats = new x();
            }
            var e2 = t2.prototype;
            return e2.destroy = function() {
              this.loader = this.callbacks = null, this.abortInternal();
            }, e2.abortInternal = function() {
              var t3 = this.response;
              null != t3 && t3.ok || (this.stats.aborted = true, this.controller.abort());
            }, e2.abort = function() {
              var t3;
              this.abortInternal(), null != (t3 = this.callbacks) && t3.onAbort && this.callbacks.onAbort(this.stats, this.context, this.response);
            }, e2.load = function(t3, e3, r3) {
              var i4 = this, n3 = this.stats;
              if (n3.loading.start)
                throw new Error("Loader can only be used once.");
              n3.loading.start = self.performance.now();
              var a2 = function(t4, e4) {
                var r4 = { method: "GET", mode: "cors", credentials: "same-origin", signal: e4, headers: new self.Headers(o({}, t4.headers)) };
                return t4.rangeEnd && r4.headers.set("Range", "bytes=" + t4.rangeStart + "-" + String(t4.rangeEnd - 1)), r4;
              }(t3, this.controller.signal), s2 = r3.onProgress, l4 = "arraybuffer" === t3.responseType, u3 = l4 ? "byteLength" : "length", h4 = e3.loadPolicy, d2 = h4.maxTimeToFirstByteMs, c2 = h4.maxLoadTimeMs;
              this.context = t3, this.config = e3, this.callbacks = r3, this.request = this.fetchSetup(t3, a2), self.clearTimeout(this.requestTimeout), e3.timeout = d2 && y(d2) ? d2 : c2, this.requestTimeout = self.setTimeout(function() {
                i4.abortInternal(), r3.onTimeout(n3, t3, i4.response);
              }, e3.timeout), self.fetch(this.request).then(function(a3) {
                i4.response = i4.loader = a3;
                var o2 = Math.max(self.performance.now(), n3.loading.start);
                if (self.clearTimeout(i4.requestTimeout), e3.timeout = c2, i4.requestTimeout = self.setTimeout(function() {
                  i4.abortInternal(), r3.onTimeout(n3, t3, i4.response);
                }, c2 - (o2 - n3.loading.start)), !a3.ok) {
                  var u4 = a3.status, h5 = a3.statusText;
                  throw new Ga(h5 || "fetch, bad network response", u4, a3);
                }
                return n3.loading.first = o2, n3.total = function(t4) {
                  var e4 = t4.get("Content-Range");
                  if (e4) {
                    var r4 = function(t5) {
                      var e5 = Na.exec(t5);
                      if (e5)
                        return parseInt(e5[2]) - parseInt(e5[1]) + 1;
                    }(e4);
                    if (y(r4))
                      return r4;
                  }
                  var i5 = t4.get("Content-Length");
                  if (i5)
                    return parseInt(i5);
                }(a3.headers) || n3.total, s2 && y(e3.highWaterMark) ? i4.loadProgressively(a3, n3, t3, e3.highWaterMark, s2) : l4 ? a3.arrayBuffer() : "json" === t3.responseType ? a3.json() : a3.text();
              }).then(function(a3) {
                var o2 = i4.response;
                self.clearTimeout(i4.requestTimeout), n3.loading.end = Math.max(self.performance.now(), n3.loading.first);
                var l5 = a3[u3];
                l5 && (n3.loaded = n3.total = l5);
                var h5 = { url: o2.url, data: a3, code: o2.status };
                s2 && !y(e3.highWaterMark) && s2(n3, t3, a3, o2), r3.onSuccess(h5, n3, t3, o2);
              }).catch(function(e4) {
                if (self.clearTimeout(i4.requestTimeout), !n3.aborted) {
                  var a3 = e4 && e4.code || 0, s3 = e4 ? e4.message : null;
                  r3.onError({ code: a3, text: s3 }, t3, e4 ? e4.details : null, n3);
                }
              });
            }, e2.getCacheAge = function() {
              var t3 = null;
              if (this.response) {
                var e3 = this.response.headers.get("age");
                t3 = e3 ? parseFloat(e3) : null;
              }
              return t3;
            }, e2.getResponseHeader = function(t3) {
              return this.response ? this.response.headers.get(t3) : null;
            }, e2.loadProgressively = function(t3, e3, r3, i4, n3) {
              void 0 === i4 && (i4 = 0);
              var a2 = new fn(), s2 = t3.body.getReader();
              return function o2() {
                return s2.read().then(function(s3) {
                  if (s3.done)
                    return a2.dataLength && n3(e3, r3, a2.flush(), t3), Promise.resolve(new ArrayBuffer(0));
                  var l4 = s3.value, u3 = l4.length;
                  return e3.loaded += u3, u3 < i4 || a2.dataLength ? (a2.push(l4), a2.dataLength >= i4 && n3(e3, r3, a2.flush(), t3)) : n3(e3, r3, l4, t3), o2();
                }).catch(function() {
                  return Promise.reject();
                });
              }();
            }, t2;
          }();
          function Ba(t2, e2) {
            return new self.Request(t2.url, e2);
          }
          var Ga = function(t2) {
            function e2(e3, r3, i4) {
              var n3;
              return (n3 = t2.call(this, e3) || this).code = void 0, n3.details = void 0, n3.code = r3, n3.details = i4, n3;
            }
            return l3(e2, t2), e2;
          }(f2(Error)), Ka = /\s/, Ha = i3(i3({ autoStartLoad: true, startPosition: -1, defaultAudioCodec: void 0, debug: false, capLevelOnFPSDrop: false, capLevelToPlayerSize: false, ignoreDevicePixelRatio: false, initialLiveManifestSize: 1, maxBufferLength: 30, backBufferLength: 1 / 0, maxBufferSize: 6e7, maxBufferHole: 0.1, highBufferWatchdogPeriod: 2, nudgeOffset: 0.1, nudgeMaxRetry: 3, maxFragLookUpTolerance: 0.25, liveSyncDurationCount: 3, liveMaxLatencyDurationCount: 1 / 0, liveSyncDuration: void 0, liveMaxLatencyDuration: void 0, maxLiveSyncPlaybackRate: 1, liveDurationInfinity: false, liveBackBufferLength: null, maxMaxBufferLength: 600, enableWorker: true, workerPath: null, enableSoftwareAES: true, startLevel: void 0, startFragPrefetch: false, fpsDroppedMonitoringPeriod: 5e3, fpsDroppedMonitoringThreshold: 0.2, appendErrorMaxRetry: 3, loader: Ma, fLoader: void 0, pLoader: void 0, xhrSetup: void 0, licenseXhrSetup: void 0, licenseResponseCallback: void 0, abrController: cn, bufferController: kn, capLevelController: Ea, errorController: nr, fpsController: Sa, stretchShortVideoTrack: false, maxAudioFramesDrift: 1, forceKeyFrameOnDiscontinuity: true, abrEwmaFastLive: 3, abrEwmaSlowLive: 9, abrEwmaFastVoD: 3, abrEwmaSlowVoD: 9, abrEwmaDefaultEstimate: 5e5, abrBandWidthFactor: 0.95, abrBandWidthUpFactor: 0.7, abrMaxWithRealBitrate: false, maxStarvationDelay: 4, maxLoadingDelay: 4, minAutoBitrate: 0, emeEnabled: false, widevineLicenseUrl: void 0, drmSystems: {}, drmSystemOptions: {}, requestMediaKeySystemAccessFunc: Z3, testBandwidth: true, progressive: false, lowLatencyMode: true, cmcd: void 0, enableDateRangeMetadataCues: true, enableEmsgMetadataCues: true, enableID3MetadataCues: true, certLoadPolicy: { default: { maxTimeToFirstByteMs: 8e3, maxLoadTimeMs: 2e4, timeoutRetry: null, errorRetry: null } }, keyLoadPolicy: { default: { maxTimeToFirstByteMs: 8e3, maxLoadTimeMs: 2e4, timeoutRetry: { maxNumRetry: 1, retryDelayMs: 1e3, maxRetryDelayMs: 2e4, backoff: "linear" }, errorRetry: { maxNumRetry: 8, retryDelayMs: 1e3, maxRetryDelayMs: 2e4, backoff: "linear" } } }, manifestLoadPolicy: { default: { maxTimeToFirstByteMs: 1 / 0, maxLoadTimeMs: 2e4, timeoutRetry: { maxNumRetry: 2, retryDelayMs: 0, maxRetryDelayMs: 0 }, errorRetry: { maxNumRetry: 1, retryDelayMs: 1e3, maxRetryDelayMs: 8e3 } } }, playlistLoadPolicy: { default: { maxTimeToFirstByteMs: 1e4, maxLoadTimeMs: 2e4, timeoutRetry: { maxNumRetry: 2, retryDelayMs: 0, maxRetryDelayMs: 0 }, errorRetry: { maxNumRetry: 2, retryDelayMs: 1e3, maxRetryDelayMs: 8e3 } } }, fragLoadPolicy: { default: { maxTimeToFirstByteMs: 1e4, maxLoadTimeMs: 12e4, timeoutRetry: { maxNumRetry: 4, retryDelayMs: 0, maxRetryDelayMs: 0 }, errorRetry: { maxNumRetry: 6, retryDelayMs: 1e3, maxRetryDelayMs: 8e3 } } }, steeringManifestLoadPolicy: { default: { maxTimeToFirstByteMs: 1e4, maxLoadTimeMs: 2e4, timeoutRetry: { maxNumRetry: 2, retryDelayMs: 0, maxRetryDelayMs: 0 }, errorRetry: { maxNumRetry: 1, retryDelayMs: 1e3, maxRetryDelayMs: 8e3 } } }, manifestLoadingTimeOut: 1e4, manifestLoadingMaxRetry: 1, manifestLoadingRetryDelay: 1e3, manifestLoadingMaxRetryTimeout: 64e3, levelLoadingTimeOut: 1e4, levelLoadingMaxRetry: 4, levelLoadingRetryDelay: 1e3, levelLoadingMaxRetryTimeout: 64e3, fragLoadingTimeOut: 2e4, fragLoadingMaxRetry: 6, fragLoadingRetryDelay: 1e3, fragLoadingMaxRetryTimeout: 64e3 }, { cueHandler: { newCue: function(t2, e2, r3, i4) {
            for (var n3, a2, s2, o2, l4, u3 = [], h4 = self.VTTCue || self.TextTrackCue, d2 = 0; d2 < i4.rows.length; d2++)
              if (s2 = true, o2 = 0, l4 = "", !(n3 = i4.rows[d2]).isEmpty()) {
                for (var c2, f3 = 0; f3 < n3.chars.length; f3++)
                  Ka.test(n3.chars[f3].uchar) && s2 ? o2++ : (l4 += n3.chars[f3].uchar, s2 = false);
                n3.cueStartTime = e2, e2 === r3 && (r3 += 1e-4), o2 >= 16 ? o2-- : o2++;
                var g3 = ta(l4.trim()), v3 = aa(e2, r3, g3);
                null != t2 && null != (c2 = t2.cues) && c2.getCueById(v3) || ((a2 = new h4(e2, r3, g3)).id = v3, a2.line = d2 + 1, a2.align = "left", a2.position = 10 + Math.min(80, 10 * Math.floor(8 * o2 / 32)), u3.push(a2));
              }
            return t2 && u3.length && (u3.sort(function(t3, e3) {
              return "auto" === t3.line || "auto" === e3.line ? 0 : t3.line > 8 && e3.line > 8 ? e3.line - t3.line : t3.line - e3.line;
            }), u3.forEach(function(e3) {
              return pe2(t2, e3);
            })), u3;
          } }, enableWebVTT: true, enableIMSC1: true, enableCEA708Captions: true, captionsTextTrack1Label: "English", captionsTextTrack1LanguageCode: "en", captionsTextTrack2Label: "Spanish", captionsTextTrack2LanguageCode: "es", captionsTextTrack3Label: "Unknown CC", captionsTextTrack3LanguageCode: "", captionsTextTrack4Label: "Unknown CC", captionsTextTrack4LanguageCode: "", renderTextTracksNatively: true }), {}, { subtitleStreamController: yn, subtitleTrackController: En, timelineController: ya, audioStreamController: gn, audioTrackController: vn, emeController: Ra, cmcdController: _a, contentSteeringController: Pa });
          function Va(t2) {
            return t2 && "object" == typeof t2 ? Array.isArray(t2) ? t2.map(Va) : Object.keys(t2).reduce(function(e2, r3) {
              return e2[r3] = Va(t2[r3]), e2;
            }, {}) : t2;
          }
          function Ya(t2) {
            var e2 = t2.loader;
            e2 !== Ua && e2 !== Ma ? (D2.log("[config]: Custom loader detected, cannot enable progressive streaming"), t2.progressive = false) : function() {
              if (self.fetch && self.AbortController && self.ReadableStream && self.Request)
                try {
                  return new self.ReadableStream({}), true;
                } catch (t3) {
                }
              return false;
            }() && (t2.loader = Ua, t2.progressive = true, t2.enableSoftwareAES = true, D2.log("[config]: Progressive streaming enabled, using FetchLoader"));
          }
          var Wa = function() {
            function t2(e3) {
              void 0 === e3 && (e3 = {}), this.config = void 0, this.userConfig = void 0, this.coreComponents = void 0, this.networkControllers = void 0, this._emitter = new en(), this._autoLevelCapping = void 0, this._maxHdcpLevel = null, this.abrController = void 0, this.bufferController = void 0, this.capLevelController = void 0, this.latencyController = void 0, this.levelController = void 0, this.streamController = void 0, this.audioTrackController = void 0, this.subtitleTrackController = void 0, this.emeController = void 0, this.cmcdController = void 0, this._media = null, this.url = null, b2(e3.debug || false, "Hls instance");
              var r3 = this.config = function(t3, e4) {
                if ((e4.liveSyncDurationCount || e4.liveMaxLatencyDurationCount) && (e4.liveSyncDuration || e4.liveMaxLatencyDuration))
                  throw new Error("Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration");
                if (void 0 !== e4.liveMaxLatencyDurationCount && (void 0 === e4.liveSyncDurationCount || e4.liveMaxLatencyDurationCount <= e4.liveSyncDurationCount))
                  throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be greater than "liveSyncDurationCount"');
                if (void 0 !== e4.liveMaxLatencyDuration && (void 0 === e4.liveSyncDuration || e4.liveMaxLatencyDuration <= e4.liveSyncDuration))
                  throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be greater than "liveSyncDuration"');
                var r4 = Va(t3), n4 = ["TimeOut", "MaxRetry", "RetryDelay", "MaxRetryTimeout"];
                return ["manifest", "level", "frag"].forEach(function(t4) {
                  var i4 = ("level" === t4 ? "playlist" : t4) + "LoadPolicy", a3 = void 0 === e4[i4], s3 = [];
                  n4.forEach(function(n5) {
                    var o3 = t4 + "Loading" + n5, l5 = e4[o3];
                    if (void 0 !== l5 && a3) {
                      s3.push(o3);
                      var u4 = r4[i4].default;
                      switch (e4[i4] = { default: u4 }, n5) {
                        case "TimeOut":
                          u4.maxLoadTimeMs = l5, u4.maxTimeToFirstByteMs = l5;
                          break;
                        case "MaxRetry":
                          u4.errorRetry.maxNumRetry = l5, u4.timeoutRetry.maxNumRetry = l5;
                          break;
                        case "RetryDelay":
                          u4.errorRetry.retryDelayMs = l5, u4.timeoutRetry.retryDelayMs = l5;
                          break;
                        case "MaxRetryTimeout":
                          u4.errorRetry.maxRetryDelayMs = l5, u4.timeoutRetry.maxRetryDelayMs = l5;
                      }
                    }
                  }), s3.length && D2.warn('hls.js config: "' + s3.join('", "') + '" setting(s) are deprecated, use "' + i4 + '": ' + JSON.stringify(e4[i4]));
                }), i3(i3({}, r4), e4);
              }(t2.DefaultConfig, e3);
              this.userConfig = e3, this._autoLevelCapping = -1, r3.progressive && Ya(r3);
              var n3 = r3.abrController, a2 = r3.bufferController, s2 = r3.capLevelController, o2 = r3.errorController, l4 = r3.fpsController, u3 = new o2(this), h4 = this.abrController = new n3(this), d2 = this.bufferController = new a2(this), c2 = this.capLevelController = new s2(this), f3 = new l4(this), g3 = new ve2(this), v3 = new be3(this), m3 = r3.contentSteeringController, p2 = m3 ? new m3(this) : null, y2 = this.levelController = new sr(this, p2), E2 = new fr(this), S4 = new Sr(this.config), L3 = this.streamController = new un(this, E2, S4);
              c2.setStreamController(L3), f3.setStreamController(L3);
              var R3 = [g3, y2, L3];
              p2 && R3.splice(1, 0, p2), this.networkControllers = R3;
              var A3 = [h4, d2, c2, f3, v3, E2];
              this.audioTrackController = this.createController(r3.audioTrackController, R3);
              var k3 = r3.audioStreamController;
              k3 && R3.push(new k3(this, E2, S4)), this.subtitleTrackController = this.createController(r3.subtitleTrackController, R3);
              var I3 = r3.subtitleStreamController;
              I3 && R3.push(new I3(this, E2, S4)), this.createController(r3.timelineController, A3), S4.emeController = this.emeController = this.createController(r3.emeController, A3), this.cmcdController = this.createController(r3.cmcdController, A3), this.latencyController = this.createController(De2, A3), this.coreComponents = A3, R3.push(u3);
              var w3 = u3.onErrorOut;
              "function" == typeof w3 && this.on(T2.ERROR, w3, u3);
            }
            t2.isSupported = function() {
              return function() {
                var t3 = zr();
                if (!t3)
                  return false;
                var e3 = Qr(), r3 = t3 && "function" == typeof t3.isTypeSupported && t3.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"'), i4 = !e3 || e3.prototype && "function" == typeof e3.prototype.appendBuffer && "function" == typeof e3.prototype.remove;
                return !!r3 && !!i4;
              }();
            };
            var e2 = t2.prototype;
            return e2.createController = function(t3, e3) {
              if (t3) {
                var r3 = new t3(this);
                return e3 && e3.push(r3), r3;
              }
              return null;
            }, e2.on = function(t3, e3, r3) {
              void 0 === r3 && (r3 = this), this._emitter.on(t3, e3, r3);
            }, e2.once = function(t3, e3, r3) {
              void 0 === r3 && (r3 = this), this._emitter.once(t3, e3, r3);
            }, e2.removeAllListeners = function(t3) {
              this._emitter.removeAllListeners(t3);
            }, e2.off = function(t3, e3, r3, i4) {
              void 0 === r3 && (r3 = this), this._emitter.off(t3, e3, r3, i4);
            }, e2.listeners = function(t3) {
              return this._emitter.listeners(t3);
            }, e2.emit = function(t3, e3, r3) {
              return this._emitter.emit(t3, e3, r3);
            }, e2.trigger = function(t3, e3) {
              if (this.config.debug)
                return this.emit(t3, t3, e3);
              try {
                return this.emit(t3, t3, e3);
              } catch (e4) {
                D2.error("An internal error happened while handling event " + t3 + '. Error message: "' + e4.message + '". Here is a stacktrace:', e4), this.trigger(T2.ERROR, { type: E.OTHER_ERROR, details: S3.INTERNAL_EXCEPTION, fatal: false, event: t3, error: e4 });
              }
              return false;
            }, e2.listenerCount = function(t3) {
              return this._emitter.listenerCount(t3);
            }, e2.destroy = function() {
              D2.log("destroy"), this.trigger(T2.DESTROYING, void 0), this.detachMedia(), this.removeAllListeners(), this._autoLevelCapping = -1, this.url = null, this.networkControllers.forEach(function(t4) {
                return t4.destroy();
              }), this.networkControllers.length = 0, this.coreComponents.forEach(function(t4) {
                return t4.destroy();
              }), this.coreComponents.length = 0;
              var t3 = this.config;
              t3.xhrSetup = t3.fetchSetup = void 0, this.userConfig = null;
            }, e2.attachMedia = function(t3) {
              D2.log("attachMedia"), this._media = t3, this.trigger(T2.MEDIA_ATTACHING, { media: t3 });
            }, e2.detachMedia = function() {
              D2.log("detachMedia"), this.trigger(T2.MEDIA_DETACHING, void 0), this._media = null;
            }, e2.loadSource = function(t3) {
              this.stopLoad();
              var e3 = this.media, r3 = this.url, i4 = this.url = p.buildAbsoluteURL(self.location.href, t3, { alwaysNormalize: true });
              D2.log("loadSource:" + i4), e3 && r3 && r3 !== i4 && this.bufferController.hasSourceTypes() && (this.detachMedia(), this.attachMedia(e3)), this.trigger(T2.MANIFEST_LOADING, { url: t3 });
            }, e2.startLoad = function(t3) {
              void 0 === t3 && (t3 = -1), D2.log("startLoad(" + t3 + ")"), this.networkControllers.forEach(function(e3) {
                e3.startLoad(t3);
              });
            }, e2.stopLoad = function() {
              D2.log("stopLoad"), this.networkControllers.forEach(function(t3) {
                t3.stopLoad();
              });
            }, e2.swapAudioCodec = function() {
              D2.log("swapAudioCodec"), this.streamController.swapAudioCodec();
            }, e2.recoverMediaError = function() {
              D2.log("recoverMediaError");
              var t3 = this._media;
              this.detachMedia(), t3 && this.attachMedia(t3);
            }, e2.removeLevel = function(t3, e3) {
              void 0 === e3 && (e3 = 0), this.levelController.removeLevel(t3, e3);
            }, a(t2, [{ key: "levels", get: function() {
              var t3 = this.levelController.levels;
              return t3 || [];
            } }, { key: "currentLevel", get: function() {
              return this.streamController.currentLevel;
            }, set: function(t3) {
              D2.log("set currentLevel:" + t3), this.loadLevel = t3, this.abrController.clearTimer(), this.streamController.immediateLevelSwitch();
            } }, { key: "nextLevel", get: function() {
              return this.streamController.nextLevel;
            }, set: function(t3) {
              D2.log("set nextLevel:" + t3), this.levelController.manualLevel = t3, this.streamController.nextLevelSwitch();
            } }, { key: "loadLevel", get: function() {
              return this.levelController.level;
            }, set: function(t3) {
              D2.log("set loadLevel:" + t3), this.levelController.manualLevel = t3;
            } }, { key: "nextLoadLevel", get: function() {
              return this.levelController.nextLoadLevel;
            }, set: function(t3) {
              this.levelController.nextLoadLevel = t3;
            } }, { key: "firstLevel", get: function() {
              return Math.max(this.levelController.firstLevel, this.minAutoLevel);
            }, set: function(t3) {
              D2.log("set firstLevel:" + t3), this.levelController.firstLevel = t3;
            } }, { key: "startLevel", get: function() {
              return this.levelController.startLevel;
            }, set: function(t3) {
              D2.log("set startLevel:" + t3), -1 !== t3 && (t3 = Math.max(t3, this.minAutoLevel)), this.levelController.startLevel = t3;
            } }, { key: "capLevelToPlayerSize", get: function() {
              return this.config.capLevelToPlayerSize;
            }, set: function(t3) {
              var e3 = !!t3;
              e3 !== this.config.capLevelToPlayerSize && (e3 ? this.capLevelController.startCapping() : (this.capLevelController.stopCapping(), this.autoLevelCapping = -1, this.streamController.nextLevelSwitch()), this.config.capLevelToPlayerSize = e3);
            } }, { key: "autoLevelCapping", get: function() {
              return this._autoLevelCapping;
            }, set: function(t3) {
              this._autoLevelCapping !== t3 && (D2.log("set autoLevelCapping:" + t3), this._autoLevelCapping = t3);
            } }, { key: "bandwidthEstimate", get: function() {
              var t3 = this.abrController.bwEstimator;
              return t3 ? t3.getEstimate() : NaN;
            } }, { key: "ttfbEstimate", get: function() {
              var t3 = this.abrController.bwEstimator;
              return t3 ? t3.getEstimateTTFB() : NaN;
            } }, { key: "maxHdcpLevel", get: function() {
              return this._maxHdcpLevel;
            }, set: function(t3) {
              Ie2.indexOf(t3) > -1 && (this._maxHdcpLevel = t3);
            } }, { key: "autoLevelEnabled", get: function() {
              return -1 === this.levelController.manualLevel;
            } }, { key: "manualLevel", get: function() {
              return this.levelController.manualLevel;
            } }, { key: "minAutoLevel", get: function() {
              var t3 = this.levels, e3 = this.config.minAutoBitrate;
              if (!t3)
                return 0;
              for (var r3 = t3.length, i4 = 0; i4 < r3; i4++)
                if (t3[i4].maxBitrate >= e3)
                  return i4;
              return 0;
            } }, { key: "maxAutoLevel", get: function() {
              var t3, e3 = this.levels, r3 = this.autoLevelCapping, i4 = this.maxHdcpLevel;
              if (t3 = -1 === r3 && e3 && e3.length ? e3.length - 1 : r3, i4)
                for (var n3 = t3; n3--; ) {
                  var a2 = e3[n3].attrs["HDCP-LEVEL"];
                  if (a2 && a2 <= i4)
                    return n3;
                }
              return t3;
            } }, { key: "nextAutoLevel", get: function() {
              return Math.min(Math.max(this.abrController.nextAutoLevel, this.minAutoLevel), this.maxAutoLevel);
            }, set: function(t3) {
              this.abrController.nextAutoLevel = Math.max(this.minAutoLevel, t3);
            } }, { key: "playingDate", get: function() {
              return this.streamController.currentProgramDateTime;
            } }, { key: "mainForwardBufferInfo", get: function() {
              return this.streamController.getMainFwdBufferInfo();
            } }, { key: "audioTracks", get: function() {
              var t3 = this.audioTrackController;
              return t3 ? t3.audioTracks : [];
            } }, { key: "audioTrack", get: function() {
              var t3 = this.audioTrackController;
              return t3 ? t3.audioTrack : -1;
            }, set: function(t3) {
              var e3 = this.audioTrackController;
              e3 && (e3.audioTrack = t3);
            } }, { key: "subtitleTracks", get: function() {
              var t3 = this.subtitleTrackController;
              return t3 ? t3.subtitleTracks : [];
            } }, { key: "subtitleTrack", get: function() {
              var t3 = this.subtitleTrackController;
              return t3 ? t3.subtitleTrack : -1;
            }, set: function(t3) {
              var e3 = this.subtitleTrackController;
              e3 && (e3.subtitleTrack = t3);
            } }, { key: "media", get: function() {
              return this._media;
            } }, { key: "subtitleDisplay", get: function() {
              var t3 = this.subtitleTrackController;
              return !!t3 && t3.subtitleDisplay;
            }, set: function(t3) {
              var e3 = this.subtitleTrackController;
              e3 && (e3.subtitleDisplay = t3);
            } }, { key: "lowLatencyMode", get: function() {
              return this.config.lowLatencyMode;
            }, set: function(t3) {
              this.config.lowLatencyMode = t3;
            } }, { key: "liveSyncPosition", get: function() {
              return this.latencyController.liveSyncPosition;
            } }, { key: "latency", get: function() {
              return this.latencyController.latency;
            } }, { key: "maxLatency", get: function() {
              return this.latencyController.maxLatency;
            } }, { key: "targetLatency", get: function() {
              return this.latencyController.targetLatency;
            } }, { key: "drift", get: function() {
              return this.latencyController.drift;
            } }, { key: "forceStartLoad", get: function() {
              return this.streamController.forceStartLoad;
            } }], [{ key: "version", get: function() {
              return "1.4.0";
            } }, { key: "Events", get: function() {
              return T2;
            } }, { key: "ErrorTypes", get: function() {
              return E;
            } }, { key: "ErrorDetails", get: function() {
              return S3;
            } }, { key: "DefaultConfig", get: function() {
              return t2.defaultConfig ? t2.defaultConfig : Ha;
            }, set: function(e3) {
              t2.defaultConfig = e3;
            } }]), t2;
          }();
          return Wa.defaultConfig = void 0, Wa;
        }, "object" == typeof exports && "undefined" != typeof module ? module.exports = i2() : "function" == typeof define && define.amd ? define(i2) : (r = "undefined" != typeof globalThis ? globalThis : r || self).Hls = i2();
      }(false);
    }
  });

  // src/polyfills/index.ts
  var EventTarget = class {
    addEventListener() {
    }
    removeEventListener() {
    }
    dispatchEvent(_event) {
      return true;
    }
  };
  if (typeof DocumentFragment === "undefined") {
    class DocumentFragment3 extends EventTarget {
    }
    globalThis.DocumentFragment = DocumentFragment3;
  }
  var HTMLElement2 = class extends EventTarget {
  };
  var HTMLVideoElement2 = class extends EventTarget {
  };
  var customElements2 = {
    get(_name) {
      return void 0;
    },
    define(_name, _constructor, _options) {
    },
    upgrade(_root) {
    },
    whenDefined(_name) {
      return Promise.resolve(HTMLElement2);
    }
  };
  var _detail;
  var CustomEvent2 = class {
    constructor(typeArg, eventInitDict = {}) {
      __privateAdd(this, _detail, void 0);
      __privateSet(this, _detail, eventInitDict == null ? void 0 : eventInitDict.detail);
    }
    get detail() {
      return __privateGet(this, _detail);
    }
    initCustomEvent() {
    }
  };
  _detail = new WeakMap();
  function createElement(_tagName, _options) {
    return new HTMLElement2();
  }
  var globalThisShim = {
    document: {
      createElement
    },
    DocumentFragment,
    customElements: customElements2,
    CustomEvent: CustomEvent2,
    EventTarget,
    HTMLElement: HTMLElement2,
    HTMLVideoElement: HTMLVideoElement2
  };
  var isServer = typeof window === "undefined" || typeof globalThis.customElements === "undefined";
  var internalGlobalThis = isServer ? globalThisShim : globalThis;
  var internalDocument = isServer ? globalThisShim.document : globalThis.document;

  // node_modules/media-chrome/dist/constants.js
  var MediaUIEvents = {
    MEDIA_PLAY_REQUEST: "mediaplayrequest",
    MEDIA_PAUSE_REQUEST: "mediapauserequest",
    MEDIA_MUTE_REQUEST: "mediamuterequest",
    MEDIA_UNMUTE_REQUEST: "mediaunmuterequest",
    MEDIA_VOLUME_REQUEST: "mediavolumerequest",
    MEDIA_SEEK_REQUEST: "mediaseekrequest",
    MEDIA_AIRPLAY_REQUEST: "mediaairplayrequest",
    MEDIA_ENTER_FULLSCREEN_REQUEST: "mediaenterfullscreenrequest",
    MEDIA_EXIT_FULLSCREEN_REQUEST: "mediaexitfullscreenrequest",
    MEDIA_PREVIEW_REQUEST: "mediapreviewrequest",
    MEDIA_ENTER_PIP_REQUEST: "mediaenterpiprequest",
    MEDIA_EXIT_PIP_REQUEST: "mediaexitpiprequest",
    MEDIA_ENTER_CAST_REQUEST: "mediaentercastrequest",
    MEDIA_EXIT_CAST_REQUEST: "mediaexitcastrequest",
    MEDIA_SHOW_TEXT_TRACKS_REQUEST: "mediashowtexttracksrequest",
    MEDIA_HIDE_TEXT_TRACKS_REQUEST: "mediahidetexttracksrequest",
    MEDIA_SHOW_CAPTIONS_REQUEST: "mediashowcaptionsrequest",
    MEDIA_SHOW_SUBTITLES_REQUEST: "mediashowsubtitlesrequest",
    MEDIA_DISABLE_CAPTIONS_REQUEST: "mediadisablecaptionsrequest",
    MEDIA_DISABLE_SUBTITLES_REQUEST: "mediadisablesubtitlesrequest",
    MEDIA_PLAYBACK_RATE_REQUEST: "mediaplaybackraterequest",
    MEDIA_SEEK_TO_LIVE_REQUEST: "mediaseektoliverequest",
    REGISTER_MEDIA_STATE_RECEIVER: "registermediastatereceiver",
    UNREGISTER_MEDIA_STATE_RECEIVER: "unregistermediastatereceiver"
  };
  var MediaStateChangeEvents = {
    MEDIA_AIRPLAY_UNAVAILABLE: "mediaairplayunavailablechange",
    MEDIA_PIP_UNAVAILABLE: "mediapipunavailablechange",
    MEDIA_PAUSED: "mediapausedchange",
    MEDIA_HAS_PLAYED: "mediahasplayedchange",
    MEDIA_MUTED: "mediamutedchange",
    MEDIA_VOLUME_LEVEL: "mediavolumelevelchange",
    MEDIA_VOLUME: "mediavolumechange",
    MEDIA_VOLUME_UNAVAILABLE: "mediavolumeunavailablechange",
    MEDIA_IS_PIP: "mediaispipchange",
    MEDIA_IS_CASTING: "mediaiscastingchange",
    MEDIA_CAPTIONS_LIST: "mediacaptionslistchange",
    MEDIA_SUBTITLES_LIST: "mediasubtitleslistchange",
    MEDIA_CAPTIONS_SHOWING: "mediacaptionsshowingchange",
    MEDIA_SUBTITLES_SHOWING: "mediasubtitlesshowingchange",
    MEDIA_IS_FULLSCREEN: "mediaisfullscreenchange",
    MEDIA_PLAYBACK_RATE: "mediaplaybackratechange",
    MEDIA_CURRENT_TIME: "mediacurrenttimechange",
    MEDIA_DURATION: "mediadurationchange",
    MEDIA_SEEKABLE: "mediaseekablechange",
    MEDIA_PREVIEW_IMAGE: "mediapreviewimagechange",
    MEDIA_PREVIEW_COORDS: "mediapreviewcoordschange",
    MEDIA_LOADING: "medialoadingchange",
    USER_INACTIVE: "userinactivechange"
  };
  var MediaStateReceiverAttributes = {
    MEDIA_CHROME_ATTRIBUTES: "media-chrome-attributes",
    MEDIA_CONTROLLER: "media-controller"
  };
  var MediaUIAttributes = {
    MEDIA_AIRPLAY_UNAVAILABLE: "media-airplay-unavailable",
    MEDIA_FULLSCREEN_UNAVAILABLE: "media-fullscreen-unavailable",
    MEDIA_PIP_UNAVAILABLE: "media-pip-unavailable",
    MEDIA_CAST_UNAVAILABLE: "media-cast-unavailable",
    MEDIA_PAUSED: "media-paused",
    MEDIA_HAS_PLAYED: "media-has-played",
    MEDIA_MUTED: "media-muted",
    MEDIA_VOLUME_LEVEL: "media-volume-level",
    MEDIA_VOLUME: "media-volume",
    MEDIA_VOLUME_UNAVAILABLE: "media-volume-unavailable",
    MEDIA_IS_PIP: "media-is-pip",
    MEDIA_IS_CASTING: "media-is-casting",
    MEDIA_CAPTIONS_LIST: "media-captions-list",
    MEDIA_SUBTITLES_LIST: "media-subtitles-list",
    MEDIA_CAPTIONS_SHOWING: "media-captions-showing",
    MEDIA_SUBTITLES_SHOWING: "media-subtitles-showing",
    MEDIA_IS_FULLSCREEN: "media-is-fullscreen",
    MEDIA_PLAYBACK_RATE: "media-playback-rate",
    MEDIA_CURRENT_TIME: "media-current-time",
    MEDIA_DURATION: "media-duration",
    MEDIA_SEEKABLE: "media-seekable",
    MEDIA_PREVIEW_TIME: "media-preview-time",
    MEDIA_PREVIEW_IMAGE: "media-preview-image",
    MEDIA_PREVIEW_COORDS: "media-preview-coords",
    MEDIA_LOADING: "media-loading",
    MEDIA_BUFFERED: "media-buffered",
    MEDIA_STREAM_TYPE: "media-stream-type",
    MEDIA_TARGET_LIVE_WINDOW: "media-target-live-window",
    MEDIA_TIME_IS_LIVE: "media-time-is-live"
  };
  var StateChangeEventToAttributeMap = Object.entries(
    MediaStateChangeEvents
  ).reduce(
    (mapObj, [key, eventType]) => {
      const attrName = MediaUIAttributes[key];
      if (attrName) {
        mapObj[eventType] = attrName;
      }
      return mapObj;
    },
    { userinactivechange: "user-inactive" }
  );
  var AttributeToStateChangeEventMap = Object.entries(
    MediaUIAttributes
  ).reduce(
    (mapObj, [key, attrName]) => {
      const evtType = MediaStateChangeEvents[key];
      if (evtType) {
        mapObj[attrName] = evtType;
      }
      return mapObj;
    },
    { "user-inactive": "userinactivechange" }
  );
  var TextTrackKinds = {
    SUBTITLES: "subtitles",
    CAPTIONS: "captions",
    DESCRIPTIONS: "descriptions",
    CHAPTERS: "chapters",
    METADATA: "metadata"
  };
  var TextTrackModes = {
    DISABLED: "disabled",
    HIDDEN: "hidden",
    SHOWING: "showing"
  };
  var PointerTypes = {
    MOUSE: "mouse",
    PEN: "pen",
    TOUCH: "touch"
  };
  var AvailabilityStates = {
    UNAVAILABLE: "unavailable",
    UNSUPPORTED: "unsupported"
  };
  var StreamTypes = {
    LIVE: "live",
    ON_DEMAND: "on-demand",
    UNKNOWN: "unknown"
  };

  // node_modules/media-chrome/dist/labels/labels.js
  var nouns = {
    AUDIO_PLAYER: () => "audio player",
    VIDEO_PLAYER: () => "video player",
    VOLUME: () => "volume",
    SEEK: () => "seek",
    CLOSED_CAPTIONS: () => "closed captions",
    PLAYBACK_RATE: ({ playbackRate = 1 } = {}) => `current playback rate ${playbackRate}`,
    PLAYBACK_TIME: () => `playback time`,
    MEDIA_LOADING: () => `media loading`
  };
  var verbs = {
    PLAY: () => "play",
    PAUSE: () => "pause",
    MUTE: () => "mute",
    UNMUTE: () => "unmute",
    AIRPLAY: () => "air play",
    ENTER_CAST: () => "start casting",
    EXIT_CAST: () => "stop casting",
    ENTER_FULLSCREEN: () => "enter fullscreen mode",
    EXIT_FULLSCREEN: () => "exit fullscreen mode",
    ENTER_PIP: () => "enter picture in picture mode",
    EXIT_PIP: () => "exit picture in picture mode",
    SEEK_FORWARD_N_SECS: ({ seekOffset = 30 } = {}) => `seek forward ${seekOffset} seconds`,
    SEEK_BACK_N_SECS: ({ seekOffset = 30 } = {}) => `seek back ${seekOffset} seconds`,
    SEEK_LIVE: () => "seek to live",
    PLAYING_LIVE: () => "playing live"
  };
  var labels_default = {
    ...nouns,
    ...verbs
  };

  // node_modules/media-chrome/dist/utils/utils.js
  function constToCamel(word, upperFirst = false) {
    return word.split("_").map(function(x, i2) {
      return (i2 || upperFirst ? x[0].toUpperCase() : x[0].toLowerCase()) + x.slice(1).toLowerCase();
    }).join("");
  }
  function camelCase(name) {
    return name.replace(/[-_]([a-z])/g, ($0, $1) => $1.toUpperCase());
  }
  function isValidNumber(x) {
    return typeof x === "number" && !Number.isNaN(x) && Number.isFinite(x);
  }
  function isNumericString(str) {
    if (typeof str != "string")
      return false;
    return !isNaN(str) && !isNaN(parseFloat(str));
  }
  var delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

  // node_modules/media-chrome/dist/utils/time.js
  var UnitLabels = [
    {
      singular: "hour",
      plural: "hours"
    },
    {
      singular: "minute",
      plural: "minutes"
    },
    {
      singular: "second",
      plural: "seconds"
    }
  ];
  var toTimeUnitPhrase = (timeUnitValue, unitIndex) => {
    const unitLabel = timeUnitValue === 1 ? UnitLabels[unitIndex].singular : UnitLabels[unitIndex].plural;
    return `${timeUnitValue} ${unitLabel}`;
  };
  var formatAsTimePhrase = (seconds) => {
    if (!isValidNumber(seconds))
      return "";
    const positiveSeconds = Math.abs(seconds);
    const negative = positiveSeconds !== seconds;
    const secondsDateTime = new Date(0, 0, 0, 0, 0, positiveSeconds, 0);
    const timeParts = [
      secondsDateTime.getHours(),
      secondsDateTime.getMinutes(),
      secondsDateTime.getSeconds()
    ];
    const timeString = timeParts.map(
      (timeUnitValue, index) => timeUnitValue && toTimeUnitPhrase(timeUnitValue, index)
    ).filter((x) => x).join(", ");
    const negativeSuffix = negative ? " remaining" : "";
    return `${timeString}${negativeSuffix}`;
  };
  function formatTime(seconds, guide) {
    let negative = false;
    if (seconds < 0) {
      negative = true;
      seconds = 0 - seconds;
    }
    seconds = seconds < 0 ? 0 : seconds;
    let s = Math.floor(seconds % 60);
    let m2 = Math.floor(seconds / 60 % 60);
    let h3 = Math.floor(seconds / 3600);
    const gm = Math.floor(guide / 60 % 60);
    const gh = Math.floor(guide / 3600);
    if (isNaN(seconds) || seconds === Infinity) {
      h3 = m2 = s = "-";
    }
    h3 = h3 > 0 || gh > 0 ? h3 + ":" : "";
    m2 = ((h3 || gm >= 10) && m2 < 10 ? "0" + m2 : m2) + ":";
    s = s < 10 ? "0" + s : s;
    return (negative ? "-" : "") + h3 + m2 + s;
  }
  var emptyTimeRanges = Object.freeze({
    length: 0,
    start(index) {
      const unsignedIdx = index >>> 0;
      if (unsignedIdx >= this.length) {
        throw new DOMException(
          `Failed to execute 'start' on 'TimeRanges': The index provided (${unsignedIdx}) is greater than or equal to the maximum bound (${this.length}).`
        );
      }
      return 0;
    },
    end(index) {
      const unsignedIdx = index >>> 0;
      if (unsignedIdx >= this.length) {
        throw new DOMException(
          `Failed to execute 'end' on 'TimeRanges': The index provided (${unsignedIdx}) is greater than or equal to the maximum bound (${this.length}).`
        );
      }
      return 0;
    }
  });
  function serializeTimeRanges(timeRanges = emptyTimeRanges) {
    return Array.from(timeRanges).map((_2, i2) => [
      Number(timeRanges.start(i2).toFixed(3)),
      Number(timeRanges.end(i2).toFixed(3))
    ].join(":")).join(" ");
  }

  // node_modules/media-chrome/dist/utils/element-utils.js
  var updateIconText = (svg, value, selector = ".value") => {
    const node = svg.querySelector(selector);
    if (!node)
      return;
    node.textContent = value;
  };
  var getAllSlotted = (el, name) => {
    const slotSelector = `slot[name="${name}"]`;
    const slot = el.shadowRoot.querySelector(slotSelector);
    if (!slot)
      return [];
    return slot.children;
  };
  var getSlotted = (el, name) => getAllSlotted(el, name)[0];
  var containsComposedNode = (rootNode, childNode) => {
    if (!rootNode || !childNode)
      return false;
    if (rootNode.contains(childNode))
      return true;
    return containsComposedNode(rootNode, childNode.getRootNode().host);
  };
  var closestComposedNode = (childNode, selector) => {
    if (!childNode)
      return null;
    const closest = childNode.closest(selector);
    if (closest)
      return closest;
    return closestComposedNode(childNode.getRootNode().host, selector);
  };
  function getOrInsertCSSRule(styleParent, selectorText) {
    var _a;
    let style;
    for (style of styleParent.querySelectorAll("style")) {
      let cssRules;
      try {
        cssRules = (_a = style.sheet) == null ? void 0 : _a.cssRules;
      } catch {
        continue;
      }
      for (let rule of cssRules != null ? cssRules : [])
        if (rule.selectorText === selectorText)
          return rule;
    }
    if (!(style == null ? void 0 : style.sheet)) {
      return {
        style: {
          setProperty: () => {
          },
          removeProperty: () => {
          }
        }
      };
    }
    style.sheet.insertRule(`${selectorText}{}`, style.sheet.cssRules.length);
    return style.sheet.cssRules[style.sheet.cssRules.length - 1];
  }

  // node_modules/media-chrome/dist/utils/server-safe-globals.js
  var EventTarget2 = class {
    addEventListener() {
    }
    removeEventListener() {
    }
    dispatchEvent() {
      return true;
    }
  };
  var ResizeObserver2 = class {
    observe() {
    }
  };
  var windowShim = {
    ResizeObserver: ResizeObserver2,
    HTMLElement: class HTMLElement3 extends EventTarget2 {
    },
    DocumentFragment: class DocumentFragment2 extends EventTarget2 {
    },
    customElements: {
      get: function() {
      },
      define: function() {
      },
      whenDefined: function() {
      }
    },
    CustomEvent: function CustomEvent3() {
    },
    getComputedStyle: function() {
    }
  };
  var documentShim = {
    createElement: function() {
      return new windowShim.HTMLElement();
    },
    addEventListener() {
    },
    removeEventListener() {
    }
  };
  var isServer2 = typeof window === "undefined" || typeof window.customElements === "undefined";
  var Window = isServer2 ? windowShim : window;
  var Document = isServer2 ? documentShim : window.document;

  // node_modules/media-chrome/dist/media-chrome-button.js
  var __defProp2 = Object.defineProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var __accessCheck2 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet2 = (obj, member, getter) => {
    __accessCheck2(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd2 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet2 = (obj, member, value, setter) => {
    __accessCheck2(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _mediaController;
  var _clickListener;
  var _keyupListener;
  var _keydownListener;
  var template = Document.createElement("template");
  template.innerHTML = `
<style>
  :host {
    font: var(--media-font,
      var(--media-font-weight, bold)
      var(--media-font-size, 14px) /
      var(--media-text-content-height, var(--media-control-height, 24px))
      var(--media-font-family, helvetica neue, segoe ui, roboto, arial, sans-serif));
    color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
    background: var(--media-control-background, var(--media-secondary-color, rgb(20 20 30 / .7)));
    padding: var(--media-control-padding, 10px);
    display: inline-flex;
    align-items: center;
    justify-content: center;
    vertical-align: middle;
    box-sizing: border-box;
    transition: background .15s linear;
    pointer-events: auto;
    cursor: pointer;
  }

  ${""}
  :host(:focus-visible) {
    box-shadow: inset 0 0 0 2px rgb(27 127 204 / .9);
    outline: 0;
  }
  ${""}
  :host(:where(:focus)) {
    box-shadow: none;
    outline: 0;
  }

  :host(:hover) {
    background: var(--media-control-hover-background, rgba(50 50 70 / .7));
  }

  svg, img, ::slotted(svg), ::slotted(img) {
    width: var(--media-button-icon-width);
    height: var(--media-button-icon-height, var(--media-control-height, 24px));
    transform: var(--media-button-icon-transform);
    transition: var(--media-button-icon-transition);
    fill: var(--media-icon-color, var(--media-primary-color, rgb(238 238 238)));
    vertical-align: middle;
    max-width: 100%;
    max-height: 100%;
    min-width: 100%;
  }
</style>
`;
  var MediaChromeButton = class extends Window.HTMLElement {
    constructor(options = {}) {
      super();
      __privateAdd2(this, _mediaController, void 0);
      __publicField(this, "preventClick", false);
      __privateAdd2(this, _clickListener, (e) => {
        if (!this.preventClick) {
          this.handleClick(e);
        }
      });
      __privateAdd2(this, _keyupListener, (e) => {
        const { key } = e;
        if (!this.keysUsed.includes(key)) {
          this.removeEventListener("keyup", __privateGet2(this, _keyupListener));
          return;
        }
        if (!this.preventClick) {
          this.handleClick(e);
        }
      });
      __privateAdd2(this, _keydownListener, (e) => {
        const { metaKey, altKey, key } = e;
        if (metaKey || altKey || !this.keysUsed.includes(key)) {
          this.removeEventListener("keyup", __privateGet2(this, _keyupListener));
          return;
        }
        this.addEventListener("keyup", __privateGet2(this, _keyupListener), { once: true });
      });
      if (!this.shadowRoot) {
        this.attachShadow({ mode: "open" });
        const buttonHTML = template.content.cloneNode(true);
        this.nativeEl = buttonHTML;
        let slotTemplate13 = options.slotTemplate;
        if (!slotTemplate13) {
          slotTemplate13 = Document.createElement("template");
          slotTemplate13.innerHTML = `<slot>${options.defaultContent || ""}</slot>`;
        }
        this.nativeEl.appendChild(slotTemplate13.content.cloneNode(true));
        this.shadowRoot.appendChild(buttonHTML);
      }
      const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
      style.setProperty("display", `var(--media-control-display, var(--${this.localName}-display, inline-flex))`);
    }
    static get observedAttributes() {
      return ["disabled", MediaStateReceiverAttributes.MEDIA_CONTROLLER];
    }
    enable() {
      this.addEventListener("click", __privateGet2(this, _clickListener));
      this.addEventListener("keydown", __privateGet2(this, _keydownListener));
      this.setAttribute("tabindex", "0");
    }
    disable() {
      this.removeEventListener("click", __privateGet2(this, _clickListener));
      this.removeEventListener("keydown", __privateGet2(this, _keydownListener));
      this.removeEventListener("keyup", __privateGet2(this, _keyupListener));
      this.removeAttribute("tabindex");
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a, _b, _c, _d, _e;
      if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
        if (oldValue) {
          (_b = (_a = __privateGet2(this, _mediaController)) == null ? void 0 : _a.unassociateElement) == null ? void 0 : _b.call(_a, this);
          __privateSet2(this, _mediaController, null);
        }
        if (newValue) {
          __privateSet2(this, _mediaController, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
          (_e = (_d = __privateGet2(this, _mediaController)) == null ? void 0 : _d.associateElement) == null ? void 0 : _e.call(_d, this);
        }
      } else if (attrName === "disabled" && newValue !== oldValue) {
        if (newValue == null) {
          this.enable();
        } else {
          this.disable();
        }
      }
    }
    connectedCallback() {
      var _a, _b, _c;
      if (!this.hasAttribute("disabled")) {
        this.enable();
      }
      this.setAttribute("role", "button");
      const mediaControllerId = this.getAttribute(
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      );
      if (mediaControllerId) {
        __privateSet2(this, _mediaController, (_a = this.getRootNode()) == null ? void 0 : _a.getElementById(mediaControllerId));
        (_c = (_b = __privateGet2(this, _mediaController)) == null ? void 0 : _b.associateElement) == null ? void 0 : _c.call(_b, this);
      }
    }
    disconnectedCallback() {
      var _a, _b;
      this.disable();
      (_b = (_a = __privateGet2(this, _mediaController)) == null ? void 0 : _a.unassociateElement) == null ? void 0 : _b.call(_a, this);
      __privateSet2(this, _mediaController, null);
    }
    get keysUsed() {
      return ["Enter", " "];
    }
    handleClick(e) {
    }
  };
  _mediaController = /* @__PURE__ */ new WeakMap();
  _clickListener = /* @__PURE__ */ new WeakMap();
  _keyupListener = /* @__PURE__ */ new WeakMap();
  _keydownListener = /* @__PURE__ */ new WeakMap();
  if (!Window.customElements.get("media-chrome-button")) {
    Window.customElements.define("media-chrome-button", MediaChromeButton);
  }
  var media_chrome_button_default = MediaChromeButton;

  // node_modules/media-chrome/dist/media-airplay-button.js
  var airplayIcon = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M22.13 3H3.87a.87.87 0 0 0-.87.87v13.26a.87.87 0 0 0 .87.87h3.4L9 16H5V5h16v11h-4l1.72 2h3.4a.87.87 0 0 0 .87-.87V3.87a.87.87 0 0 0-.86-.87Zm-8.75 11.44a.5.5 0 0 0-.76 0l-4.91 5.73a.5.5 0 0 0 .38.83h9.82a.501.501 0 0 0 .38-.83l-4.91-5.73Z"/>
</svg>
`;
  var slotTemplate = Document.createElement("template");
  slotTemplate.innerHTML = `
  <slot name="airplay">${airplayIcon}</slot>
`;
  var MediaAirplayButton = class extends media_chrome_button_default {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_AIRPLAY_UNAVAILABLE
      ];
    }
    constructor(options = {}) {
      super({ slotTemplate, ...options });
    }
    connectedCallback() {
      this.setAttribute("aria-label", verbs.AIRPLAY());
      super.connectedCallback();
    }
    handleClick() {
      const evt = new Window.CustomEvent(MediaUIEvents.MEDIA_AIRPLAY_REQUEST, {
        composed: true,
        bubbles: true
      });
      this.dispatchEvent(evt);
    }
  };
  if (!Window.customElements.get("media-airplay-button")) {
    Window.customElements.define("media-airplay-button", MediaAirplayButton);
  }

  // node_modules/media-chrome/dist/media-cast-button.js
  var enterIcon = `<svg aria-hidden="true" viewBox="0 0 24 24"><g><path class="cast_caf_icon_arch0" d="M1,18 L1,21 L4,21 C4,19.3 2.66,18 1,18 L1,18 Z"/><path class="cast_caf_icon_arch1" d="M1,14 L1,16 C3.76,16 6,18.2 6,21 L8,21 C8,17.13 4.87,14 1,14 L1,14 Z"/><path class="cast_caf_icon_arch2" d="M1,10 L1,12 C5.97,12 10,16.0 10,21 L12,21 C12,14.92 7.07,10 1,10 L1,10 Z"/><path class="cast_caf_icon_box" d="M21,3 L3,3 C1.9,3 1,3.9 1,5 L1,8 L3,8 L3,5 L21,5 L21,19 L14,19 L14,21 L21,21 C22.1,21 23,20.1 23,19 L23,5 C23,3.9 22.1,3 21,3 L21,3 Z"/></g></svg>`;
  var exitIcon = `<svg aria-hidden="true" viewBox="0 0 24 24"><g><path class="cast_caf_icon_arch0" d="M1,18 L1,21 L4,21 C4,19.3 2.66,18 1,18 L1,18 Z"/><path class="cast_caf_icon_arch1" d="M1,14 L1,16 C3.76,16 6,18.2 6,21 L8,21 C8,17.13 4.87,14 1,14 L1,14 Z"/><path class="cast_caf_icon_arch2" d="M1,10 L1,12 C5.97,12 10,16.0 10,21 L12,21 C12,14.92 7.07,10 1,10 L1,10 Z"/><path class="cast_caf_icon_box" d="M21,3 L3,3 C1.9,3 1,3.9 1,5 L1,8 L3,8 L3,5 L21,5 L21,19 L14,19 L14,21 L21,21 C22.1,21 23,20.1 23,19 L23,5 C23,3.9 22.1,3 21,3 L21,3 Z"/><path class="cast_caf_icon_boxfill" d="M5,7 L5,8.63 C8,8.6 13.37,14 13.37,17 L19,17 L19,7 Z"/></g></svg>`;
  var slotTemplate2 = Document.createElement("template");
  slotTemplate2.innerHTML = `
  <style>
  :host([${MediaUIAttributes.MEDIA_IS_CASTING}]) slot:not([name=exit]) > *,
  :host([${MediaUIAttributes.MEDIA_IS_CASTING}]) ::slotted(:not([slot=exit])) {
    display: none !important;
  }

  ${""}
  :host(:not([${MediaUIAttributes.MEDIA_IS_CASTING}])) slot:not([name=enter]) > *,
  :host(:not([${MediaUIAttributes.MEDIA_IS_CASTING}])) ::slotted(:not([slot=enter])) {
    display: none !important;
  }
  </style>

  <slot name="enter">${enterIcon}</slot>
  <slot name="exit">${exitIcon}</slot>
`;
  var updateAriaLabel = (el) => {
    const isCast = el.getAttribute(MediaUIAttributes.MEDIA_IS_CASTING) != null;
    const label = isCast ? verbs.EXIT_CAST() : verbs.ENTER_CAST();
    el.setAttribute("aria-label", label);
  };
  var MediaCastButton = class extends media_chrome_button_default {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_IS_CASTING,
        MediaUIAttributes.MEDIA_CAST_UNAVAILABLE
      ];
    }
    constructor(options = {}) {
      super({ slotTemplate: slotTemplate2, ...options });
    }
    connectedCallback() {
      updateAriaLabel(this);
      super.connectedCallback();
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === MediaUIAttributes.MEDIA_IS_CASTING) {
        updateAriaLabel(this);
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
    handleClick() {
      const eventName = this.getAttribute(MediaUIAttributes.MEDIA_IS_CASTING) != null ? MediaUIEvents.MEDIA_EXIT_CAST_REQUEST : MediaUIEvents.MEDIA_ENTER_CAST_REQUEST;
      this.dispatchEvent(
        new Window.CustomEvent(eventName, { composed: true, bubbles: true })
      );
    }
  };
  if (!Window.customElements.get("media-cast-button")) {
    Window.customElements.define("media-cast-button", MediaCastButton);
  }

  // node_modules/media-chrome/dist/media-gesture-receiver.js
  var __accessCheck3 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet3 = (obj, member, getter) => {
    __accessCheck3(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd3 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet3 = (obj, member, value, setter) => {
    __accessCheck3(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _mediaController2;
  var template2 = Document.createElement("template");
  template2.innerHTML = `
<style>
  :host {
    display: var(--media-control-display, var(--media-gesture-receiver-display, inline-block));
    box-sizing: border-box;
  }
</style>
`;
  var MediaGestureReceiver = class extends Window.HTMLElement {
    constructor(options = {}) {
      super();
      __privateAdd3(this, _mediaController2, void 0);
      if (!this.shadowRoot) {
        const shadow = this.attachShadow({ mode: "open" });
        const buttonHTML = template2.content.cloneNode(true);
        this.nativeEl = buttonHTML;
        let slotTemplate13 = options.slotTemplate;
        if (!slotTemplate13) {
          slotTemplate13 = Document.createElement("template");
          slotTemplate13.innerHTML = `<slot>${options.defaultContent || ""}</slot>`;
        }
        this.nativeEl.appendChild(slotTemplate13.content.cloneNode(true));
        shadow.appendChild(buttonHTML);
      }
    }
    static get observedAttributes() {
      return [MediaStateReceiverAttributes.MEDIA_CONTROLLER, MediaUIAttributes.MEDIA_PAUSED];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a, _b, _c, _d, _e;
      if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
        if (oldValue) {
          (_b = (_a = __privateGet3(this, _mediaController2)) == null ? void 0 : _a.unassociateElement) == null ? void 0 : _b.call(_a, this);
          __privateSet3(this, _mediaController2, null);
        }
        if (newValue) {
          __privateSet3(this, _mediaController2, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
          (_e = (_d = __privateGet3(this, _mediaController2)) == null ? void 0 : _d.associateElement) == null ? void 0 : _e.call(_d, this);
        }
      }
    }
    connectedCallback() {
      var _a, _b, _c, _d;
      this.setAttribute("tabindex", -1);
      this.setAttribute("aria-hidden", true);
      __privateSet3(this, _mediaController2, getMediaControllerEl(this));
      if (this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER)) {
        (_b = (_a = __privateGet3(this, _mediaController2)) == null ? void 0 : _a.associateElement) == null ? void 0 : _b.call(_a, this);
      }
      (_c = __privateGet3(this, _mediaController2)) == null ? void 0 : _c.addEventListener("pointerdown", this);
      (_d = __privateGet3(this, _mediaController2)) == null ? void 0 : _d.addEventListener("click", this);
    }
    disconnectedCallback() {
      var _a, _b, _c, _d;
      if (this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER)) {
        (_b = (_a = __privateGet3(this, _mediaController2)) == null ? void 0 : _a.unassociateElement) == null ? void 0 : _b.call(_a, this);
      }
      (_c = __privateGet3(this, _mediaController2)) == null ? void 0 : _c.removeEventListener("pointerdown", this);
      (_d = __privateGet3(this, _mediaController2)) == null ? void 0 : _d.removeEventListener("click", this);
      __privateSet3(this, _mediaController2, null);
    }
    handleEvent(event) {
      var _a;
      const composedTarget = (_a = event.composedPath()) == null ? void 0 : _a[0];
      const allowList = ["video", "media-controller"];
      if (!allowList.includes(composedTarget == null ? void 0 : composedTarget.localName))
        return;
      if (event.type === "pointerdown") {
        this._pointerType = event.pointerType;
      } else if (event.type === "click") {
        const { clientX, clientY } = event;
        const { left, top, width, height } = this.getBoundingClientRect();
        const x = clientX - left;
        const y = clientY - top;
        if (x < 0 || y < 0 || x > width || y > height || width === 0 && height === 0) {
          return;
        }
        const { pointerType = this._pointerType } = event;
        this._pointerType = void 0;
        if (pointerType === PointerTypes.TOUCH) {
          this.handleTap(event);
          return;
        } else if (pointerType === PointerTypes.MOUSE) {
          this.handleMouseClick(event);
          return;
        }
      }
    }
    handleTap(e) {
    }
    handleMouseClick(e) {
      const eventName = this.getAttribute(MediaUIAttributes.MEDIA_PAUSED) != null ? MediaUIEvents.MEDIA_PLAY_REQUEST : MediaUIEvents.MEDIA_PAUSE_REQUEST;
      this.dispatchEvent(
        new Window.CustomEvent(eventName, { composed: true, bubbles: true })
      );
    }
  };
  _mediaController2 = /* @__PURE__ */ new WeakMap();
  function getMediaControllerEl(controlEl) {
    var _a;
    const mediaControllerId = controlEl.getAttribute(
      MediaStateReceiverAttributes.MEDIA_CONTROLLER
    );
    if (mediaControllerId) {
      return (_a = controlEl.getRootNode()) == null ? void 0 : _a.getElementById(mediaControllerId);
    }
    return closestComposedNode(controlEl, "media-controller");
  }
  if (!Window.customElements.get("media-gesture-receiver")) {
    Window.customElements.define("media-gesture-receiver", MediaGestureReceiver);
  }

  // node_modules/media-chrome/dist/media-container.js
  var template3 = Document.createElement("template");
  template3.innerHTML = `
  <style>
    ${""}
    :host([media-is-fullscreen])  ::slotted([slot=media]) {
      outline: none;
    }

    :host {
      box-sizing: border-box;
      position: relative;
      display: inline-block;
      line-height: 0;
      background-color: var(--media-background-color, #000);
    }

    :host(:not([audio])) [part~=layer]:not([part~=media-layer]) {
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
      display: flex;
      flex-flow: column nowrap;
      align-items: start;
      pointer-events: none;
      background: none;
    }

    ${""}
    :host([audio]) [part~=layer][part~=gesture-layer] {
      height: 0;
      display: block;
    }

    ${""}
    :host(:not([audio])[gestures-disabled]) ::slotted([slot=gestures-chrome]),
    :host(:not([audio])[gestures-disabled]) media-gesture-receiver[slot=gestures-chrome] {
      display: none;
    }

    ${""}
    ::slotted(:not([slot=media]):not([slot=poster]):not(media-loading-indicator)) {
      pointer-events: auto;
    }

    :host(:not([audio])) *[part~=layer][part~=centered-layer] {
      align-items: center;
      justify-content: center;
    }

    :host(:not([audio])) ::slotted(media-gesture-receiver[slot=gestures-chrome]),
    :host(:not([audio])) media-gesture-receiver[slot=gestures-chrome] {
      align-self: stretch;
      flex-grow: 1;
    }

    slot[name=middle-chrome] {
      display: inline;
      flex-grow: 1;
      pointer-events: none;
      background: none;
    }

    ${""}
    ::slotted([slot=media]),
    ::slotted([slot=poster]) {
      width: 100%;
      height: 100%;
    }

    ${""}
    :host(:not([audio])) .spacer {
      flex-grow: 1;
    }

    ${""}
    :host(:-webkit-full-screen) {
      ${""}
      width: 100% !important;
      height: 100% !important;
    }

    ${""}
    ::slotted(:not([slot=media]):not([no-auto-hide])) {
      opacity: 1;
      transition: opacity 0.25s;
    }

    ${""}
    :host([user-inactive]:not([${MediaUIAttributes.MEDIA_PAUSED}]):not([${MediaUIAttributes.MEDIA_IS_CASTING}]):not([audio])) ::slotted(:not([slot=media]):not([no-auto-hide])) {
      opacity: 0;
      transition: opacity 1s;
    }

    ::slotted(media-control-bar)  {
      align-self: stretch;
    }

    :host([${MediaUIAttributes.MEDIA_HAS_PLAYED}]) ::slotted([slot=poster]) {
      display: none;
    }
  </style>

  <slot name="media" part="layer media-layer"></slot>
  <slot name="poster" part="layer poster-layer"></slot>
  <slot name="gestures-chrome" part="layer gesture-layer">
    <media-gesture-receiver slot="gestures-chrome"></media-gesture-receiver>
  </slot>
  <span part="layer vertical-layer">
    <slot name="top-chrome" part="top chrome"></slot>
    <slot name="middle-chrome" part="middle chrome"></slot>
    <slot name="centered-chrome" part="layer centered-layer center centered chrome"></slot>
    ${""}
    <slot part="bottom chrome"></slot>
  </span>
`;
  var MEDIA_UI_ATTRIBUTE_NAMES = Object.values(MediaUIAttributes);
  var defaultBreakpoints = "sm:384 md:576 lg:768 xl:960";
  var resizeCallback = (entries) => {
    var _a;
    for (const entry of entries) {
      const container = entry.target;
      if (!container.isConnected)
        continue;
      const breakpoints = (_a = container.getAttribute("breakpoints")) != null ? _a : defaultBreakpoints;
      const ranges = createBreakpointMap(breakpoints);
      const activeBreakpoints = getBreakpoints(ranges, entry.contentRect);
      Object.keys(ranges).forEach((name) => {
        if (activeBreakpoints.includes(name)) {
          if (!container.hasAttribute(`breakpoint-${name}`)) {
            container.setAttribute(`breakpoint-${name}`, "");
          }
          return;
        }
        container.removeAttribute(`breakpoint-${name}`);
      });
    }
  };
  function createBreakpointMap(breakpoints) {
    const pairs = breakpoints.split(/\s+/);
    return Object.fromEntries(pairs.map((pair) => pair.split(":")));
  }
  function getBreakpoints(breakpoints, rect) {
    return Object.keys(breakpoints).filter((name) => {
      return rect.width >= breakpoints[name];
    });
  }
  var MediaContainer = class extends Window.HTMLElement {
    constructor() {
      super();
      if (!this.shadowRoot) {
        this.attachShadow({ mode: "open" });
        this.shadowRoot.appendChild(template3.content.cloneNode(true));
      }
      const mutationCallback = (mutationsList) => {
        const media = this.media;
        for (let mutation of mutationsList) {
          if (mutation.type === "childList") {
            mutation.removedNodes.forEach((node) => {
              if (node.slot == "media" && mutation.target == this) {
                let previousSibling = mutation.previousSibling && mutation.previousSibling.previousElementSibling;
                if (!previousSibling || !media) {
                  this.mediaUnsetCallback(node);
                } else {
                  let wasFirst = previousSibling.slot !== "media";
                  while ((previousSibling = previousSibling.previousSibling) !== null) {
                    if (previousSibling.slot == "media")
                      wasFirst = false;
                  }
                  if (wasFirst)
                    this.mediaUnsetCallback(node);
                }
              }
            });
            if (media) {
              mutation.addedNodes.forEach((node) => {
                if (node == media) {
                  this.handleMediaUpdated(media).then(
                    (media2) => this.mediaSetCallback(media2)
                  );
                }
              });
            }
          }
        }
      };
      const mutationObserver = new MutationObserver(mutationCallback);
      mutationObserver.observe(this, { childList: true, subtree: true });
      const resizeObserver = new ResizeObserver(resizeCallback);
      this.resizeObserver = resizeObserver;
      resizeObserver.observe(this);
      let currentMedia = this.media;
      let chainedSlot = this.querySelector(":scope > slot[slot=media]");
      if (chainedSlot) {
        chainedSlot.addEventListener("slotchange", () => {
          const slotEls = chainedSlot.assignedElements({ flatten: true });
          if (!slotEls.length) {
            this.mediaUnsetCallback(currentMedia);
            return;
          }
          if (this.media) {
            currentMedia = this.media;
            this.handleMediaUpdated(this.media).then(
              (media) => this.mediaSetCallback(media)
            );
          }
        });
      }
    }
    static get observedAttributes() {
      return ["autohide", "gestures-disabled"].concat(MEDIA_UI_ATTRIBUTE_NAMES);
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName.toLowerCase() == "autohide") {
        this.autohide = newValue;
      }
    }
    get media() {
      let media = this.querySelector(":scope > [slot=media]");
      if ((media == null ? void 0 : media.nodeName) == "SLOT")
        media = media.assignedElements({ flatten: true })[0];
      return media;
    }
    mediaSetCallback(media) {
      this._mediaClickPlayToggle = () => {
        const eventName = media.paused ? MediaUIEvents.MEDIA_PLAY_REQUEST : MediaUIEvents.MEDIA_PAUSE_REQUEST;
        this.dispatchEvent(
          new Window.CustomEvent(eventName, { composed: true, bubbles: true })
        );
      };
    }
    handleMediaUpdated(media) {
      const resolveMediaPromise = (media2) => {
        return Promise.resolve(media2);
      };
      const rejectMediaPromise = (media2) => {
        console.error(
          '<media-chrome>: Media element set with slot="media" does not appear to be compatible.',
          media2
        );
        return Promise.reject(media2);
      };
      if (!media) {
        return rejectMediaPromise(media);
      }
      const mediaName = media.nodeName.toLowerCase();
      if (mediaName.includes("-")) {
        return Window.customElements.whenDefined(mediaName).then(() => {
          return resolveMediaPromise(media);
        });
      }
      return resolveMediaPromise(media);
    }
    mediaUnsetCallback(node) {
    }
    connectedCallback() {
      const isAudioChrome = this.getAttribute("audio") != null;
      const label = isAudioChrome ? nouns.AUDIO_PLAYER() : nouns.VIDEO_PLAYER();
      this.setAttribute("role", "region");
      this.setAttribute("aria-label", label);
      if (this.media) {
        this.handleMediaUpdated(this.media).then(
          (media) => this.mediaSetCallback(media)
        );
      }
      this.setAttribute("user-inactive", "user-inactive");
      const setInactive = () => {
        if (this.autohide < 0)
          return;
        if (this.hasAttribute("user-inactive"))
          return;
        this.setAttribute("user-inactive", "");
        const evt = new Window.CustomEvent(
          MediaStateChangeEvents.USER_INACTIVE,
          { composed: true, bubbles: true, detail: true }
        );
        this.dispatchEvent(evt);
      };
      const setActive = () => {
        if (!this.hasAttribute("user-inactive"))
          return;
        this.removeAttribute("user-inactive");
        const evt = new Window.CustomEvent(
          MediaStateChangeEvents.USER_INACTIVE,
          { composed: true, bubbles: true, detail: false }
        );
        this.dispatchEvent(evt);
      };
      const scheduleInactive = () => {
        setActive();
        Window.clearTimeout(this._inactiveTimeout);
        if (this.autohide < 0)
          return;
        this._inactiveTimeout = Window.setTimeout(() => {
          setInactive();
        }, this.autohide * 1e3);
      };
      this.addEventListener("keyup", () => {
        scheduleInactive();
      });
      this.addEventListener("pointerup", (e) => {
        if (e.pointerType === "touch") {
          if ([this, this.media].includes(e.target) && !this.hasAttribute("user-inactive")) {
            setInactive();
          } else {
            scheduleInactive();
          }
        } else if (e.composedPath().some((el) => {
          var _a;
          return ["media-play-button", "media-fullscreen-button"].includes((_a = el == null ? void 0 : el.nodeName) == null ? void 0 : _a.toLowerCase());
        })) {
          scheduleInactive();
        }
      });
      this.addEventListener("pointermove", (e) => {
        if (e.pointerType !== "mouse")
          return;
        if (e.target === this)
          return;
        setActive();
        Window.clearTimeout(this._inactiveTimeout);
        if ([this, this.media].includes(e.target)) {
          scheduleInactive();
        }
      });
      this.addEventListener("mouseleave", () => {
        setInactive();
      });
      this.addEventListener("keyup", () => {
        this.setAttribute("media-keyboard-control", "");
      });
      Window.addEventListener("mouseup", () => {
        this.removeAttribute("media-keyboard-control");
      });
    }
    set autohide(seconds) {
      seconds = Number(seconds);
      this._autohide = isNaN(seconds) ? 0 : seconds;
    }
    get autohide() {
      return this._autohide === void 0 ? 2 : this._autohide;
    }
  };
  if (!Window.customElements.get("media-container-temp")) {
    Window.customElements.define("media-container-temp", MediaContainer);
  }
  var media_container_default = MediaContainer;

  // node_modules/media-chrome/dist/utils/attribute-token-list.js
  var __accessCheck4 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet4 = (obj, member, getter) => {
    __accessCheck4(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd4 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet4 = (obj, member, value, setter) => {
    __accessCheck4(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _el;
  var _attr;
  var _tokens;
  var AttributeTokenList = class {
    constructor(el, attr) {
      __privateAdd4(this, _el, void 0);
      __privateAdd4(this, _attr, void 0);
      __privateAdd4(this, _tokens, /* @__PURE__ */ new Set());
      __privateSet4(this, _el, el);
      __privateSet4(this, _attr, attr);
    }
    [Symbol.iterator]() {
      return __privateGet4(this, _tokens).values();
    }
    get length() {
      return __privateGet4(this, _tokens).size;
    }
    get value() {
      var _a;
      return (_a = [...__privateGet4(this, _tokens)].join(" ")) != null ? _a : "";
    }
    set value(val) {
      var _a;
      if (val === this.value)
        return;
      __privateSet4(this, _tokens, /* @__PURE__ */ new Set());
      this.add(...(_a = val == null ? void 0 : val.split(" ")) != null ? _a : []);
    }
    toString() {
      return this.value;
    }
    item(index) {
      return [...__privateGet4(this, _tokens)][index];
    }
    values() {
      return __privateGet4(this, _tokens).values();
    }
    keys() {
      return __privateGet4(this, _tokens).keys();
    }
    forEach(callback) {
      __privateGet4(this, _tokens).forEach(callback);
    }
    add(...tokens) {
      var _a, _b;
      tokens.forEach((t) => __privateGet4(this, _tokens).add(t));
      if (this.value === "" && !((_a = __privateGet4(this, _el)) == null ? void 0 : _a.hasAttribute(`${__privateGet4(this, _attr)}`))) {
        return;
      }
      (_b = __privateGet4(this, _el)) == null ? void 0 : _b.setAttribute(`${__privateGet4(this, _attr)}`, `${this.value}`);
    }
    remove(...tokens) {
      var _a;
      tokens.forEach((t) => __privateGet4(this, _tokens).delete(t));
      (_a = __privateGet4(this, _el)) == null ? void 0 : _a.setAttribute(`${__privateGet4(this, _attr)}`, `${this.value}`);
    }
    contains(token) {
      return __privateGet4(this, _tokens).has(token);
    }
    toggle(token, force) {
      if (typeof force !== "undefined") {
        if (force) {
          this.add(token);
          return true;
        } else {
          this.remove(token);
          return false;
        }
      }
      if (this.contains(token)) {
        this.remove(token);
        return false;
      }
      this.add(token);
      return true;
    }
    replace(oldToken, newToken) {
      this.remove(oldToken);
      this.add(newToken);
    }
  };
  _el = /* @__PURE__ */ new WeakMap();
  _attr = /* @__PURE__ */ new WeakMap();
  _tokens = /* @__PURE__ */ new WeakMap();

  // node_modules/media-chrome/dist/utils/captions.js
  var splitTextTracksStr = (textTracksStr = "") => textTracksStr.split(/\s+/);
  var parseTextTrackStr = (textTrackStr = "") => {
    const [language, encodedLabel] = textTrackStr.split(":");
    const label = encodedLabel ? decodeURIComponent(encodedLabel) : void 0;
    return {
      language,
      label
    };
  };
  var parseTextTracksStr = (textTracksStr = "", textTrackLikeObj = {}) => {
    return splitTextTracksStr(textTracksStr).map((textTrackStr) => {
      const textTrackObj = parseTextTrackStr(textTrackStr);
      return {
        ...textTrackLikeObj,
        ...textTrackObj
      };
    });
  };
  var parseTracks = (trackOrTracks) => {
    if (Array.isArray(trackOrTracks)) {
      return trackOrTracks.map((trackObjOrStr) => {
        if (typeof trackObjOrStr === "string") {
          return parseTextTrackStr(trackObjOrStr);
        }
        return trackObjOrStr;
      });
    }
    if (typeof trackOrTracks === "string") {
      return parseTextTracksStr(trackOrTracks);
    }
    return [trackOrTracks];
  };
  var formatTextTrackObj = ({ label, language } = {}) => {
    if (!label)
      return language;
    return `${language}:${encodeURIComponent(label)}`;
  };
  var stringifyTextTrackList = (textTracks = []) => {
    return Array.prototype.map.call(textTracks, formatTextTrackObj).join(" ");
  };
  var isMatchingPropOf = (key, value) => (obj) => obj[key] === value;
  var textTrackObjAsPred = (filterObj) => {
    const preds = Object.entries(filterObj).map(([key, value]) => {
      return isMatchingPropOf(key, value);
    });
    return (textTrack) => preds.every((pred) => pred(textTrack));
  };
  var updateTracksModeTo = (mode, tracks = [], tracksToUpdate = []) => {
    const preds = parseTracks(tracksToUpdate).map(textTrackObjAsPred);
    const isTrackToUpdate = (textTrack) => {
      return preds.some((pred) => pred(textTrack));
    };
    Array.from(tracks).filter(isTrackToUpdate).forEach((textTrack) => {
      textTrack.mode = mode;
    });
  };
  var getTextTracksList = (media, filterPredOrObj = () => true) => {
    if (!(media == null ? void 0 : media.textTracks))
      return [];
    const filterPred = typeof filterPredOrObj === "function" ? filterPredOrObj : textTrackObjAsPred(filterPredOrObj);
    return Array.from(media.textTracks).filter(filterPred);
  };
  var isCCOn = (el) => {
    const showingCaptions = !!el.getAttribute(
      MediaUIAttributes.MEDIA_CAPTIONS_SHOWING
    );
    const showingSubtitlesAsCaptions = !el.hasAttribute("no-subtitles-fallback") && !!el.getAttribute(MediaUIAttributes.MEDIA_SUBTITLES_SHOWING);
    return showingCaptions || showingSubtitlesAsCaptions;
  };
  var toggleSubsCaps = (el, forceOff = false) => {
    var _a, _b, _c, _d;
    const ccIsOn = isCCOn(el);
    if (ccIsOn) {
      const captionsShowingStr = el.getAttribute(
        MediaUIAttributes.MEDIA_CAPTIONS_SHOWING
      );
      if (captionsShowingStr) {
        const evt = new window.CustomEvent(
          MediaUIEvents.MEDIA_DISABLE_CAPTIONS_REQUEST,
          { composed: true, bubbles: true, detail: captionsShowingStr }
        );
        el.dispatchEvent(evt);
      }
      const subtitlesShowingStr = el.getAttribute(
        MediaUIAttributes.MEDIA_SUBTITLES_SHOWING
      );
      if (subtitlesShowingStr && !el.hasAttribute("no-subtitles-fallback")) {
        const evt = new window.CustomEvent(
          MediaUIEvents.MEDIA_DISABLE_SUBTITLES_REQUEST,
          { composed: true, bubbles: true, detail: subtitlesShowingStr }
        );
        el.dispatchEvent(evt);
      }
    } else if (!forceOff) {
      const [ccTrackStr] = (_b = splitTextTracksStr(
        (_a = el.getAttribute(MediaUIAttributes.MEDIA_CAPTIONS_LIST)) != null ? _a : ""
      )) != null ? _b : [];
      if (ccTrackStr) {
        const evt = new window.CustomEvent(
          MediaUIEvents.MEDIA_SHOW_CAPTIONS_REQUEST,
          { composed: true, bubbles: true, detail: ccTrackStr }
        );
        el.dispatchEvent(evt);
      } else if (!el.hasAttribute("no-subtitles-fallback")) {
        const [subTrackStr] = (_d = splitTextTracksStr(
          (_c = el.getAttribute(MediaUIAttributes.MEDIA_SUBTITLES_LIST)) != null ? _c : ""
        )) != null ? _d : [];
        if (subTrackStr) {
          const evt = new window.CustomEvent(
            MediaUIEvents.MEDIA_SHOW_SUBTITLES_REQUEST,
            { composed: true, bubbles: true, detail: subTrackStr }
          );
          el.dispatchEvent(evt);
        }
      } else {
        console.error(
          "Attempting to enable closed captions but none are available! Please verify your media content if this is unexpected."
        );
      }
    }
  };

  // node_modules/media-chrome/dist/utils/fullscreenApi.js
  var fullscreenApi = {
    enter: "requestFullscreen",
    exit: "exitFullscreen",
    event: "fullscreenchange",
    element: "fullscreenElement",
    error: "fullscreenerror",
    enabled: "fullscreenEnabled"
  };
  if (Document.fullscreenElement === void 0) {
    fullscreenApi.enter = "webkitRequestFullScreen";
    fullscreenApi.exit = Document.webkitExitFullscreen != null ? "webkitExitFullscreen" : "webkitCancelFullScreen";
    fullscreenApi.event = "webkitfullscreenchange";
    fullscreenApi.element = "webkitFullscreenElement";
    fullscreenApi.error = "webkitfullscreenerror";
    fullscreenApi.enabled = "webkitFullscreenEnabled";
  }

  // node_modules/media-chrome/dist/utils/platform-tests.js
  var testMediaEl;
  var getTestMediaEl = () => {
    var _a, _b;
    if (testMediaEl)
      return testMediaEl;
    testMediaEl = (_b = (_a = Document) == null ? void 0 : _a.createElement) == null ? void 0 : _b.call(_a, "video");
    return testMediaEl;
  };
  var hasVolumeSupportAsync = async (mediaEl = getTestMediaEl()) => {
    if (!mediaEl)
      return false;
    const prevVolume = mediaEl.volume;
    mediaEl.volume = prevVolume / 2 + 0.1;
    await delay(0);
    return mediaEl.volume !== prevVolume;
  };
  var hasPipSupport = (mediaEl = getTestMediaEl()) => typeof (mediaEl == null ? void 0 : mediaEl.requestPictureInPicture) === "function";
  var hasFullscreenSupport = (mediaEl = getTestMediaEl()) => {
    let fullscreenEnabled = Document[fullscreenApi.enabled];
    if (!fullscreenEnabled && mediaEl) {
      fullscreenEnabled = "webkitSupportsFullscreen" in mediaEl;
    }
    return fullscreenEnabled;
  };
  var fullscreenSupported = hasFullscreenSupport();
  var pipSupported = hasPipSupport();
  var airplaySupported = !!Window.WebKitPlaybackTargetAvailabilityEvent;
  var castSupported = !!Window.chrome;

  // node_modules/media-chrome/dist/controller.js
  var volumeSupported;
  var volumeSupportPromise = hasVolumeSupportAsync().then((supported) => {
    volumeSupported = supported;
    return volumeSupported;
  });
  var StreamTypeValues = Object.values(StreamTypes);
  var getSubtitleTracks = (controller) => {
    return getTextTracksList(controller.media, { kind: TextTrackKinds.SUBTITLES });
  };
  var getCaptionTracks = (controller) => {
    return getTextTracksList(controller.media, { kind: TextTrackKinds.CAPTIONS });
  };
  var getShowingSubtitleTracks = (controller) => {
    return getTextTracksList(controller.media, {
      kind: TextTrackKinds.SUBTITLES,
      mode: TextTrackModes.SHOWING
    });
  };
  var getShowingCaptionTracks = (controller) => {
    return getTextTracksList(controller.media, {
      kind: TextTrackKinds.CAPTIONS,
      mode: TextTrackModes.SHOWING
    });
  };
  var MediaUIStates = {
    MEDIA_PAUSED: {
      get: function(controller) {
        const { media } = controller;
        return media ? media.paused : true;
      },
      mediaEvents: ["play", "pause", "emptied"]
    },
    MEDIA_HAS_PLAYED: {
      get: function(controller) {
        const { media } = controller;
        if (!media)
          return false;
        return !media.paused;
      },
      mediaEvents: ["playing", "emptied"]
    },
    MEDIA_PLAYBACK_RATE: {
      get: function(controller) {
        const { media } = controller;
        if (!media || typeof media.playbackRate == "undefined") {
          return 1;
        }
        return media.playbackRate;
      },
      mediaEvents: ["ratechange", "loadstart"]
    },
    MEDIA_MUTED: {
      get: function(controller) {
        const { media } = controller;
        if (!media || typeof media.muted == "undefined") {
          return false;
        }
        return media.muted;
      },
      mediaEvents: ["volumechange"]
    },
    MEDIA_VOLUME: {
      get: function(controller) {
        const { media } = controller;
        if (!media || typeof media.volume == "undefined") {
          return 1;
        }
        return Number(media.volume);
      },
      mediaEvents: ["volumechange"]
    },
    MEDIA_VOLUME_LEVEL: {
      get: function(controller) {
        const { media } = controller;
        let level = "high";
        if (!media || typeof media.volume == "undefined") {
          return level;
        }
        const { muted, volume } = media;
        if (volume === 0 || muted) {
          level = "off";
        } else if (volume < 0.5) {
          level = "low";
        } else if (volume < 0.75) {
          level = "medium";
        }
        return level;
      },
      mediaEvents: ["volumechange"]
    },
    MEDIA_CURRENT_TIME: {
      get: function(controller) {
        const { media } = controller;
        if (!media || typeof media.currentTime == "undefined") {
          return 0;
        }
        return media.currentTime;
      },
      mediaEvents: ["timeupdate", "loadedmetadata"]
    },
    MEDIA_DURATION: {
      get: function(controller) {
        const { media } = controller;
        if (!media || !Number.isFinite(media.duration)) {
          return NaN;
        }
        return media.duration;
      },
      mediaEvents: ["durationchange", "loadedmetadata", "emptied"]
    },
    MEDIA_SEEKABLE: {
      get: function(controller) {
        var _a;
        const { media } = controller;
        if (!((_a = media == null ? void 0 : media.seekable) == null ? void 0 : _a.length))
          return void 0;
        const start = media.seekable.start(0);
        const end = media.seekable.end(media.seekable.length - 1);
        if (!start && !end)
          return void 0;
        return [Number(start.toFixed(3)), Number(end.toFixed(3))].join(":");
      },
      mediaEvents: ["loadedmetadata", "emptied", "progress"]
    },
    MEDIA_LOADING: {
      get: function(controller) {
        var _a;
        return !!(((_a = controller.media) == null ? void 0 : _a.readyState) < 3);
      },
      mediaEvents: ["waiting", "playing", "emptied"]
    },
    MEDIA_BUFFERED: {
      get: function(controller) {
        var _a;
        serializeTimeRanges((_a = controller.media) == null ? void 0 : _a.buffered);
      },
      mediaEvents: ["progress", "emptied"]
    },
    MEDIA_STREAM_TYPE: {
      get: function(controller) {
        const { media } = controller;
        if (!media)
          return void 0;
        const { streamType } = media;
        if (StreamTypeValues.includes(streamType)) {
          if (streamType === StreamTypes.UNKNOWN) {
            const defaultType = controller.getAttribute("default-stream-type");
            if ([StreamTypes.LIVE, StreamTypes.ON_DEMAND].includes(defaultType)) {
              return defaultType;
            }
            return void 0;
          }
          return streamType;
        }
        const duration = media.duration;
        if (duration === Infinity) {
          return StreamTypes.LIVE;
        } else if (Number.isFinite(duration)) {
          return StreamTypes.ON_DEMAND;
        } else {
          const defaultType = controller.getAttribute("default-stream-type");
          if ([StreamTypes.LIVE, StreamTypes.ON_DEMAND].includes(defaultType)) {
            return defaultType;
          }
        }
        return void 0;
      },
      mediaEvents: [
        "emptied",
        "durationchange",
        "loadedmetadata",
        "streamtypechange"
      ]
    },
    MEDIA_TARGET_LIVE_WINDOW: {
      get: function(controller) {
        const { media } = controller;
        if (!media)
          return Number.NaN;
        const { targetLiveWindow } = media;
        const streamType = MediaUIStates.MEDIA_STREAM_TYPE.get(controller);
        if ((targetLiveWindow == null || Number.isNaN(targetLiveWindow)) && streamType === StreamTypes.LIVE) {
          return 0;
        }
        return targetLiveWindow;
      },
      mediaEvents: [
        "emptied",
        "durationchange",
        "loadedmetadata",
        "streamtypechange",
        "targetlivewindowchange"
      ]
    },
    MEDIA_TIME_IS_LIVE: {
      get: function(controller) {
        const { media } = controller;
        if (!media)
          return false;
        if (typeof media.liveEdgeStart === "number") {
          if (Number.isNaN(media.liveEdgeStart))
            return false;
          return media.currentTime >= media.liveEdgeStart;
        }
        const live = MediaUIStates.MEDIA_STREAM_TYPE.get(controller) === "live";
        if (!live)
          return false;
        const seekable = media.seekable;
        if (!seekable)
          return true;
        if (!seekable.length)
          return false;
        const liveEdgeStartOffset = controller.hasAttribute("liveedgeoffset") ? Number(controller.getAttribute("liveedgeoffset")) : 10;
        const liveEdgeStart = seekable.end(seekable.length - 1) - liveEdgeStartOffset;
        return media.currentTime >= liveEdgeStart;
      },
      mediaEvents: ["playing", "timeupdate", "progress", "waiting", "emptied"]
    },
    MEDIA_IS_FULLSCREEN: {
      get: function(controller, e) {
        const isSomeElementFullscreen = !!Document[fullscreenApi.element];
        const fullscreenEl = isSomeElementFullscreen && (e == null ? void 0 : e.target);
        return containsComposedNode(controller.fullscreenElement, fullscreenEl);
      },
      rootEvents: [fullscreenApi.event]
    },
    MEDIA_IS_PIP: {
      get: function(controller, e) {
        var _a;
        const media = controller.media;
        if (!media)
          return false;
        if (e) {
          return e.type == "enterpictureinpicture";
        } else {
          const pipElement = (_a = controller.getRootNode().pictureInPictureElement) != null ? _a : Document.pictureInPictureElement;
          return containsComposedNode(media, pipElement);
        }
      },
      mediaEvents: ["enterpictureinpicture", "leavepictureinpicture"]
    },
    MEDIA_IS_CASTING: {
      get: function(controller, e) {
        var _a;
        const { media } = controller;
        if (!media)
          return false;
        const castElement = (_a = globalThis.CastableVideoElement) == null ? void 0 : _a.castElement;
        let castState = containsComposedNode(media, castElement);
        if ((e == null ? void 0 : e.type) === "castchange" && (e == null ? void 0 : e.detail) === "CONNECTING") {
          castState = "connecting";
        }
        return castState;
      },
      mediaEvents: ["entercast", "leavecast", "castchange"]
    },
    MEDIA_AIRPLAY_UNAVAILABLE: {
      get: function(controller, e) {
        if (!airplaySupported)
          return AvailabilityStates.UNSUPPORTED;
        if (!e)
          return void 0;
        if (e.availability === "available") {
          return void 0;
        } else if (e.availability === "not-available") {
          return AvailabilityStates.UNAVAILABLE;
        }
      },
      mediaEvents: ["webkitplaybacktargetavailabilitychanged"]
    },
    MEDIA_CAST_UNAVAILABLE: {
      get: function() {
        var _a;
        const castState = (_a = globalThis.CastableVideoElement) == null ? void 0 : _a.castState;
        if (!castSupported || !castState) {
          return AvailabilityStates.UNSUPPORTED;
        }
        if (castState.includes("CONNECT")) {
          return void 0;
        } else {
          return AvailabilityStates.UNAVAILABLE;
        }
      },
      mediaEvents: ["castchange"]
    },
    MEDIA_FULLSCREEN_UNAVAILABLE: {
      get: function() {
        return fullscreenSupported ? void 0 : AvailabilityStates.UNAVAILABLE;
      }
    },
    MEDIA_PIP_UNAVAILABLE: {
      get: function() {
        return pipSupported ? void 0 : AvailabilityStates.UNSUPPORTED;
      }
    },
    MEDIA_VOLUME_UNAVAILABLE: {
      get: function(controller) {
        if (volumeSupported !== void 0 && !volumeSupported) {
          return AvailabilityStates.UNSUPPORTED;
        }
        const { media } = controller;
        if (media && typeof media.volume == "undefined") {
          return AvailabilityStates.UNAVAILABLE;
        }
        return void 0;
      },
      mediaEvents: ["loadstart"]
    },
    MEDIA_CAPTIONS_LIST: {
      get: function(controller) {
        return stringifyTextTrackList(getCaptionTracks(controller)) || void 0;
      },
      mediaEvents: ["loadstart"],
      trackListEvents: ["addtrack", "removetrack"]
    },
    MEDIA_SUBTITLES_LIST: {
      get: function(controller) {
        return stringifyTextTrackList(getSubtitleTracks(controller)) || void 0;
      },
      mediaEvents: ["loadstart"],
      trackListEvents: ["addtrack", "removetrack"]
    },
    MEDIA_CAPTIONS_SHOWING: {
      get: function(controller) {
        return stringifyTextTrackList(getShowingCaptionTracks(controller)) || void 0;
      },
      mediaEvents: ["loadstart"],
      trackListEvents: ["addtrack", "removetrack", "change"]
    },
    MEDIA_SUBTITLES_SHOWING: {
      get: function(controller) {
        return stringifyTextTrackList(getShowingSubtitleTracks(controller)) || void 0;
      },
      mediaEvents: ["loadstart"],
      trackListEvents: ["addtrack", "removetrack", "change"]
    }
  };
  var MediaUIRequestHandlers = {
    MEDIA_PLAY_REQUEST: (media, e, controller) => {
      const streamType = MediaUIStates.MEDIA_STREAM_TYPE.get(controller);
      const autoSeekToLive = controller.getAttribute("noautoseektolive") === null;
      if (streamType == StreamTypes.LIVE && autoSeekToLive) {
        MediaUIRequestHandlers["MEDIA_SEEK_TO_LIVE_REQUEST"](media);
      }
      media.play().catch(() => {
      });
    },
    MEDIA_PAUSE_REQUEST: (media) => media.pause(),
    MEDIA_MUTE_REQUEST: (media) => media.muted = true,
    MEDIA_UNMUTE_REQUEST: (media) => {
      media.muted = false;
      if (media.volume === 0) {
        media.volume = 0.25;
      }
    },
    MEDIA_VOLUME_REQUEST: (media, e, mediaController) => {
      const volume = e.detail;
      media.volume = volume;
      if (volume > 0 && media.muted) {
        media.muted = false;
      }
      if (!mediaController.hasAttribute("novolumepref")) {
        try {
          Window.localStorage.setItem(
            "media-chrome-pref-volume",
            volume.toString()
          );
        } catch (err) {
        }
      }
    },
    MEDIA_ENTER_FULLSCREEN_REQUEST: (media, e, controller) => {
      if (!fullscreenSupported) {
        console.warn(
          "Fullscreen support is unavailable; not entering fullscreen"
        );
        return;
      }
      if (Document.pictureInPictureElement) {
        Document.exitPictureInPicture();
      }
      if (controller[fullscreenApi.enter]) {
        controller.fullscreenElement[fullscreenApi.enter]();
      } else if (media.webkitEnterFullscreen) {
        media.webkitEnterFullscreen();
      } else if (media.requestFullscreen) {
        media.requestFullscreen();
      } else {
        console.warn("MediaChrome: Fullscreen not supported");
      }
    },
    MEDIA_EXIT_FULLSCREEN_REQUEST: () => {
      Document[fullscreenApi.exit]();
    },
    MEDIA_ENTER_PIP_REQUEST: (media) => {
      if (!Document.pictureInPictureEnabled) {
        console.warn("MediaChrome: Picture-in-picture is not enabled");
        return;
      }
      if (!media.requestPictureInPicture) {
        console.warn(
          "MediaChrome: The current media does not support picture-in-picture"
        );
        return;
      }
      if (Document[fullscreenApi.element]) {
        Document[fullscreenApi.exit]();
      }
      const warnNotReady = () => {
        console.warn(
          "MediaChrome: The media is not ready for picture-in-picture. It must have a readyState > 0."
        );
      };
      media.requestPictureInPicture().catch((err) => {
        if (err.code === 11) {
          if (media.readyState === 0 && media.preload === "none") {
            const cleanup = () => {
              media.removeEventListener("loadedmetadata", tryPip);
              media.preload = "none";
            };
            const tryPip = () => {
              media.requestPictureInPicture().catch(warnNotReady);
              cleanup();
            };
            media.addEventListener("loadedmetadata", tryPip);
            media.preload = "metadata";
            setTimeout(() => {
              if (media.readyState === 0)
                warnNotReady();
              cleanup();
            }, 1e3);
          } else {
            throw err;
          }
        } else {
          throw err;
        }
      });
    },
    MEDIA_EXIT_PIP_REQUEST: () => {
      if (Document.pictureInPictureElement) {
        Document.exitPictureInPicture();
      }
    },
    MEDIA_ENTER_CAST_REQUEST: (media) => {
      var _a;
      if (!((_a = globalThis.CastableVideoElement) == null ? void 0 : _a.castEnabled))
        return;
      if (Document[fullscreenApi.element]) {
        Document[fullscreenApi.exit]();
      }
      media.requestCast();
    },
    MEDIA_EXIT_CAST_REQUEST: async () => {
      var _a;
      if ((_a = globalThis.CastableVideoElement) == null ? void 0 : _a.castElement) {
        globalThis.CastableVideoElement.exitCast();
      }
    },
    MEDIA_SEEK_REQUEST: (media, e) => {
      const time = e.detail;
      if (media.readyState > 0 || media.readyState === void 0) {
        media.currentTime = time;
      }
    },
    MEDIA_PLAYBACK_RATE_REQUEST: (media, e) => {
      media.playbackRate = e.detail;
    },
    MEDIA_PREVIEW_REQUEST: (media, e, controller) => {
      var _a;
      if (!media)
        return;
      const time = e.detail;
      if (time === null) {
        controller.propagateMediaState(
          MediaUIAttributes.MEDIA_PREVIEW_TIME,
          void 0
        );
      }
      controller.propagateMediaState(MediaUIAttributes.MEDIA_PREVIEW_TIME, time);
      const [track] = getTextTracksList(media, {
        kind: TextTrackKinds.METADATA,
        label: "thumbnails"
      });
      if (!(track && track.cues))
        return;
      if (time === null) {
        controller.propagateMediaState(
          MediaUIAttributes.MEDIA_PREVIEW_IMAGE,
          void 0
        );
        controller.propagateMediaState(
          MediaUIAttributes.MEDIA_PREVIEW_COORDS,
          void 0
        );
        return;
      }
      const cue = Array.prototype.find.call(
        track.cues,
        (c) => c.startTime >= time
      );
      if (!cue)
        return;
      const base = !/'^(?:[a-z]+:)?\/\//i.test(cue.text) ? (_a = media.querySelector('track[label="thumbnails"]')) == null ? void 0 : _a.src : void 0;
      const url = new URL(cue.text, base);
      const previewCoordsStr = new URLSearchParams(url.hash).get("#xywh");
      controller.propagateMediaState(
        MediaUIAttributes.MEDIA_PREVIEW_IMAGE,
        url.href
      );
      controller.propagateMediaState(
        MediaUIAttributes.MEDIA_PREVIEW_COORDS,
        previewCoordsStr.split(",").join(" ")
      );
    },
    MEDIA_SHOW_CAPTIONS_REQUEST: (media, e, controller) => {
      const tracks = getCaptionTracks(controller);
      const { detail: tracksToUpdate = [] } = e;
      updateTracksModeTo(TextTrackModes.SHOWING, tracks, tracksToUpdate);
    },
    MEDIA_DISABLE_CAPTIONS_REQUEST: (media, e, controller) => {
      const tracks = getCaptionTracks(controller);
      const { detail: tracksToUpdate = [] } = e;
      updateTracksModeTo(TextTrackModes.DISABLED, tracks, tracksToUpdate);
    },
    MEDIA_SHOW_SUBTITLES_REQUEST: (media, e, controller) => {
      const tracks = getSubtitleTracks(controller);
      const { detail: tracksToUpdate = [] } = e;
      updateTracksModeTo(TextTrackModes.SHOWING, tracks, tracksToUpdate);
    },
    MEDIA_DISABLE_SUBTITLES_REQUEST: (media, e, controller) => {
      const tracks = getSubtitleTracks(controller);
      const { detail: tracksToUpdate = [] } = e;
      updateTracksModeTo(TextTrackModes.DISABLED, tracks, tracksToUpdate);
    },
    MEDIA_AIRPLAY_REQUEST: (media) => {
      if (!media)
        return;
      if (!(media.webkitShowPlaybackTargetPicker && Window.WebKitPlaybackTargetAvailabilityEvent)) {
        console.warn(
          "received a request to select AirPlay but AirPlay is not supported in this environment"
        );
        return;
      }
      media.webkitShowPlaybackTargetPicker();
    },
    MEDIA_SEEK_TO_LIVE_REQUEST: (media) => {
      const seekable = media.seekable;
      if (!seekable) {
        console.warn(
          "MediaController: Media element does not support seeking to live."
        );
        return;
      }
      if (!seekable.length) {
        console.warn("MediaController: Media is unable to seek to live.");
        return;
      }
      media.currentTime = seekable.end(seekable.length - 1);
    }
  };

  // node_modules/media-chrome/dist/media-controller.js
  var __accessCheck5 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet5 = (obj, member, getter) => {
    __accessCheck5(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd5 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet5 = (obj, member, value, setter) => {
    __accessCheck5(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod2 = (obj, member, method) => {
    __accessCheck5(obj, member, "access private method");
    return method;
  };
  var _hotKeys;
  var _fullscreenElement;
  var _keyUpHandler;
  var keyUpHandler_fn;
  var _keyDownHandler;
  var keyDownHandler_fn;
  var ButtonPressedKeys = ["ArrowLeft", "ArrowRight", "Enter", " ", "f", "m", "k", "c"];
  var DEFAULT_SEEK_OFFSET = 10;
  var DEFAULT_TIME = 0;
  var MediaController = class extends media_container_default {
    constructor() {
      super();
      __privateAdd5(this, _keyUpHandler);
      __privateAdd5(this, _keyDownHandler);
      __privateAdd5(this, _hotKeys, new AttributeTokenList(this, "hotkeys"));
      __privateAdd5(this, _fullscreenElement, void 0);
      if (MediaUIStates.MEDIA_VOLUME_UNAVAILABLE.get(this) === void 0) {
        volumeSupportPromise.then(() => {
          this.propagateMediaState(
            MediaUIAttributes.MEDIA_VOLUME_UNAVAILABLE,
            MediaUIStates.MEDIA_VOLUME_UNAVAILABLE.get(this)
          );
        });
      }
      this.mediaStateReceivers = [];
      this.associatedElementSubscriptions = /* @__PURE__ */ new Map();
      this.associateElement(this);
      Object.keys(MediaUIRequestHandlers).forEach((key) => {
        const handlerName = `_handle${constToCamel(key, true)}`;
        this[handlerName] = (e) => {
          e.stopPropagation();
          if (!this.media) {
            console.warn("MediaController: No media available.");
            return;
          }
          MediaUIRequestHandlers[key](this.media, e, this);
        };
        this.addEventListener(MediaUIEvents[key], this[handlerName]);
      });
      this._mediaStatePropagators = {};
      Object.keys(MediaUIStates).forEach((key) => {
        this._mediaStatePropagators[key] = (e) => {
          this.propagateMediaState(MediaUIAttributes[key], MediaUIStates[key].get(this, e));
        };
      });
      this.enableHotkeys();
    }
    static get observedAttributes() {
      return super.observedAttributes.concat("nohotkeys", "hotkeys", "default-stream-type");
    }
    get fullscreenElement() {
      var _a;
      return (_a = __privateGet5(this, _fullscreenElement)) != null ? _a : this;
    }
    set fullscreenElement(element) {
      if (this.hasAttribute("fullscreen-element")) {
        this.removeAttribute("fullscreen-element");
      }
      __privateSet5(this, _fullscreenElement, element);
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a;
      if (attrName === "nohotkeys") {
        if (newValue !== oldValue && newValue === "") {
          if (this.hasAttribute("hotkeys")) {
            console.warn("Both `hotkeys` and `nohotkeys` have been set. All hotkeys will be disabled.");
          }
          this.disableHotkeys();
        } else if (newValue !== oldValue && newValue === null) {
          this.enableHotkeys();
        }
      } else if (attrName === "hotkeys") {
        __privateGet5(this, _hotKeys).value = newValue;
      } else if (attrName === "default-stream-type") {
        this.propagateMediaState(MediaUIAttributes.MEDIA_STREAM_TYPE);
      } else if (attrName === "fullscreen-element") {
        const el = newValue ? (_a = this.getRootNode()) == null ? void 0 : _a.getElementById(newValue) : void 0;
        __privateSet5(this, _fullscreenElement, el);
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
    mediaSetCallback(media) {
      super.mediaSetCallback(media);
      if (!media.hasAttribute("tabindex")) {
        media.setAttribute("tabindex", -1);
      }
      Object.keys(MediaUIStates).forEach((key) => {
        const {
          mediaEvents,
          rootEvents,
          trackListEvents
        } = MediaUIStates[key];
        const handler = this._mediaStatePropagators[key];
        mediaEvents == null ? void 0 : mediaEvents.forEach((eventName) => {
          media.addEventListener(eventName, handler);
        });
        rootEvents == null ? void 0 : rootEvents.forEach((eventName) => {
          this.getRootNode().addEventListener(eventName, handler);
        });
        trackListEvents == null ? void 0 : trackListEvents.forEach((eventName) => {
          var _a;
          (_a = media.textTracks) == null ? void 0 : _a.addEventListener(eventName, handler);
        });
      });
      if (!this.hasAttribute("novolumepref")) {
        try {
          const volPref = Window.localStorage.getItem("media-chrome-pref-volume");
          if (volPref !== null)
            media.volume = volPref;
        } catch (e) {
          console.debug("Error getting volume pref", e);
        }
      }
    }
    mediaUnsetCallback(media) {
      super.mediaUnsetCallback(media);
      Object.keys(MediaUIStates).forEach((key) => {
        const {
          mediaEvents,
          rootEvents,
          trackListEvents
        } = MediaUIStates[key];
        const handler = this._mediaStatePropagators[key];
        mediaEvents == null ? void 0 : mediaEvents.forEach((eventName) => {
          media.removeEventListener(eventName, handler);
        });
        rootEvents == null ? void 0 : rootEvents.forEach((eventName) => {
          this.getRootNode().removeEventListener(eventName, handler);
        });
        trackListEvents == null ? void 0 : trackListEvents.forEach((eventName) => {
          var _a;
          (_a = media.textTracks) == null ? void 0 : _a.removeEventListener(eventName, handler);
        });
      });
      this.propagateMediaState(MediaUIAttributes.MEDIA_PAUSED, true);
    }
    propagateMediaState(stateName, state) {
      const previousState = this.getAttribute(stateName);
      propagateMediaState(this.mediaStateReceivers, stateName, state);
      if (previousState === this.getAttribute(stateName))
        return;
      const evt = new Window.CustomEvent(
        AttributeToStateChangeEventMap[stateName],
        { composed: true, bubbles: true, detail: state }
      );
      this.dispatchEvent(evt);
    }
    associateElement(element) {
      if (!element)
        return;
      const { associatedElementSubscriptions } = this;
      if (associatedElementSubscriptions.has(element))
        return;
      const registerMediaStateReceiver = this.registerMediaStateReceiver.bind(this);
      const unregisterMediaStateReceiver = this.unregisterMediaStateReceiver.bind(this);
      const unsubscribe = monitorForMediaStateReceivers(
        element,
        registerMediaStateReceiver,
        unregisterMediaStateReceiver
      );
      Object.keys(MediaUIEvents).forEach((key) => {
        element.addEventListener(
          MediaUIEvents[key],
          this[`_handle${constToCamel(key, true)}`]
        );
      });
      associatedElementSubscriptions.set(element, unsubscribe);
    }
    unassociateElement(element) {
      if (!element)
        return;
      const { associatedElementSubscriptions } = this;
      if (!associatedElementSubscriptions.has(element))
        return;
      const unsubscribe = associatedElementSubscriptions.get(element);
      unsubscribe();
      associatedElementSubscriptions.delete(element);
      Object.keys(MediaUIEvents).forEach((key) => {
        element.removeEventListener(
          MediaUIEvents[key],
          this[`_handle${constToCamel(key, true)}`]
        );
      });
    }
    registerMediaStateReceiver(el) {
      if (!el)
        return;
      const els = this.mediaStateReceivers;
      const index = els.indexOf(el);
      if (index > -1)
        return;
      els.push(el);
      Object.keys(MediaUIStates).forEach((stateConstName) => {
        const stateDetails = MediaUIStates[stateConstName];
        propagateMediaState(
          [el],
          MediaUIAttributes[stateConstName],
          stateDetails.get(this)
        );
      });
    }
    unregisterMediaStateReceiver(el) {
      const els = this.mediaStateReceivers;
      const index = els.indexOf(el);
      if (index < 0)
        return;
      els.splice(index, 1);
    }
    enableHotkeys() {
      this.addEventListener("keydown", __privateMethod2(this, _keyDownHandler, keyDownHandler_fn));
    }
    disableHotkeys() {
      this.removeEventListener("keydown", __privateMethod2(this, _keyDownHandler, keyDownHandler_fn));
      this.removeEventListener("keyup", __privateMethod2(this, _keyUpHandler, keyUpHandler_fn));
    }
    get hotkeys() {
      return __privateGet5(this, _hotKeys);
    }
    keyboardShortcutHandler(e) {
      var _a, _b, _c, _d;
      const keysUsed = ((_d = (_c = (_a = e.target.getAttribute("keysused")) == null ? void 0 : _a.split(" ")) != null ? _c : (_b = e.target) == null ? void 0 : _b.keysUsed) != null ? _d : []).map((key) => key === "Space" ? " " : key).filter(Boolean);
      if (keysUsed.includes(e.key)) {
        return;
      }
      let eventName, currentTimeStr, currentTime, detail, evt;
      const seekOffset = DEFAULT_SEEK_OFFSET;
      if (__privateGet5(this, _hotKeys).contains(`no${e.key.toLowerCase()}`))
        return;
      if (e.key === " " && __privateGet5(this, _hotKeys).contains(`nospace`))
        return;
      switch (e.key) {
        case " ":
        case "k":
          eventName = this.getAttribute(MediaUIAttributes.MEDIA_PAUSED) != null ? MediaUIEvents.MEDIA_PLAY_REQUEST : MediaUIEvents.MEDIA_PAUSE_REQUEST;
          this.dispatchEvent(
            new Window.CustomEvent(eventName, { composed: true, bubbles: true })
          );
          break;
        case "m":
          eventName = this.getAttribute(MediaUIAttributes.MEDIA_VOLUME_LEVEL) === "off" ? MediaUIEvents.MEDIA_UNMUTE_REQUEST : MediaUIEvents.MEDIA_MUTE_REQUEST;
          this.dispatchEvent(
            new Window.CustomEvent(eventName, { composed: true, bubbles: true })
          );
          break;
        case "f":
          eventName = this.getAttribute(MediaUIAttributes.MEDIA_IS_FULLSCREEN) != null ? MediaUIEvents.MEDIA_EXIT_FULLSCREEN_REQUEST : MediaUIEvents.MEDIA_ENTER_FULLSCREEN_REQUEST;
          this.dispatchEvent(
            new Window.CustomEvent(eventName, { composed: true, bubbles: true })
          );
          break;
        case "c":
          toggleSubsCaps(this);
          break;
        case "ArrowLeft":
          currentTimeStr = this.getAttribute(
            MediaUIAttributes.MEDIA_CURRENT_TIME
          );
          currentTime = currentTimeStr && !Number.isNaN(+currentTimeStr) ? +currentTimeStr : DEFAULT_TIME;
          detail = Math.max(currentTime - seekOffset, 0);
          evt = new Window.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
            composed: true,
            bubbles: true,
            detail
          });
          this.dispatchEvent(evt);
          break;
        case "ArrowRight":
          currentTimeStr = this.getAttribute(
            MediaUIAttributes.MEDIA_CURRENT_TIME
          );
          currentTime = currentTimeStr && !Number.isNaN(+currentTimeStr) ? +currentTimeStr : DEFAULT_TIME;
          detail = Math.max(currentTime + seekOffset, 0);
          evt = new Window.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
            composed: true,
            bubbles: true,
            detail
          });
          this.dispatchEvent(evt);
          break;
        default:
          break;
      }
    }
  };
  _hotKeys = /* @__PURE__ */ new WeakMap();
  _fullscreenElement = /* @__PURE__ */ new WeakMap();
  _keyUpHandler = /* @__PURE__ */ new WeakSet();
  keyUpHandler_fn = function(e) {
    const { key } = e;
    if (!ButtonPressedKeys.includes(key)) {
      this.removeEventListener("keyup", __privateMethod2(this, _keyUpHandler, keyUpHandler_fn));
      return;
    }
    this.keyboardShortcutHandler(e);
  };
  _keyDownHandler = /* @__PURE__ */ new WeakSet();
  keyDownHandler_fn = function(e) {
    const { metaKey, altKey, key } = e;
    if (metaKey || altKey || !ButtonPressedKeys.includes(key)) {
      this.removeEventListener("keyup", __privateMethod2(this, _keyUpHandler, keyUpHandler_fn));
      return;
    }
    if ([" ", "ArrowLeft", "ArrowRight"].includes(key) && !(__privateGet5(this, _hotKeys).contains(`no${key.toLowerCase()}`) || key === " " && __privateGet5(this, _hotKeys).contains("nospace"))) {
      e.preventDefault();
    }
    this.addEventListener("keyup", __privateMethod2(this, _keyUpHandler, keyUpHandler_fn), { once: true });
  };
  var MEDIA_UI_ATTRIBUTE_NAMES2 = Object.values(MediaUIAttributes);
  var getMediaUIAttributesFrom = (child) => {
    var _a, _b, _c, _d;
    let { observedAttributes } = child.constructor;
    if (!observedAttributes && ((_a = child.nodeName) == null ? void 0 : _a.includes("-"))) {
      Window.customElements.upgrade(child);
      ({ observedAttributes } = child.constructor);
    }
    const mediaChromeAttributesList = (_d = (_c = (_b = child == null ? void 0 : child.getAttribute) == null ? void 0 : _b.call(child, MediaStateReceiverAttributes.MEDIA_CHROME_ATTRIBUTES)) == null ? void 0 : _c.split) == null ? void 0 : _d.call(_c, /\s+/);
    if (!Array.isArray(observedAttributes || mediaChromeAttributesList))
      return [];
    return (observedAttributes || mediaChromeAttributesList).filter(
      (attrName) => MEDIA_UI_ATTRIBUTE_NAMES2.includes(attrName)
    );
  };
  var isMediaStateReceiver = (child) => {
    return !!getMediaUIAttributesFrom(child).length;
  };
  var setAttr = async (child, attrName, attrValue) => {
    if (!child.isConnected) {
      await delay(0);
    }
    if (attrValue == void 0) {
      return child.removeAttribute(attrName);
    }
    if (typeof attrValue === "boolean") {
      if (attrValue)
        return child.setAttribute(attrName, "");
      return child.removeAttribute(attrName);
    }
    if (Number.isNaN(attrValue)) {
      return child.removeAttribute(attrName);
    }
    return child.setAttribute(attrName, attrValue);
  };
  var isMediaSlotElementDescendant = (el) => {
    var _a;
    return !!((_a = el.closest) == null ? void 0 : _a.call(el, '*[slot="media"]'));
  };
  var traverseForMediaStateReceivers = (rootNode, mediaStateReceiverCallback) => {
    if (isMediaSlotElementDescendant(rootNode)) {
      return;
    }
    const traverseForMediaStateReceiversSync = (rootNode2, mediaStateReceiverCallback2) => {
      var _a, _b;
      if (isMediaStateReceiver(rootNode2)) {
        mediaStateReceiverCallback2(rootNode2);
      }
      const { children = [] } = rootNode2 != null ? rootNode2 : {};
      const shadowChildren = (_b = (_a = rootNode2 == null ? void 0 : rootNode2.shadowRoot) == null ? void 0 : _a.children) != null ? _b : [];
      const allChildren = [...children, ...shadowChildren];
      allChildren.forEach(
        (child) => traverseForMediaStateReceivers(child, mediaStateReceiverCallback2)
      );
    };
    const name = rootNode == null ? void 0 : rootNode.nodeName.toLowerCase();
    if (name.includes("-") && !isMediaStateReceiver(rootNode)) {
      Window.customElements.whenDefined(name).then(() => {
        traverseForMediaStateReceiversSync(rootNode, mediaStateReceiverCallback);
      });
      return;
    }
    traverseForMediaStateReceiversSync(rootNode, mediaStateReceiverCallback);
  };
  var propagateMediaState = (els, stateName, val) => {
    els.forEach((el) => {
      const relevantAttrs = getMediaUIAttributesFrom(el);
      if (!relevantAttrs.includes(stateName))
        return;
      setAttr(el, stateName, val);
    });
  };
  var monitorForMediaStateReceivers = (rootNode, registerMediaStateReceiver, unregisterMediaStateReceiver) => {
    traverseForMediaStateReceivers(rootNode, registerMediaStateReceiver);
    const registerMediaStateReceiverHandler = (evt) => {
      var _a;
      const el = (_a = evt == null ? void 0 : evt.composedPath()[0]) != null ? _a : evt.target;
      registerMediaStateReceiver(el);
    };
    const unregisterMediaStateReceiverHandler = (evt) => {
      var _a;
      const el = (_a = evt == null ? void 0 : evt.composedPath()[0]) != null ? _a : evt.target;
      unregisterMediaStateReceiver(el);
    };
    rootNode.addEventListener(
      MediaUIEvents.REGISTER_MEDIA_STATE_RECEIVER,
      registerMediaStateReceiverHandler
    );
    rootNode.addEventListener(
      MediaUIEvents.UNREGISTER_MEDIA_STATE_RECEIVER,
      unregisterMediaStateReceiverHandler
    );
    const mutationCallback = (mutationsList) => {
      mutationsList.forEach((mutationRecord) => {
        const {
          addedNodes = [],
          removedNodes = [],
          type,
          target,
          attributeName
        } = mutationRecord;
        if (type === "childList") {
          Array.prototype.forEach.call(
            addedNodes,
            (node) => traverseForMediaStateReceivers(node, registerMediaStateReceiver)
          );
          Array.prototype.forEach.call(
            removedNodes,
            (node) => traverseForMediaStateReceivers(node, unregisterMediaStateReceiver)
          );
        } else if (type === "attributes" && attributeName === MediaStateReceiverAttributes.MEDIA_CHROME_ATTRIBUTES) {
          if (isMediaStateReceiver(target)) {
            registerMediaStateReceiver(target);
          } else {
            unregisterMediaStateReceiver(target);
          }
        }
      });
    };
    const observer = new MutationObserver(mutationCallback);
    observer.observe(rootNode, {
      childList: true,
      attributes: true,
      subtree: true
    });
    const unsubscribe = () => {
      traverseForMediaStateReceivers(rootNode, unregisterMediaStateReceiver);
      observer.disconnect();
      rootNode.removeEventListener(
        MediaUIEvents.REGISTER_MEDIA_STATE_RECEIVER,
        registerMediaStateReceiverHandler
      );
      rootNode.removeEventListener(
        MediaUIEvents.UNREGISTER_MEDIA_STATE_RECEIVER,
        unregisterMediaStateReceiverHandler
      );
    };
    return unsubscribe;
  };
  if (!Window.customElements.get("media-controller")) {
    Window.customElements.define("media-controller", MediaController);
  }
  var media_controller_default = MediaController;

  // node_modules/media-chrome/dist/media-chrome-range.js
  var __accessCheck6 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet6 = (obj, member, getter) => {
    __accessCheck6(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd6 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet6 = (obj, member, value, setter) => {
    __accessCheck6(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _thumbWidth;
  var _mediaController3;
  var _onFocusIn;
  var _onFocusOut;
  var template4 = Document.createElement("template");
  var thumbStyles = `
  height: var(--thumb-height);
  width: var(--media-range-thumb-width, 10px);
  border: var(--media-range-thumb-border, none);
  border-radius: var(--media-range-thumb-border-radius, 10px);
  background: var(--media-range-thumb-background, var(--media-primary-color, rgb(238 238 238)));
  box-shadow: var(--media-range-thumb-box-shadow, 1px 1px 1px transparent);
  cursor: pointer;
  transition: var(--media-range-thumb-transition, none);
  transform: var(--media-range-thumb-transform, none);
  opacity: var(--media-range-thumb-opacity, 1);
`;
  var trackStyles = `
  min-width: 40px;
  height: var(--track-height);
  border: var(--media-range-track-border, none);
  outline: var(--media-range-track-outline);
  outline-offset: var(--media-range-track-outline-offset);
  border-radius: var(--media-range-track-border-radius, 1px);
  background: var(--media-range-track-progress-internal, var(--media-range-track-background, rgb(255 255 255 / .2)));
  box-shadow: var(--media-range-track-box-shadow, none);
  transition: var(--media-range-track-transition, none);
  transform: translate(var(--media-range-track-translate-x, 0), var(--media-range-track-translate-y, 0));
  cursor: pointer;
`;
  template4.innerHTML = `
  <style>
    :host {
      --thumb-height: var(--media-range-thumb-height, 10px);
      --track-height: var(--media-range-track-height, 4px);
      --_focus-box-shadow: var(--media-focus-box-shadow, inset 0 0 0 2px rgb(27 127 204 / .9));
      --_media-range-padding: var(--media-range-padding, var(--media-control-padding, 10px));

      vertical-align: middle;
      box-sizing: border-box;
      display: inline-block;
      position: relative;
      background: var(--media-control-background, var(--media-secondary-color, rgb(20 20 30 / .7)));
      transition: background .15s linear;
      width: 100px;
      height: calc(var(--media-control-height, 24px) + 2 * var(--_media-range-padding));
      padding-left: var(--media-range-padding-left, var(--_media-range-padding));
      padding-right: var(--media-range-padding-right, var(--_media-range-padding));
      pointer-events: auto;
      ${""}
      font-size: 0;
      box-shadow: var(--_focus-visible-box-shadow, none);
    }

    ${""}
    input[type=range]:focus {
      outline: 0;
    }
    input[type=range]:focus::-webkit-slider-runnable-track {
      outline: 0;
    }

    :host(:hover) {
      background: var(--media-control-hover-background, rgb(50 50 70 / .7));
    }

    #container {
      position: relative;
      height: 100%;
    }

    input[type=range] {
      ${""}
      -webkit-appearance: none; ${""}
      background: transparent; ${""}

      ${""}
      min-height: 100%;
      width: var(--media-range-track-width, 100%); ${""}

      box-sizing: border-box;
      padding: 0;
      margin: 0;
    }

    ${""}
    input[type=range]::-webkit-slider-thumb {
      -webkit-appearance: none;
      ${thumbStyles}
      ${""}
      margin-top: calc(calc(0px - var(--thumb-height) + var(--track-height)) / 2);
    }

    ${""}
    input[type=range]::-moz-range-thumb {
      ${thumbStyles}
      translate: var(--media-range-track-translate-x, 0) var(--media-range-track-translate-y, 0);
    }

    input[type=range]::-webkit-slider-runnable-track { ${trackStyles} }
    input[type=range]::-moz-range-track { ${trackStyles} }
    input[type=range]::-ms-track {
      ${""}
      width: 100%;
      cursor: pointer;
      ${""}
      background: transparent;
      border-color: transparent;
      color: transparent;

      ${trackStyles}
    }

    #background,
    #pointer {
      min-width: 40px;
      width: var(--media-range-track-width, 100%);
      height: var(--track-height);
      border-radius: var(--media-range-track-border-radius, 1px);
      position: absolute;
      top: 50%;
      transform: translate(var(--media-range-track-translate-x, 0px), calc(var(--media-range-track-translate-y, 0px) - 50%));
      background: var(--media-range-track-background, rgb(255 255 255 / .2));
    }

    #pointer {
      min-width: auto;
      background: var(--media-range-track-pointer-background);
      border-right: var(--media-range-track-pointer-border-right);
      transition: visibility .25s, opacity .25s;
      visibility: hidden;
      opacity: 0;
    }

    :host(:hover) #pointer {
      transition: visibility .5s, opacity .5s;
      visibility: visible;
      opacity: 1;
    }

    #hoverzone {
      ${""}
      z-index: 1;
      display: var(--media-time-range-hover-display, none);
      position: absolute;
      width: 100%;
      bottom: var(--media-time-range-hover-bottom, -5px);
      height: var(--media-time-range-hover-height, max(calc(100% + 5px), 20px));
    }

    #range {
      z-index: 2;
      position: relative;
      height: var(--media-range-track-height, 4px);
    }

    input[type=range]:disabled::-webkit-slider-thumb {
      background-color: #777;
    }

    input[type=range]:disabled::-webkit-slider-runnable-track {
      background-color: #777;
    }
  </style>
  <div id="container">
    <div id="background"></div>
    <div id="pointer"></div>
    <div id="hoverzone"></div>
    <input id="range" type="range" min="0" max="1000" step="any" value="0">
  </div>
`;
  var MediaChromeRange = class extends Window.HTMLElement {
    constructor() {
      super();
      __privateAdd6(this, _thumbWidth, void 0);
      __privateAdd6(this, _mediaController3, void 0);
      __privateAdd6(this, _onFocusIn, () => {
        if (this.range.matches(":focus-visible")) {
          const { style: style2 } = getOrInsertCSSRule(this.shadowRoot, ":host");
          style2.setProperty("--_focus-visible-box-shadow", "var(--_focus-box-shadow)");
        }
      });
      __privateAdd6(this, _onFocusOut, () => {
        const { style: style2 } = getOrInsertCSSRule(this.shadowRoot, ":host");
        style2.removeProperty("--_focus-visible-box-shadow");
      });
      if (!this.shadowRoot) {
        this.attachShadow({ mode: "open" });
        this.shadowRoot.appendChild(template4.content.cloneNode(true));
      }
      const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
      style.setProperty("display", `var(--media-control-display, var(--${this.localName}-display, inline-block))`);
      this.container = this.shadowRoot.querySelector("#container");
      this.range = this.shadowRoot.querySelector("#range");
      this.range.addEventListener("input", this.updateBar.bind(this));
      __privateSet6(this, _thumbWidth, parseInt(getComputedStyle(this).getPropertyValue("--media-range-thumb-width") || "10", 10));
    }
    static get observedAttributes() {
      return [
        "disabled",
        "aria-disabled",
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      ];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a, _b, _c, _d, _e;
      if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
        if (oldValue) {
          (_b = (_a = __privateGet6(this, _mediaController3)) == null ? void 0 : _a.unassociateElement) == null ? void 0 : _b.call(_a, this);
          __privateSet6(this, _mediaController3, null);
        }
        if (newValue) {
          __privateSet6(this, _mediaController3, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
          (_e = (_d = __privateGet6(this, _mediaController3)) == null ? void 0 : _d.associateElement) == null ? void 0 : _e.call(_d, this);
        }
      } else if (attrName === "disabled" || attrName === "aria-disabled" && oldValue !== newValue) {
        if (newValue == null) {
          this.range.removeAttribute(attrName);
        } else {
          this.range.setAttribute(attrName, newValue);
        }
      }
    }
    connectedCallback() {
      var _a, _b, _c;
      const mediaControllerId = this.getAttribute(
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      );
      if (mediaControllerId) {
        __privateSet6(this, _mediaController3, (_a = this.getRootNode()) == null ? void 0 : _a.getElementById(mediaControllerId));
        (_c = (_b = __privateGet6(this, _mediaController3)) == null ? void 0 : _b.associateElement) == null ? void 0 : _c.call(_b, this);
      }
      this.updateBar();
      this.shadowRoot.addEventListener("focusin", __privateGet6(this, _onFocusIn));
      this.shadowRoot.addEventListener("focusout", __privateGet6(this, _onFocusOut));
    }
    disconnectedCallback() {
      var _a, _b;
      (_b = (_a = __privateGet6(this, _mediaController3)) == null ? void 0 : _a.unassociateElement) == null ? void 0 : _b.call(_a, this);
      __privateSet6(this, _mediaController3, null);
      this.shadowRoot.removeEventListener("focusin", __privateGet6(this, _onFocusIn));
      this.shadowRoot.removeEventListener("focusout", __privateGet6(this, _onFocusOut));
    }
    updatePointerBar(evt) {
      const rangeRect = this.range.getBoundingClientRect();
      let mousePercent = (evt.clientX - rangeRect.left) / rangeRect.width;
      mousePercent = Math.max(0, Math.min(1, mousePercent));
      const { style } = getOrInsertCSSRule(this.shadowRoot, "#pointer");
      style.setProperty("width", `${mousePercent * rangeRect.width}px`);
    }
    updateBar() {
      const colorArray = this.getBarColors();
      let gradientStr = "linear-gradient(to right, ";
      let prevPercent = 0;
      colorArray.forEach((color) => {
        if (color[1] < prevPercent)
          return;
        gradientStr = gradientStr + `${color[0]} ${prevPercent}%, ${color[0]} ${color[1]}%,`;
        prevPercent = color[1];
      });
      gradientStr = gradientStr.slice(0, gradientStr.length - 1) + ")";
      const { style } = getOrInsertCSSRule(this.shadowRoot, "#range");
      style.setProperty("--media-range-track-progress-internal", gradientStr);
    }
    getBarColors() {
      const range = this.range;
      const relativeValue = range.value - range.min;
      const relativeMax = range.max - range.min;
      const rangePercent = relativeValue / relativeMax * 100;
      let thumbPercent = 0;
      if (range.value > range.min && range.value < range.max) {
        const thumbOffset = __privateGet6(this, _thumbWidth) * (0.5 - rangePercent / 100);
        thumbPercent = thumbOffset / range.offsetWidth * 100;
      }
      let colorArray = [
        ["var(--media-range-bar-color, var(--media-primary-color, rgb(238 238 238)))", rangePercent + thumbPercent],
        ["var(--media-range-track-color, transparent)", 100]
      ];
      return colorArray;
    }
    get keysUsed() {
      return ["ArrowUp", "ArrowRight", "ArrowDown", "ArrowLeft"];
    }
  };
  _thumbWidth = /* @__PURE__ */ new WeakMap();
  _mediaController3 = /* @__PURE__ */ new WeakMap();
  _onFocusIn = /* @__PURE__ */ new WeakMap();
  _onFocusOut = /* @__PURE__ */ new WeakMap();
  if (!Window.customElements.get("media-chrome-range")) {
    Window.customElements.define("media-chrome-range", MediaChromeRange);
  }
  var media_chrome_range_default = MediaChromeRange;

  // node_modules/media-chrome/dist/media-control-bar.js
  var __accessCheck7 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet7 = (obj, member, getter) => {
    __accessCheck7(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd7 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet7 = (obj, member, value, setter) => {
    __accessCheck7(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _mediaController4;
  var template5 = Document.createElement("template");
  template5.innerHTML = `
  <style>
    :host {
      ${""}
      box-sizing: border-box;
      display: var(--media-control-display, var(--media-control-bar-display, inline-flex));
      color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
      --media-loading-icon-width: 44px;
    }

    media-time-range,
    ::slotted(media-time-range),
    ::slotted(media-progress-range),
    ::slotted(media-clip-selector) {
      flex-grow: 1;
    }
  </style>

  <slot></slot>
`;
  var MediaControlBar = class extends Window.HTMLElement {
    constructor() {
      super();
      __privateAdd7(this, _mediaController4, void 0);
      if (!this.shadowRoot) {
        this.attachShadow({ mode: "open" });
        this.shadowRoot.appendChild(template5.content.cloneNode(true));
      }
    }
    static get observedAttributes() {
      return [MediaStateReceiverAttributes.MEDIA_CONTROLLER];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a, _b, _c, _d, _e;
      if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
        if (oldValue) {
          (_b = (_a = __privateGet7(this, _mediaController4)) == null ? void 0 : _a.unassociateElement) == null ? void 0 : _b.call(_a, this);
          __privateSet7(this, _mediaController4, null);
        }
        if (newValue) {
          __privateSet7(this, _mediaController4, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
          (_e = (_d = __privateGet7(this, _mediaController4)) == null ? void 0 : _d.associateElement) == null ? void 0 : _e.call(_d, this);
        }
      }
    }
    connectedCallback() {
      var _a, _b, _c;
      const mediaControllerId = this.getAttribute(
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      );
      if (mediaControllerId) {
        __privateSet7(this, _mediaController4, (_a = this.getRootNode()) == null ? void 0 : _a.getElementById(mediaControllerId));
        (_c = (_b = __privateGet7(this, _mediaController4)) == null ? void 0 : _b.associateElement) == null ? void 0 : _c.call(_b, this);
      }
    }
    disconnectedCallback() {
      var _a, _b;
      (_b = (_a = __privateGet7(this, _mediaController4)) == null ? void 0 : _a.unassociateElement) == null ? void 0 : _b.call(_a, this);
      __privateSet7(this, _mediaController4, null);
    }
  };
  _mediaController4 = /* @__PURE__ */ new WeakMap();
  if (!Window.customElements.get("media-control-bar")) {
    Window.customElements.define("media-control-bar", MediaControlBar);
  }

  // node_modules/media-chrome/dist/media-text-display.js
  var __accessCheck8 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet8 = (obj, member, getter) => {
    __accessCheck8(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd8 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet8 = (obj, member, value, setter) => {
    __accessCheck8(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _mediaController5;
  var template6 = Document.createElement("template");
  template6.innerHTML = `
  <style>
    :host {
      font: var(--media-font,
        var(--media-font-weight, normal)
        var(--media-font-size, 14px) /
        var(--media-text-content-height, var(--media-control-height, 24px))
        var(--media-font-family, helvetica neue, segoe ui, roboto, arial, sans-serif));
      color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
      background: var(--media-control-background, var(--media-secondary-color, rgb(20 20 30 / .7)));
      padding: var(--media-control-padding, 10px);
      display: inline-flex;
      justify-content: center;
      align-items: center;
      vertical-align: middle;
      box-sizing: border-box;
      text-align: center;
      pointer-events: auto;
    }

    ${""}
    :host(:focus-visible) {
      box-shadow: inset 0 0 0 2px rgb(27 127 204 / .9);
      outline: 0;
    }

    ${""}
    :host(:where(:focus)) {
      box-shadow: none;
      outline: 0;
    }
  </style>
  <slot></slot>
`;
  var MediaTextDisplay = class extends Window.HTMLElement {
    constructor() {
      super();
      __privateAdd8(this, _mediaController5, void 0);
      if (!this.shadowRoot) {
        this.attachShadow({ mode: "open" });
        this.shadowRoot.appendChild(template6.content.cloneNode(true));
      }
      const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
      style.setProperty("display", `var(--media-control-display, var(--${this.localName}-display, inline-flex))`);
    }
    static get observedAttributes() {
      return [MediaStateReceiverAttributes.MEDIA_CONTROLLER];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a, _b, _c, _d, _e;
      if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
        if (oldValue) {
          (_b = (_a = __privateGet8(this, _mediaController5)) == null ? void 0 : _a.unassociateElement) == null ? void 0 : _b.call(_a, this);
          __privateSet8(this, _mediaController5, null);
        }
        if (newValue) {
          __privateSet8(this, _mediaController5, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
          (_e = (_d = __privateGet8(this, _mediaController5)) == null ? void 0 : _d.associateElement) == null ? void 0 : _e.call(_d, this);
        }
      }
    }
    connectedCallback() {
      var _a, _b, _c;
      const mediaControllerId = this.getAttribute(
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      );
      if (mediaControllerId) {
        __privateSet8(this, _mediaController5, (_a = this.getRootNode()) == null ? void 0 : _a.getElementById(mediaControllerId));
        (_c = (_b = __privateGet8(this, _mediaController5)) == null ? void 0 : _b.associateElement) == null ? void 0 : _c.call(_b, this);
      }
    }
    disconnectedCallback() {
      var _a, _b;
      (_b = (_a = __privateGet8(this, _mediaController5)) == null ? void 0 : _a.unassociateElement) == null ? void 0 : _b.call(_a, this);
      __privateSet8(this, _mediaController5, null);
    }
  };
  _mediaController5 = /* @__PURE__ */ new WeakMap();
  if (!Window.customElements.get("media-text-display")) {
    Window.customElements.define("media-text-display", MediaTextDisplay);
  }
  var media_text_display_default = MediaTextDisplay;

  // node_modules/media-chrome/dist/media-current-time-display.js
  var __accessCheck9 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet9 = (obj, member, getter) => {
    __accessCheck9(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd9 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet9 = (obj, member, value, setter) => {
    __accessCheck9(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _slot;
  var MediaCurrentTimeDisplay = class extends media_text_display_default {
    constructor() {
      super();
      __privateAdd9(this, _slot, void 0);
      __privateSet9(this, _slot, this.shadowRoot.querySelector("slot"));
      __privateGet9(this, _slot).textContent = formatTime(0);
    }
    static get observedAttributes() {
      return [...super.observedAttributes, MediaUIAttributes.MEDIA_CURRENT_TIME];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === MediaUIAttributes.MEDIA_CURRENT_TIME) {
        __privateGet9(this, _slot).textContent = formatTime(newValue);
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
  };
  _slot = /* @__PURE__ */ new WeakMap();
  if (!Window.customElements.get("media-current-time-display")) {
    Window.customElements.define("media-current-time-display", MediaCurrentTimeDisplay);
  }

  // node_modules/media-chrome/dist/media-duration-display.js
  var __accessCheck10 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet10 = (obj, member, getter) => {
    __accessCheck10(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd10 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet10 = (obj, member, value, setter) => {
    __accessCheck10(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _slot2;
  var MediaDurationDisplay = class extends media_text_display_default {
    constructor() {
      super();
      __privateAdd10(this, _slot2, void 0);
      __privateSet10(this, _slot2, this.shadowRoot.querySelector("slot"));
      __privateGet10(this, _slot2).textContent = formatTime(0);
    }
    static get observedAttributes() {
      return [...super.observedAttributes, MediaUIAttributes.MEDIA_DURATION];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === MediaUIAttributes.MEDIA_DURATION) {
        __privateGet10(this, _slot2).textContent = formatTime(newValue);
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
  };
  _slot2 = /* @__PURE__ */ new WeakMap();
  if (!Window.customElements.get("media-duration-display")) {
    Window.customElements.define("media-duration-display", MediaDurationDisplay);
  }

  // node_modules/media-chrome/dist/media-time-display.js
  var __accessCheck11 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet11 = (obj, member, getter) => {
    __accessCheck11(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd11 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet11 = (obj, member, value, setter) => {
    __accessCheck11(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _slot3;
  var ButtonPressedKeys2 = ["Enter", " "];
  var DEFAULT_TIMES_SEP = "&nbsp;/&nbsp;";
  var formatTimesLabel = (el, { timesSep = DEFAULT_TIMES_SEP } = {}) => {
    var _a, _b, _c;
    const showRemaining = el.getAttribute("remaining") != null;
    const showDuration = el.getAttribute("show-duration") != null;
    const currentTime = (_a = el.mediaCurrentTime) != null ? _a : 0;
    const endTime = (_c = (_b = el.mediaDuration) != null ? _b : el.mediaSeekableEnd) != null ? _c : 0;
    const timeLabel = showRemaining ? formatTime(0 - (endTime - currentTime)) : formatTime(currentTime);
    if (!showDuration)
      return timeLabel;
    return `${timeLabel}${timesSep}${formatTime(endTime)}`;
  };
  var DEFAULT_MISSING_TIME_PHRASE = "video not loaded, unknown time.";
  var updateAriaValueText = (el) => {
    const currentTime = el.mediaCurrentTime;
    const endTime = el.mediaDuration || el.mediaSeekableEnd;
    if (currentTime == null || endTime == null) {
      el.setAttribute("aria-valuetext", DEFAULT_MISSING_TIME_PHRASE);
      return;
    }
    const showRemaining = el.hasAttribute("remaining");
    const showDuration = el.hasAttribute("show-duration");
    const currentTimePhrase = showRemaining ? formatAsTimePhrase(0 - (endTime - currentTime)) : formatAsTimePhrase(currentTime);
    if (!showDuration) {
      el.setAttribute("aria-valuetext", currentTimePhrase);
      return;
    }
    const totalTimePhrase = formatAsTimePhrase(endTime);
    const fullPhrase = `${currentTimePhrase} of ${totalTimePhrase}`;
    el.setAttribute("aria-valuetext", fullPhrase);
  };
  var MediaTimeDisplay = class extends media_text_display_default {
    constructor() {
      super();
      __privateAdd11(this, _slot3, void 0);
      __privateSet11(this, _slot3, this.shadowRoot.querySelector("slot"));
      __privateGet11(this, _slot3).innerHTML = `${formatTimesLabel(this)}`;
      const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
      style.setProperty("cursor", "pointer");
    }
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_CURRENT_TIME,
        MediaUIAttributes.MEDIA_DURATION,
        MediaUIAttributes.MEDIA_SEEKABLE,
        "remaining",
        "show-duration",
        "disabled"
      ];
    }
    connectedCallback() {
      if (!this.hasAttribute("disabled")) {
        this.enable();
      }
      this.setAttribute("role", "progressbar");
      this.setAttribute("aria-label", nouns.PLAYBACK_TIME());
      const keyUpHandler = (evt) => {
        const { key } = evt;
        if (!ButtonPressedKeys2.includes(key)) {
          this.removeEventListener("keyup", keyUpHandler);
          return;
        }
        this.toggleTimeDisplay();
      };
      this.addEventListener("keydown", (evt) => {
        const { metaKey, altKey, key } = evt;
        if (metaKey || altKey || !ButtonPressedKeys2.includes(key)) {
          this.removeEventListener("keyup", keyUpHandler);
          return;
        }
        this.addEventListener("keyup", keyUpHandler);
      });
      this.addEventListener("click", this.toggleTimeDisplay);
      super.connectedCallback();
    }
    toggleTimeDisplay() {
      if (this.hasAttribute("remaining")) {
        this.removeAttribute("remaining");
      } else {
        this.setAttribute("remaining", "");
      }
    }
    disconnectedCallback() {
      this.disable();
      super.disconnectedCallback();
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if ([
        MediaUIAttributes.MEDIA_CURRENT_TIME,
        MediaUIAttributes.MEDIA_DURATION,
        MediaUIAttributes.MEDIA_SEEKABLE,
        "remaining",
        "show-duration"
      ].includes(attrName)) {
        const timesLabel = formatTimesLabel(this);
        updateAriaValueText(this);
        if (timesLabel !== __privateGet11(this, _slot3).innerHTML) {
          __privateGet11(this, _slot3).innerHTML = timesLabel;
        }
      } else if (attrName === "disabled" && newValue !== oldValue) {
        if (newValue == null) {
          this.enable();
        } else {
          this.disable();
        }
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
    enable() {
      this.setAttribute("tabindex", 0);
    }
    disable() {
      this.removeAttribute("tabindex");
    }
    get mediaDuration() {
      const attrVal = this.getAttribute(MediaUIAttributes.MEDIA_DURATION);
      return attrVal != null ? +attrVal : void 0;
    }
    get mediaCurrentTime() {
      const attrVal = this.getAttribute(MediaUIAttributes.MEDIA_CURRENT_TIME);
      return attrVal != null ? +attrVal : void 0;
    }
    get mediaSeekable() {
      const seekable = this.getAttribute(MediaUIAttributes.MEDIA_SEEKABLE);
      if (!seekable)
        return void 0;
      return seekable.split(":").map((time) => +time);
    }
    get mediaSeekableEnd() {
      var _a;
      const [, end] = (_a = this.mediaSeekable) != null ? _a : [];
      return end;
    }
    get mediaSeekableStart() {
      var _a;
      const [start] = (_a = this.mediaSeekable) != null ? _a : [];
      return start;
    }
  };
  _slot3 = /* @__PURE__ */ new WeakMap();
  if (!Window.customElements.get("media-time-display")) {
    Window.customElements.define("media-time-display", MediaTimeDisplay);
  }

  // node_modules/media-chrome/dist/media-captions-button.js
  var ccIconOn = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M22.83 5.68a2.58 2.58 0 0 0-2.3-2.5c-3.62-.24-11.44-.24-15.06 0a2.58 2.58 0 0 0-2.3 2.5c-.23 4.21-.23 8.43 0 12.64a2.58 2.58 0 0 0 2.3 2.5c3.62.24 11.44.24 15.06 0a2.58 2.58 0 0 0 2.3-2.5c.23-4.21.23-8.43 0-12.64Zm-11.39 9.45a3.07 3.07 0 0 1-1.91.57 3.06 3.06 0 0 1-2.34-1 3.75 3.75 0 0 1-.92-2.67 3.92 3.92 0 0 1 .92-2.77 3.18 3.18 0 0 1 2.43-1 2.94 2.94 0 0 1 2.13.78c.364.359.62.813.74 1.31l-1.43.35a1.49 1.49 0 0 0-1.51-1.17 1.61 1.61 0 0 0-1.29.58 2.79 2.79 0 0 0-.5 1.89 3 3 0 0 0 .49 1.93 1.61 1.61 0 0 0 1.27.58 1.48 1.48 0 0 0 1-.37 2.1 2.1 0 0 0 .59-1.14l1.4.44a3.23 3.23 0 0 1-1.07 1.69Zm7.22 0a3.07 3.07 0 0 1-1.91.57 3.06 3.06 0 0 1-2.34-1 3.75 3.75 0 0 1-.92-2.67 3.88 3.88 0 0 1 .93-2.77 3.14 3.14 0 0 1 2.42-1 3 3 0 0 1 2.16.82 2.8 2.8 0 0 1 .73 1.31l-1.43.35a1.49 1.49 0 0 0-1.51-1.21 1.61 1.61 0 0 0-1.29.58A2.79 2.79 0 0 0 15 12a3 3 0 0 0 .49 1.93 1.61 1.61 0 0 0 1.27.58 1.44 1.44 0 0 0 1-.37 2.1 2.1 0 0 0 .6-1.15l1.4.44a3.17 3.17 0 0 1-1.1 1.7Z"/>
</svg>`;
  var ccIconOff = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M17.73 14.09a1.4 1.4 0 0 1-1 .37 1.579 1.579 0 0 1-1.27-.58A3 3 0 0 1 15 12a2.8 2.8 0 0 1 .5-1.85 1.63 1.63 0 0 1 1.29-.57 1.47 1.47 0 0 1 1.51 1.2l1.43-.34A2.89 2.89 0 0 0 19 9.07a3 3 0 0 0-2.14-.78 3.14 3.14 0 0 0-2.42 1 3.91 3.91 0 0 0-.93 2.78 3.74 3.74 0 0 0 .92 2.66 3.07 3.07 0 0 0 2.34 1 3.07 3.07 0 0 0 1.91-.57 3.17 3.17 0 0 0 1.07-1.74l-1.4-.45c-.083.43-.3.822-.62 1.12Zm-7.22 0a1.43 1.43 0 0 1-1 .37 1.58 1.58 0 0 1-1.27-.58A3 3 0 0 1 7.76 12a2.8 2.8 0 0 1 .5-1.85 1.63 1.63 0 0 1 1.29-.57 1.47 1.47 0 0 1 1.51 1.2l1.43-.34a2.81 2.81 0 0 0-.74-1.32 2.94 2.94 0 0 0-2.13-.78 3.18 3.18 0 0 0-2.43 1 4 4 0 0 0-.92 2.78 3.74 3.74 0 0 0 .92 2.66 3.07 3.07 0 0 0 2.34 1 3.07 3.07 0 0 0 1.91-.57 3.23 3.23 0 0 0 1.07-1.74l-1.4-.45a2.06 2.06 0 0 1-.6 1.07Zm12.32-8.41a2.59 2.59 0 0 0-2.3-2.51C18.72 3.05 15.86 3 13 3c-2.86 0-5.72.05-7.53.17a2.59 2.59 0 0 0-2.3 2.51c-.23 4.207-.23 8.423 0 12.63a2.57 2.57 0 0 0 2.3 2.5c1.81.13 4.67.19 7.53.19 2.86 0 5.72-.06 7.53-.19a2.57 2.57 0 0 0 2.3-2.5c.23-4.207.23-8.423 0-12.63Zm-1.49 12.53a1.11 1.11 0 0 1-.91 1.11c-1.67.11-4.45.18-7.43.18-2.98 0-5.76-.07-7.43-.18a1.11 1.11 0 0 1-.91-1.11c-.21-4.14-.21-8.29 0-12.43a1.11 1.11 0 0 1 .91-1.11C7.24 4.56 10 4.49 13 4.49s5.76.07 7.43.18a1.11 1.11 0 0 1 .91 1.11c.21 4.14.21 8.29 0 12.43Z"/>
</svg>`;
  var slotTemplate3 = Document.createElement("template");
  slotTemplate3.innerHTML = `
  <style>
  :host([aria-checked="true"]) slot:not([name=on]) > *,
  :host([aria-checked="true"]) ::slotted(:not([slot=on])) {
    display: none !important;
  }

  ${""}
  :host(:not([aria-checked="true"])) slot:not([name=off]) > *, 
  :host(:not([aria-checked="true"])) ::slotted(:not([slot=off])) {
    display: none !important;
  }
  </style>

  <slot name="on">${ccIconOn}</slot>
  <slot name="off">${ccIconOff}</slot>
`;
  var updateAriaChecked = (el) => {
    el.setAttribute("aria-checked", isCCOn(el));
  };
  var MediaCaptionsButton = class extends media_chrome_button_default {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        "no-subtitles-fallback",
        "default-showing",
        MediaUIAttributes.MEDIA_CAPTIONS_LIST,
        MediaUIAttributes.MEDIA_CAPTIONS_SHOWING,
        MediaUIAttributes.MEDIA_SUBTITLES_LIST,
        MediaUIAttributes.MEDIA_SUBTITLES_SHOWING
      ];
    }
    constructor(options = {}) {
      super({ slotTemplate: slotTemplate3, ...options });
      this._captionsReady = false;
    }
    connectedCallback() {
      super.connectedCallback();
      this.setAttribute("role", "switch");
      this.setAttribute("aria-label", nouns.CLOSED_CAPTIONS());
      updateAriaChecked(this);
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if ([
        MediaUIAttributes.MEDIA_CAPTIONS_SHOWING,
        MediaUIAttributes.MEDIA_SUBTITLES_SHOWING
      ].includes(attrName)) {
        updateAriaChecked(this);
      }
      if (this.hasAttribute("default-showing") && this.getAttribute("aria-checked") !== "true") {
        const subtitlesIncluded = !this.hasAttribute("no-subtitles-fallback");
        const relevantAttributes = subtitlesIncluded ? [
          MediaUIAttributes.MEDIA_CAPTIONS_LIST,
          MediaUIAttributes.MEDIA_SUBTITLES_LIST
        ] : [MediaUIAttributes.MEDIA_CAPTIONS_LIST];
        if (relevantAttributes.includes(attrName)) {
          const nextCaptionsReady = !!this.getAttribute(MediaUIAttributes.MEDIA_CAPTIONS_LIST) || !!(subtitlesIncluded && this.getAttribute(MediaUIAttributes.MEDIA_SUBTITLES_LIST));
          if (this._captionsReady !== nextCaptionsReady) {
            this._captionsReady = nextCaptionsReady;
            if (this._captionsReady) {
              toggleSubsCaps(this);
            }
          }
        }
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
    handleClick() {
      toggleSubsCaps(this);
    }
  };
  if (!Window.customElements.get("media-captions-button")) {
    Window.customElements.define("media-captions-button", MediaCaptionsButton);
  }

  // node_modules/media-chrome/dist/media-seek-forward-button.js
  var DEFAULT_SEEK_OFFSET2 = "30";
  var forwardIcon = `<svg aria-hidden="true" viewBox="0 0 20 24"><defs><style>.text{font-size:8px;font-family:Arial-BoldMT, Arial;font-weight:700;}</style></defs><text class="text value" transform="translate(8.9 19.87)">${DEFAULT_SEEK_OFFSET2}</text><path d="M10 6V3l5.61 4L10 10.94V8a5.54 5.54 0 0 0-1.9 10.48v2.12A7.5 7.5 0 0 1 10 6Z"/></svg>`;
  var slotTemplate4 = Document.createElement("template");
  slotTemplate4.innerHTML = `  
  <slot name="forward">${forwardIcon}</slot>
`;
  var DEFAULT_TIME2 = 0;
  var updateAriaLabel2 = (el) => {
    const seekOffset = Math.abs(+el.getAttribute("seek-offset"));
    const label = verbs.SEEK_FORWARD_N_SECS({ seekOffset });
    el.setAttribute("aria-label", label);
  };
  var updateSeekIconValue = (el) => {
    const svg = getSlotted(el, "forward");
    const value = el.getAttribute("seek-offset");
    updateIconText(svg, value);
  };
  var MediaSeekForwardButton = class extends media_chrome_button_default {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_CURRENT_TIME,
        "seek-offset"
      ];
    }
    constructor(options = {}) {
      super({ slotTemplate: slotTemplate4, ...options });
    }
    connectedCallback() {
      if (!this.hasAttribute("seek-offset")) {
        this.setAttribute("seek-offset", DEFAULT_SEEK_OFFSET2);
      }
      updateAriaLabel2(this);
      updateSeekIconValue(this);
      super.connectedCallback();
    }
    attributeChangedCallback(attrName, _oldValue, newValue) {
      if (attrName === "seek-offset") {
        if (newValue == void 0) {
          this.setAttribute("seek-offset", DEFAULT_SEEK_OFFSET2);
        }
        updateSeekIconValue(this);
        updateAriaLabel2(this);
      }
      super.attributeChangedCallback(attrName, _oldValue, newValue);
    }
    handleClick() {
      const currentTimeStr = this.getAttribute(
        MediaUIAttributes.MEDIA_CURRENT_TIME
      );
      const seekOffset = +this.getAttribute("seek-offset");
      const currentTime = currentTimeStr && !Number.isNaN(+currentTimeStr) ? +currentTimeStr : DEFAULT_TIME2;
      const detail = currentTime + seekOffset;
      const evt = new Window.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
        composed: true,
        bubbles: true,
        detail
      });
      this.dispatchEvent(evt);
    }
  };
  if (!Window.customElements.get("media-seek-forward-button")) {
    Window.customElements.define("media-seek-forward-button", MediaSeekForwardButton);
  }

  // node_modules/media-chrome/dist/media-fullscreen-button.js
  var enterFullscreenIcon = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M16 3v2.5h3.5V9H22V3h-6ZM4 9h2.5V5.5H10V3H4v6Zm15.5 9.5H16V21h6v-6h-2.5v3.5ZM6.5 15H4v6h6v-2.5H6.5V15Z"/>
</svg>`;
  var exitFullscreenIcon = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M18.5 6.5V3H16v6h6V6.5h-3.5ZM16 21h2.5v-3.5H22V15h-6v6ZM4 17.5h3.5V21H10v-6H4v2.5Zm3.5-11H4V9h6V3H7.5v3.5Z"/>
</svg>`;
  var slotTemplate5 = Document.createElement("template");
  slotTemplate5.innerHTML = `
  <style>
  :host([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}]) slot:not([name=exit]) > *,
  :host([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}]) ::slotted(:not([slot=exit])) {
    display: none !important;
  }

  ${""}
  :host(:not([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}])) slot:not([name=enter]) > *,
  :host(:not([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}])) ::slotted(:not([slot=enter])) {
    display: none !important;
  }
  </style>

  <slot name="enter">${enterFullscreenIcon}</slot>
  <slot name="exit">${exitFullscreenIcon}</slot>
`;
  var updateAriaLabel3 = (el) => {
    const isFullScreen = el.getAttribute(MediaUIAttributes.MEDIA_IS_FULLSCREEN) != null;
    const label = isFullScreen ? verbs.EXIT_FULLSCREEN() : verbs.ENTER_FULLSCREEN();
    el.setAttribute("aria-label", label);
  };
  var MediaFullscreenButton = class extends media_chrome_button_default {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_IS_FULLSCREEN,
        MediaUIAttributes.MEDIA_FULLSCREEN_UNAVAILABLE
      ];
    }
    constructor(options = {}) {
      super({ slotTemplate: slotTemplate5, ...options });
    }
    connectedCallback() {
      updateAriaLabel3(this);
      super.connectedCallback();
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === MediaUIAttributes.MEDIA_IS_FULLSCREEN) {
        updateAriaLabel3(this);
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
    handleClick() {
      const eventName = this.getAttribute(MediaUIAttributes.MEDIA_IS_FULLSCREEN) != null ? MediaUIEvents.MEDIA_EXIT_FULLSCREEN_REQUEST : MediaUIEvents.MEDIA_ENTER_FULLSCREEN_REQUEST;
      this.dispatchEvent(
        new Window.CustomEvent(eventName, { composed: true, bubbles: true })
      );
    }
  };
  if (!Window.customElements.get("media-fullscreen-button")) {
    Window.customElements.define("media-fullscreen-button", MediaFullscreenButton);
  }

  // node_modules/media-chrome/dist/media-live-button.js
  var { MEDIA_TIME_IS_LIVE, MEDIA_PAUSED } = MediaUIAttributes;
  var { MEDIA_SEEK_TO_LIVE_REQUEST, MEDIA_PLAY_REQUEST } = MediaUIEvents;
  var indicatorSVG = '<svg viewBox="0 0 6 12"><circle cx="3" cy="6" r="2"></circle></svg>';
  var slotTemplate6 = Document.createElement("template");
  slotTemplate6.innerHTML = `
  <style>

  slot[name=indicator] > *,
  :host ::slotted([slot=indicator]) {
    ${""}
    min-width: auto;
    fill: var(--media-live-button-icon-color, rgb(140, 140, 140));
    color: var(--media-live-button-icon-color, rgb(140, 140, 140));
  }

  :host([${MEDIA_TIME_IS_LIVE}]:not([${MEDIA_PAUSED}])) slot[name=indicator] > *,
  :host([${MEDIA_TIME_IS_LIVE}]:not([${MEDIA_PAUSED}])) ::slotted([slot=indicator]) {
    fill: var(--media-live-indicator-color, rgb(255, 0, 0));
    color: var(--media-live-indicator-color, rgb(255, 0, 0));
  }

  :host([${MEDIA_TIME_IS_LIVE}]:not([${MEDIA_PAUSED}])) {
    cursor: not-allowed;
  }

  </style>

  <slot name="indicator">${indicatorSVG}</slot>
  ${""}
  <slot name="spacer">&nbsp;</slot><slot name="text">LIVE</slot>
`;
  var MediaLiveButton = class extends media_chrome_button_default {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MEDIA_PAUSED,
        MEDIA_TIME_IS_LIVE
      ];
    }
    constructor(options = {}) {
      super({ slotTemplate: slotTemplate6, ...options });
      this.setAttribute("aria-label", verbs.SEEK_LIVE());
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      super.attributeChangedCallback(attrName, oldValue, newValue);
      if (this.hasAttribute(MEDIA_PAUSED) || !this.hasAttribute(MEDIA_TIME_IS_LIVE)) {
        this.setAttribute("aria-label", verbs.SEEK_LIVE());
        this.removeAttribute("aria-disabled");
      } else {
        this.setAttribute("aria-label", verbs.PLAYING_LIVE());
        this.setAttribute("aria-disabled", "true");
      }
    }
    handleClick() {
      if (!this.hasAttribute(MEDIA_PAUSED) && this.hasAttribute(MEDIA_TIME_IS_LIVE))
        return;
      this.dispatchEvent(
        new Window.CustomEvent(MEDIA_SEEK_TO_LIVE_REQUEST, { composed: true, bubbles: true })
      );
      if (this.hasAttribute(MEDIA_PAUSED)) {
        this.dispatchEvent(
          new Window.CustomEvent(MEDIA_PLAY_REQUEST, { composed: true, bubbles: true })
        );
      }
    }
  };
  if (!Window.customElements.get("media-live-button")) {
    Window.customElements.define("media-live-button", MediaLiveButton);
  }

  // node_modules/media-chrome/dist/media-mute-button.js
  var offIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M16.5 12A4.5 4.5 0 0 0 14 8v2.18l2.45 2.45a4.22 4.22 0 0 0 .05-.63Zm2.5 0a6.84 6.84 0 0 1-.54 2.64L20 16.15A8.8 8.8 0 0 0 21 12a9 9 0 0 0-7-8.77v2.06A7 7 0 0 1 19 12ZM4.27 3 3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25A6.92 6.92 0 0 1 14 18.7v2.06A9 9 0 0 0 17.69 19l2 2.05L21 19.73l-9-9L4.27 3ZM12 4 9.91 6.09 12 8.18V4Z"/>
</svg>`;
  var lowIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M3 9v6h4l5 5V4L7 9H3Zm13.5 3A4.5 4.5 0 0 0 14 8v8a4.47 4.47 0 0 0 2.5-4Z"/>
</svg>`;
  var highIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M3 9v6h4l5 5V4L7 9H3Zm13.5 3A4.5 4.5 0 0 0 14 8v8a4.47 4.47 0 0 0 2.5-4ZM14 3.23v2.06a7 7 0 0 1 0 13.42v2.06a9 9 0 0 0 0-17.54Z"/>
</svg>`;
  var slotTemplate7 = Document.createElement("template");
  slotTemplate7.innerHTML = `
  <style>
  ${""}
  :host(:not([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}])) slot:not([name=high]) > *, 
  :host(:not([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}])) ::slotted(:not([slot=high])),
  :host([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=high]) slot:not([name=high]) > *, 
  :host([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=high]) ::slotted(:not([slot=high])) {
    display: none !important;
  }

  :host([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=off]) slot:not([name=off]) > *, 
  :host([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=off]) ::slotted(:not([slot=off])) {
    display: none !important;
  }

  :host([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=low]) slot:not([name=low]) > *, 
  :host([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=low]) ::slotted(:not([slot=low])) {
    display: none !important;
  }

  :host([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=medium]) slot:not([name=medium]) > *, 
  :host([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=medium]) ::slotted(:not([slot=medium])) {
    display: none !important;
  }
  </style>

  <slot name="off">${offIcon}</slot>
  <slot name="low">${lowIcon}</slot>
  <slot name="medium">${lowIcon}</slot>
  <slot name="high">${highIcon}</slot>
`;
  var updateAriaLabel4 = (el) => {
    const muted = el.getAttribute(MediaUIAttributes.MEDIA_VOLUME_LEVEL) === "off";
    const label = muted ? verbs.UNMUTE() : verbs.MUTE();
    el.setAttribute("aria-label", label);
  };
  var MediaMuteButton = class extends media_chrome_button_default {
    static get observedAttributes() {
      return [...super.observedAttributes, MediaUIAttributes.MEDIA_VOLUME_LEVEL];
    }
    constructor(options = {}) {
      super({ slotTemplate: slotTemplate7, ...options });
    }
    connectedCallback() {
      updateAriaLabel4(this);
      super.connectedCallback();
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === MediaUIAttributes.MEDIA_VOLUME_LEVEL) {
        updateAriaLabel4(this);
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
    handleClick() {
      const eventName = this.getAttribute(MediaUIAttributes.MEDIA_VOLUME_LEVEL) === "off" ? MediaUIEvents.MEDIA_UNMUTE_REQUEST : MediaUIEvents.MEDIA_MUTE_REQUEST;
      this.dispatchEvent(
        new Window.CustomEvent(eventName, { composed: true, bubbles: true })
      );
    }
  };
  if (!Window.customElements.get("media-mute-button")) {
    Window.customElements.define("media-mute-button", MediaMuteButton);
  }

  // node_modules/media-chrome/dist/media-pip-button.js
  var pipIcon = `<svg aria-hidden="true" viewBox="0 0 28 24">
  <path d="M24 3H4a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h20a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1Zm-1 16H5V5h18v14Zm-3-8h-7v5h7v-5Z"/>
</svg>`;
  var slotTemplate8 = Document.createElement("template");
  slotTemplate8.innerHTML = `
  <style>
  :host([${MediaUIAttributes.MEDIA_IS_PIP}]) slot:not([name=exit]) > *, 
  :host([${MediaUIAttributes.MEDIA_IS_PIP}]) ::slotted(:not([slot=exit])) {
    display: none !important;
  }

  ${""}
  :host(:not([${MediaUIAttributes.MEDIA_IS_PIP}])) slot:not([name=enter]) > *, 
  :host(:not([${MediaUIAttributes.MEDIA_IS_PIP}])) ::slotted(:not([slot=enter])) {
    display: none !important;
  }
  </style>

  <slot name="enter">${pipIcon}</slot>
  <slot name="exit">${pipIcon}</slot>
`;
  var updateAriaLabel5 = (el) => {
    const isPip = el.getAttribute(MediaUIAttributes.MEDIA_IS_PIP) != null;
    const label = isPip ? verbs.EXIT_PIP() : verbs.ENTER_PIP();
    el.setAttribute("aria-label", label);
  };
  var MediaPipButton = class extends media_chrome_button_default {
    static get observedAttributes() {
      return [...super.observedAttributes, MediaUIAttributes.MEDIA_IS_PIP, MediaUIAttributes.MEDIA_PIP_UNAVAILABLE];
    }
    constructor(options = {}) {
      super({ slotTemplate: slotTemplate8, ...options });
    }
    connectedCallback() {
      updateAriaLabel5(this);
      super.connectedCallback();
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === MediaUIAttributes.MEDIA_IS_PIP) {
        updateAriaLabel5(this);
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
    handleClick() {
      const eventName = this.getAttribute(MediaUIAttributes.MEDIA_IS_PIP) != null ? MediaUIEvents.MEDIA_EXIT_PIP_REQUEST : MediaUIEvents.MEDIA_ENTER_PIP_REQUEST;
      this.dispatchEvent(
        new Window.CustomEvent(eventName, { composed: true, bubbles: true })
      );
    }
  };
  if (!Window.customElements.get("media-pip-button")) {
    Window.customElements.define("media-pip-button", MediaPipButton);
  }

  // node_modules/media-chrome/dist/media-play-button.js
  var playIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="m6 21 15-9L6 3v18Z"/>
</svg>`;
  var pauseIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M6 20h4V4H6v16Zm8-16v16h4V4h-4Z"/>
</svg>`;
  var slotTemplate9 = Document.createElement("template");
  slotTemplate9.innerHTML = `
  <style>
  :host([${MediaUIAttributes.MEDIA_PAUSED}]) slot[name=pause] > *, 
  :host([${MediaUIAttributes.MEDIA_PAUSED}]) ::slotted([slot=pause]) {
    display: none !important;
  }

  :host(:not([${MediaUIAttributes.MEDIA_PAUSED}])) slot[name=play] > *, 
  :host(:not([${MediaUIAttributes.MEDIA_PAUSED}])) ::slotted([slot=play]) {
    display: none !important;
  }
  </style>

  <slot name="play">${playIcon}</slot>
  <slot name="pause">${pauseIcon}</slot>
`;
  var updateAriaLabel6 = (el) => {
    const paused = el.getAttribute(MediaUIAttributes.MEDIA_PAUSED) != null;
    const label = paused ? verbs.PLAY() : verbs.PAUSE();
    el.setAttribute("aria-label", label);
  };
  var MediaPlayButton = class extends media_chrome_button_default {
    static get observedAttributes() {
      return [...super.observedAttributes, MediaUIAttributes.MEDIA_PAUSED];
    }
    constructor(options = {}) {
      super({ slotTemplate: slotTemplate9, ...options });
    }
    connectedCallback() {
      updateAriaLabel6(this);
      super.connectedCallback();
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === MediaUIAttributes.MEDIA_PAUSED) {
        updateAriaLabel6(this);
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
    handleClick() {
      const eventName = this.getAttribute(MediaUIAttributes.MEDIA_PAUSED) != null ? MediaUIEvents.MEDIA_PLAY_REQUEST : MediaUIEvents.MEDIA_PAUSE_REQUEST;
      this.dispatchEvent(
        new Window.CustomEvent(eventName, { composed: true, bubbles: true })
      );
    }
  };
  if (!Window.customElements.get("media-play-button")) {
    Window.customElements.define("media-play-button", MediaPlayButton);
  }

  // node_modules/media-chrome/dist/media-playback-rate-button.js
  var DEFAULT_RATES = [1, 1.25, 1.5, 1.75, 2];
  var DEFAULT_RATE = 1;
  var slotTemplate10 = Document.createElement("template");
  slotTemplate10.innerHTML = `
  <span id="container"></span>
`;
  var MediaPlaybackRateButton = class extends media_chrome_button_default {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_PLAYBACK_RATE,
        "rates"
      ];
    }
    constructor(options = {}) {
      super({ slotTemplate: slotTemplate10, ...options });
      this._rates = DEFAULT_RATES;
      this.container = this.shadowRoot.querySelector("#container");
      this.container.innerHTML = `${DEFAULT_RATE}x`;
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === "rates") {
        const newRates = (newValue != null ? newValue : "").trim().split(/\s*,?\s+/).map((str) => Number(str)).filter((num) => !Number.isNaN(num)).sort((a, b2) => a - b2);
        this._rates = newRates.length ? newRates : DEFAULT_RATES;
        return;
      }
      if (attrName === MediaUIAttributes.MEDIA_PLAYBACK_RATE) {
        const newPlaybackRate = newValue ? +newValue : Number.NaN;
        const playbackRate = !Number.isNaN(newPlaybackRate) ? newPlaybackRate : DEFAULT_RATE;
        this.container.innerHTML = `${playbackRate}x`;
        this.setAttribute("aria-label", nouns.PLAYBACK_RATE({ playbackRate }));
        return;
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
    handleClick() {
      var _a, _b;
      const currentRate = +this.getAttribute(MediaUIAttributes.MEDIA_PLAYBACK_RATE) || DEFAULT_RATE;
      const detail = (_b = (_a = this._rates.find((r) => r > currentRate)) != null ? _a : this._rates[0]) != null ? _b : DEFAULT_RATE;
      const evt = new Window.CustomEvent(
        MediaUIEvents.MEDIA_PLAYBACK_RATE_REQUEST,
        { composed: true, bubbles: true, detail }
      );
      this.dispatchEvent(evt);
    }
  };
  if (!Window.customElements.get("media-playback-rate-button")) {
    Window.customElements.define("media-playback-rate-button", MediaPlaybackRateButton);
  }

  // node_modules/media-chrome/dist/media-poster-image.js
  var template7 = Document.createElement("template");
  template7.innerHTML = `
  <style>
    :host {
      pointer-events: none;
      display: var(--media-poster-image-display, inline-block);
      box-sizing: border-box;
    }

    img {
      max-width: 100%;
      max-height: 100%;
      min-width: 100%;
      min-height: 100%;
      background-repeat: no-repeat;
      background-position: var(--media-background-position, var(--media-object-position, center));
      background-size: var(--media-background-size, var(--media-object-fit, contain));
      object-fit: var(--media-object-fit, contain);
      object-position: var(--media-object-position, center);
    }
  </style>

  <img aria-hidden="true" id="image"/>
`;
  var unsetBackgroundImage = (el) => {
    el.style.removeProperty("background-image");
  };
  var setBackgroundImage = (el, image) => {
    el.style["background-image"] = `url('${image}')`;
  };
  var MediaPosterImage = class extends Window.HTMLElement {
    static get observedAttributes() {
      return ["placeholder-src", "src"];
    }
    constructor() {
      super();
      if (!this.shadowRoot) {
        this.attachShadow({ mode: "open" });
        this.shadowRoot.appendChild(template7.content.cloneNode(true));
      }
      this.image = this.shadowRoot.querySelector("#image");
    }
    attributeChangedCallback(attrName, _oldValue, newValue) {
      if (attrName === "src") {
        if (newValue == null) {
          this.image.removeAttribute("src");
        } else {
          this.image.setAttribute("src", newValue);
        }
      }
      if (attrName === "placeholder-src") {
        if (newValue == null) {
          unsetBackgroundImage(this.image);
        } else {
          setBackgroundImage(this.image, newValue);
        }
      }
    }
  };
  if (!Window.customElements.get("media-poster-image")) {
    Window.customElements.define("media-poster-image", MediaPosterImage);
  }

  // node_modules/media-chrome/dist/media-seek-backward-button.js
  var DEFAULT_SEEK_OFFSET3 = "30";
  var backwardIcon = `<svg aria-hidden="true" viewBox="0 0 20 24"><defs><style>.text{font-size:8px;font-family:Arial-BoldMT, Arial;font-weight:700;}</style></defs><text class="text value" transform="translate(2.18 19.87)">${DEFAULT_SEEK_OFFSET3}</text><path d="M10 6V3L4.37 7 10 10.94V8a5.54 5.54 0 0 1 1.9 10.48v2.12A7.5 7.5 0 0 0 10 6Z"/></svg>`;
  var slotTemplate11 = Document.createElement("template");
  slotTemplate11.innerHTML = `  
  <slot name="backward">${backwardIcon}</slot>
`;
  var DEFAULT_TIME3 = 0;
  var updateAriaLabel7 = (el) => {
    const seekOffset = Math.abs(+el.getAttribute("seek-offset"));
    const label = verbs.SEEK_BACK_N_SECS({ seekOffset });
    el.setAttribute("aria-label", label);
  };
  var updateSeekIconValue2 = (el) => {
    const svg = getSlotted(el, "backward");
    const value = el.getAttribute("seek-offset");
    updateIconText(svg, value);
  };
  var MediaSeekBackwardButton = class extends media_chrome_button_default {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        "seek-offset",
        MediaUIAttributes.MEDIA_CURRENT_TIME
      ];
    }
    constructor(options = {}) {
      super({ slotTemplate: slotTemplate11, ...options });
    }
    connectedCallback() {
      if (!this.hasAttribute("seek-offset")) {
        this.setAttribute("seek-offset", DEFAULT_SEEK_OFFSET3);
      }
      updateAriaLabel7(this);
      updateSeekIconValue2(this);
      super.connectedCallback();
    }
    attributeChangedCallback(attrName, _oldValue, newValue) {
      if (attrName === "seek-offset") {
        if (newValue == void 0) {
          this.setAttribute("seek-offset", DEFAULT_SEEK_OFFSET3);
        }
        updateSeekIconValue2(this);
        updateAriaLabel7(this);
      }
      super.attributeChangedCallback(attrName, _oldValue, newValue);
    }
    handleClick() {
      const currentTimeStr = this.getAttribute(
        MediaUIAttributes.MEDIA_CURRENT_TIME
      );
      const seekOffset = +this.getAttribute("seek-offset");
      const currentTime = currentTimeStr && !Number.isNaN(+currentTimeStr) ? +currentTimeStr : DEFAULT_TIME3;
      const detail = Math.max(currentTime - seekOffset, 0);
      const evt = new Window.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
        composed: true,
        bubbles: true,
        detail
      });
      this.dispatchEvent(evt);
    }
  };
  if (!Window.customElements.get("media-seek-backward-button")) {
    Window.customElements.define("media-seek-backward-button", MediaSeekBackwardButton);
  }

  // node_modules/media-chrome/dist/media-preview-time-display.js
  var __accessCheck12 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet12 = (obj, member, getter) => {
    __accessCheck12(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd12 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet12 = (obj, member, value, setter) => {
    __accessCheck12(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _slot4;
  var MediaPreviewTimeDisplay = class extends media_text_display_default {
    constructor() {
      super();
      __privateAdd12(this, _slot4, void 0);
      __privateSet12(this, _slot4, this.shadowRoot.querySelector("slot"));
      __privateGet12(this, _slot4).textContent = formatTime(0);
    }
    static get observedAttributes() {
      return [...super.observedAttributes, MediaUIAttributes.MEDIA_PREVIEW_TIME];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === MediaUIAttributes.MEDIA_PREVIEW_TIME && newValue != null) {
        __privateGet12(this, _slot4).textContent = formatTime(newValue);
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
  };
  _slot4 = /* @__PURE__ */ new WeakMap();
  if (!Window.customElements.get("media-preview-time-display")) {
    Window.customElements.define("media-preview-time-display", MediaPreviewTimeDisplay);
  }

  // node_modules/media-chrome/dist/media-preview-thumbnail.js
  var __accessCheck13 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet13 = (obj, member, getter) => {
    __accessCheck13(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd13 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet13 = (obj, member, value, setter) => {
    __accessCheck13(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _mediaController6;
  var template8 = Document.createElement("template");
  template8.innerHTML = `
  <style>
    :host {
      box-sizing: border-box;
      display: var(--media-control-display, var(--media-preview-thumbnail-display, inline-block));
      overflow: hidden;
    }

    img {
      display: none;
      position: relative;
    }
  </style>
  <img crossorigin loading="eager" decoding="async" />
`;
  var MediaPreviewThumbnail = class extends Window.HTMLElement {
    constructor() {
      super();
      __privateAdd13(this, _mediaController6, void 0);
      if (!this.shadowRoot) {
        this.attachShadow({ mode: "open" });
        this.shadowRoot.appendChild(template8.content.cloneNode(true));
      }
    }
    static get observedAttributes() {
      return [
        MediaStateReceiverAttributes.MEDIA_CONTROLLER,
        "time",
        MediaUIAttributes.MEDIA_PREVIEW_IMAGE,
        MediaUIAttributes.MEDIA_PREVIEW_COORDS
      ];
    }
    connectedCallback() {
      var _a, _b, _c;
      const mediaControllerId = this.getAttribute(
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      );
      if (mediaControllerId) {
        __privateSet13(this, _mediaController6, (_a = this.getRootNode()) == null ? void 0 : _a.getElementById(mediaControllerId));
        (_c = (_b = __privateGet13(this, _mediaController6)) == null ? void 0 : _b.associateElement) == null ? void 0 : _c.call(_b, this);
      }
    }
    disconnectedCallback() {
      var _a, _b;
      (_b = (_a = __privateGet13(this, _mediaController6)) == null ? void 0 : _a.unassociateElement) == null ? void 0 : _b.call(_a, this);
      __privateSet13(this, _mediaController6, null);
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a, _b, _c, _d, _e;
      if ([
        "time",
        MediaUIAttributes.MEDIA_PREVIEW_IMAGE,
        MediaUIAttributes.MEDIA_PREVIEW_COORDS
      ].includes(attrName)) {
        this.update();
      }
      if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
        if (oldValue) {
          (_b = (_a = __privateGet13(this, _mediaController6)) == null ? void 0 : _a.unassociateElement) == null ? void 0 : _b.call(_a, this);
          __privateSet13(this, _mediaController6, null);
        }
        if (newValue) {
          __privateSet13(this, _mediaController6, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
          (_e = (_d = __privateGet13(this, _mediaController6)) == null ? void 0 : _d.associateElement) == null ? void 0 : _e.call(_d, this);
        }
      }
    }
    update() {
      const mediaPreviewCoordsStr = this.getAttribute(
        MediaUIAttributes.MEDIA_PREVIEW_COORDS
      );
      const mediaPreviewImage = this.getAttribute(
        MediaUIAttributes.MEDIA_PREVIEW_IMAGE
      );
      if (!(mediaPreviewCoordsStr && mediaPreviewImage))
        return;
      const [x, y, w2, h3] = mediaPreviewCoordsStr.split(/\s+/).map((coord) => +coord);
      const src = mediaPreviewImage.split("#")[0];
      const computedStyle = getComputedStyle(this);
      const { maxWidth, maxHeight, minWidth, minHeight } = computedStyle;
      const maxRatio = Math.min(parseInt(maxWidth) / w2, parseInt(maxHeight) / h3);
      const minRatio = Math.max(parseInt(minWidth) / w2, parseInt(minHeight) / h3);
      const isScalingDown = maxRatio < 1;
      const scale = isScalingDown ? maxRatio : minRatio > 1 ? minRatio : 1;
      const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
      const imgStyle = getOrInsertCSSRule(this.shadowRoot, "img").style;
      const img = this.shadowRoot.querySelector("img");
      const extremum = isScalingDown ? "min" : "max";
      style.setProperty(`${extremum}-width`, "initial", "important");
      style.setProperty(`${extremum}-height`, "initial", "important");
      style.width = `${w2 * scale}px`;
      style.height = `${h3 * scale}px`;
      const resize = () => {
        imgStyle.width = `${this.imgWidth * scale}px`;
        imgStyle.height = `${this.imgHeight * scale}px`;
        imgStyle.display = "block";
      };
      if (img.src !== src) {
        img.onload = () => {
          this.imgWidth = img.naturalWidth;
          this.imgHeight = img.naturalHeight;
          resize();
        };
        img.src = src;
        resize();
      }
      resize();
      imgStyle.transform = `translate(-${x * scale}px, -${y * scale}px)`;
    }
  };
  _mediaController6 = /* @__PURE__ */ new WeakMap();
  if (!Window.customElements.get("media-preview-thumbnail")) {
    Window.customElements.define("media-preview-thumbnail", MediaPreviewThumbnail);
  }

  // node_modules/media-chrome/dist/media-time-range.js
  var __accessCheck14 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet14 = (obj, member, getter) => {
    __accessCheck14(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd14 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet14 = (obj, member, value, setter) => {
    __accessCheck14(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod3 = (obj, member, method) => {
    __accessCheck14(obj, member, "access private method");
    return method;
  };
  var _boxes;
  var _previewBox;
  var _currentBox;
  var _boxPaddingLeft;
  var _boxPaddingRight;
  var _getBoxPosition;
  var getBoxPosition_fn;
  var _pointermoveHandler;
  var _rangeEntered;
  var _offRangeHandler;
  var _trackMouse;
  var _stopTrackingMouse;
  var _rangepointermoveHandler;
  var _enableBoxes;
  var enableBoxes_fn;
  var _disableBoxes;
  var disableBoxes_fn;
  var DEFAULT_MISSING_TIME_PHRASE2 = "video not loaded, unknown time.";
  var updateAriaValueText2 = (el) => {
    const range = el.range;
    const currentTimePhrase = formatAsTimePhrase(+range.value);
    const totalTimePhrase = formatAsTimePhrase(+range.max);
    const fullPhrase = !(currentTimePhrase && totalTimePhrase) ? DEFAULT_MISSING_TIME_PHRASE2 : `${currentTimePhrase} of ${totalTimePhrase}`;
    range.setAttribute("aria-valuetext", fullPhrase);
  };
  var template9 = Document.createElement("template");
  template9.innerHTML = `
  <style>
    :host {
      --media-preview-border-radius: 3px;
      --media-box-padding-left: 10px;
      --media-box-padding-right: 10px;
    }

    #preview-rail,
    #current-rail {
      ${""}
      width: 1%;
      position: absolute;
      left: 0;
      bottom: 100%;
      pointer-events: none;
    }

    [part~="box"] {
      ${""}
      position: absolute;
      bottom: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      transform: translateX(-50%);
    }

    [part~="preview-box"] {
      transition-property: var(--media-preview-transition-property, visibility, opacity);
      transition-duration: var(--media-preview-transition-duration-out, .25s);
      transition-delay: var(--media-preview-transition-delay-out, 0s);
      visibility: hidden;
      opacity: 0;
    }

    :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]:hover) [part~="preview-box"],
    :host([${MediaUIAttributes.MEDIA_PREVIEW_TIME}]:hover) [part~="preview-box"] {
      transition-duration: var(--media-preview-transition-duration-in, .5s);
      transition-delay: var(--media-preview-transition-delay-in, .25s);
      visibility: visible;
      opacity: 1;
    }

    media-preview-thumbnail,
    ::slotted(media-preview-thumbnail) {
      visibility: hidden;
      ${""}
      transition: visibility 0s .25s;
      transition-delay: calc(var(--media-preview-transition-delay-out, 0s) + var(--media-preview-transition-duration-out, .25s));
      background: var(--media-preview-time-background, var(--media-preview-background, var(--media-control-background, var(--media-secondary-color, rgb(20 20 30 / .7)))));
      box-shadow: var(--media-preview-thumbnail-box-shadow, 0 0 4px rgb(0 0 0 / .2));
      max-width: var(--media-preview-thumbnail-max-width, 180px);
      max-height: var(--media-preview-thumbnail-max-height, 160px);
      min-width: var(--media-preview-thumbnail-min-width, 120px);
      min-height: var(--media-preview-thumbnail-min-height, 80px);
      border: var(--media-preview-thumbnail-border);
      border-radius: var(--media-preview-thumbnail-border-radius,
        var(--media-preview-border-radius) var(--media-preview-border-radius) 0 0);
    }

    :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]:hover) media-preview-thumbnail,
    :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]:hover) ::slotted(media-preview-thumbnail) {
      transition-delay: var(--media-preview-transition-delay-in, .25s);
      visibility: visible;
    }

    media-preview-time-display,
    ::slotted(media-preview-time-display) {
      min-width: 0;
      ${""}
      transition: min-width 0s, border-radius 0s;
      transition-delay: calc(var(--media-preview-transition-delay-out, 0s) + var(--media-preview-transition-duration-out, .25s));
      background: var(--media-preview-time-background, var(--media-preview-background, var(--media-control-background, var(--media-secondary-color, rgb(20 20 30 / .7)))));
      border-radius: var(--media-preview-time-border-radius,
        var(--media-preview-border-radius) var(--media-preview-border-radius)
        var(--media-preview-border-radius) var(--media-preview-border-radius));
      padding: var(--media-preview-time-padding, 1px 10px 0);
      margin: var(--media-preview-time-margin, 0 0 10px);
      text-shadow: var(--media-preview-time-text-shadow, 0 0 4px rgb(0 0 0 / .75));
    }

    :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]) media-preview-time-display,
    :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]) ::slotted(media-preview-time-display) {
      transition-delay: var(--media-preview-transition-delay-in, .25s);
      min-width: 100%;
      border-radius: var(--media-preview-time-border-radius,
        0 0 var(--media-preview-border-radius) var(--media-preview-border-radius));
    }

    :host([${MediaUIAttributes.MEDIA_PREVIEW_TIME}]:hover) {
      --media-time-range-hover-display: block;
    }
  </style>
  <div id="preview-rail">
    <slot name="preview" part="box preview-box">
      <media-preview-thumbnail></media-preview-thumbnail>
      <media-preview-time-display></media-preview-time-display>
    </slot>
  </div>
  <div id="current-rail">
    <slot name="current" part="box current-box">
      ${""}
    </slot>
  </div>
`;
  var MediaTimeRange = class extends media_chrome_range_default {
    constructor() {
      super();
      __privateAdd14(this, _getBoxPosition);
      __privateAdd14(this, _enableBoxes);
      __privateAdd14(this, _disableBoxes);
      __privateAdd14(this, _boxes, void 0);
      __privateAdd14(this, _previewBox, void 0);
      __privateAdd14(this, _currentBox, void 0);
      __privateAdd14(this, _boxPaddingLeft, void 0);
      __privateAdd14(this, _boxPaddingRight, void 0);
      __privateAdd14(this, _pointermoveHandler, (evt) => {
        if ([...__privateGet14(this, _boxes)].some((b2) => evt.composedPath().includes(b2)))
          return;
        this.updatePointerBar(evt);
        const duration = +this.getAttribute(MediaUIAttributes.MEDIA_DURATION);
        if (!duration)
          return;
        const rangeRect = this.range.getBoundingClientRect();
        let mouseRatio = (evt.clientX - rangeRect.left) / rangeRect.width;
        mouseRatio = Math.max(0, Math.min(1, mouseRatio));
        const boxPos = __privateMethod3(this, _getBoxPosition, getBoxPosition_fn).call(this, __privateGet14(this, _previewBox), mouseRatio);
        const { style } = getOrInsertCSSRule(
          this.shadowRoot,
          "#preview-rail"
        );
        style.transform = `translateX(${boxPos})`;
        const detail = mouseRatio * duration;
        const mediaPreviewEvt = new Window.CustomEvent(
          MediaUIEvents.MEDIA_PREVIEW_REQUEST,
          { composed: true, bubbles: true, detail }
        );
        this.dispatchEvent(mediaPreviewEvt);
      });
      __privateAdd14(this, _rangeEntered, false);
      __privateAdd14(this, _offRangeHandler, (evt) => {
        if (!evt.composedPath().includes(this) || [...__privateGet14(this, _boxes)].some((b2) => evt.composedPath().includes(b2))) {
          Window.removeEventListener("pointermove", __privateGet14(this, _offRangeHandler));
          __privateSet14(this, _rangeEntered, false);
          __privateGet14(this, _stopTrackingMouse).call(this);
        }
      });
      __privateAdd14(this, _trackMouse, () => {
        Window.addEventListener("pointermove", __privateGet14(this, _pointermoveHandler), false);
      });
      __privateAdd14(this, _stopTrackingMouse, () => {
        Window.removeEventListener("pointermove", __privateGet14(this, _pointermoveHandler));
        const endEvt = new Window.CustomEvent(
          MediaUIEvents.MEDIA_PREVIEW_REQUEST,
          { composed: true, bubbles: true, detail: null }
        );
        this.dispatchEvent(endEvt);
      });
      __privateAdd14(this, _rangepointermoveHandler, () => {
        const mediaDurationStr = this.getAttribute(
          MediaUIAttributes.MEDIA_DURATION
        );
        if (!__privateGet14(this, _rangeEntered) && mediaDurationStr) {
          __privateSet14(this, _rangeEntered, true);
          __privateGet14(this, _trackMouse).call(this);
          Window.addEventListener("pointermove", __privateGet14(this, _offRangeHandler), false);
        }
      });
      this.container.appendChild(template9.content.cloneNode(true));
      this.range.addEventListener("input", () => {
        cancelAnimationFrame(this._refreshId);
        const newTime = this.range.value;
        const detail = newTime;
        const evt = new Window.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
          composed: true,
          bubbles: true,
          detail
        });
        this.dispatchEvent(evt);
      });
      this._refreshBar = () => {
        const delta = (performance.now() - this._updateTimestamp) / 1e3;
        this.range.value = this.mediaCurrentTime + delta * this.mediaPlaybackRate;
        this.updateBar();
        this.updateCurrentBox();
        this._refreshId = requestAnimationFrame(this._refreshBar);
      };
      __privateSet14(this, _boxes, this.shadowRoot.querySelectorAll('[part~="box"]'));
      __privateSet14(this, _previewBox, this.shadowRoot.querySelector('[part~="preview-box"]'));
      __privateSet14(this, _currentBox, this.shadowRoot.querySelector('[part~="current-box"]'));
      const computedStyle = getComputedStyle(this);
      __privateSet14(this, _boxPaddingLeft, parseInt(
        computedStyle.getPropertyValue("--media-box-padding-left")
      ));
      __privateSet14(this, _boxPaddingRight, parseInt(
        computedStyle.getPropertyValue("--media-box-padding-right")
      ));
      __privateMethod3(this, _enableBoxes, enableBoxes_fn).call(this);
    }
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        "thumbnails",
        "disabled",
        MediaUIAttributes.MEDIA_PAUSED,
        MediaUIAttributes.MEDIA_DURATION,
        MediaUIAttributes.MEDIA_SEEKABLE,
        MediaUIAttributes.MEDIA_CURRENT_TIME,
        MediaUIAttributes.MEDIA_PREVIEW_IMAGE,
        MediaUIAttributes.MEDIA_PREVIEW_TIME,
        MediaUIAttributes.MEDIA_BUFFERED,
        MediaUIAttributes.MEDIA_PLAYBACK_RATE,
        MediaUIAttributes.MEDIA_LOADING
      ];
    }
    connectedCallback() {
      this.range.setAttribute("aria-label", nouns.SEEK());
      super.connectedCallback();
    }
    disconnectedCallback() {
      cancelAnimationFrame(this._refreshId);
      super.disconnectedCallback();
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a, _b, _c, _d, _e;
      if (attrName === MediaUIAttributes.MEDIA_CURRENT_TIME || attrName === MediaUIAttributes.MEDIA_PAUSED || attrName === MediaUIAttributes.MEDIA_LOADING) {
        this._updateTimestamp = performance.now();
        this.range.value = this.mediaCurrentTime;
        updateAriaValueText2(this);
        this.updateBar();
        this.updateCurrentBox();
        cancelAnimationFrame(this._refreshId);
        if (!this.mediaPaused && !this.mediaLoading) {
          this._refreshId = requestAnimationFrame(this._refreshBar);
        }
      }
      if (attrName === MediaUIAttributes.MEDIA_DURATION) {
        this.range.max = (_b = (_a = this.mediaSeekableEnd) != null ? _a : this.mediaDuration) != null ? _b : 1e3;
        updateAriaValueText2(this);
        this.updateBar();
        this.updateCurrentBox();
      }
      if (attrName === MediaUIAttributes.MEDIA_SEEKABLE) {
        this.range.min = (_c = this.mediaSeekableStart) != null ? _c : 0;
        this.range.max = (_e = (_d = this.mediaSeekableEnd) != null ? _d : this.mediaDuration) != null ? _e : 1e3;
        updateAriaValueText2(this);
        this.updateBar();
      }
      if (attrName === MediaUIAttributes.MEDIA_BUFFERED) {
        this.updateBar();
      }
      if (attrName === "disabled") {
        if (newValue == null) {
          __privateMethod3(this, _enableBoxes, enableBoxes_fn).call(this);
        } else {
          __privateMethod3(this, _disableBoxes, disableBoxes_fn).call(this);
        }
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
    get mediaPaused() {
      return this.hasAttribute(MediaUIAttributes.MEDIA_PAUSED);
    }
    get mediaLoading() {
      return this.hasAttribute(MediaUIAttributes.MEDIA_LOADING);
    }
    get mediaDuration() {
      const attrVal = this.getAttribute(MediaUIAttributes.MEDIA_DURATION);
      return attrVal != null ? +attrVal : void 0;
    }
    get mediaCurrentTime() {
      const attrVal = this.getAttribute(MediaUIAttributes.MEDIA_CURRENT_TIME);
      return attrVal != null ? +attrVal : void 0;
    }
    get mediaPlaybackRate() {
      const attrVal = this.getAttribute(MediaUIAttributes.MEDIA_PLAYBACK_RATE);
      return attrVal != null ? +attrVal : 1;
    }
    get mediaBuffered() {
      const buffered = this.getAttribute(MediaUIAttributes.MEDIA_BUFFERED);
      if (!buffered)
        return [];
      return buffered.split(" ").map((timePair) => timePair.split(":").map((timeStr) => +timeStr));
    }
    get mediaSeekable() {
      const seekable = this.getAttribute(MediaUIAttributes.MEDIA_SEEKABLE);
      if (!seekable)
        return void 0;
      return seekable.split(":").map((time) => +time);
    }
    get mediaSeekableEnd() {
      var _a;
      const [, end] = (_a = this.mediaSeekable) != null ? _a : [];
      return end;
    }
    get mediaSeekableStart() {
      var _a;
      const [start] = (_a = this.mediaSeekable) != null ? _a : [];
      return start;
    }
    getBarColors() {
      var _a;
      let colorsArray = super.getBarColors();
      const { range } = this;
      const relativeMax = range.max - range.min;
      const buffered = this.mediaBuffered;
      if (!buffered.length || !Number.isFinite(relativeMax) || relativeMax <= 0) {
        return colorsArray;
      }
      const currentTime = this.mediaCurrentTime;
      const [, bufferedEnd = range.min] = (_a = buffered.find(
        ([start, end]) => start <= currentTime && currentTime <= end
      )) != null ? _a : [];
      const relativeBufferedEnd = bufferedEnd - range.min;
      const buffPercent = relativeBufferedEnd / relativeMax * 100;
      colorsArray.splice(1, 0, [
        "var(--media-time-buffered-color, rgb(255 255 255 / .4))",
        buffPercent
      ]);
      return colorsArray;
    }
    updateCurrentBox() {
      if (!__privateGet14(this, _currentBox).assignedElements().length)
        return;
      const boxRatio = this.range.value / (this.range.max - this.range.min);
      const boxPos = __privateMethod3(this, _getBoxPosition, getBoxPosition_fn).call(this, __privateGet14(this, _currentBox), boxRatio);
      const { style } = getOrInsertCSSRule(
        this.shadowRoot,
        "#current-rail"
      );
      style.transform = `translateX(${boxPos})`;
    }
  };
  _boxes = /* @__PURE__ */ new WeakMap();
  _previewBox = /* @__PURE__ */ new WeakMap();
  _currentBox = /* @__PURE__ */ new WeakMap();
  _boxPaddingLeft = /* @__PURE__ */ new WeakMap();
  _boxPaddingRight = /* @__PURE__ */ new WeakMap();
  _getBoxPosition = /* @__PURE__ */ new WeakSet();
  getBoxPosition_fn = function(box, ratio) {
    var _a;
    let position = `${ratio * 100 * 100}%`;
    const boxWidth = box.offsetWidth;
    if (!boxWidth)
      return position;
    const bounds = (_a = this.getAttribute("bounds") ? closestComposedNode(this, `#${this.getAttribute("bounds")}`) : this.parentElement) != null ? _a : this;
    const rangeRect = this.range.getBoundingClientRect();
    const mediaBoundsRect = bounds.getBoundingClientRect();
    const boxMin = (__privateGet14(this, _boxPaddingLeft) - (rangeRect.left - mediaBoundsRect.left - boxWidth / 2)) / rangeRect.width * 100;
    const boxMax = (mediaBoundsRect.right - rangeRect.left - boxWidth / 2 - __privateGet14(this, _boxPaddingRight)) / rangeRect.width * 100;
    if (!Number.isNaN(boxMin))
      position = `max(${boxMin * 100}%, ${position})`;
    if (!Number.isNaN(boxMax))
      position = `min(${position}, ${boxMax * 100}%)`;
    return position;
  };
  _pointermoveHandler = /* @__PURE__ */ new WeakMap();
  _rangeEntered = /* @__PURE__ */ new WeakMap();
  _offRangeHandler = /* @__PURE__ */ new WeakMap();
  _trackMouse = /* @__PURE__ */ new WeakMap();
  _stopTrackingMouse = /* @__PURE__ */ new WeakMap();
  _rangepointermoveHandler = /* @__PURE__ */ new WeakMap();
  _enableBoxes = /* @__PURE__ */ new WeakSet();
  enableBoxes_fn = function() {
    this.addEventListener("pointermove", __privateGet14(this, _rangepointermoveHandler), false);
  };
  _disableBoxes = /* @__PURE__ */ new WeakSet();
  disableBoxes_fn = function() {
    Window.removeEventListener("pointermove", __privateGet14(this, _offRangeHandler));
    this.removeEventListener("pointermove", __privateGet14(this, _rangepointermoveHandler));
    __privateSet14(this, _rangeEntered, false);
    __privateGet14(this, _stopTrackingMouse).call(this);
  };
  if (!Window.customElements.get("media-time-range")) {
    Window.customElements.define("media-time-range", MediaTimeRange);
  }

  // node_modules/media-chrome/dist/media-loading-indicator.js
  var __accessCheck15 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet15 = (obj, member, getter) => {
    __accessCheck15(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd15 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet15 = (obj, member, value, setter) => {
    __accessCheck15(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _mediaController7;
  var template10 = Document.createElement("template");
  var loadingIndicatorIcon = `
<svg aria-hidden="true" viewBox="0 0 100 100">
  <path d="M73,50c0-12.7-10.3-23-23-23S27,37.3,27,50 M30.9,50c0-10.5,8.5-19.1,19.1-19.1S69.1,39.5,69.1,50">
    <animateTransform
       attributeName="transform"
       attributeType="XML"
       type="rotate"
       dur="1s"
       from="0 50 50"
       to="360 50 50"
       repeatCount="indefinite" />
  </path>
</svg>
`;
  template10.innerHTML = `
<style>
:host {
  display: var(--media-control-display, var(--media-loading-indicator-display, inline-block));
  vertical-align: middle;
  box-sizing: border-box;
}

#status {
  color: rgba(0,0,0,0);
  width: 0px;
  height: 0px;
}

:host slot[name=loading] > *,
:host ::slotted([slot=loading]) {
  opacity: 1;
  transition: opacity 0.15s;
}

:host(:not([is-loading])) slot[name=loading] > *, 
:host(:not([is-loading])) ::slotted([slot=loading]) {
  opacity: 0;
}

:host(:not([is-loading])) #status {
  display: none;
}

svg, img, ::slotted(svg), ::slotted(img) {
  width: var(--media-loading-icon-width, 100px);
  height: var(--media-loading-icon-height);
  fill: var(--media-icon-color, var(--media-primary-color, rgb(238 238 238)));
  vertical-align: middle;
}
</style>

<slot name="loading">${loadingIndicatorIcon}</slot>
<div id="status" role="status" aria-live="polite">${nouns.MEDIA_LOADING()}</div>
`;
  var DEFAULT_LOADING_DELAY = 500;
  var MediaLoadingIndicator = class extends Window.HTMLElement {
    constructor() {
      super();
      __privateAdd15(this, _mediaController7, void 0);
      if (!this.shadowRoot) {
        const shadow = this.attachShadow({ mode: "open" });
        const indicatorHTML = template10.content.cloneNode(true);
        shadow.appendChild(indicatorHTML);
      }
    }
    static get observedAttributes() {
      return [
        MediaStateReceiverAttributes.MEDIA_CONTROLLER,
        MediaUIAttributes.MEDIA_PAUSED,
        MediaUIAttributes.MEDIA_LOADING,
        "loading-delay"
      ];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a, _b, _c, _d, _e, _f;
      if (attrName === MediaUIAttributes.MEDIA_LOADING || attrName === MediaUIAttributes.MEDIA_PAUSED) {
        const isPaused = this.getAttribute(MediaUIAttributes.MEDIA_PAUSED) != void 0;
        const isMediaLoading = this.getAttribute(MediaUIAttributes.MEDIA_LOADING) != void 0;
        const isLoading = !isPaused && isMediaLoading;
        if (!isLoading) {
          if (this.loadingDelayHandle) {
            clearTimeout(this.loadingDelayHandle);
            this.loadingDelayHandle = void 0;
          }
          this.removeAttribute("is-loading");
        } else if (!this.loadingDelayHandle && isLoading) {
          const loadingDelay = +((_a = this.getAttribute("loading-delay")) != null ? _a : DEFAULT_LOADING_DELAY);
          this.loadingDelayHandle = setTimeout(() => {
            this.setAttribute("is-loading", "");
            this.loadingDelayHandle = void 0;
          }, loadingDelay);
        }
      } else if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
        if (oldValue) {
          (_c = (_b = __privateGet15(this, _mediaController7)) == null ? void 0 : _b.unassociateElement) == null ? void 0 : _c.call(_b, this);
          __privateSet15(this, _mediaController7, null);
        }
        if (newValue) {
          __privateSet15(this, _mediaController7, (_d = this.getRootNode()) == null ? void 0 : _d.getElementById(newValue));
          (_f = (_e = __privateGet15(this, _mediaController7)) == null ? void 0 : _e.associateElement) == null ? void 0 : _f.call(_e, this);
        }
      }
    }
    connectedCallback() {
      var _a, _b, _c;
      const mediaControllerId = this.getAttribute(
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      );
      if (mediaControllerId) {
        __privateSet15(this, _mediaController7, (_a = this.getRootNode()) == null ? void 0 : _a.getElementById(mediaControllerId));
        (_c = (_b = __privateGet15(this, _mediaController7)) == null ? void 0 : _b.associateElement) == null ? void 0 : _c.call(_b, this);
      }
    }
    disconnectedCallback() {
      var _a, _b;
      if (this.loadingDelayHandle) {
        clearTimeout(this.loadingDelayHandle);
        this.loadingDelayHandle = void 0;
      }
      (_b = (_a = __privateGet15(this, _mediaController7)) == null ? void 0 : _a.unassociateElement) == null ? void 0 : _b.call(_a, this);
      __privateSet15(this, _mediaController7, null);
    }
  };
  _mediaController7 = /* @__PURE__ */ new WeakMap();
  if (!Window.customElements.get("media-loading-indicator")) {
    Window.customElements.define("media-loading-indicator", MediaLoadingIndicator);
  }

  // node_modules/media-chrome/dist/media-volume-range.js
  var DEFAULT_MAX_VOLUME = 100;
  var toVolume = (el) => {
    var _a;
    const muted = el.getAttribute(MediaUIAttributes.MEDIA_MUTED) != null;
    if (muted)
      return 0;
    const volume = +((_a = el.getAttribute(MediaUIAttributes.MEDIA_VOLUME)) != null ? _a : 1);
    return Math.round(volume * el.range.max);
  };
  var formatAsPercentString = ({ value, max }) => `${Math.round(value / max * 100)}%`;
  var MediaVolumeRange = class extends media_chrome_range_default {
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        MediaUIAttributes.MEDIA_VOLUME,
        MediaUIAttributes.MEDIA_MUTED,
        MediaUIAttributes.MEDIA_VOLUME_UNAVAILABLE
      ];
    }
    constructor() {
      super();
      this.range.max = DEFAULT_MAX_VOLUME;
      this.range.addEventListener("input", () => {
        const newVolume = this.range.value / this.range.max;
        const detail = newVolume;
        const evt = new Window.CustomEvent(MediaUIEvents.MEDIA_VOLUME_REQUEST, {
          composed: true,
          bubbles: true,
          detail
        });
        this.dispatchEvent(evt);
      });
    }
    connectedCallback() {
      this.range.setAttribute("aria-label", nouns.VOLUME());
      super.connectedCallback();
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === MediaUIAttributes.MEDIA_VOLUME || attrName === MediaUIAttributes.MEDIA_MUTED) {
        const newVolume = toVolume(this);
        this.range.value = newVolume;
        this.range.setAttribute(
          "aria-valuetext",
          formatAsPercentString(this.range)
        );
        this.updateBar();
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
  };
  if (!Window.customElements.get("media-volume-range")) {
    Window.customElements.define("media-volume-range", MediaVolumeRange);
  }

  // node_modules/media-chrome/dist/index.js
  var MediaChrome = class extends media_controller_default {
  };
  if (!Window.customElements.get("media-chrome")) {
    Window.customElements.define("media-chrome", MediaChrome);
  }
  var MediaContainer2 = class extends media_controller_default {
    constructor() {
      super();
      console.warn(
        "MediaChrome: <media-container> is deprecated. Use <media-controller>."
      );
    }
  };
  if (!Window.customElements.get("media-container")) {
    Window.customElements.define("media-container", MediaContainer2);
  }

  // node_modules/media-chrome/dist/experimental/media-chrome-listbox.js
  var __accessCheck16 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet16 = (obj, member, getter) => {
    __accessCheck16(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd16 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet16 = (obj, member, value, setter) => {
    __accessCheck16(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod4 = (obj, member, method) => {
    __accessCheck16(obj, member, "access private method");
    return method;
  };
  var _keysSoFar;
  var _clearKeysTimeout;
  var _slot5;
  var __assignedElements;
  var _metaPressed;
  var _assignedElements;
  var assignedElements_get;
  var assignedElements_set;
  var _items;
  var items_get;
  var _clickListener2;
  var _handleKeyListener;
  var handleKeyListener_fn;
  var _keyupListener2;
  var _keydownListener2;
  var _getItem;
  var getItem_fn;
  var _selectItem;
  var selectItem_fn;
  var _searchItem;
  var searchItem_fn;
  var _clearKeysOnDelay;
  var clearKeysOnDelay_fn;
  var template11 = Document.createElement("template");
  template11.innerHTML = `
<style>
  :host ul {
    font: var(--media-font,
      var(--media-font-weight, normal)
      var(--media-font-size, 1em) /
      var(--media-text-content-height, var(--media-control-height, 24px))
      var(--media-font-family, helvetica neue, segoe ui, roboto, arial, sans-serif));
    color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
    background: var(--media-listbox-background, var(--media-control-background, var(--media-secondary-color, rgb(20 20 30 / .8))));
    list-style: none;
    display: inline-flex;
    flex-direction: column;
    gap: 0.5em;
    margin: 0;
    padding: 0.5em;
  }

  ::slotted(media-chrome-listitem[tabindex="0"]:focus-visible),
  media-chrome-listitem[tabindex="0"]:focus-visible {
    box-shadow: inset 0 0 0 2px rgb(27 127 204 / .9);
    outline: 0;
  }

  ::slotted(media-chrome-listitem[aria-selected="true"]),
  media-chrome-listitem[aria-selected="true"] {
    background-color: var(--media-listbox-selected-background, rgb(122 122 184 / .8));
  }

  ::slotted(media-chrome-listitem:hover),
  media-chrome-listitem:hover {
    background-color: var(--media-listbox-hover-background, rgb(82 82 122 / .8));
    outline: var(--media-listbox-hover-outline, none);
  }
</style>
<ul tabindex="0">
  <slot></slot>
</ul>
`;
  var MediaChromeListbox = class extends Window.HTMLElement {
    constructor(options = {}) {
      super();
      __privateAdd16(this, _assignedElements);
      __privateAdd16(this, _items);
      __privateAdd16(this, _handleKeyListener);
      __privateAdd16(this, _getItem);
      __privateAdd16(this, _selectItem);
      __privateAdd16(this, _searchItem);
      __privateAdd16(this, _clearKeysOnDelay);
      __privateAdd16(this, _keysSoFar, "");
      __privateAdd16(this, _clearKeysTimeout, null);
      __privateAdd16(this, _slot5, void 0);
      __privateAdd16(this, __assignedElements, void 0);
      __privateAdd16(this, _metaPressed, false);
      __privateAdd16(this, _clickListener2, (e) => {
        this.handleClick(e);
      });
      __privateAdd16(this, _keyupListener2, (e) => {
        const { key } = e;
        if (key === "Escape") {
          this.removeEventListener("keyup", __privateGet16(this, _keyupListener2));
          return;
        }
        if (key === "Meta") {
          __privateSet16(this, _metaPressed, false);
          return;
        }
        __privateMethod4(this, _handleKeyListener, handleKeyListener_fn).call(this, e);
      });
      __privateAdd16(this, _keydownListener2, (e) => {
        const { key, altKey } = e;
        if (altKey) {
          this.removeEventListener("keyup", __privateGet16(this, _keyupListener2));
          return;
        }
        if (key === "Meta") {
          __privateSet16(this, _metaPressed, true);
          return;
        }
        if (this.keysUsed.includes(key)) {
          e.preventDefault();
        }
        if (__privateGet16(this, _metaPressed) && this.keysUsed.includes(key)) {
          __privateMethod4(this, _handleKeyListener, handleKeyListener_fn).call(this, e);
          return;
        }
        this.addEventListener("keyup", __privateGet16(this, _keyupListener2), { once: true });
      });
      if (!this.shadowRoot) {
        const shadow = this.attachShadow({ mode: "open" });
        const listboxHTML = template11.content.cloneNode(true);
        this.nativeEl = listboxHTML;
        let slotTemplate13 = options.slotTemplate;
        if (!slotTemplate13) {
          slotTemplate13 = Document.createElement("template");
          slotTemplate13.innerHTML = `<slot>${options.defaultContent || ""}</slot>`;
        }
        this.nativeEl.appendChild(slotTemplate13.content.cloneNode(true));
        shadow.appendChild(listboxHTML);
      }
      __privateSet16(this, _slot5, this.shadowRoot.querySelector("slot"));
      __privateGet16(this, _slot5).addEventListener("slotchange", () => {
        __privateSet16(this, _assignedElements, __privateGet16(this, _slot5).assignedElements({ flatten: true }), assignedElements_set);
        if (__privateGet16(this, _assignedElements, assignedElements_get).length === 1 && __privateGet16(this, _assignedElements, assignedElements_get)[0].nodeName.toLowerCase() === "slot") {
          __privateSet16(this, _assignedElements, __privateGet16(this, _assignedElements, assignedElements_get)[0].assignedElements({ flatten: true }), assignedElements_set);
        }
        const els = __privateGet16(this, _items, items_get);
        const activeEls = els.some((el) => el.getAttribute("tabindex") === "0");
        if (activeEls) {
          return;
        }
        let elToSelect = els.filter((el) => el.getAttribute("aria-selected") === "true")[0];
        if (!elToSelect) {
          elToSelect = els[0];
        }
        if (elToSelect) {
          elToSelect.setAttribute("tabindex", 0);
          elToSelect.setAttribute("aria-selected", "true");
        }
      });
    }
    static get observedAttributes() {
      return ["disabled", MediaStateReceiverAttributes.MEDIA_CONTROLLER];
    }
    get selectedOptions() {
      return __privateGet16(this, _items, items_get).filter((el) => el.getAttribute("aria-selected") === "true");
    }
    get value() {
      return this.selectedOptions[0].value || this.selectedOptions[0].textContent;
    }
    set value(newValue) {
      const item = __privateGet16(this, _items, items_get).find((el) => el.value === newValue || el.textContent === newValue);
      if (!item)
        return;
      __privateMethod4(this, _selectItem, selectItem_fn).call(this, item);
    }
    focus() {
      var _a;
      (_a = this.selectedOptions[0]) == null ? void 0 : _a.focus();
    }
    enable() {
      this.addEventListener("click", __privateGet16(this, _clickListener2));
      this.addEventListener("keydown", __privateGet16(this, _keydownListener2));
    }
    disable() {
      this.removeEventListener("click", __privateGet16(this, _clickListener2));
      this.removeEventListener("keyup", __privateGet16(this, _keyupListener2));
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a, _b;
      if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
        if (oldValue) {
          const mediaControllerEl = Document.getElementById(oldValue);
          (_a = mediaControllerEl == null ? void 0 : mediaControllerEl.unassociateElement) == null ? void 0 : _a.call(mediaControllerEl, this);
        }
        if (newValue) {
          const mediaControllerEl = Document.getElementById(newValue);
          (_b = mediaControllerEl == null ? void 0 : mediaControllerEl.associateElement) == null ? void 0 : _b.call(mediaControllerEl, this);
        }
      } else if (attrName === "disabled" && newValue !== oldValue) {
        if (newValue == null) {
          this.enable();
        } else {
          this.disable();
        }
      }
    }
    connectedCallback() {
      var _a;
      if (!this.hasAttribute("disabled")) {
        this.enable();
      }
      if (!this.hasAttribute("role")) {
        this.setAttribute("role", "listbox");
      }
      const mediaControllerId = this.getAttribute(
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      );
      if (mediaControllerId) {
        const mediaControllerEl = Document.getElementById(mediaControllerId);
        (_a = mediaControllerEl == null ? void 0 : mediaControllerEl.associateElement) == null ? void 0 : _a.call(mediaControllerEl, this);
      }
    }
    disconnectedCallback() {
      var _a;
      this.disable();
      const mediaControllerId = this.getAttribute(
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      );
      if (mediaControllerId) {
        const mediaControllerEl = Document.getElementById(mediaControllerId);
        (_a = mediaControllerEl == null ? void 0 : mediaControllerEl.unassociateElement) == null ? void 0 : _a.call(mediaControllerEl, this);
      }
    }
    get keysUsed() {
      return ["Enter", " ", "ArrowDown", "ArrowUp", "Home", "End"];
    }
    handleSelection(e, toggle) {
      const item = __privateMethod4(this, _getItem, getItem_fn).call(this, e);
      if (!item)
        return;
      __privateMethod4(this, _selectItem, selectItem_fn).call(this, item, toggle);
    }
    handleMovement(e) {
      const { key } = e;
      const els = __privateGet16(this, _items, items_get);
      let currentOption = __privateMethod4(this, _getItem, getItem_fn).call(this, e);
      if (!currentOption) {
        currentOption = els.filter((el) => el.getAttribute("tabindex") === "0")[0];
      }
      let nextOption;
      switch (key) {
        case "ArrowDown":
          nextOption = currentOption.nextElementSibling;
          if (nextOption == null ? void 0 : nextOption.hasAttribute("disabled")) {
            nextOption = nextOption.nextElementSibling;
          }
          break;
        case "ArrowUp":
          nextOption = currentOption.previousElementSibling;
          if (nextOption == null ? void 0 : nextOption.hasAttribute("disabled")) {
            nextOption = nextOption.previousElementSibling;
          }
          break;
        case "Home":
          nextOption = els[0];
          break;
        case "End":
          nextOption = els[els.length - 1];
          break;
        default:
          nextOption = __privateMethod4(this, _searchItem, searchItem_fn).call(this, key);
          break;
      }
      if (nextOption) {
        els.forEach((el) => el.setAttribute("tabindex", "-1"));
        nextOption.setAttribute("tabindex", "0");
        nextOption.focus();
      }
    }
    handleClick(e) {
      const item = __privateMethod4(this, _getItem, getItem_fn).call(this, e);
      if (!item || item.hasAttribute("disabled"))
        return;
      __privateGet16(this, _items, items_get).forEach((el) => el.setAttribute("tabindex", "-1"));
      item.setAttribute("tabindex", "0");
      this.handleSelection(e, this.hasAttribute("aria-multiselectable") && this.getAttribute("aria-multiselectable") === "true");
    }
  };
  _keysSoFar = /* @__PURE__ */ new WeakMap();
  _clearKeysTimeout = /* @__PURE__ */ new WeakMap();
  _slot5 = /* @__PURE__ */ new WeakMap();
  __assignedElements = /* @__PURE__ */ new WeakMap();
  _metaPressed = /* @__PURE__ */ new WeakMap();
  _assignedElements = /* @__PURE__ */ new WeakSet();
  assignedElements_get = function() {
    if (!__privateGet16(this, __assignedElements)) {
      __privateSet16(this, __assignedElements, Array.from(this.shadowRoot.querySelectorAll("media-chrome-listitem")));
    }
    return __privateGet16(this, __assignedElements);
  };
  assignedElements_set = function(value) {
    __privateSet16(this, __assignedElements, value);
  };
  _items = /* @__PURE__ */ new WeakSet();
  items_get = function() {
    return __privateGet16(this, _assignedElements, assignedElements_get).filter((el) => !el.hasAttribute("disabled"));
  };
  _clickListener2 = /* @__PURE__ */ new WeakMap();
  _handleKeyListener = /* @__PURE__ */ new WeakSet();
  handleKeyListener_fn = function(e) {
    const { key } = e;
    if (key === "Enter" || key === " ") {
      this.handleSelection(e, this.hasAttribute("aria-multiselectable") && this.getAttribute("aria-multiselectable") === "true");
    } else {
      this.handleMovement(e);
    }
  };
  _keyupListener2 = /* @__PURE__ */ new WeakMap();
  _keydownListener2 = /* @__PURE__ */ new WeakMap();
  _getItem = /* @__PURE__ */ new WeakSet();
  getItem_fn = function(e) {
    const composedPath = e.composedPath();
    const index = composedPath.findIndex((el) => el.nodeName === "MEDIA-CHROME-LISTITEM");
    return composedPath[index];
  };
  _selectItem = /* @__PURE__ */ new WeakSet();
  selectItem_fn = function(item, toggle) {
    if (!this.hasAttribute("aria-multiselectable") || this.getAttribute("aria-multiselectable") !== "true") {
      __privateGet16(this, _assignedElements, assignedElements_get).forEach((el) => el.setAttribute("aria-selected", "false"));
    }
    if (toggle) {
      const selected = item.getAttribute("aria-selected") === "true";
      if (selected) {
        item.setAttribute("aria-selected", "false");
      } else {
        item.setAttribute("aria-selected", "true");
      }
    } else {
      item.setAttribute("aria-selected", "true");
    }
    this.dispatchEvent(new Event("change"));
  };
  _searchItem = /* @__PURE__ */ new WeakSet();
  searchItem_fn = function(key) {
    __privateMethod4(this, _clearKeysOnDelay, clearKeysOnDelay_fn).call(this);
    const els = __privateGet16(this, _items, items_get);
    const activeIndex = els.findIndex((el) => el.getAttribute("tabindex") === "0");
    __privateSet16(this, _keysSoFar, __privateGet16(this, _keysSoFar) + key);
    const repeatedKey = __privateGet16(this, _keysSoFar).split("").every((k2) => k2 === key);
    const after = els.slice(activeIndex + (repeatedKey ? 1 : 0)).filter((el) => el.textContent.toLowerCase().startsWith(__privateGet16(this, _keysSoFar)));
    const before = els.slice(0, activeIndex - (repeatedKey ? 1 : 0)).filter((el) => el.textContent.toLowerCase().startsWith(__privateGet16(this, _keysSoFar)));
    let afterRepeated = [];
    let beforeRepeated = [];
    if (repeatedKey) {
      afterRepeated = els.slice(activeIndex + (repeatedKey ? 1 : 0)).filter((el) => el.textContent.startsWith(key));
      beforeRepeated = els.slice(0, activeIndex - (repeatedKey ? 1 : 0)).filter((el) => el.textContent.startsWith(key));
    }
    const returns = [...after, ...before, ...afterRepeated, ...beforeRepeated];
    return returns[0];
  };
  _clearKeysOnDelay = /* @__PURE__ */ new WeakSet();
  clearKeysOnDelay_fn = function() {
    Window.clearTimeout(__privateGet16(this, _clearKeysTimeout));
    __privateSet16(this, _clearKeysTimeout, null);
    __privateSet16(this, _clearKeysTimeout, Window.setTimeout(() => {
      __privateSet16(this, _keysSoFar, "");
      __privateSet16(this, _clearKeysTimeout, null);
    }, 500));
  };
  if (!Window.customElements.get("media-chrome-listbox")) {
    Window.customElements.define("media-chrome-listbox", MediaChromeListbox);
  }
  var media_chrome_listbox_default = MediaChromeListbox;

  // node_modules/media-chrome/dist/experimental/media-chrome-selectmenu.js
  var __accessCheck17 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet17 = (obj, member, getter) => {
    __accessCheck17(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd17 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet17 = (obj, member, value, setter) => {
    __accessCheck17(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod5 = (obj, member, method) => {
    __accessCheck17(obj, member, "access private method");
    return method;
  };
  var _handleClick;
  var _handleChange;
  var _enabledState;
  var _button;
  var _buttonSlot;
  var _listbox;
  var _listboxSlot;
  var _expanded;
  var _keyupListener3;
  var _keydownListener3;
  var _documentClickHandler;
  var _handleClick_;
  var handleClick__fn;
  var _handleChange_;
  var handleChange__fn;
  var _toggle;
  var toggle_fn;
  var _updateMenuPosition;
  var updateMenuPosition_fn;
  var _toggleExpanded;
  var toggleExpanded_fn;
  var template12 = Document.createElement("template");
  template12.innerHTML = `
  <style>
  :host {
    display: inline-flex;
    position: relative;
    flex-shrink: .5;
  }

  [name="listbox"]::slotted(*),
  [part=listbox] {
    position: absolute;
    left: 0;
    bottom: 100%;
    max-height: 300px;
    overflow: hidden auto;
  }
  </style>

  <slot name="button">
    <media-chrome-button aria-haspopup="listbox" part="button">
      <slot name="button-content"></slot>
    </media-chrome-button>
  </slot>
  <slot name="listbox" hidden>
    <media-chrome-listbox id="listbox" part="listbox">
      <slot></slot>
    </media-chrome-listbox>
  </slot>
`;
  var MediaChromeSelectMenu = class extends Window.HTMLElement {
    constructor() {
      var _a;
      super();
      __privateAdd17(this, _handleClick_);
      __privateAdd17(this, _handleChange_);
      __privateAdd17(this, _toggle);
      __privateAdd17(this, _updateMenuPosition);
      __privateAdd17(this, _toggleExpanded);
      __privateAdd17(this, _handleClick, void 0);
      __privateAdd17(this, _handleChange, void 0);
      __privateAdd17(this, _enabledState, true);
      __privateAdd17(this, _button, void 0);
      __privateAdd17(this, _buttonSlot, void 0);
      __privateAdd17(this, _listbox, void 0);
      __privateAdd17(this, _listboxSlot, void 0);
      __privateAdd17(this, _expanded, false);
      __privateAdd17(this, _keyupListener3, (e) => {
        const { key } = e;
        if (!this.keysUsed.includes(key)) {
          this.removeEventListener("keyup", __privateGet17(this, _keyupListener3));
          return;
        }
        const isButton = e.composedPath().includes(__privateGet17(this, _button));
        if (isButton && (key === "Enter" || key === " ")) {
          __privateGet17(this, _handleClick).call(this);
        } else if (key === "Escape" && !__privateGet17(this, _listboxSlot).hidden) {
          __privateMethod5(this, _toggle, toggle_fn).call(this);
        }
      });
      __privateAdd17(this, _keydownListener3, (e) => {
        const { metaKey, altKey, key } = e;
        if (metaKey || altKey || !this.keysUsed.includes(key)) {
          this.removeEventListener("keyup", __privateGet17(this, _keyupListener3));
          return;
        }
        e.preventDefault();
        this.addEventListener("keyup", __privateGet17(this, _keyupListener3), { once: true });
      });
      __privateAdd17(this, _documentClickHandler, (e) => {
        if (e.composedPath().includes(this))
          return;
        if (!__privateGet17(this, _listboxSlot).hidden) {
          __privateMethod5(this, _toggle, toggle_fn).call(this);
        }
      });
      if (!this.shadowRoot) {
        const shadow = this.attachShadow({ mode: "open" });
        const buttonHTML = template12.content.cloneNode(true);
        this.nativeEl = buttonHTML;
        shadow.appendChild(buttonHTML);
      }
      const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
      style.setProperty("display", `var(--media-control-display, var(--${this.localName}-display, inline-flex))`);
      __privateSet17(this, _handleClick, __privateMethod5(this, _handleClick_, handleClick__fn).bind(this));
      __privateSet17(this, _handleChange, __privateMethod5(this, _handleChange_, handleChange__fn).bind(this));
      (_a = this.init) == null ? void 0 : _a.call(this);
      __privateSet17(this, _button, this.shadowRoot.querySelector("[part=button]"));
      __privateSet17(this, _listbox, this.shadowRoot.querySelector("[part=listbox]"));
      __privateSet17(this, _buttonSlot, this.shadowRoot.querySelector("slot[name=button]"));
      __privateGet17(this, _buttonSlot).addEventListener("slotchange", () => {
        const newButton = __privateGet17(this, _buttonSlot).assignedElements()[0];
        if (!newButton)
          return;
        this.disable();
        __privateSet17(this, _button, newButton);
        __privateGet17(this, _button).preventClick = true;
        if (__privateGet17(this, _button).hasAttribute("disabled")) {
          __privateSet17(this, _enabledState, false);
        }
        if (__privateGet17(this, _enabledState)) {
          this.enable();
          __privateGet17(this, _button).setAttribute("aria-haspopup", "listbox");
        } else {
          this.disable();
        }
      });
      __privateSet17(this, _listboxSlot, this.shadowRoot.querySelector("slot[name=listbox]"));
      __privateGet17(this, _listboxSlot).addEventListener("slotchange", () => {
        this.disable();
        __privateSet17(this, _listbox, __privateGet17(this, _listboxSlot).assignedElements()[0] || __privateGet17(this, _listbox));
        this.enable();
      });
    }
    static get observedAttributes() {
      return [
        "disabled",
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      ];
    }
    enable() {
      __privateGet17(this, _button).removeAttribute("disabled");
      __privateGet17(this, _button).addEventListener("click", __privateGet17(this, _handleClick));
      __privateGet17(this, _button).addEventListener("keydown", __privateGet17(this, _keydownListener3));
      __privateGet17(this, _listbox).addEventListener("keydown", __privateGet17(this, _keydownListener3));
      __privateMethod5(this, _toggleExpanded, toggleExpanded_fn).call(this);
      __privateGet17(this, _listbox).addEventListener("change", __privateGet17(this, _handleChange));
      Document.addEventListener("click", __privateGet17(this, _documentClickHandler));
    }
    disable() {
      __privateGet17(this, _button).setAttribute("disabled", "");
      __privateGet17(this, _button).removeEventListener("click", __privateGet17(this, _handleClick));
      __privateGet17(this, _button).removeEventListener("keydown", __privateGet17(this, _keydownListener3));
      __privateGet17(this, _button).removeEventListener("keyup", __privateGet17(this, _keyupListener3));
      __privateGet17(this, _listbox).removeEventListener("keydown", __privateGet17(this, _keydownListener3));
      __privateGet17(this, _listbox).removeEventListener("keyup", __privateGet17(this, _keyupListener3));
      __privateGet17(this, _listbox).addEventListener("change", __privateGet17(this, _handleChange));
      Document.removeEventListener("click", __privateGet17(this, _documentClickHandler));
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a, _b;
      if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
        if (oldValue) {
          const mediaControllerEl = Document.getElementById(oldValue);
          (_a = mediaControllerEl == null ? void 0 : mediaControllerEl.unassociateElement) == null ? void 0 : _a.call(mediaControllerEl, this);
          __privateGet17(this, _listbox).removeAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER);
        }
        if (newValue) {
          const mediaControllerEl = Document.getElementById(newValue);
          (_b = mediaControllerEl == null ? void 0 : mediaControllerEl.associateElement) == null ? void 0 : _b.call(mediaControllerEl, this);
          __privateGet17(this, _listbox).setAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER, newValue);
        }
      } else if (attrName === "disabled" && newValue !== oldValue) {
        if (newValue == null) {
          __privateSet17(this, _enabledState, true);
          this.enable();
        } else {
          __privateSet17(this, _enabledState, false);
          this.disable();
        }
      }
    }
    connectedCallback() {
      var _a;
      if (!this.hasAttribute("disabled")) {
        this.enable();
      }
      const mediaControllerId = this.getAttribute(
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      );
      if (mediaControllerId) {
        const mediaControllerEl = Document.getElementById(mediaControllerId);
        (_a = mediaControllerEl == null ? void 0 : mediaControllerEl.associateElement) == null ? void 0 : _a.call(mediaControllerEl, this);
        __privateGet17(this, _listbox).setAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER, mediaControllerId);
      }
    }
    disconnectedCallback() {
      var _a;
      this.disable();
      const mediaControllerId = this.getAttribute(
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      );
      if (mediaControllerId) {
        const mediaControllerEl = Document.getElementById(mediaControllerId);
        (_a = mediaControllerEl == null ? void 0 : mediaControllerEl.unassociateElement) == null ? void 0 : _a.call(mediaControllerEl, this);
        __privateGet17(this, _listbox).removeAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER);
      }
    }
    get keysUsed() {
      return ["Enter", "Escape", " ", "ArrowUp", "ArrowDown", "f", "c", "k", "m"];
    }
  };
  _handleClick = /* @__PURE__ */ new WeakMap();
  _handleChange = /* @__PURE__ */ new WeakMap();
  _enabledState = /* @__PURE__ */ new WeakMap();
  _button = /* @__PURE__ */ new WeakMap();
  _buttonSlot = /* @__PURE__ */ new WeakMap();
  _listbox = /* @__PURE__ */ new WeakMap();
  _listboxSlot = /* @__PURE__ */ new WeakMap();
  _expanded = /* @__PURE__ */ new WeakMap();
  _keyupListener3 = /* @__PURE__ */ new WeakMap();
  _keydownListener3 = /* @__PURE__ */ new WeakMap();
  _documentClickHandler = /* @__PURE__ */ new WeakMap();
  _handleClick_ = /* @__PURE__ */ new WeakSet();
  handleClick__fn = function() {
    __privateMethod5(this, _toggle, toggle_fn).call(this);
  };
  _handleChange_ = /* @__PURE__ */ new WeakSet();
  handleChange__fn = function() {
    __privateMethod5(this, _toggle, toggle_fn).call(this, true);
  };
  _toggle = /* @__PURE__ */ new WeakSet();
  toggle_fn = function(closeOnly) {
    __privateGet17(this, _listboxSlot).hidden = !__privateGet17(this, _listboxSlot).hidden || closeOnly;
    __privateMethod5(this, _toggleExpanded, toggleExpanded_fn).call(this, closeOnly);
    if (!__privateGet17(this, _listboxSlot).hidden) {
      __privateGet17(this, _listbox).focus();
      __privateMethod5(this, _updateMenuPosition, updateMenuPosition_fn).call(this);
    } else if (this.shadowRoot.activeElement === __privateGet17(this, _listbox) || __privateGet17(this, _listbox).contains(this.shadowRoot.activeElement)) {
      __privateGet17(this, _button).focus();
    }
  };
  _updateMenuPosition = /* @__PURE__ */ new WeakSet();
  updateMenuPosition_fn = function() {
    var _a;
    if (__privateGet17(this, _listbox).offsetWidth === 0)
      return;
    const buttonRect = __privateGet17(this, _button).getBoundingClientRect();
    if (this.hasAttribute("media-controller") || __privateGet17(this, _button).hasAttribute("media-controller") || __privateGet17(this, _listbox).hasAttribute("media-controller")) {
      __privateGet17(this, _listbox).style.zIndex = "1";
      __privateGet17(this, _listbox).style.bottom = "unset";
      __privateGet17(this, _listbox).style.top = buttonRect.height + "px";
      return;
    }
    const bounds = (_a = this.getAttribute("bounds") ? closestComposedNode(this, `#${this.getAttribute("bounds")}`) : this.parentElement) != null ? _a : this;
    const boundsRect = bounds.getBoundingClientRect();
    const listboxRect = __privateGet17(this, _listbox).getBoundingClientRect();
    let position = -Math.max(buttonRect.x + listboxRect.width - boundsRect.right, 0);
    __privateGet17(this, _listbox).style.transform = `translateX(${position}px)`;
  };
  _toggleExpanded = /* @__PURE__ */ new WeakSet();
  toggleExpanded_fn = function(closeOnly = false) {
    __privateSet17(this, _expanded, !__privateGet17(this, _expanded) || closeOnly);
    __privateGet17(this, _button).setAttribute("aria-expanded", __privateGet17(this, _expanded));
  };
  if (!Window.customElements.get("media-chrome-selectmenu")) {
    Window.customElements.define("media-chrome-selectmenu", MediaChromeSelectMenu);
  }
  var media_chrome_selectmenu_default = MediaChromeSelectMenu;

  // node_modules/media-chrome/dist/experimental/media-chrome-listitem.js
  var template13 = Document.createElement("template");
  template13.innerHTML = `
<style>
  :host {
    display: list-item;
    line-height: 1em;
    padding: 0.5em;
    margin: 0em;
    cursor: pointer;
  }

  ::slotted:not(:focus-visible) {
    outline: none;
  }
</style>
<li>
  <slot></slot>
</li>
`;
  var MediaChromeListitem = class extends Window.HTMLElement {
    static get observedAttributes() {
      return [
        "disabled",
        "aria-selected",
        "value",
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      ];
    }
    constructor() {
      super();
      if (!this.shadowRoot) {
        const shadow = this.attachShadow({ mode: "open" });
        const listitemHTML = template13.content.cloneNode(true);
        this.nativeEl = listitemHTML;
        shadow.appendChild(listitemHTML);
      }
    }
    set value(value) {
      this.setAttribute("value", value);
    }
    get value() {
      return this.getAttribute("value");
    }
    enable() {
      if (!this.hasAttribute("tabindex")) {
        this.setAttribute("tabindex", -1);
      }
      if (!this.hasAttribute("aria-selected")) {
        this.setAttribute("aria-selected", "false");
      }
    }
    disable() {
      this.removeAttribute("tabindex");
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a, _b;
      if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
        if (oldValue) {
          const mediaControllerEl = Document.getElementById(oldValue);
          (_a = mediaControllerEl == null ? void 0 : mediaControllerEl.unassociateElement) == null ? void 0 : _a.call(mediaControllerEl, this);
        }
        if (newValue) {
          const mediaControllerEl = Document.getElementById(newValue);
          (_b = mediaControllerEl == null ? void 0 : mediaControllerEl.associateElement) == null ? void 0 : _b.call(mediaControllerEl, this);
        }
      } else if (attrName === "disabled" && newValue !== oldValue) {
        if (newValue == null) {
          this.enable();
        } else {
          this.disable();
        }
      }
    }
    connectedCallback() {
      var _a;
      if (!this.hasAttribute("disabled")) {
        this.enable();
      }
      this.setAttribute("role", "option");
      const mediaControllerId = this.getAttribute(
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      );
      if (mediaControllerId) {
        const mediaControllerEl = Document.getElementById(mediaControllerId);
        (_a = mediaControllerEl == null ? void 0 : mediaControllerEl.associateElement) == null ? void 0 : _a.call(mediaControllerEl, this);
      }
    }
    disconnectedCallback() {
      var _a;
      this.disable();
      const mediaControllerId = this.getAttribute(
        MediaStateReceiverAttributes.MEDIA_CONTROLLER
      );
      if (mediaControllerId) {
        const mediaControllerEl = Document.getElementById(mediaControllerId);
        (_a = mediaControllerEl == null ? void 0 : mediaControllerEl.unassociateElement) == null ? void 0 : _a.call(mediaControllerEl, this);
      }
    }
    handleClick() {
    }
  };
  if (!Window.customElements.get("media-chrome-listitem")) {
    Window.customElements.define("media-chrome-listitem", MediaChromeListitem);
  }

  // node_modules/media-chrome/dist/experimental/media-captions-listbox.js
  var __accessCheck18 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet18 = (obj, member, getter) => {
    __accessCheck18(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd18 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet18 = (obj, member, value, setter) => {
    __accessCheck18(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod6 = (obj, member, method) => {
    __accessCheck18(obj, member, "access private method");
    return method;
  };
  var _subs;
  var _caps;
  var _offOption;
  var _captionsIndicator;
  var _perTypeUpdate;
  var perTypeUpdate_fn;
  var _perTypeRender;
  var perTypeRender_fn;
  var _render;
  var render_fn;
  var _onChange;
  var onChange_fn;
  var captionsIndicatorInlineStyle = `
  fill: var(--media-icon-color, var(--media-primary-color, rgb(238 238 238)));
  height: var(--media-captions-indicator-height, 1em);
  vertical-align: var(--media-captions-indicator-vertical-align, bottom);
  margin-inline-start: 1ch;
`;
  var ccIcon = `
<svg style="${captionsIndicatorInlineStyle}" aria-hidden="true" viewBox="0 0 26 24">
  <path d="M22.83 5.68a2.58 2.58 0 0 0-2.3-2.5c-3.62-.24-11.44-.24-15.06 0a2.58 2.58 0 0 0-2.3 2.5c-.23 4.21-.23 8.43 0 12.64a2.58 2.58 0 0 0 2.3 2.5c3.62.24 11.44.24 15.06 0a2.58 2.58 0 0 0 2.3-2.5c.23-4.21.23-8.43 0-12.64Zm-11.39 9.45a3.07 3.07 0 0 1-1.91.57 3.06 3.06 0 0 1-2.34-1 3.75 3.75 0 0 1-.92-2.67 3.92 3.92 0 0 1 .92-2.77 3.18 3.18 0 0 1 2.43-1 2.94 2.94 0 0 1 2.13.78c.364.359.62.813.74 1.31l-1.43.35a1.49 1.49 0 0 0-1.51-1.17 1.61 1.61 0 0 0-1.29.58 2.79 2.79 0 0 0-.5 1.89 3 3 0 0 0 .49 1.93 1.61 1.61 0 0 0 1.27.58 1.48 1.48 0 0 0 1-.37 2.1 2.1 0 0 0 .59-1.14l1.4.44a3.23 3.23 0 0 1-1.07 1.69Zm7.22 0a3.07 3.07 0 0 1-1.91.57 3.06 3.06 0 0 1-2.34-1 3.75 3.75 0 0 1-.92-2.67 3.88 3.88 0 0 1 .93-2.77 3.14 3.14 0 0 1 2.42-1 3 3 0 0 1 2.16.82 2.8 2.8 0 0 1 .73 1.31l-1.43.35a1.49 1.49 0 0 0-1.51-1.21 1.61 1.61 0 0 0-1.29.58A2.79 2.79 0 0 0 15 12a3 3 0 0 0 .49 1.93 1.61 1.61 0 0 0 1.27.58 1.44 1.44 0 0 0 1-.37 2.1 2.1 0 0 0 .6-1.15l1.4.44a3.17 3.17 0 0 1-1.1 1.7Z"/>
</svg>`;
  var slotTemplate12 = Document.createElement("template");
  slotTemplate12.innerHTML = `
  <style>
    media-chrome-listitem {
      white-space: var(--media-captions-listbox-white-space, nowrap);
    }

  </style>
  <slot hidden name="captions-indicator">${ccIcon}</slot>
`;
  var compareTracks = (a, b2) => {
    return a.label === b2.label && a.language === b2.language;
  };
  var MediaCaptionsListbox = class extends media_chrome_listbox_default {
    constructor() {
      super({ slotTemplate: slotTemplate12 });
      __privateAdd18(this, _perTypeUpdate);
      __privateAdd18(this, _perTypeRender);
      __privateAdd18(this, _render);
      __privateAdd18(this, _onChange);
      __privateAdd18(this, _subs, []);
      __privateAdd18(this, _caps, []);
      __privateAdd18(this, _offOption, void 0);
      __privateAdd18(this, _captionsIndicator, void 0);
      const offOption = Document.createElement("media-chrome-listitem");
      offOption.part.add("listitem");
      offOption.value = "off";
      offOption.textContent = "Off";
      __privateSet18(this, _offOption, offOption);
      const captionsIndicatorSlot = this.shadowRoot.querySelector('[name="captions-indicator"]');
      __privateSet18(this, _captionsIndicator, captionsIndicatorSlot.firstElementChild);
      captionsIndicatorSlot.addEventListener("slotchange", () => {
        let els = captionsIndicatorSlot.assignedElements();
        if (els.length === 1 && els[0].nodeName.toLowerCase() === "slot") {
          const assignedElements = els[0].assignedElements();
          if (assignedElements.length === 0) {
            __privateSet18(this, _captionsIndicator, els[0].firstElementChild);
          } else if (assignedElements.length === 1) {
            __privateSet18(this, _captionsIndicator, assignedElements[0]);
          }
        }
        if (!__privateGet18(this, _captionsIndicator)) {
          __privateSet18(this, _captionsIndicator, captionsIndicatorSlot.firstElementChild);
        }
        __privateSet18(this, _captionsIndicator, __privateGet18(this, _captionsIndicator).cloneNode(true));
        __privateGet18(this, _captionsIndicator).removeAttribute("slot");
        __privateGet18(this, _captionsIndicator).setAttribute("style", captionsIndicatorInlineStyle);
      });
    }
    static get observedAttributes() {
      return [
        ...super.observedAttributes,
        "aria-multiselectable",
        MediaUIAttributes.MEDIA_CAPTIONS_LIST,
        MediaUIAttributes.MEDIA_CAPTIONS_SHOWING,
        MediaUIAttributes.MEDIA_SUBTITLES_LIST,
        MediaUIAttributes.MEDIA_SUBTITLES_SHOWING
      ];
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === MediaUIAttributes.MEDIA_SUBTITLES_LIST && oldValue !== newValue) {
        __privateSet18(this, _subs, __privateMethod6(this, _perTypeUpdate, perTypeUpdate_fn).call(this, newValue, __privateGet18(this, _subs)));
        __privateMethod6(this, _render, render_fn).call(this);
      } else if (attrName === MediaUIAttributes.MEDIA_CAPTIONS_LIST && oldValue !== newValue) {
        __privateSet18(this, _caps, __privateMethod6(this, _perTypeUpdate, perTypeUpdate_fn).call(this, newValue, __privateGet18(this, _caps)));
        __privateMethod6(this, _render, render_fn).call(this);
      } else if (attrName === MediaUIAttributes.MEDIA_SUBTITLES_SHOWING && oldValue !== newValue) {
        const selectedTrack = parseTextTracksStr(newValue != null ? newValue : "")[0];
        __privateGet18(this, _subs).forEach((track) => {
          track.selected = track.language === selectedTrack.language && track.label === selectedTrack.label;
        });
        __privateMethod6(this, _render, render_fn).call(this);
      } else if (attrName === MediaUIAttributes.MEDIA_CAPTIONS_SHOWING && oldValue !== newValue) {
        const selectedTrack = parseTextTracksStr(newValue != null ? newValue : "")[0];
        __privateGet18(this, _caps).forEach((track) => {
          track.selected = track.language === selectedTrack.language && track.label === selectedTrack.label;
        });
        __privateMethod6(this, _render, render_fn).call(this);
      } else if (attrName === "aria-multiselectable") {
        this.removeAttribute("aria-multiselectable");
        console.warn("Captions List doesn't currently support multiple selections. You can enable multiple items via the media.textTrack API.");
      }
      super.attributeChangedCallback(attrName, oldValue, newValue);
    }
    connectedCallback() {
      __privateMethod6(this, _render, render_fn).call(this);
      this.addEventListener("change", __privateMethod6(this, _onChange, onChange_fn));
      super.connectedCallback();
    }
    disconnectedCallback() {
      this.removeEventListener("change", __privateMethod6(this, _onChange, onChange_fn));
      super.disconnectedCallback();
    }
  };
  _subs = /* @__PURE__ */ new WeakMap();
  _caps = /* @__PURE__ */ new WeakMap();
  _offOption = /* @__PURE__ */ new WeakMap();
  _captionsIndicator = /* @__PURE__ */ new WeakMap();
  _perTypeUpdate = /* @__PURE__ */ new WeakSet();
  perTypeUpdate_fn = function(newValue, oldItems) {
    const newItems = newValue ? parseTextTracksStr(newValue != null ? newValue : "") : [];
    const removedTracks = [];
    const newTracks = [];
    oldItems.forEach((track) => {
      if (!newItems.some((newTrack) => compareTracks(newTrack, track))) {
        removedTracks.push(track);
      }
    });
    newItems.forEach((track) => {
      if (!oldItems.some((newTrack) => compareTracks(newTrack, track))) {
        newTracks.push(track);
      }
    });
    removedTracks.forEach((track) => track.el.remove());
    return oldItems.filter((track) => !removedTracks.includes(track)).concat(newTracks);
  };
  _perTypeRender = /* @__PURE__ */ new WeakSet();
  perTypeRender_fn = function(tracks, type) {
    const container = this.shadowRoot.querySelector("ul slot");
    tracks.forEach((track) => {
      let option = track.el;
      let alreadyInDom = true;
      if (!option) {
        option = Document.createElement("media-chrome-listitem");
        alreadyInDom = false;
        option.part.add("listitem");
        option.value = type + "!" + formatTextTrackObj(track);
        const label = Document.createElement("span");
        label.textContent = track.label;
        option.append(label);
        if (type === "cc") {
          option.append(__privateGet18(this, _captionsIndicator).cloneNode(true));
        }
      }
      if (track.selected) {
        option.setAttribute("aria-selected", "true");
      } else {
        option.setAttribute("aria-selected", "false");
      }
      if (!alreadyInDom) {
        container.append(option);
        track.el = option;
      }
    });
  };
  _render = /* @__PURE__ */ new WeakSet();
  render_fn = function() {
    const container = this.shadowRoot.querySelector("ul slot");
    if (!container.contains(__privateGet18(this, _offOption))) {
      container.append(__privateGet18(this, _offOption));
    }
    if (!this.hasAttribute(MediaUIAttributes.MEDIA_CAPTIONS_SHOWING) && !this.hasAttribute(MediaUIAttributes.MEDIA_SUBTITLES_SHOWING)) {
      __privateGet18(this, _offOption).setAttribute("aria-selected", "true");
      __privateGet18(this, _offOption).setAttribute("tabindex", "0");
    } else {
      __privateGet18(this, _offOption).setAttribute("aria-selected", "false");
      __privateGet18(this, _offOption).setAttribute("tabindex", "-1");
    }
    __privateMethod6(this, _perTypeRender, perTypeRender_fn).call(this, __privateGet18(this, _caps), "cc");
    __privateMethod6(this, _perTypeRender, perTypeRender_fn).call(this, __privateGet18(this, _subs), "subs");
  };
  _onChange = /* @__PURE__ */ new WeakSet();
  onChange_fn = function() {
    var _a, _b, _c;
    const [newType, selectedOption] = (_c = (_b = (_a = this.selectedOptions[0]) == null ? void 0 : _a.value) == null ? void 0 : _b.split("!")) != null ? _c : [];
    toggleSubsCaps(this, true);
    if (!selectedOption)
      return;
    const event = new Window.CustomEvent(
      newType === "cc" ? MediaUIEvents.MEDIA_SHOW_CAPTIONS_REQUEST : MediaUIEvents.MEDIA_SHOW_SUBTITLES_REQUEST,
      {
        composed: true,
        bubbles: true,
        detail: selectedOption
      }
    );
    this.dispatchEvent(event);
  };
  if (!Window.customElements.get("media-captions-listbox")) {
    Window.customElements.define("media-captions-listbox", MediaCaptionsListbox);
  }

  // node_modules/media-chrome/dist/experimental/media-captions-selectmenu.js
  var MediaCaptionsSelectMenu = class extends media_chrome_selectmenu_default {
    constructor() {
      super();
    }
    init() {
      const captionsButton = Document.createElement("media-captions-button");
      captionsButton.part.add("button");
      captionsButton.preventClick = true;
      if (this.hasAttribute("default-showing")) {
        captionsButton.setAttribute("default-showing", "");
      }
      const captionsListbox = Document.createElement("media-captions-listbox");
      captionsListbox.part.add("listbox");
      captionsListbox.setAttribute("exportparts", "listitem");
      const buttonSlot = this.shadowRoot.querySelector("slot[name=button]");
      const listboxSlot = this.shadowRoot.querySelector("slot[name=listbox]");
      buttonSlot.textContent = "";
      listboxSlot.textContent = "";
      buttonSlot.append(captionsButton);
      listboxSlot.append(captionsListbox);
    }
  };
  if (!Window.customElements.get("media-captions-selectmenu")) {
    Window.customElements.define("media-captions-selectmenu", MediaCaptionsSelectMenu);
  }

  // node_modules/@mux/playback-core/dist/index.mjs
  var import_mux_embed = __toESM(require_mux(), 1);
  var import_hls_min = __toESM(require_hls_min(), 1);
  var ce = import_hls_min.default;
  var l = ce;
  var b = class extends Error {
    constructor(r, n2 = b.MEDIA_ERR_CUSTOM, o, a) {
      var i2;
      super(r);
      this.name = "MediaError", this.code = n2, this.context = a, this.fatal = o != null ? o : n2 >= b.MEDIA_ERR_NETWORK && n2 <= b.MEDIA_ERR_ENCRYPTED, this.message || (this.message = (i2 = b.defaultMessages[this.code]) != null ? i2 : "");
    }
  };
  var T = b;
  T.MEDIA_ERR_ABORTED = 1, T.MEDIA_ERR_NETWORK = 2, T.MEDIA_ERR_DECODE = 3, T.MEDIA_ERR_SRC_NOT_SUPPORTED = 4, T.MEDIA_ERR_ENCRYPTED = 5, T.MEDIA_ERR_CUSTOM = 100, T.defaultMessages = { 1: "You aborted the media playback", 2: "A network error caused the media download to fail.", 3: "A media error caused playback to be aborted. The media could be corrupt or your browser does not support this format.", 4: "An unsupported error occurred. The server or network failed, or your browser does not support this format.", 5: "The media is encrypted and there are no keys to decrypt it." };
  var ue = (e) => e == null;
  var S = (e, t) => ue(t) ? false : e in t;
  var v = { ANY: "any", MUTED: "muted" };
  var g = { ON_DEMAND: "on-demand", LIVE: "live", UNKNOWN: "unknown" };
  var h = { MSE: "mse", NATIVE: "native" };
  var k = { HEADER: "header", QUERY: "query", NONE: "none" };
  var Re = Object.values(k);
  var M = { M3U8: "application/vnd.apple.mpegurl", MP4: "video/mp4" };
  var C = { HLS: M.M3U8 };
  var Oe = Object.keys(C);
  var Ue = [...Object.values(M), "hls", "HLS"];
  var m = (e, t, r, n2, o = e) => {
    o.addEventListener(t, r, n2), e.addEventListener("teardown", () => {
      o.removeEventListener(t, r);
    }, { once: true });
  };
  function V(e, t, r) {
    t && r > t && (r = t);
    for (let n2 = 0; n2 < e.length; n2++)
      if (e.start(n2) <= r && e.end(n2) >= r)
        return true;
    return false;
  }
  var W = (e) => {
    let t = e.indexOf("?");
    if (t < 0)
      return [e];
    let r = e.slice(0, t), n2 = e.slice(t);
    return [r, n2];
  };
  var D = (e) => {
    let t = e.type;
    if (t) {
      let n2 = t.toUpperCase();
      return S(n2, C) ? C[n2] : t;
    }
    let { src: r } = e;
    return r ? de(r) : "";
  };
  var H = (e) => e === "VOD" ? g.ON_DEMAND : g.LIVE;
  var w = (e) => e === "EVENT" ? Number.POSITIVE_INFINITY : e === "VOD" ? Number.NaN : 0;
  var de = (e) => {
    let t = "";
    try {
      t = new URL(e).pathname;
    } catch {
      console.error("invalid url");
    }
    let r = t.lastIndexOf(".");
    if (r < 0)
      return "";
    let o = t.slice(r + 1).toUpperCase();
    return S(o, M) ? M[o] : "";
  };
  var pe = Object.values(v);
  var F = (e) => typeof e == "boolean" || typeof e == "string" && pe.includes(e);
  var K = ({ autoplay: e }, t, r) => {
    let n2 = false, o = false, a = F(e) ? e : !!e, i2 = () => {
      n2 || m(t, "playing", () => {
        n2 = true;
      }, { once: true });
    };
    if (i2(), m(t, "loadstart", () => {
      n2 = false, i2(), _(t, a);
    }, { once: true }), m(t, "loadstart", () => {
      r || (o = !Number.isFinite(t.duration)), _(t, a);
    }, { once: true }), r && r.once(l.Events.LEVEL_LOADED, (c, u2) => {
      var d;
      o = (d = u2.details.live) != null ? d : false;
    }), !a) {
      let c = () => {
        !o || (r != null && r.liveSyncPosition ? t.currentTime = r.liveSyncPosition : Number.isFinite(t.seekable.end(0)) && (t.currentTime = t.seekable.end(0)));
      };
      r && m(t, "play", () => {
        t.preload === "metadata" ? r.once(l.Events.LEVEL_UPDATED, c) : c();
      }, { once: true });
    }
    return (c) => {
      n2 || (a = F(c) ? c : !!c, _(t, a));
    };
  };
  var _ = (e, t) => {
    if (!t)
      return;
    let r = e.muted, n2 = () => e.muted = r;
    switch (t) {
      case v.ANY:
        e.play().catch(() => {
          e.muted = true, e.play().catch(n2);
        });
        break;
      case v.MUTED:
        e.muted = true, e.play().catch(n2);
        break;
      default:
        e.play().catch(() => {
        });
        break;
    }
  };
  var B = ({ preload: e, src: t }, r, n2) => {
    let o = (p) => {
      p != null && ["", "none", "metadata", "auto"].includes(p) ? r.setAttribute("preload", p) : r.removeAttribute("preload");
    };
    if (!n2)
      return o(e), o;
    let a = false, i2 = false, s = n2.config.maxBufferLength, c = n2.config.maxBufferSize, u2 = (p) => {
      o(p);
      let y = p != null ? p : r.preload;
      i2 || y === "none" || (y === "metadata" ? (n2.config.maxBufferLength = 1, n2.config.maxBufferSize = 1) : (n2.config.maxBufferLength = s, n2.config.maxBufferSize = c), d());
    }, d = () => {
      !a && t && (a = true, n2.loadSource(t));
    };
    return m(r, "play", () => {
      i2 = true, n2.config.maxBufferLength = s, n2.config.maxBufferSize = c, d();
    }, { once: true }), u2(e), u2;
  };
  function q(e, t) {
    t.on(l.Events.NON_NATIVE_TEXT_TRACKS_FOUND, (o, { tracks: a }) => {
      a.forEach((i2) => {
        var u2;
        let s = (u2 = i2.subtitleTrack) != null ? u2 : i2.closedCaptions, c = t.subtitleTracks.findIndex(({ lang: d, name: p, type: y }) => d == (s == null ? void 0 : s.lang) && p === i2.label && y.toLowerCase() === i2.kind);
        I(e, i2.kind, i2.label, s == null ? void 0 : s.lang, `${i2.kind}${c}`);
      });
    });
    let r = () => {
      var i2;
      if (!t.subtitleTracks.length)
        return;
      let o = Array.from(e.textTracks).find((s) => s.id && s.mode === "showing" && ["subtitles", "captions"].includes(s.kind)), a = `${(i2 = t.subtitleTracks[t.subtitleTrack]) == null ? void 0 : i2.type.toLowerCase()}${t.subtitleTrack}`;
      if (o && (t.subtitleTrack < 0 || (o == null ? void 0 : o.id) !== a)) {
        let s = t.subtitleTracks.findIndex(({ lang: c, name: u2, type: d }) => c == o.language && u2 === o.label && d.toLowerCase() === o.kind);
        t.subtitleTrack = s;
      }
      o && (o == null ? void 0 : o.id) === a && o.cues && Array.from(o.cues).forEach((s) => {
        o.addCue(s);
      });
    };
    e.textTracks.addEventListener("change", r), t.on(l.Events.CUES_PARSED, (o, { track: a, cues: i2 }) => {
      let s = e.textTracks.getTrackById(a);
      if (!s)
        return;
      let c = s.mode === "disabled";
      c && (s.mode = "hidden"), i2.forEach((u2) => {
        var d;
        (d = s.cues) != null && d.getCueById(u2.id) || s.addCue(u2);
      }), c && (s.mode = "disabled");
    }), t.once(l.Events.DESTROYING, () => {
      e.textTracks.removeEventListener("change", r), e.querySelectorAll("track[data-removeondestroy]").forEach((a) => {
        a.remove();
      });
    });
    let n2 = () => {
      Array.from(e.textTracks).forEach((o) => {
        var a, i2;
        if (!["subtitles", "caption"].includes(o.kind) && o.label === "thumbnails") {
          if (!((a = o.cues) != null && a.length)) {
            let s = e.querySelector('track[label="thumbnails"]'), c = (i2 = s == null ? void 0 : s.getAttribute("src")) != null ? i2 : "";
            s == null || s.removeAttribute("src"), setTimeout(() => {
              s == null || s.setAttribute("src", c);
            }, 0);
          }
          o.mode !== "hidden" && (o.mode = "hidden");
        }
      });
    };
    t.once(l.Events.MANIFEST_LOADED, n2), t.once(l.Events.MEDIA_ATTACHED, n2);
  }
  function I(e, t, r, n2, o) {
    let a = document.createElement("track");
    return a.kind = t, a.label = r, n2 && (a.srclang = n2), o && (a.id = o), a.track.mode = ["subtitles", "captions"].includes(t) ? "disabled" : "hidden", a.setAttribute("data-removeondestroy", ""), e.append(a), a.track;
  }
  function le(e, t) {
    let r = Array.prototype.find.call(e.querySelectorAll("track"), (n2) => n2.track === t);
    r == null || r.remove();
  }
  var L = "cuepoints";
  var N = Object.freeze({ label: L });
  var A = (e, { label: t = L } = N) => {
    var r;
    return (r = Array.from(e.querySelectorAll("track")).find((n2) => n2.track.label === t && n2.track.kind === "metadata")) == null ? void 0 : r.track;
  };
  async function Y(e, t, r = N) {
    let n2 = A(e, r);
    if (!n2) {
      let { label: o = L } = r;
      n2 = I(e, "metadata", o), n2.mode = "hidden", await new Promise((a) => setTimeout(() => a(void 0), 0));
    }
    return n2.mode !== "hidden" && (n2.mode = "hidden"), [...t].sort(({ time: o }, { time: a }) => a - o).forEach(({ time: o, value: a }) => {
      var p, y;
      let i2 = Array.prototype.findIndex.call(n2 == null ? void 0 : n2.cues, (E) => E.startTime >= o), s = (p = n2 == null ? void 0 : n2.cues) == null ? void 0 : p[i2], c = s ? s.startTime : Number.isFinite(e.duration) ? e.duration : Number.MAX_SAFE_INTEGER, u2 = (y = n2 == null ? void 0 : n2.cues) == null ? void 0 : y[i2 - 1];
      u2 && (u2.endTime = o);
      let d = new VTTCue(o, c, JSON.stringify(a != null ? a : null));
      n2.addCue(d);
    }), n2;
  }
  var X = (e) => ({ time: e.startTime, value: JSON.parse(e.text) });
  function fe(e, t = { label: L }) {
    let r = A(e, t);
    return r != null && r.cues ? Array.from(r.cues, (n2) => X(n2)) : [];
  }
  function z(e, t = { label: L }) {
    var a, i2;
    let r = A(e, t);
    if (!((a = r == null ? void 0 : r.activeCues) != null && a.length))
      return;
    let { currentTime: n2 } = e, o = Array.prototype.find.call((i2 = r.activeCues) != null ? i2 : [], ({ startTime: s, endTime: c }) => s <= n2 && c > n2);
    return X(o);
  }
  async function $(e, t = N) {
    return new Promise((r) => {
      m(e, "loadstart", async () => {
        let n2 = await Y(e, [], t);
        m(e, "cuechange", () => {
          let o = z(e);
          if (o) {
            let a = new CustomEvent("cuepointchange", { composed: true, bubbles: true, detail: o });
            e.dispatchEvent(a);
          }
        }, {}, n2), r(n2);
      });
    });
  }
  function ye(e, t) {
    if (t) {
      let r = t.playingDate;
      if (r != null)
        return new Date(r.getTime() - e.currentTime * 1e3);
    }
    return typeof e.getStartDate == "function" ? e.getStartDate() : new Date(NaN);
  }
  function Te(e, t) {
    if (t && t.playingDate)
      return t.playingDate;
    if (typeof e.getStartDate == "function") {
      let r = e.getStartDate();
      return new Date(r.getTime() + e.currentTime * 1e3);
    }
    return new Date(NaN);
  }
  var me = async (e) => fetch(e).then((t) => t.text()).then((t) => {
    let r = t.split(`
`).find((n2, o, a) => o && a[o - 1].startsWith("#EXT-X-STREAM-INF"));
    return fetch(r).then((n2) => n2.text()).then((n2) => n2.split(`
`));
  });
  var ge = (e) => {
    var i2, s;
    let r = (s = ((i2 = e.find((c) => c.startsWith("#EXT-X-PLAYLIST-TYPE"))) != null ? i2 : "").split(":")[1]) == null ? void 0 : s.trim(), n2 = H(r), o = w(r), a;
    if (n2 === g.LIVE) {
      let c = e.find((d) => d.startsWith("#EXT-X-PART-INF"));
      !!c ? a = +c.split(":")[1].split("=")[1] * 2 : a = +e.find((y) => y.startsWith("#EXT-X-TARGETDURATION")).split(":")[1] * 3;
    }
    return { streamType: n2, targetLiveWindow: o, liveEdgeStartOffset: a };
  };
  var G = async (e, t) => {
    var i2, s, c;
    let r = await me(e), { streamType: n2, targetLiveWindow: o, liveEdgeStartOffset: a } = ge(r);
    ((i2 = f.get(t)) != null ? i2 : {}).liveEdgeStartOffset = a, ((s = f.get(t)) != null ? s : {}).targetLiveWindow = o, t.dispatchEvent(new CustomEvent("targetlivewindowchange", { composed: true, bubbles: true })), ((c = f.get(t)) != null ? c : {}).streamType = n2, t.dispatchEvent(new CustomEvent("streamtypechange", { composed: true, bubbles: true }));
  };
  var Me = (e) => {
    var i2;
    let t = e.type, r = H(t), n2 = w(t), o, a = !!((i2 = e.partList) != null && i2.length);
    return r === g.LIVE && (o = a ? e.partTarget * 2 : e.targetduration * 3), { streamType: r, targetLiveWindow: n2, liveEdgeStartOffset: o, lowLatency: a };
  };
  var Ee = (e, t, r) => {
    var s, c, u2, d, p, y, E, x;
    let { streamType: n2, targetLiveWindow: o, liveEdgeStartOffset: a, lowLatency: i2 } = Me(e);
    if (n2 === g.LIVE) {
      i2 ? (r.config.backBufferLength = (s = r.userConfig.backBufferLength) != null ? s : 4, r.config.maxFragLookUpTolerance = (c = r.userConfig.maxFragLookUpTolerance) != null ? c : 1e-3, r.config.abrBandWidthUpFactor = (u2 = r.userConfig.abrBandWidthUpFactor) != null ? u2 : r.config.abrBandWidthFactor) : r.config.backBufferLength = (d = r.userConfig.backBufferLength) != null ? d : 8;
      let se2 = Object.freeze({ get length() {
        return t.seekable.length;
      }, start(P) {
        return t.seekable.start(P);
      }, end(P) {
        var U2;
        return P > this.length ? t.seekable.end(P) : (U2 = r.liveSyncPosition) != null ? U2 : t.seekable.end(P);
      } });
      ((p = f.get(t)) != null ? p : {}).seekable = se2;
    }
    ((y = f.get(t)) != null ? y : {}).liveEdgeStartOffset = a, ((E = f.get(t)) != null ? E : {}).targetLiveWindow = o, t.dispatchEvent(new CustomEvent("targetlivewindowchange", { composed: true, bubbles: true })), ((x = f.get(t)) != null ? x : {}).streamType = n2, t.dispatchEvent(new CustomEvent("streamtypechange", { composed: true, bubbles: true }));
  };
  var J;
  var Q;
  var xe = (Q = (J = globalThis == null ? void 0 : globalThis.navigator) == null ? void 0 : J.userAgent) != null ? Q : "";
  var be = xe.toLowerCase().indexOf("android") !== -1;
  var f = /* @__PURE__ */ new WeakMap();
  var ee = "mux.com";
  var Z;
  var j;
  var te = (j = (Z = l).isSupported) == null ? void 0 : j.call(Z);
  var Pe = be;
  var lt = () => import_mux_embed.default.utils.now();
  var Le = import_mux_embed.default.utils.generateUUID;
  var ft = (e, { domain: t = ee, maxResolution: r = "" } = {}) => {
    if (!e)
      return;
    let [n2, o = ""] = W(e), a = new URL(`https://stream.${t}/${n2}.m3u8${o}`);
    return r && a.searchParams.set("max_resolution", r), a.toString();
  };
  var ve = (e) => {
    if (!e)
      return;
    let [t] = e.split("?");
    return t || void 0;
  };
  var ke = (e) => {
    if (!e || !e.startsWith("https://stream."))
      return;
    let [t] = new URL(e).pathname.slice(1).split(".m3u8");
    return t || void 0;
  };
  var Ce = (e) => {
    var t, r, n2;
    return (t = e == null ? void 0 : e.metadata) != null && t.video_id ? e.metadata.video_id : ne(e) && (n2 = (r = ve(e.playbackId)) != null ? r : ke(e.src)) != null ? n2 : e.src;
  };
  var yt = (e) => {
    var t;
    return (t = f.get(e)) == null ? void 0 : t.error;
  };
  var Tt = (e) => {
    var t, r;
    return (r = (t = f.get(e)) == null ? void 0 : t.streamType) != null ? r : g.UNKNOWN;
  };
  var mt = (e) => {
    var t, r;
    return (r = (t = f.get(e)) == null ? void 0 : t.targetLiveWindow) != null ? r : Number.NaN;
  };
  var Ae = (e) => {
    var t, r;
    return (r = (t = f.get(e)) == null ? void 0 : t.seekable) != null ? r : e.seekable;
  };
  var gt = (e) => {
    var n2;
    let t = (n2 = f.get(e)) == null ? void 0 : n2.liveEdgeStartOffset;
    if (typeof t != "number")
      return Number.NaN;
    let r = Ae(e);
    return r.length ? r.end(r.length - 1) - t : Number.NaN;
  };
  var Mt = (e, t, r) => {
    Se(t, r);
    let { metadata: n2 = {} } = e, { view_session_id: o = Le() } = n2, a = Ce(e);
    n2.view_session_id = o, n2.video_id = a, e.metadata = n2, f.set(t, {});
    let i2 = he(e, t);
    He(e, t, i2), we(e, t, i2), $(t);
    let s = K(e, t, i2), c = B(e, t, i2);
    return { engine: i2, setAutoplay: s, setPreload: c };
  };
  var Se = (e, t) => {
    let r = t == null ? void 0 : t.engine;
    r && (r.detachMedia(), r.destroy()), (e == null ? void 0 : e.mux) && !e.mux.deleted && (e.mux.destroy(), delete e.mux), e && (e.removeAttribute("src"), e.load(), e.removeEventListener("error", ae), e.removeEventListener("error", R), e.removeEventListener("durationchange", oe), f.delete(e), e.dispatchEvent(new Event("teardown")));
  };
  function re(e, t) {
    var u2;
    let r = D(e);
    if (!(r === M.M3U8))
      return true;
    let o = !r || ((u2 = t.canPlayType(r)) != null ? u2 : true), { preferPlayback: a } = e, i2 = a === h.MSE, s = a === h.NATIVE;
    return o && (s || !(te && (i2 || Pe)));
  }
  var he = (e, t) => {
    let { debug: r, streamType: n2, startTime: o = -1, metadata: a, preferCmcd: i2 } = e, c = D(e) === M.M3U8, u2 = re(e, t);
    if (c && !u2 && te) {
      let d = { backBufferLength: 30, renderTextTracksNatively: false, liveDurationInfinity: true, capLevelToPlayerSize: true, capLevelOnFPSDrop: true }, p = De(n2), y = i2 !== k.NONE ? { useHeaders: i2 === k.HEADER, sessionId: a == null ? void 0 : a.view_session_id, contentId: a == null ? void 0 : a.video_id } : void 0;
      return new l({ debug: r, startPosition: o, cmcd: y, ...d, ...p });
    }
  };
  var De = (e) => e === g.LIVE ? { backBufferLength: 8 } : {};
  var ne = ({ playbackId: e, src: t, customDomain: r }) => {
    if (e)
      return true;
    if (typeof t != "string")
      return false;
    let n2 = window == null ? void 0 : window.location.href, o = new URL(t, n2).hostname.toLocaleLowerCase();
    return o.includes(ee) || !!r && o.includes(r.toLocaleLowerCase());
  };
  var He = (e, t, r) => {
    var a;
    let { envKey: n2 } = e, o = ne(e);
    if (n2 || o) {
      let { playerInitTime: i2, playerSoftwareName: s, playerSoftwareVersion: c, beaconCollectionDomain: u2, debug: d, disableCookies: p } = e, y = { ...e.metadata, video_title: ((a = e == null ? void 0 : e.metadata) == null ? void 0 : a.video_title) || void 0 }, E = (x) => typeof x.player_error_code == "string" ? false : typeof e.errorTranslator == "function" ? e.errorTranslator(x) : x;
      import_mux_embed.default.monitor(t, { debug: d, beaconCollectionDomain: u2, hlsjs: r, Hls: r ? l : void 0, automaticErrorTracking: false, errorTranslator: E, disableCookies: p, data: { ...n2 ? { env_key: n2 } : {}, player_software_name: s, player_software: s, player_software_version: c, player_init_time: i2, ...y } });
    }
  };
  var we = (e, t, r) => {
    var a;
    let n2 = re(e, t), { src: o } = e;
    t && n2 ? (typeof o == "string" ? (t.preload === "none" ? m(t, "loadstart", () => G(o, t)) : G(o, t), t.setAttribute("src", o), e.startTime && (((a = f.get(t)) != null ? a : {}).startTime = e.startTime, t.addEventListener("durationchange", oe, { once: true }))) : t.removeAttribute("src"), t.addEventListener("error", ae), t.addEventListener("error", R), t.addEventListener("emptied", () => {
      t.querySelectorAll("track[data-removeondestroy]").forEach((s) => {
        s.remove();
      });
    }, { once: true })) : r && o ? (r.once(l.Events.LEVEL_LOADED, (i2, s) => {
      Ee(s.details, t, r);
    }), r.on(l.Events.ERROR, (i2, s) => {
      let c = { [l.ErrorTypes.NETWORK_ERROR]: T.MEDIA_ERR_NETWORK, [l.ErrorTypes.MEDIA_ERROR]: T.MEDIA_ERR_DECODE }, u2 = new T("", c[s.type]);
      u2.fatal = s.fatal, u2.data = s, t.dispatchEvent(new CustomEvent("error", { detail: u2 }));
    }), t.addEventListener("error", R), q(t, r), r.attachMedia(t)) : console.error("It looks like the video you're trying to play will not work on this system! If possible, try upgrading to the newest versions of your browser or software.");
  };
  function oe(e) {
    var n2;
    let t = e.target, r = (n2 = f.get(t)) == null ? void 0 : n2.startTime;
    if (!!r && V(t.seekable, t.duration, r)) {
      let o = t.preload === "auto";
      o && (t.preload = "none"), t.currentTime = r, o && (t.preload = "auto");
    }
  }
  async function ae(e) {
    if (!e.isTrusted)
      return;
    e.stopImmediatePropagation();
    let t = e.target;
    if (!(t != null && t.error))
      return;
    let { message: r, code: n2 } = t.error, o = new T(r, n2);
    if (t.src && (n2 !== T.MEDIA_ERR_DECODE || n2 !== void 0))
      try {
        let { status: a } = await fetch(t.src);
        o.data = { response: { code: a } };
      } catch {
      }
    t.dispatchEvent(new CustomEvent("error", { detail: o }));
  }
  function R(e) {
    var n2, o;
    if (!(e instanceof CustomEvent) || !(e.detail instanceof T))
      return;
    let t = e.target, r = e.detail;
    !r || !r.fatal || (((n2 = f.get(t)) != null ? n2 : {}).error = r, (o = t.mux) == null || o.emit("error", { player_error_code: r.code, player_error_message: r.message, player_error_context: r.context }));
  }

  // node_modules/@mux/mux-video/dist/index.mjs
  var Qe = Object.defineProperty;
  var et = (a, s, e) => s in a ? Qe(a, s, { enumerable: true, configurable: true, writable: true, value: e }) : a[s] = e;
  var j2 = (a, s, e) => (et(a, typeof s != "symbol" ? s + "" : s, e), e);
  var ye2 = (a, s, e) => {
    if (!s.has(a))
      throw TypeError("Cannot " + e);
  };
  var i = (a, s, e) => (ye2(a, s, "read from private field"), e ? e.call(a) : s.get(a));
  var u = (a, s, e) => {
    if (s.has(a))
      throw TypeError("Cannot add the same private member more than once");
    s instanceof WeakSet ? s.add(a) : s.set(a, e);
  };
  var l2 = (a, s, e, o) => (ye2(a, s, "write to private field"), o ? o.call(a, e) : s.set(a, e), e);
  var h2 = (a, s, e) => (ye2(a, s, "access private method"), e);
  var F2 = class {
    addEventListener() {
    }
    removeEventListener() {
    }
    dispatchEvent(s) {
      return true;
    }
  };
  if (typeof DocumentFragment == "undefined") {
    class a extends F2 {
    }
    globalThis.DocumentFragment = a;
  }
  var q2 = class extends F2 {
  };
  var ge2 = class extends F2 {
  };
  var tt = { get(a) {
  }, define(a, s, e) {
  }, upgrade(a) {
  }, whenDefined(a) {
    return Promise.resolve(q2);
  } };
  var $2;
  var be2 = class {
    constructor(s, e = {}) {
      u(this, $2, void 0);
      l2(this, $2, e == null ? void 0 : e.detail);
    }
    get detail() {
      return i(this, $2);
    }
    initCustomEvent() {
    }
  };
  $2 = /* @__PURE__ */ new WeakMap();
  function st(a, s) {
    return new q2();
  }
  var Ge = { document: { createElement: st }, DocumentFragment, customElements: tt, CustomEvent: be2, EventTarget: F2, HTMLElement: q2, HTMLVideoElement: ge2 };
  var Ue2 = typeof window == "undefined" || typeof globalThis.customElements == "undefined";
  var S2 = Ue2 ? Ge : globalThis;
  var Te2 = Ue2 ? Ge.document : globalThis.document;
  var it = () => {
    try {
      return "0.15.1";
    } catch {
    }
    return "UNKNOWN";
  };
  var rt = it();
  var Ye = () => rt;
  var Be = (a) => {
    var s, e, o, c, m2, We, f2, le2, A2, C2, N2, de2, x, he2, re2, Ve, ae2, Ke, B2, Ae2, W2, b2, I2, L2, k2, _2, R2, X2, ne2, He2, V2, ve2, oe2, je, K2, Pe2, ce2, qe, H2, Se2;
    return s = class extends a {
      constructor() {
        super();
        u(this, R2);
        u(this, ne2);
        u(this, V2);
        u(this, oe2);
        u(this, K2);
        u(this, ce2);
        u(this, H2);
        j2(this, "castEnabled", false);
        u(this, W2, { paused: false });
        u(this, b2, void 0);
        u(this, I2, {});
        u(this, L2, void 0);
        u(this, k2, void 0);
        u(this, _2, void 0);
        s.instances.add(this), h2(this, K2, Pe2).call(this);
      }
      static get castElement() {
        return i(s, e);
      }
      static get castEnabled() {
        return i(s, o);
      }
      static get castState() {
        var t;
        return (t = i(s, A2, C2)) == null ? void 0 : t.getCastState();
      }
      static async exitCast() {
        try {
          await i(s, A2, C2).endCurrentSession(true);
        } catch (r) {
          console.error(r);
          return;
        }
      }
      get castPlayer() {
        if (s.castElement === this)
          return i(this, b2);
      }
      attributeChangedCallback(t) {
        if (!!this.castPlayer)
          switch (t) {
            case "cast-stream-type":
            case "cast-src":
              this.load();
              break;
          }
      }
      async requestCast(t = {}) {
        var r;
        h2(r = s, B2, Ae2).call(r, t), l2(s, e, this), Object.entries(i(this, I2)).forEach(([d, p]) => {
          i(this, b2).controller.addEventListener(d, p);
        });
        try {
          await i(s, A2, C2).requestSession();
        } catch {
          l2(s, e, void 0);
          return;
        }
        i(this, W2).paused = super.paused, super.pause(), this.muted = super.muted;
        try {
          await this.load();
        } catch (d) {
          console.error(d);
        }
      }
      async load() {
        var P, D2;
        if (!this.castPlayer)
          return super.load();
        let t = new chrome.cast.media.MediaInfo(this.castSrc, this.castContentType), r = [...this.querySelectorAll("track")].filter(({ kind: v2, src: T2 }) => T2 && (v2 === "subtitles" || v2 === "captions")), d = [], p = 0;
        r.length && (t.tracks = r.map((v2) => {
          let T2 = ++p;
          d.length === 0 && v2.track.mode === "showing" && d.push(T2);
          let w2 = new chrome.cast.media.Track(T2, chrome.cast.media.TrackType.TEXT);
          return w2.trackContentId = v2.src, w2.trackContentType = "text/vtt", w2.subtype = v2.kind === "captions" ? chrome.cast.media.TextTrackType.CAPTIONS : chrome.cast.media.TextTrackType.SUBTITLES, w2.name = v2.label, w2.language = v2.srclang, w2;
        })), this.castStreamType === "live" ? t.streamType = chrome.cast.media.StreamType.LIVE : t.streamType = chrome.cast.media.StreamType.BUFFERED, t.metadata = new chrome.cast.media.GenericMediaMetadata(), t.metadata.title = this.title, t.metadata.images = [{ url: this.poster }];
        let y = new chrome.cast.media.LoadRequest(t);
        y.currentTime = (P = super.currentTime) != null ? P : 0, y.autoplay = !i(this, W2).paused, y.activeTrackIds = d, await ((D2 = i(s, N2, de2)) == null ? void 0 : D2.loadMedia(y)), this.dispatchEvent(new Event("volumechange"));
      }
      play() {
        var t;
        if (this.castPlayer) {
          this.castPlayer.isPaused && ((t = this.castPlayer.controller) == null || t.playOrPause());
          return;
        }
        return super.play();
      }
      pause() {
        var t;
        if (this.castPlayer) {
          this.castPlayer.isPaused || (t = this.castPlayer.controller) == null || t.playOrPause();
          return;
        }
        super.pause();
      }
      get castSrc() {
        var t, r, d;
        return (d = (r = this.getAttribute("cast-src")) != null ? r : (t = this.querySelector("source")) == null ? void 0 : t.src) != null ? d : this.currentSrc;
      }
      set castSrc(t) {
        this.castSrc != t && this.setAttribute("cast-src", `${t}`);
      }
      get castContentType() {
        var t;
        return (t = this.getAttribute("cast-content-type")) != null ? t : void 0;
      }
      set castContentType(t) {
        this.setAttribute("cast-content-type", `${t}`);
      }
      get castStreamType() {
        var t, r;
        return (r = (t = this.getAttribute("cast-stream-type")) != null ? t : this.streamType) != null ? r : void 0;
      }
      set castStreamType(t) {
        this.setAttribute("cast-stream-type", `${t}`);
      }
      get readyState() {
        if (this.castPlayer)
          switch (this.castPlayer.playerState) {
            case chrome.cast.media.PlayerState.IDLE:
              return 0;
            case chrome.cast.media.PlayerState.BUFFERING:
              return 2;
            default:
              return 3;
          }
        return super.readyState;
      }
      get paused() {
        return this.castPlayer ? this.castPlayer.isPaused : super.paused;
      }
      get muted() {
        var t;
        return this.castPlayer ? (t = this.castPlayer) == null ? void 0 : t.isMuted : super.muted;
      }
      set muted(t) {
        var r;
        if (this.castPlayer) {
          (t && !this.castPlayer.isMuted || !t && this.castPlayer.isMuted) && ((r = this.castPlayer.controller) == null || r.muteOrUnmute());
          return;
        }
        super.muted = t;
      }
      get volume() {
        var t, r;
        return this.castPlayer ? (r = (t = this.castPlayer) == null ? void 0 : t.volumeLevel) != null ? r : 1 : super.volume;
      }
      set volume(t) {
        var r;
        if (this.castPlayer) {
          this.castPlayer.volumeLevel = t, (r = this.castPlayer.controller) == null || r.setVolumeLevel();
          return;
        }
        super.volume = t;
      }
      get duration() {
        var t, r;
        return this.castPlayer && i(this, R2, X2) ? (r = (t = this.castPlayer) == null ? void 0 : t.duration) != null ? r : NaN : super.duration;
      }
      get currentTime() {
        var t, r;
        return this.castPlayer && i(this, R2, X2) ? (r = (t = this.castPlayer) == null ? void 0 : t.currentTime) != null ? r : 0 : super.currentTime;
      }
      set currentTime(t) {
        var r;
        if (this.castPlayer) {
          this.castPlayer.currentTime = t, (r = this.castPlayer.controller) == null || r.seek();
          return;
        }
        super.currentTime = t;
      }
      get onentercast() {
        return i(this, L2);
      }
      set onentercast(t) {
        i(this, L2) && (this.removeEventListener("entercast", i(this, L2)), l2(this, L2, null)), typeof t == "function" && (l2(this, L2, t), this.addEventListener("entercast", t));
      }
      get onleavecast() {
        return i(this, k2);
      }
      set onleavecast(t) {
        i(this, k2) && (this.removeEventListener("leavecast", i(this, k2)), l2(this, k2, null)), typeof t == "function" && (l2(this, k2, t), this.addEventListener("leavecast", t));
      }
      get oncastchange() {
        return i(this, _2);
      }
      set oncastchange(t) {
        i(this, _2) && (this.removeEventListener("castchange", i(this, _2)), l2(this, _2, null)), typeof t == "function" && (l2(this, _2, t), this.addEventListener("castchange", t));
      }
    }, e = /* @__PURE__ */ new WeakMap(), o = /* @__PURE__ */ new WeakMap(), c = /* @__PURE__ */ new WeakMap(), m2 = /* @__PURE__ */ new WeakSet(), We = function() {
      return typeof chrome != "undefined" && chrome.cast && chrome.cast.isAvailable;
    }, f2 = /* @__PURE__ */ new WeakSet(), le2 = function() {
      return typeof cast != "undefined" && cast.framework;
    }, A2 = /* @__PURE__ */ new WeakSet(), C2 = function() {
      if (i(s, f2, le2))
        return cast.framework.CastContext.getInstance();
    }, N2 = /* @__PURE__ */ new WeakSet(), de2 = function() {
      var t;
      return (t = i(s, A2, C2)) == null ? void 0 : t.getCurrentSession();
    }, x = /* @__PURE__ */ new WeakSet(), he2 = function() {
      var t;
      return (t = i(s, N2, de2)) == null ? void 0 : t.getSessionObj().media[0];
    }, re2 = /* @__PURE__ */ new WeakSet(), Ve = function(t) {
      return new Promise((r, d) => {
        i(s, x, he2).editTracksInfo(t, r, d);
      });
    }, ae2 = /* @__PURE__ */ new WeakSet(), Ke = function(t) {
      return new Promise((r, d) => {
        i(s, x, he2).getStatus(t, r, d);
      });
    }, B2 = /* @__PURE__ */ new WeakSet(), Ae2 = function(t) {
      return i(s, A2, C2).setOptions({ receiverApplicationId: chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID, autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED, androidReceiverCompatible: false, language: "en-US", resumeSavedSession: true, ...t });
    }, W2 = /* @__PURE__ */ new WeakMap(), b2 = /* @__PURE__ */ new WeakMap(), I2 = /* @__PURE__ */ new WeakMap(), L2 = /* @__PURE__ */ new WeakMap(), k2 = /* @__PURE__ */ new WeakMap(), _2 = /* @__PURE__ */ new WeakMap(), R2 = /* @__PURE__ */ new WeakSet(), X2 = function() {
      var t;
      return (t = this.castPlayer) == null ? void 0 : t.isMediaLoaded;
    }, ne2 = /* @__PURE__ */ new WeakSet(), He2 = function() {
      i(s, e) === this && (Object.entries(i(this, I2)).forEach(([t, r]) => {
        i(this, b2).controller.removeEventListener(t, r);
      }), l2(s, e, void 0), this.muted = i(this, b2).isMuted, this.currentTime = i(this, b2).savedPlayerState.currentTime, i(this, b2).savedPlayerState.isPaused === false && this.play());
    }, V2 = /* @__PURE__ */ new WeakSet(), ve2 = function() {
      this.dispatchEvent(new CustomEvent("castchange", { detail: i(s, A2, C2).getCastState() }));
    }, oe2 = /* @__PURE__ */ new WeakSet(), je = async function() {
      var r, d;
      let { SESSION_RESUMED: t } = cast.framework.SessionState;
      if (i(s, A2, C2).getSessionState() === t && this.castSrc === ((r = i(s, x, he2)) == null ? void 0 : r.media.contentId)) {
        l2(s, e, this), Object.entries(i(this, I2)).forEach(([p, y]) => {
          i(this, b2).controller.addEventListener(p, y);
        });
        try {
          await h2(d = s, ae2, Ke).call(d, new chrome.cast.media.GetStatusRequest());
        } catch (p) {
          console.error(p);
        }
        i(this, I2)[cast.framework.RemotePlayerEventType.IS_PAUSED_CHANGED](), i(this, I2)[cast.framework.RemotePlayerEventType.PLAYER_STATE_CHANGED]();
      }
    }, K2 = /* @__PURE__ */ new WeakSet(), Pe2 = function() {
      var t;
      !i(s, f2, le2) || this.castEnabled || (this.castEnabled = true, h2(t = s, B2, Ae2).call(t), this.textTracks.addEventListener("change", h2(this, H2, Se2).bind(this)), h2(this, V2, ve2).call(this), l2(this, b2, new cast.framework.RemotePlayer()), new cast.framework.RemotePlayerController(i(this, b2)), l2(this, I2, { [cast.framework.RemotePlayerEventType.IS_CONNECTED_CHANGED]: ({ value: r }) => {
        r === false && h2(this, ne2, He2).call(this), this.dispatchEvent(new Event(r ? "entercast" : "leavecast"));
      }, [cast.framework.RemotePlayerEventType.DURATION_CHANGED]: () => {
        this.dispatchEvent(new Event("durationchange"));
      }, [cast.framework.RemotePlayerEventType.VOLUME_LEVEL_CHANGED]: () => {
        this.dispatchEvent(new Event("volumechange"));
      }, [cast.framework.RemotePlayerEventType.IS_MUTED_CHANGED]: () => {
        this.dispatchEvent(new Event("volumechange"));
      }, [cast.framework.RemotePlayerEventType.CURRENT_TIME_CHANGED]: () => {
        !i(this, R2, X2) || this.dispatchEvent(new Event("timeupdate"));
      }, [cast.framework.RemotePlayerEventType.VIDEO_INFO_CHANGED]: () => {
        this.dispatchEvent(new Event("resize"));
      }, [cast.framework.RemotePlayerEventType.IS_PAUSED_CHANGED]: () => {
        this.dispatchEvent(new Event(this.paused ? "pause" : "play"));
      }, [cast.framework.RemotePlayerEventType.PLAYER_STATE_CHANGED]: () => {
        var r, d;
        ((r = this.castPlayer) == null ? void 0 : r.playerState) !== chrome.cast.media.PlayerState.PAUSED && this.dispatchEvent(new Event({ [chrome.cast.media.PlayerState.PLAYING]: "playing", [chrome.cast.media.PlayerState.BUFFERING]: "waiting", [chrome.cast.media.PlayerState.IDLE]: "emptied" }[(d = this.castPlayer) == null ? void 0 : d.playerState]));
      }, [cast.framework.RemotePlayerEventType.IS_MEDIA_LOADED_CHANGED]: async () => {
        !i(this, R2, X2) || (await Promise.resolve(), h2(this, ce2, qe).call(this));
      } }));
    }, ce2 = /* @__PURE__ */ new WeakSet(), qe = function() {
      h2(this, H2, Se2).call(this);
    }, H2 = /* @__PURE__ */ new WeakSet(), Se2 = async function() {
      var ke2, _e, Me2, Re2, De2, we2;
      if (!this.castPlayer)
        return;
      let r = ((_e = (ke2 = i(this, b2).mediaInfo) == null ? void 0 : ke2.tracks) != null ? _e : []).filter(({ type: E }) => E === chrome.cast.media.TrackType.TEXT), d = [...this.textTracks].filter(({ kind: E }) => E === "subtitles" || E === "captions"), p = r.map(({ language: E, name: ue2, trackId: pe2 }) => {
        var xe2;
        let { mode: Ne } = (xe2 = d.find((Fe) => Fe.language === E && Fe.label === ue2)) != null ? xe2 : {};
        return Ne ? { mode: Ne, trackId: pe2 } : false;
      }).filter(Boolean), P = p.filter(({ mode: E }) => E !== "showing").map(({ trackId: E }) => E), D2 = p.find(({ mode: E }) => E === "showing"), v2 = (De2 = (Re2 = (Me2 = i(s, N2, de2)) == null ? void 0 : Me2.getSessionObj().media[0]) == null ? void 0 : Re2.activeTrackIds) != null ? De2 : [], T2 = v2;
      if (v2.length && (T2 = T2.filter((E) => !P.includes(E))), D2 != null && D2.trackId && (T2 = [...T2, D2.trackId]), T2 = [...new Set(T2)], !((E, ue2) => E.length === ue2.length && E.every((pe2) => ue2.includes(pe2)))(v2, T2))
        try {
          let E = new chrome.cast.media.EditTracksInfoRequest(T2);
          await h2(we2 = s, re2, Ve).call(we2, E);
        } catch (E) {
          console.error(E);
        }
    }, u(s, m2), u(s, f2), u(s, A2), u(s, N2), u(s, x), u(s, re2), u(s, ae2), u(s, B2), j2(s, "observedAttributes", ["cast-src", "cast-content-type", "cast-stream-type"]), j2(s, "instances", /* @__PURE__ */ new Set()), u(s, e, void 0), u(s, o, false), j2(s, "initCast", () => {
      var t;
      i(s, m2, We) ? i(s, f2, le2) ? i(t = s, c).call(t, chrome.cast.isAvailable) : customElements.whenDefined("google-cast-button").then(() => {
        var r;
        return i(r = s, c).call(r, chrome.cast.isAvailable);
      }) : globalThis.__onGCastApiAvailable = () => {
        customElements.whenDefined("google-cast-button").then(() => {
          var r;
          return i(r = s, c).call(r, chrome.cast.isAvailable);
        });
      };
    }), u(s, c, (t) => {
      if (t) {
        l2(s, o, true);
        let { CAST_STATE_CHANGED: r } = cast.framework.CastContextEventType;
        i(s, A2, C2).addEventListener(r, (p) => {
          s.instances.forEach((y) => {
            var P;
            return h2(P = y, V2, ve2).call(P, p);
          });
        });
        let { SESSION_STATE_CHANGED: d } = cast.framework.CastContextEventType;
        i(s, A2, C2).addEventListener(d, (p) => {
          s.instances.forEach((y) => {
            var P;
            return h2(P = y, oe2, je).call(P, p);
          });
        }), s.instances.forEach((p) => {
          var y;
          return h2(y = p, K2, Pe2).call(y);
        });
      }
    }), s;
  };
  var Ce2 = globalThis.HTMLVideoElement ? Be(HTMLVideoElement) : Be(Object);
  globalThis.customElements && !globalThis.customElements.get("castable-video") && (customElements.define("castable-video", Ce2, { extends: "video" }), globalThis.CastableVideoElement = Ce2);
  Ce2.initCast();
  var $e = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting", "waitingforkey", "resize", "enterpictureinpicture", "leavepictureinpicture", "castchange", "entercast", "leavecast"];
  var Xe = Te2.createElement("template");
  Xe.innerHTML = `
<style>
  :host {
    display: inline-block;
    line-height: 0;
    width: auto;
    height: auto;
  }

  video {
    max-width: 100%;
    max-height: 100%;
    min-width: 100%;
    min-height: 100%;
    object-fit: var(--media-object-fit, contain);
    object-position: var(--media-object-position, 50% 50%);
  }

  video::-webkit-media-text-track-container {
    transform: var(--media-webkit-text-track-transform);
    transition: var(--media-webkit-text-track-transition);
  }
</style>
<video is="castable-video" part="video" crossorigin></video>
<slot></slot>
`;
  var z2;
  var G2;
  var me2;
  var J2;
  var Oe2;
  var M2 = class extends S2.HTMLElement {
    constructor() {
      super();
      u(this, G2);
      u(this, J2);
      u(this, z2, void 0);
      this.attachShadow({ mode: "open" }), this.isConnected && h2(this, G2, me2).call(this);
    }
    static get observedAttributes() {
      let e = [], o = (m2) => m2.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
      Object.getOwnPropertyNames(this.prototype).forEach((m2) => {
        let g2 = false;
        try {
          typeof this.prototype[m2] == "function" && (g2 = true);
        } catch {
        }
        !g2 && m2 !== m2.toUpperCase() && e.push(m2.toLowerCase(), o(m2));
      });
      let c = Object.getPrototypeOf(this).observedAttributes;
      return c && (e = e.concat(c)), e;
    }
    attributeChangedCallback(e, o, c) {
      h2(this, G2, me2).call(this), h2(this, J2, Oe2).call(this, e, o, c);
    }
    connectedCallback() {
      h2(this, G2, me2).call(this);
    }
  };
  z2 = /* @__PURE__ */ new WeakMap(), G2 = /* @__PURE__ */ new WeakSet(), me2 = function() {
    if (i(this, z2))
      return;
    l2(this, z2, true), this.shadowRoot.append(Xe.content.cloneNode(true)), this.nativeEl = this.shadowRoot.querySelector("video"), $e.forEach((o) => {
      this.nativeEl.addEventListener(o, (c) => {
        this.dispatchEvent(new CustomEvent(c.type, { detail: c.detail }));
      });
    });
    let e = this.shadowRoot.querySelector("slot");
    e.addEventListener("slotchange", () => {
      e.assignedElements().forEach((o) => {
        !["track", "source"].includes(o.localName) || this.nativeEl.append(o);
      });
    }), Array.prototype.forEach.call(this.attributes, (o) => {
      h2(this, J2, Oe2).call(this, o.name, null, o.value);
    }), this.nativeEl.defaultMuted && (this.nativeEl.muted = true);
  }, J2 = /* @__PURE__ */ new WeakSet(), Oe2 = function(e, o, c) {
    let m2 = Object.getOwnPropertyNames(Object.getPrototypeOf(this)), g2 = nt(m2, e), f2 = Object.getPrototypeOf(this.constructor).toString().indexOf("function HTMLElement") === 0;
    g2 && !f2 ? typeof this[g2] == "boolean" ? c === null ? this[g2] = false : this[g2] = true : this[g2] = c : c === null ? this.nativeEl.removeAttribute(e) : ["id", "class"].indexOf(e) === -1 && this.nativeEl.setAttribute(e, c);
  };
  var ze = [];
  var Je = Te2.createElement("video", { is: "castable-video" });
  var at = ["webkitDisplayingFullscreen", "webkitSupportsFullscreen"];
  for (let a = Object.getPrototypeOf(Je); a && a !== S2.HTMLElement.prototype; a = Object.getPrototypeOf(a))
    Object.getOwnPropertyNames(a).forEach((s) => {
      at.indexOf(s) === -1 && ze.push(s);
    });
  ze.forEach((a) => {
    if (a in M2.prototype)
      return;
    if (typeof Je[a] == "function")
      M2.prototype[a] = function() {
        return this.nativeEl[a].apply(this.nativeEl, arguments);
      };
    else {
      let e = { get() {
        return this.nativeEl[a];
      } };
      a !== a.toUpperCase() && (e.set = function(o) {
        this.nativeEl[a] = o;
      }), Object.defineProperty(M2.prototype, a, e);
    }
  });
  function nt(a, s) {
    let e = null;
    return a.forEach((o) => {
      o.toLowerCase() == s.toLowerCase() && (e = o);
    }), e;
  }
  S2.customElements.get("custom-video") || (S2.customElements.define("custom-video", M2), S2.CustomVideoElement = M2);
  var Ie = M2;
  var n = { BEACON_COLLECTION_DOMAIN: "beacon-collection-domain", CUSTOM_DOMAIN: "custom-domain", DEBUG: "debug", DISABLE_COOKIES: "disable-cookies", ENV_KEY: "env-key", MAX_RESOLUTION: "max-resolution", METADATA_URL: "metadata-url", PLAYBACK_ID: "playback-id", PLAYER_SOFTWARE_NAME: "player-software-name", PLAYER_SOFTWARE_VERSION: "player-software-version", PREFER_CMCD: "prefer-cmcd", PREFER_PLAYBACK: "prefer-playback", START_TIME: "start-time", STREAM_TYPE: "stream-type", TARGET_LIVE_WINDOW: "target-live-window", LIVE_EDGE_OFFSET: "live-edge-offset", TYPE: "type" };
  var At = Object.values(n);
  var vt = Ye();
  var Pt = "mux-video";
  var O2;
  var U;
  var Q2;
  var Y2;
  var ee2;
  var te2;
  var se;
  var ie2;
  var Le2;
  var Z2 = class extends Ie {
    constructor() {
      super();
      u(this, ie2);
      u(this, O2, void 0);
      u(this, U, void 0);
      u(this, Q2, void 0);
      u(this, Y2, {});
      u(this, ee2, void 0);
      u(this, te2, void 0);
      u(this, se, void 0);
      l2(this, Q2, lt());
    }
    static get observedAttributes() {
      var e;
      return [...At, ...(e = Ie.observedAttributes) != null ? e : []];
    }
    get preferCmcd() {
      var e;
      return (e = this.getAttribute(n.PREFER_CMCD)) != null ? e : void 0;
    }
    set preferCmcd(e) {
      e !== this.preferCmcd && (e ? Re.includes(e) ? this.setAttribute(n.PREFER_CMCD, e) : console.warn(`Invalid value for preferCmcd. Must be one of ${Re.join()}`) : this.removeAttribute(n.PREFER_CMCD));
    }
    get playerInitTime() {
      return i(this, Q2);
    }
    get playerSoftwareName() {
      var e;
      return (e = i(this, te2)) != null ? e : Pt;
    }
    set playerSoftwareName(e) {
      l2(this, te2, e);
    }
    get playerSoftwareVersion() {
      var e;
      return (e = i(this, ee2)) != null ? e : vt;
    }
    set playerSoftwareVersion(e) {
      l2(this, ee2, e);
    }
    get _hls() {
      var e;
      return (e = i(this, O2)) == null ? void 0 : e.engine;
    }
    get mux() {
      return this.nativeEl.mux;
    }
    get error() {
      var e;
      return (e = yt(this.nativeEl)) != null ? e : null;
    }
    get errorTranslator() {
      return i(this, se);
    }
    set errorTranslator(e) {
      l2(this, se, e);
    }
    get src() {
      return this.getAttribute("src");
    }
    set src(e) {
      e !== this.src && (e == null ? this.removeAttribute("src") : this.setAttribute("src", e));
    }
    get type() {
      var e;
      return (e = this.getAttribute(n.TYPE)) != null ? e : void 0;
    }
    set type(e) {
      e !== this.type && (e ? this.setAttribute(n.TYPE, e) : this.removeAttribute(n.TYPE));
    }
    get autoplay() {
      let e = this.getAttribute("autoplay");
      return e === null ? false : e === "" ? true : e;
    }
    set autoplay(e) {
      let o = this.autoplay;
      e !== o && (e ? this.setAttribute("autoplay", typeof e == "string" ? e : "") : this.removeAttribute("autoplay"));
    }
    get preload() {
      let e = this.getAttribute("preload");
      return e === "" ? "auto" : ["none", "metadata", "auto"].includes(e) ? e : super.preload;
    }
    set preload(e) {
      e != this.getAttribute("preload") && (["", "none", "metadata", "auto"].includes(e) ? this.setAttribute("preload", e) : this.removeAttribute("preload"));
    }
    get debug() {
      return this.getAttribute(n.DEBUG) != null;
    }
    set debug(e) {
      e !== this.debug && (e ? this.setAttribute(n.DEBUG, "") : this.removeAttribute(n.DEBUG));
    }
    get disableCookies() {
      return this.hasAttribute(n.DISABLE_COOKIES);
    }
    set disableCookies(e) {
      e !== this.disableCookies && (e ? this.setAttribute(n.DISABLE_COOKIES, "") : this.removeAttribute(n.DISABLE_COOKIES));
    }
    get startTime() {
      let e = this.getAttribute(n.START_TIME);
      if (e == null)
        return;
      let o = +e;
      return Number.isNaN(o) ? void 0 : o;
    }
    set startTime(e) {
      e !== this.startTime && (e == null ? this.removeAttribute(n.START_TIME) : this.setAttribute(n.START_TIME, `${e}`));
    }
    get playbackId() {
      var e;
      return (e = this.getAttribute(n.PLAYBACK_ID)) != null ? e : void 0;
    }
    set playbackId(e) {
      e !== this.playbackId && (e ? this.setAttribute(n.PLAYBACK_ID, e) : this.removeAttribute(n.PLAYBACK_ID));
    }
    get maxResolution() {
      var e;
      return (e = this.getAttribute(n.MAX_RESOLUTION)) != null ? e : void 0;
    }
    set maxResolution(e) {
      e !== this.maxResolution && (e ? this.setAttribute(n.MAX_RESOLUTION, e) : this.removeAttribute(n.MAX_RESOLUTION));
    }
    get customDomain() {
      var e;
      return (e = this.getAttribute(n.CUSTOM_DOMAIN)) != null ? e : void 0;
    }
    set customDomain(e) {
      e !== this.customDomain && (e ? this.setAttribute(n.CUSTOM_DOMAIN, e) : this.removeAttribute(n.CUSTOM_DOMAIN));
    }
    get envKey() {
      var e;
      return (e = this.getAttribute(n.ENV_KEY)) != null ? e : void 0;
    }
    set envKey(e) {
      e !== this.envKey && (e ? this.setAttribute(n.ENV_KEY, e) : this.removeAttribute(n.ENV_KEY));
    }
    get beaconCollectionDomain() {
      var e;
      return (e = this.getAttribute(n.BEACON_COLLECTION_DOMAIN)) != null ? e : void 0;
    }
    set beaconCollectionDomain(e) {
      e !== this.beaconCollectionDomain && (e ? this.setAttribute(n.BEACON_COLLECTION_DOMAIN, e) : this.removeAttribute(n.BEACON_COLLECTION_DOMAIN));
    }
    get streamType() {
      var e;
      return (e = this.getAttribute(n.STREAM_TYPE)) != null ? e : Tt(this.nativeEl);
    }
    set streamType(e) {
      e !== this.streamType && (e ? this.setAttribute(n.STREAM_TYPE, e) : this.removeAttribute(n.STREAM_TYPE));
    }
    get targetLiveWindow() {
      return this.hasAttribute(n.TARGET_LIVE_WINDOW) ? +this.getAttribute(n.TARGET_LIVE_WINDOW) : mt(this.nativeEl);
    }
    set targetLiveWindow(e) {
      e != this.targetLiveWindow && (e == null ? this.removeAttribute(n.TARGET_LIVE_WINDOW) : this.setAttribute(n.TARGET_LIVE_WINDOW, `${+e}`));
    }
    get liveEdgeStart() {
      var e, o;
      if (this.hasAttribute(n.LIVE_EDGE_OFFSET)) {
        let { liveEdgeOffset: c } = this, m2 = (e = this.nativeEl.seekable.end(0)) != null ? e : 0, g2 = (o = this.nativeEl.seekable.start(0)) != null ? o : 0;
        return Math.max(g2, m2 - c);
      }
      return gt(this.nativeEl);
    }
    get liveEdgeOffset() {
      if (!!this.hasAttribute(n.LIVE_EDGE_OFFSET))
        return +this.getAttribute(n.LIVE_EDGE_OFFSET);
    }
    set liveEdgeOffset(e) {
      e != this.targetLiveWindow && (e == null ? this.removeAttribute(n.LIVE_EDGE_OFFSET) : this.setAttribute(n.LIVE_EDGE_OFFSET, `${+e}`));
    }
    get seekable() {
      return Ae(this.nativeEl);
    }
    async addCuePoints(e) {
      return Y(this.nativeEl, e);
    }
    get activeCuePoint() {
      return z(this.nativeEl);
    }
    get cuePoints() {
      return fe(this.nativeEl);
    }
    getStartDate() {
      return ye(this.nativeEl, this._hls);
    }
    get currentPdt() {
      return Te(this.nativeEl, this._hls);
    }
    get preferPlayback() {
      let e = this.getAttribute(n.PREFER_PLAYBACK);
      if (e === h.MSE || e === h.NATIVE)
        return e;
    }
    set preferPlayback(e) {
      e !== this.preferPlayback && (e === h.MSE || e === h.NATIVE ? this.setAttribute(n.PREFER_PLAYBACK, e) : this.removeAttribute(n.PREFER_PLAYBACK));
    }
    get metadata() {
      return { ...this.getAttributeNames().filter((o) => o.startsWith("metadata-") && ![n.METADATA_URL].includes(o)).reduce((o, c) => {
        let m2 = this.getAttribute(c);
        return m2 != null && (o[c.replace(/^metadata-/, "").replace(/-/g, "_")] = m2), o;
      }, {}), ...i(this, Y2) };
    }
    set metadata(e) {
      l2(this, Y2, e != null ? e : {}), this.mux && this.mux.emit("hb", i(this, Y2));
    }
    load() {
      l2(this, O2, Mt(this, this.nativeEl, i(this, O2)));
    }
    unload() {
      Se(this.nativeEl, i(this, O2)), l2(this, O2, void 0);
    }
    attributeChangedCallback(e, o, c) {
      var m2, g2;
      switch (super.attributeChangedCallback(e, o, c), e) {
        case n.PLAYER_SOFTWARE_NAME:
          this.playerSoftwareName = c != null ? c : void 0;
          break;
        case n.PLAYER_SOFTWARE_VERSION:
          this.playerSoftwareVersion = c != null ? c : void 0;
          break;
        case "src": {
          let f2 = !!o, fe2 = !!c;
          !f2 && fe2 ? h2(this, ie2, Le2).call(this) : f2 && !fe2 ? this.unload() : f2 && fe2 && (this.unload(), h2(this, ie2, Le2).call(this));
          break;
        }
        case "autoplay":
          if (c === o)
            break;
          (m2 = i(this, O2)) == null || m2.setAutoplay(this.autoplay);
          break;
        case "preload":
          if (c === o)
            break;
          (g2 = i(this, O2)) == null || g2.setPreload(c);
          break;
        case n.PLAYBACK_ID:
          this.src = ft(c != null ? c : void 0, { maxResolution: this.maxResolution, domain: this.customDomain });
          break;
        case n.DEBUG: {
          let f2 = this.debug;
          this.mux && console.info("Cannot toggle debug mode of mux data after initialization. Make sure you set all metadata to override before setting the src."), this._hls && (this._hls.config.debug = f2);
          break;
        }
        case n.METADATA_URL:
          c && fetch(c).then((f2) => f2.json()).then((f2) => this.metadata = f2).catch(() => console.error(`Unable to load or parse metadata JSON from metadata-url ${c}!`));
          break;
        case n.STREAM_TYPE:
          (c == null || c !== o) && this.dispatchEvent(new CustomEvent("streamtypechange", { composed: true, bubbles: true }));
          break;
        case n.TARGET_LIVE_WINDOW:
          (c == null || c !== o) && this.dispatchEvent(new CustomEvent("targetlivewindowchange", { composed: true, bubbles: true, detail: this.targetLiveWindow }));
          break;
        default:
          break;
      }
    }
    disconnectedCallback() {
      this.unload();
    }
  };
  O2 = /* @__PURE__ */ new WeakMap(), U = /* @__PURE__ */ new WeakMap(), Q2 = /* @__PURE__ */ new WeakMap(), Y2 = /* @__PURE__ */ new WeakMap(), ee2 = /* @__PURE__ */ new WeakMap(), te2 = /* @__PURE__ */ new WeakMap(), se = /* @__PURE__ */ new WeakMap(), ie2 = /* @__PURE__ */ new WeakSet(), Le2 = async function() {
    i(this, U) || (await l2(this, U, Promise.resolve()), l2(this, U, null), this.load());
  };
  S2.customElements.get("mux-video") || (S2.customElements.define("mux-video", Z2), S2.MuxVideoElement = Z2);
  var Kt = Z2;

  // lang/en.json
  var code = "en";
  var en_default = { code };

  // src/utils.ts
  var DEFAULT_LOCALE = "en";
  function i18n(str, translate = true) {
    var _a, _b;
    const message = translate ? (_b = (_a = en_default) == null ? void 0 : _a[str]) != null ? _b : str : str;
    const locale = translate ? en_default.code : DEFAULT_LOCALE;
    return new IntlMessageFormat(message, locale);
  }
  var IntlMessageFormat = class {
    constructor(message, locale = ((_a) => (_a = en_default.code) != null ? _a : DEFAULT_LOCALE)()) {
      this.message = message;
      this.locale = locale;
    }
    format(values) {
      return this.message.replace(/\{(\w+)\}/g, (match, key) => {
        var _a;
        return (_a = values[key]) != null ? _a : "";
      });
    }
    toString() {
      return this.message;
    }
  };
  function stylePropsToString(props) {
    let style = "";
    Object.entries(props).forEach(([key, value]) => {
      if (value == null)
        return;
      style += `${kebabCase(key)}: ${value}; `;
    });
    return style ? style.trim() : void 0;
  }
  function kebabCase(name) {
    return name.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
  }
  function camelCase2(name) {
    return name.replace(/[-_]([a-z])/g, ($0, $1) => $1.toUpperCase());
  }
  function toNumberOrUndefined(val) {
    if (val == null)
      return void 0;
    const num = +val;
    return !Number.isNaN(num) ? num : void 0;
  }
  function toQuery(obj) {
    const params = toParams(obj).toString();
    return params ? "?" + params : "";
  }
  function toParams(obj) {
    const params = {};
    for (const key in obj) {
      if (obj[key] != null)
        params[key] = obj[key];
    }
    return new URLSearchParams(params);
  }
  function parseJwt(token) {
    const base64Url = (token != null ? token : "").split(".")[1];
    if (!base64Url)
      return {};
    const base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
    const jsonPayload = decodeURIComponent(
      atob(base64).split("").map(function(c) {
        return "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2);
      }).join("")
    );
    return JSON.parse(jsonPayload);
  }
  var containsComposedNode2 = (rootNode, childNode) => {
    if (!rootNode || !childNode)
      return false;
    if (rootNode.contains(childNode))
      return true;
    return containsComposedNode2(rootNode, childNode.getRootNode().host);
  };

  // src/helpers.ts
  var MUX_VIDEO_DOMAIN = "mux.com";
  var getEnvPlayerVersion = () => {
    try {
      return "1.10.1";
    } catch {
    }
    return "UNKNOWN";
  };
  var player_version = getEnvPlayerVersion();
  var getPlayerVersion = () => player_version;
  var getSrcFromPlaybackId = (playbackId, { maxResolution, token, domain = MUX_VIDEO_DOMAIN } = {}) => {
    const isSignedUrl = !!token;
    const maxRes = maxResolution ? { max_resolution: maxResolution } : {};
    const query = isSignedUrl ? { token } : { redundant_streams: true, ...maxRes };
    return `https://stream.${domain}/${playbackId}.m3u8${toQuery(query)}`;
  };
  var getPosterURLFromPlaybackId = (playbackId, { token, thumbnailTime, domain = MUX_VIDEO_DOMAIN } = {}) => {
    const time = token == null ? thumbnailTime : void 0;
    const { aud } = parseJwt(token);
    if (token && aud !== "t") {
      return;
    }
    return `https://image.${domain}/${playbackId}/thumbnail.webp${toQuery({
      token,
      time
    })}`;
  };
  var getStoryboardURLFromPlaybackId = (playbackId, { token, domain = MUX_VIDEO_DOMAIN } = {}) => {
    const { aud } = parseJwt(token);
    if (token && aud !== "s") {
      return;
    }
    return `https://image.${domain}/${playbackId}/storyboard.vtt${toQuery({
      token,
      format: "webp"
    })}`;
  };
  var getStreamTypeFromAttr = (streamTypeAttr) => {
    if (!streamTypeAttr)
      return void 0;
    if ([g.LIVE, g.ON_DEMAND].includes(streamTypeAttr))
      return streamTypeAttr;
    if (streamTypeAttr == null ? void 0 : streamTypeAttr.includes("live"))
      return g.LIVE;
    return void 0;
  };
  var attrToPropNameMap = {
    crossorigin: "crossOrigin",
    playsinline: "playsInline"
  };
  function toPropName(attrName) {
    var _a;
    return (_a = attrToPropNameMap[attrName]) != null ? _a : camelCase2(attrName);
  }
  var _el2, _attr2, _tokens2;
  var AttributeTokenList2 = class {
    constructor(el, attr) {
      __privateAdd(this, _el2, void 0);
      __privateAdd(this, _attr2, void 0);
      __privateAdd(this, _tokens2, []);
      __privateSet(this, _el2, el);
      __privateSet(this, _attr2, attr);
    }
    [Symbol.iterator]() {
      return __privateGet(this, _tokens2).values();
    }
    get length() {
      return __privateGet(this, _tokens2).length;
    }
    get value() {
      var _a;
      return (_a = __privateGet(this, _tokens2).join(" ")) != null ? _a : "";
    }
    set value(val) {
      var _a;
      if (val === this.value)
        return;
      __privateSet(this, _tokens2, []);
      this.add(...(_a = val == null ? void 0 : val.split(" ")) != null ? _a : []);
    }
    toString() {
      return this.value;
    }
    item(index) {
      return __privateGet(this, _tokens2)[index];
    }
    values() {
      return __privateGet(this, _tokens2).values();
    }
    keys() {
      return __privateGet(this, _tokens2).keys();
    }
    forEach(callback) {
      __privateGet(this, _tokens2).forEach(callback);
    }
    add(...tokens) {
      var _a, _b;
      tokens.forEach((t) => {
        if (!this.contains(t))
          __privateGet(this, _tokens2).push(t);
      });
      if (this.value === "" && !((_a = __privateGet(this, _el2)) == null ? void 0 : _a.hasAttribute(`${__privateGet(this, _attr2)}`))) {
        return;
      }
      (_b = __privateGet(this, _el2)) == null ? void 0 : _b.setAttribute(`${__privateGet(this, _attr2)}`, `${this.value}`);
    }
    remove(...tokens) {
      var _a;
      tokens.forEach((t) => {
        __privateGet(this, _tokens2).splice(__privateGet(this, _tokens2).indexOf(t), 1);
      });
      (_a = __privateGet(this, _el2)) == null ? void 0 : _a.setAttribute(`${__privateGet(this, _attr2)}`, `${this.value}`);
    }
    contains(token) {
      return __privateGet(this, _tokens2).includes(token);
    }
    toggle(token, force) {
      if (typeof force !== "undefined") {
        if (force) {
          this.add(token);
          return true;
        } else {
          this.remove(token);
          return false;
        }
      }
      if (this.contains(token)) {
        this.remove(token);
        return false;
      }
      this.add(token);
      return true;
    }
    replace(oldToken, newToken) {
      this.remove(oldToken);
      this.add(newToken);
    }
  };
  _el2 = new WeakMap();
  _attr2 = new WeakMap();
  _tokens2 = new WeakMap();

  // src/logger.ts
  var prefix = `[mux-player ${getPlayerVersion()}]`;
  function warn(...args) {
    console.warn(prefix, ...args);
  }
  function error(...args) {
    console.error(prefix, ...args);
  }
  function devlog(opts) {
    var _a;
    let message = (_a = opts.message) != null ? _a : "";
    if (opts.context) {
      message += ` ${opts.context}`;
    }
    if (opts.file) {
      const githubErrorsBase = "https://github.com/muxinc/elements/blob/main/errors/";
      message += ` ${i18n(`Read more: `)}
${githubErrorsBase}${opts.file}`;
    }
    warn(message);
  }

  // src/video-api.ts
  var AllowedVideoAttributes = {
    AUTOPLAY: "autoplay",
    CROSSORIGIN: "crossorigin",
    LOOP: "loop",
    MUTED: "muted",
    PLAYSINLINE: "playsinline",
    PRELOAD: "preload"
  };
  var CustomVideoAttributes = {
    VOLUME: "volume",
    PLAYBACKRATE: "playbackrate",
    MUTED: "muted"
  };
  var emptyTimeRanges2 = Object.freeze({
    length: 0,
    start(index) {
      const unsignedIdx = index >>> 0;
      if (unsignedIdx >= this.length) {
        throw new DOMException(
          `Failed to execute 'start' on 'TimeRanges': The index provided (${unsignedIdx}) is greater than or equal to the maximum bound (${this.length}).`
        );
      }
      return 0;
    },
    end(index) {
      const unsignedIdx = index >>> 0;
      if (unsignedIdx >= this.length) {
        throw new DOMException(
          `Failed to execute 'end' on 'TimeRanges': The index provided (${unsignedIdx}) is greater than or equal to the maximum bound (${this.length}).`
        );
      }
      return 0;
    }
  });
  var AllowedVideoEvents = $e.filter((type) => type !== "error");
  var AllowedVideoAttributeNames = Object.values(AllowedVideoAttributes).filter(
    (name) => ![AllowedVideoAttributes.PLAYSINLINE].includes(name)
  );
  var CustomVideoAttributesNames = Object.values(CustomVideoAttributes);
  function initVideoApi(el) {
    el.querySelectorAll(":scope > track").forEach((track) => {
      var _a;
      (_a = el.media) == null ? void 0 : _a.append(track.cloneNode());
    });
    AllowedVideoEvents.forEach((type) => {
      var _a;
      (_a = el.media) == null ? void 0 : _a.addEventListener(type, (evt) => {
        el.dispatchEvent(new Event(evt.type));
      });
    });
  }
  var VideoApiElement = class extends internalGlobalThis.HTMLElement {
    static get observedAttributes() {
      return [...AllowedVideoAttributeNames, ...CustomVideoAttributesNames];
    }
    constructor() {
      super();
      this.querySelectorAll(":scope > track").forEach((track) => {
        var _a;
        (_a = this.media) == null ? void 0 : _a.append(track.cloneNode());
      });
      const mutationCallback = (mutationsList) => {
        for (const mutation of mutationsList) {
          if (mutation.type === "childList") {
            mutation.removedNodes.forEach((node) => {
              var _a, _b;
              const track = (_a = this.media) == null ? void 0 : _a.querySelector(`track[src="${node.src}"]`);
              if (track)
                (_b = this.media) == null ? void 0 : _b.removeChild(track);
            });
            mutation.addedNodes.forEach((node) => {
              var _a;
              (_a = this.media) == null ? void 0 : _a.append(node.cloneNode());
            });
          }
        }
      };
      const observer = new MutationObserver(mutationCallback);
      observer.observe(this, { childList: true, subtree: true });
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      var _a, _b;
      switch (attrName) {
        case CustomVideoAttributes.MUTED: {
          if (this.media) {
            this.media.muted = newValue != null;
            this.media.defaultMuted = newValue != null;
          }
          return;
        }
        case CustomVideoAttributes.VOLUME: {
          const val = (_a = toNumberOrUndefined(newValue)) != null ? _a : 1;
          if (this.media) {
            this.media.volume = val;
          }
          return;
        }
        case CustomVideoAttributes.PLAYBACKRATE: {
          const val = (_b = toNumberOrUndefined(newValue)) != null ? _b : 1;
          if (this.media) {
            this.media.playbackRate = val;
            this.media.defaultPlaybackRate = val;
          }
          return;
        }
      }
    }
    play() {
      var _a, _b;
      return (_b = (_a = this.media) == null ? void 0 : _a.play()) != null ? _b : Promise.reject();
    }
    pause() {
      var _a;
      (_a = this.media) == null ? void 0 : _a.pause();
    }
    requestCast(options) {
      var _a;
      return (_a = this.media) == null ? void 0 : _a.requestCast(options);
    }
    get media() {
      var _a;
      return (_a = this.shadowRoot) == null ? void 0 : _a.querySelector("mux-video");
    }
    get paused() {
      var _a, _b;
      return (_b = (_a = this.media) == null ? void 0 : _a.paused) != null ? _b : true;
    }
    get duration() {
      var _a, _b;
      return (_b = (_a = this.media) == null ? void 0 : _a.duration) != null ? _b : NaN;
    }
    get ended() {
      var _a, _b;
      return (_b = (_a = this.media) == null ? void 0 : _a.ended) != null ? _b : false;
    }
    get buffered() {
      var _a, _b;
      return (_b = (_a = this.media) == null ? void 0 : _a.buffered) != null ? _b : emptyTimeRanges2;
    }
    get seekable() {
      var _a, _b;
      return (_b = (_a = this.media) == null ? void 0 : _a.seekable) != null ? _b : emptyTimeRanges2;
    }
    get readyState() {
      var _a, _b;
      return (_b = (_a = this.media) == null ? void 0 : _a.readyState) != null ? _b : 0;
    }
    get videoWidth() {
      var _a, _b;
      return (_b = (_a = this.media) == null ? void 0 : _a.videoWidth) != null ? _b : 0;
    }
    get videoHeight() {
      var _a, _b;
      return (_b = (_a = this.media) == null ? void 0 : _a.videoHeight) != null ? _b : 0;
    }
    get currentTime() {
      var _a, _b;
      return (_b = (_a = this.media) == null ? void 0 : _a.currentTime) != null ? _b : 0;
    }
    set currentTime(val) {
      if (this.media) {
        this.media.currentTime = Number(val);
      }
    }
    get volume() {
      var _a, _b;
      return (_b = (_a = this.media) == null ? void 0 : _a.volume) != null ? _b : 1;
    }
    set volume(val) {
      if (this.media) {
        this.media.volume = Number(val);
      }
    }
    get playbackRate() {
      var _a, _b;
      return (_b = (_a = this.media) == null ? void 0 : _a.playbackRate) != null ? _b : 1;
    }
    set playbackRate(val) {
      if (this.media) {
        this.media.playbackRate = Number(val);
      }
    }
    get defaultPlaybackRate() {
      var _a;
      return (_a = toNumberOrUndefined(this.getAttribute(CustomVideoAttributes.PLAYBACKRATE))) != null ? _a : 1;
    }
    set defaultPlaybackRate(val) {
      if (val != null) {
        this.setAttribute(CustomVideoAttributes.PLAYBACKRATE, `${val}`);
      } else {
        this.removeAttribute(CustomVideoAttributes.PLAYBACKRATE);
      }
    }
    get crossOrigin() {
      return getVideoAttribute(this, AllowedVideoAttributes.CROSSORIGIN);
    }
    set crossOrigin(val) {
      this.setAttribute(AllowedVideoAttributes.CROSSORIGIN, `${val}`);
    }
    get autoplay() {
      return getVideoAttribute(this, AllowedVideoAttributes.AUTOPLAY) != null;
    }
    set autoplay(val) {
      if (val) {
        this.setAttribute(AllowedVideoAttributes.AUTOPLAY, typeof val === "string" ? val : "");
      } else {
        this.removeAttribute(AllowedVideoAttributes.AUTOPLAY);
      }
    }
    get loop() {
      return getVideoAttribute(this, AllowedVideoAttributes.LOOP) != null;
    }
    set loop(val) {
      if (val) {
        this.setAttribute(AllowedVideoAttributes.LOOP, "");
      } else {
        this.removeAttribute(AllowedVideoAttributes.LOOP);
      }
    }
    get muted() {
      var _a, _b;
      return (_b = (_a = this.media) == null ? void 0 : _a.muted) != null ? _b : false;
    }
    set muted(val) {
      if (this.media) {
        this.media.muted = Boolean(val);
      }
    }
    get defaultMuted() {
      return getVideoAttribute(this, AllowedVideoAttributes.MUTED) != null;
    }
    set defaultMuted(val) {
      if (val) {
        this.setAttribute(AllowedVideoAttributes.MUTED, "");
      } else {
        this.removeAttribute(AllowedVideoAttributes.MUTED);
      }
    }
    get playsInline() {
      return getVideoAttribute(this, AllowedVideoAttributes.PLAYSINLINE) != null;
    }
    set playsInline(val) {
      error("playsInline is set to true by default and is not currently supported as a setter.");
    }
    get preload() {
      return this.media ? this.media.preload : this.getAttribute("preload");
    }
    set preload(val) {
      if (["", "none", "metadata", "auto"].includes(val)) {
        this.setAttribute(AllowedVideoAttributes.PRELOAD, val);
      } else {
        this.removeAttribute(AllowedVideoAttributes.PRELOAD);
      }
    }
  };
  function getVideoAttribute(el, name) {
    return el.media ? el.media.getAttribute(name) : el.getAttribute(name);
  }
  var video_api_default = VideoApiElement;

  // node_modules/media-chrome/dist/utils/template-parts.js
  var __defProp3 = Object.defineProperty;
  var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField2 = (obj, key, value) => {
    __defNormalProp2(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var __accessCheck19 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet19 = (obj, member, getter) => {
    __accessCheck19(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd19 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet19 = (obj, member, value, setter) => {
    __accessCheck19(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var _parts;
  var _processor;
  var _items2;
  var _value;
  var _element;
  var _attributeName;
  var _namespaceURI;
  var _list;
  var list_get;
  var _parentNode;
  var _nodes;
  var ELEMENT = 1;
  var STRING = 0;
  var PART = 1;
  var defaultProcessor = {
    processCallback(instance, parts, state) {
      if (!state)
        return;
      for (const [expression, part] of parts) {
        if (expression in state) {
          const value = state[expression];
          if (typeof value === "boolean" && part instanceof AttrPart && typeof part.element[part.attributeName] === "boolean") {
            part.booleanValue = value;
          } else if (typeof value === "function" && part instanceof AttrPart) {
            part.element[part.attributeName] = value;
          } else {
            part.value = value;
          }
        }
      }
    }
  };
  var TemplateInstance = class extends Window.DocumentFragment {
    constructor(template18, state, processor2 = defaultProcessor) {
      var _a;
      super();
      __privateAdd19(this, _parts, void 0);
      __privateAdd19(this, _processor, void 0);
      this.append(template18.content.cloneNode(true));
      __privateSet19(this, _parts, parse(this));
      __privateSet19(this, _processor, processor2);
      (_a = processor2.createCallback) == null ? void 0 : _a.call(processor2, this, __privateGet19(this, _parts), state);
      processor2.processCallback(this, __privateGet19(this, _parts), state);
    }
    update(state) {
      __privateGet19(this, _processor).processCallback(this, __privateGet19(this, _parts), state);
    }
  };
  _parts = /* @__PURE__ */ new WeakMap();
  _processor = /* @__PURE__ */ new WeakMap();
  var parse = (element, parts = []) => {
    let type, value;
    for (let attr of element.attributes || []) {
      if (attr.value.includes("{{")) {
        const list = new AttrPartList();
        for ([type, value] of tokenize(attr.value)) {
          if (!type)
            list.append(value);
          else {
            const part = new AttrPart(element, attr.name, attr.namespaceURI);
            list.append(part);
            parts.push([value, part]);
          }
        }
        attr.value = list.toString();
      }
    }
    for (let node of element.childNodes) {
      if (node.nodeType === ELEMENT && !(node instanceof HTMLTemplateElement)) {
        parse(node, parts);
      } else {
        if (node.nodeType === ELEMENT || node.data.includes("{{")) {
          const items = [];
          if (node.data) {
            for ([type, value] of tokenize(node.data))
              if (!type)
                items.push(new Text(value));
              else {
                const part = new ChildNodePart(element);
                items.push(part);
                parts.push([value, part]);
              }
          } else if (node instanceof HTMLTemplateElement) {
            const part = new InnerTemplatePart(element, node);
            items.push(part);
            parts.push([part.expression, part]);
          }
          node.replaceWith(
            ...items.flatMap((part) => part.replacementNodes || [part])
          );
        }
      }
    }
    return parts;
  };
  var mem = {};
  var tokenize = (text) => {
    let value = "", open = 0, tokens = mem[text], i2 = 0, c;
    if (tokens)
      return tokens;
    else
      tokens = [];
    for (; c = text[i2]; i2++) {
      if (c === "{" && text[i2 + 1] === "{" && text[i2 - 1] !== "\\" && text[i2 + 2] && ++open == 1) {
        if (value)
          tokens.push([STRING, value]);
        value = "";
        i2++;
      } else if (c === "}" && text[i2 + 1] === "}" && text[i2 - 1] !== "\\" && !--open) {
        tokens.push([PART, value.trim()]);
        value = "";
        i2++;
      } else
        value += c || "";
    }
    if (value)
      tokens.push([STRING, (open > 0 ? "{{" : "") + value]);
    return mem[text] = tokens;
  };
  var FRAGMENT = 11;
  var Part = class {
    get value() {
      return "";
    }
    set value(val) {
    }
    toString() {
      return this.value;
    }
  };
  var attrPartToList = /* @__PURE__ */ new WeakMap();
  var AttrPartList = class {
    constructor() {
      __privateAdd19(this, _items2, []);
    }
    [Symbol.iterator]() {
      return __privateGet19(this, _items2).values();
    }
    get length() {
      return __privateGet19(this, _items2).length;
    }
    item(index) {
      return __privateGet19(this, _items2)[index];
    }
    append(...items) {
      for (const item of items) {
        if (item instanceof AttrPart) {
          attrPartToList.set(item, this);
        }
        __privateGet19(this, _items2).push(item);
      }
    }
    toString() {
      return __privateGet19(this, _items2).join("");
    }
  };
  _items2 = /* @__PURE__ */ new WeakMap();
  var AttrPart = class extends Part {
    constructor(element, attributeName, namespaceURI) {
      super();
      __privateAdd19(this, _list);
      __privateAdd19(this, _value, "");
      __privateAdd19(this, _element, void 0);
      __privateAdd19(this, _attributeName, void 0);
      __privateAdd19(this, _namespaceURI, void 0);
      __privateSet19(this, _element, element);
      __privateSet19(this, _attributeName, attributeName);
      __privateSet19(this, _namespaceURI, namespaceURI);
    }
    get attributeName() {
      return __privateGet19(this, _attributeName);
    }
    get attributeNamespace() {
      return __privateGet19(this, _namespaceURI);
    }
    get element() {
      return __privateGet19(this, _element);
    }
    get value() {
      return __privateGet19(this, _value);
    }
    set value(newValue) {
      if (__privateGet19(this, _value) === newValue)
        return;
      __privateSet19(this, _value, newValue);
      if (!__privateGet19(this, _list, list_get) || __privateGet19(this, _list, list_get).length === 1) {
        if (newValue == null) {
          __privateGet19(this, _element).removeAttributeNS(
            __privateGet19(this, _namespaceURI),
            __privateGet19(this, _attributeName)
          );
        } else {
          __privateGet19(this, _element).setAttributeNS(
            __privateGet19(this, _namespaceURI),
            __privateGet19(this, _attributeName),
            newValue
          );
        }
      } else {
        __privateGet19(this, _element).setAttributeNS(
          __privateGet19(this, _namespaceURI),
          __privateGet19(this, _attributeName),
          __privateGet19(this, _list, list_get)
        );
      }
    }
    get booleanValue() {
      return __privateGet19(this, _element).hasAttributeNS(
        __privateGet19(this, _namespaceURI),
        __privateGet19(this, _attributeName)
      );
    }
    set booleanValue(value) {
      if (!__privateGet19(this, _list, list_get) || __privateGet19(this, _list, list_get).length === 1)
        this.value = value ? "" : null;
      else
        throw new DOMException("Value is not fully templatized");
    }
  };
  _value = /* @__PURE__ */ new WeakMap();
  _element = /* @__PURE__ */ new WeakMap();
  _attributeName = /* @__PURE__ */ new WeakMap();
  _namespaceURI = /* @__PURE__ */ new WeakMap();
  _list = /* @__PURE__ */ new WeakSet();
  list_get = function() {
    return attrPartToList.get(this);
  };
  var ChildNodePart = class extends Part {
    constructor(parentNode, nodes) {
      super();
      __privateAdd19(this, _parentNode, void 0);
      __privateAdd19(this, _nodes, void 0);
      __privateSet19(this, _parentNode, parentNode);
      __privateSet19(this, _nodes, nodes ? [...nodes] : [new Text()]);
    }
    get replacementNodes() {
      return __privateGet19(this, _nodes);
    }
    get parentNode() {
      return __privateGet19(this, _parentNode);
    }
    get nextSibling() {
      return __privateGet19(this, _nodes)[__privateGet19(this, _nodes).length - 1].nextSibling;
    }
    get previousSibling() {
      return __privateGet19(this, _nodes)[0].previousSibling;
    }
    get value() {
      return __privateGet19(this, _nodes).map((node) => node.textContent).join("");
    }
    set value(newValue) {
      this.replace(newValue);
    }
    replace(...nodes) {
      const normalisedNodes = nodes.flat().flatMap(
        (node) => node == null ? [new Text()] : node.forEach ? [...node] : node.nodeType === FRAGMENT ? [...node.childNodes] : node.nodeType ? [node] : [new Text(node)]
      );
      if (!normalisedNodes.length)
        normalisedNodes.push(new Text());
      __privateSet19(this, _nodes, swapdom(
        __privateGet19(this, _nodes)[0].parentNode,
        __privateGet19(this, _nodes),
        normalisedNodes,
        this.nextSibling
      ));
    }
  };
  _parentNode = /* @__PURE__ */ new WeakMap();
  _nodes = /* @__PURE__ */ new WeakMap();
  var InnerTemplatePart = class extends ChildNodePart {
    constructor(parentNode, template18) {
      let directive = template18.getAttribute("directive") || template18.getAttribute("type");
      let expression = template18.getAttribute("expression") || template18.getAttribute(directive) || "";
      if (expression.startsWith("{{"))
        expression = expression.trim().slice(2, -2).trim();
      super(parentNode);
      __publicField2(this, "directive");
      this.expression = expression;
      this.template = template18;
      this.directive = directive;
    }
  };
  function swapdom(parent, a, b2, end = null) {
    let i2 = 0, cur, next, bi, n2 = b2.length, m2 = a.length;
    while (i2 < n2 && i2 < m2 && a[i2] == b2[i2])
      i2++;
    while (i2 < n2 && i2 < m2 && b2[n2 - 1] == a[m2 - 1])
      end = b2[--m2, --n2];
    if (i2 == m2)
      while (i2 < n2)
        parent.insertBefore(b2[i2++], end);
    if (i2 == n2)
      while (i2 < m2)
        parent.removeChild(a[i2++]);
    else {
      cur = a[i2];
      while (i2 < n2) {
        bi = b2[i2++], next = cur ? cur.nextSibling : end;
        if (cur == bi)
          cur = next;
        else if (i2 < n2 && b2[i2] == next)
          parent.replaceChild(bi, cur), cur = next;
        else
          parent.insertBefore(bi, cur);
      }
      while (cur != end)
        next = cur.nextSibling, parent.removeChild(cur), cur = next;
    }
    return b2;
  }

  // node_modules/media-chrome/dist/utils/template-processor.js
  var pipeModifiers = {
    string: (value) => String(value)
  };
  var PartialTemplate = class {
    constructor(template18) {
      this.template = template18;
      this.state = void 0;
    }
  };
  var templates = /* @__PURE__ */ new WeakMap();
  var templateInstances = /* @__PURE__ */ new WeakMap();
  var Directives = {
    partial: (part, state) => {
      state[part.expression] = new PartialTemplate(part.template);
    },
    if: (part, state) => {
      var _a;
      if (evaluateExpression(part.expression, state)) {
        if (templates.get(part) !== part.template) {
          templates.set(part, part.template);
          const tpl = new TemplateInstance(part.template, state, processor);
          part.replace(tpl);
          templateInstances.set(part, tpl);
        } else {
          (_a = templateInstances.get(part)) == null ? void 0 : _a.update(state);
        }
      } else {
        part.replace("");
        templates.delete(part);
        templateInstances.delete(part);
      }
    }
  };
  var DirectiveNames = Object.keys(Directives);
  var processor = {
    processCallback(instance, parts, state) {
      var _a, _b;
      if (!state)
        return;
      for (const [expression, part] of parts) {
        if (part instanceof InnerTemplatePart) {
          if (!part.directive) {
            const directive = DirectiveNames.find((n2) => part.template.hasAttribute(n2));
            if (directive) {
              part.directive = directive;
              part.expression = part.template.getAttribute(directive);
            }
          }
          (_a = Directives[part.directive]) == null ? void 0 : _a.call(Directives, part, state);
          continue;
        }
        let value = evaluateExpression(expression, state);
        if (value instanceof PartialTemplate) {
          if (templates.get(part) !== value.template) {
            templates.set(part, value.template);
            value = new TemplateInstance(
              value.template,
              value.state,
              processor
            );
            part.value = value;
            templateInstances.set(part, value);
          } else {
            (_b = templateInstances.get(part)) == null ? void 0 : _b.update(value.state);
          }
          continue;
        }
        if (value) {
          if (part instanceof AttrPart) {
            if (part.attributeName.startsWith("aria-")) {
              value = String(value);
            }
          }
          if (part instanceof AttrPart) {
            if (typeof value === "boolean") {
              part.booleanValue = value;
            } else if (typeof value === "function") {
              part.element[part.attributeName] = value;
            } else {
              part.value = value;
            }
          } else {
            part.value = value;
            templates.delete(part);
            templateInstances.delete(part);
          }
        } else {
          if (part instanceof AttrPart) {
            part.value = void 0;
          } else {
            part.value = void 0;
            templates.delete(part);
            templateInstances.delete(part);
          }
        }
      }
    }
  };
  var operators = {
    "!": (a) => !a,
    "!!": (a) => !!a,
    "==": (a, b2) => a == b2,
    "!=": (a, b2) => a != b2,
    ">": (a, b2) => a > b2,
    ">=": (a, b2) => a >= b2,
    "<": (a, b2) => a < b2,
    "<=": (a, b2) => a <= b2,
    "??": (a, b2) => a != null ? a : b2,
    "|": (a, b2) => {
      var _a;
      return (_a = pipeModifiers[b2]) == null ? void 0 : _a.call(pipeModifiers, a);
    }
  };
  function tokenizeExpression(expr) {
    return tokenize2(expr, {
      boolean: /true|false/,
      number: /-?\d+\.?\d*/,
      string: /(["'])((?:\\.|[^\\])*?)\1/,
      operator: /[!=><][=!]?|\?\?|\|/,
      ws: /\s+/,
      param: /[$a-z_][$\w]*/i
    }).filter(({ type }) => type !== "ws");
  }
  function evaluateExpression(expr, state = {}) {
    var _a, _b, _c, _d, _e, _f, _g;
    const tokens = tokenizeExpression(expr);
    if (tokens.length === 0 || tokens.some(({ type }) => !type)) {
      return invalidExpression(expr);
    }
    if (((_a = tokens[0]) == null ? void 0 : _a.token) === ">") {
      const partial = state[(_b = tokens[1]) == null ? void 0 : _b.token];
      if (!partial) {
        return invalidExpression(expr);
      }
      const partialState = { ...state };
      partial.state = partialState;
      const args = tokens.slice(2);
      for (let i2 = 0; i2 < args.length; i2 += 3) {
        const name = (_c = args[i2]) == null ? void 0 : _c.token;
        const operator = (_d = args[i2 + 1]) == null ? void 0 : _d.token;
        const value = (_e = args[i2 + 2]) == null ? void 0 : _e.token;
        if (name && operator === "=") {
          partialState[name] = getParamValue(value, state);
        }
      }
      return partial;
    }
    if (tokens.length === 1) {
      if (!isValidParam(tokens[0])) {
        return invalidExpression(expr);
      }
      return getParamValue(tokens[0].token, state);
    }
    if (tokens.length === 2) {
      const operator = (_f = tokens[0]) == null ? void 0 : _f.token;
      const run = operators[operator];
      if (!run || !isValidParam(tokens[1])) {
        return invalidExpression(expr);
      }
      const a = getParamValue(tokens[1].token, state);
      return run(a);
    }
    if (tokens.length === 3) {
      const operator = (_g = tokens[1]) == null ? void 0 : _g.token;
      const run = operators[operator];
      if (!run || !isValidParam(tokens[0]) || !isValidParam(tokens[2])) {
        return invalidExpression(expr);
      }
      const a = getParamValue(tokens[0].token, state);
      if (operator === "|") {
        return run(a, tokens[2].token);
      }
      const b2 = getParamValue(tokens[2].token, state);
      return run(a, b2);
    }
  }
  function invalidExpression(expr) {
    console.warn(`Warning: invalid expression \`${expr}\``);
    return false;
  }
  function isValidParam({ type }) {
    return ["number", "boolean", "string", "param"].includes(type);
  }
  function getParamValue(raw, state) {
    const firstChar = raw[0];
    const lastChar = raw.slice(-1);
    if (raw === "true" || raw === "false") {
      return raw === "true";
    }
    if (firstChar === lastChar && [`'`, `"`].includes(firstChar)) {
      return raw.slice(1, -1);
    }
    if (isNumericString(raw)) {
      return parseFloat(raw);
    }
    return state[raw];
  }
  function tokenize2(str, parsers) {
    let len, match, token, tokens = [];
    while (str) {
      token = null;
      len = str.length;
      for (let key in parsers) {
        match = parsers[key].exec(str);
        if (match && match.index < len) {
          token = {
            token: match[0],
            type: key,
            matches: match.slice(1)
          };
          len = match.index;
        }
      }
      if (len) {
        tokens.push({
          token: str.substr(0, len),
          type: void 0
        });
      }
      if (token) {
        tokens.push(token);
      }
      str = str.substr(len + (token ? token.token.length : 0));
    }
    return tokens;
  }

  // node_modules/media-chrome/dist/media-theme-element.js
  var __defProp4 = Object.defineProperty;
  var __defNormalProp3 = (obj, key, value) => key in obj ? __defProp4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField3 = (obj, key, value) => {
    __defNormalProp3(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var __accessCheck20 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet20 = (obj, member, getter) => {
    __accessCheck20(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd20 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet20 = (obj, member, value, setter) => {
    __accessCheck20(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod7 = (obj, member, method) => {
    __accessCheck20(obj, member, "access private method");
    return method;
  };
  var _template;
  var _prevTemplate;
  var _prevTemplateId;
  var _upgradeProperty;
  var upgradeProperty_fn;
  var _updateTemplate;
  var updateTemplate_fn;
  var observedMediaAttributes = {
    "media-target-live-window": "targetLiveWindow",
    "media-stream-type": "streamType"
  };
  var prependTemplate = Document.createElement("template");
  prependTemplate.innerHTML = `
  <style>
    :host {
      display: inline-block;
      line-height: 0;
    }

    media-controller {
      width: 100%;
      height: 100%;
    }
  </style>
`;
  var MediaThemeElement = class extends Window.HTMLElement {
    constructor() {
      super();
      __privateAdd20(this, _upgradeProperty);
      __privateAdd20(this, _updateTemplate);
      __publicField3(this, "renderRoot");
      __publicField3(this, "renderer");
      __privateAdd20(this, _template, void 0);
      __privateAdd20(this, _prevTemplate, void 0);
      __privateAdd20(this, _prevTemplateId, void 0);
      if (this.shadowRoot) {
        this.renderRoot = this.shadowRoot;
      } else {
        this.renderRoot = this.attachShadow({ mode: "open" });
        this.createRenderer();
      }
      const observer = new MutationObserver((mutationList) => {
        if (mutationList.some((mutation) => {
          const target = mutation.target;
          if (target === this)
            return true;
          if (target.localName !== "media-controller")
            return false;
          if (observedMediaAttributes[mutation.attributeName])
            return true;
          if (mutation.attributeName.startsWith("breakpoint-"))
            return true;
          return false;
        })) {
          this.render();
        }
      });
      observer.observe(this, { attributes: true });
      observer.observe(this.renderRoot, {
        attributes: true,
        subtree: true
      });
      __privateMethod7(this, _upgradeProperty, upgradeProperty_fn).call(this, "template");
    }
    get mediaController() {
      return this.renderRoot.querySelector("media-controller");
    }
    get template() {
      var _a;
      return (_a = __privateGet20(this, _template)) != null ? _a : this.constructor.template;
    }
    set template(element) {
      __privateSet20(this, _prevTemplateId, null);
      __privateSet20(this, _template, element);
      this.createRenderer();
    }
    get props() {
      var _a, _b, _c;
      const observedAttributes = [
        ...Array.from((_b = (_a = this.mediaController) == null ? void 0 : _a.attributes) != null ? _b : []).filter(({ name }) => {
          return observedMediaAttributes[name] || name.startsWith("breakpoint-");
        }),
        ...Array.from(this.attributes)
      ];
      const props = {};
      for (let attr of observedAttributes) {
        const name = (_c = observedMediaAttributes[attr.name]) != null ? _c : camelCase(attr.name);
        let { value } = attr;
        if (value != null) {
          if (isNumericString(value)) {
            value = parseFloat(value);
          }
          props[name] = value === "" ? true : value;
        } else {
          props[name] = false;
        }
      }
      return props;
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === "template" && oldValue != newValue) {
        __privateMethod7(this, _updateTemplate, updateTemplate_fn).call(this);
      }
    }
    connectedCallback() {
      __privateMethod7(this, _updateTemplate, updateTemplate_fn).call(this);
    }
    createRenderer() {
      if (this.template && this.template !== __privateGet20(this, _prevTemplate)) {
        __privateSet20(this, _prevTemplate, this.template);
        this.renderer = new TemplateInstance(
          this.template,
          this.props,
          this.constructor.processor
        );
        this.renderRoot.textContent = "";
        this.renderRoot.append(
          prependTemplate.content.cloneNode(true),
          this.renderer
        );
      }
    }
    render() {
      var _a;
      (_a = this.renderer) == null ? void 0 : _a.update(this.props);
    }
  };
  _template = /* @__PURE__ */ new WeakMap();
  _prevTemplate = /* @__PURE__ */ new WeakMap();
  _prevTemplateId = /* @__PURE__ */ new WeakMap();
  _upgradeProperty = /* @__PURE__ */ new WeakSet();
  upgradeProperty_fn = function(prop) {
    if (Object.prototype.hasOwnProperty.call(this, prop)) {
      const value = this[prop];
      delete this[prop];
      this[prop] = value;
    }
  };
  _updateTemplate = /* @__PURE__ */ new WeakSet();
  updateTemplate_fn = function() {
    var _a;
    const templateId = this.getAttribute("template");
    if (!templateId || templateId === __privateGet20(this, _prevTemplateId))
      return;
    const rootNode = this.getRootNode();
    const template18 = (_a = rootNode == null ? void 0 : rootNode.getElementById) == null ? void 0 : _a.call(rootNode, templateId);
    if (template18) {
      __privateSet20(this, _prevTemplateId, templateId);
      __privateSet20(this, _template, template18);
      this.createRenderer();
      return;
    }
    if (isValidUrl(templateId)) {
      __privateSet20(this, _prevTemplateId, templateId);
      request(templateId).then((data) => {
        const template22 = Document.createElement("template");
        template22.innerHTML = data;
        __privateSet20(this, _template, template22);
        this.createRenderer();
      }).catch(console.error);
    }
  };
  __publicField3(MediaThemeElement, "template");
  __publicField3(MediaThemeElement, "observedAttributes", ["template"]);
  __publicField3(MediaThemeElement, "processor", processor);
  function isValidUrl(url) {
    if (!/^(\/|\.\/|https?:\/\/)/.test(url))
      return false;
    const base = /^https?:\/\//.test(url) ? void 0 : location.origin;
    try {
      new URL(url, base);
    } catch (e) {
      return false;
    }
    return true;
  }
  async function request(resource) {
    const response = await fetch(resource);
    if (response.status !== 200) {
      throw new Error(`Failed to load resource: the server responded with a status of ${response.status}`);
    }
    return response.text();
  }
  if (!Window.customElements.get("media-theme")) {
    Window.customElements.define("media-theme", MediaThemeElement);
  }

  // src/styles.css
  var styles_default = ':host {\n  --media-control-display: var(--controls);\n  --media-loading-indicator-display: var(--loading-indicator);\n  --media-dialog-display: var(--dialog);\n  --media-play-button-display: var(--play-button);\n  --media-live-button-display: var(--live-button);\n  --media-seek-backward-button-display: var(--seek-backward-button);\n  --media-seek-forward-button-display: var(--seek-forward-button);\n  --media-mute-button-display: var(--mute-button);\n  --media-captions-button-display: var(--captions-button);\n  --media-captions-selectmenu-display: var(\n    --captions-selectmenu,\n    var(--media-captions-button-display)\n  );\n  --media-airplay-button-display: var(--airplay-button);\n  --media-pip-button-display: var(--pip-button);\n  --media-fullscreen-button-display: var(--fullscreen-button);\n  --media-cast-button-display: var(--cast-button);\n  --media-playback-rate-button-display: var(--playback-rate-button);\n  --media-volume-range-display: var(--volume-range);\n  --media-time-range-display: var(--time-range);\n  --media-time-display-display: var(--time-display);\n  --media-duration-display-display: var(--duration-display);\n  --media-title-display-display: var(--title-display);\n\n  display: inline-block;\n  width: 100%;\n}\n\n/* Hide custom elements that are not defined yet */\n:not(:defined) {\n  display: none;\n}\n\na {\n  color: #fff;\n  font-size: 0.9em;\n  text-decoration: underline;\n}\n\nmedia-theme {\n  width: 100%;\n  height: 100%;\n  direction: ltr;\n}\n\n::part(top),\n[part~="top"] {\n  --media-control-display: var(--controls, var(--top-controls));\n  --media-play-button-display: var(--play-button, var(--top-play-button));\n  --media-live-button-display: var(--live-button, var(--top-live-button));\n  --media-seek-backward-button-display: var(\n    --seek-backward-button,\n    var(--top-seek-backward-button)\n  );\n  --media-seek-forward-button-display: var(\n    --seek-forward-button,\n    var(--top-seek-forward-button)\n  );\n  --media-mute-button-display: var(--mute-button, var(--top-mute-button));\n  --media-captions-button-display: var(\n    --captions-button,\n    var(--top-captions-button)\n  );\n  --media-captions-selectmenu-display: var(\n    --captions-selectmenu,\n    var(--media-captions-button-display, var(--top-captions-selectmenu))\n  );\n  --media-airplay-button-display: var(\n    --airplay-button,\n    var(--top-airplay-button)\n  );\n  --media-pip-button-display: var(--pip-button, var(--top-pip-button));\n  --media-fullscreen-button-display: var(\n    --fullscreen-button,\n    var(--top-fullscreen-button)\n  );\n  --media-cast-button-display: var(--cast-button, var(--top-cast-button));\n  --media-playback-rate-button-display: var(\n    --playback-rate-button,\n    var(--top-playback-rate-button)\n  );\n  --media-volume-range-display: var(--volume-range, var(--top-volume-range));\n  --media-time-range-display: var(--time-range, var(--top-time-range));\n  --media-time-display-display: var(--time-display, var(--top-time-display));\n  --media-duration-display-display: var(\n    --duration-display,\n    var(--top-duration-display)\n  );\n  --media-title-display-display: var(--title-display, var(--top-title-display));\n}\n\n::part(center),\n[part~="center"] {\n  --media-control-display: var(--controls, var(--center-controls));\n  --media-play-button-display: var(--play-button, var(--center-play-button));\n  --media-live-button-display: var(--live-button, var(--center-live-button));\n  --media-seek-backward-button-display: var(\n    --seek-backward-button,\n    var(--center-seek-backward-button)\n  );\n  --media-seek-forward-button-display: var(\n    --seek-forward-button,\n    var(--center-seek-forward-button)\n  );\n  --media-mute-button-display: var(--mute-button, var(--center-mute-button));\n  --media-captions-button-display: var(\n    --captions-button,\n    var(--center-captions-button)\n  );\n  --media-captions-selectmenu-display: var(\n    --captions-selectmenu,\n    var(--media-captions-button-display, var(--center-captions-selectmenu))\n  );\n  --media-airplay-button-display: var(\n    --airplay-button,\n    var(--center-airplay-button)\n  );\n  --media-pip-button-display: var(--pip-button, var(--center-pip-button));\n  --media-fullscreen-button-display: var(\n    --fullscreen-button,\n    var(--center-fullscreen-button)\n  );\n  --media-cast-button-display: var(--cast-button, var(--center-cast-button));\n  --media-playback-rate-button-display: var(\n    --playback-rate-button,\n    var(--center-playback-rate-button)\n  );\n  --media-volume-range-display: var(--volume-range, var(--center-volume-range));\n  --media-time-range-display: var(--time-range, var(--center-time-range));\n  --media-time-display-display: var(--time-display, var(--center-time-display));\n  --media-duration-display-display: var(\n    --duration-display,\n    var(--center-duration-display)\n  );\n}\n\n::part(bottom),\n[part~="bottom"] {\n  --media-control-display: var(--controls, var(--bottom-controls));\n  --media-play-button-display: var(--play-button, var(--bottom-play-button));\n  --media-live-button-display: var(--live-button, var(--bottom-live-button));\n  --media-seek-backward-button-display: var(\n    --seek-backward-button,\n    var(--bottom-seek-backward-button)\n  );\n  --media-seek-forward-button-display: var(\n    --seek-forward-button,\n    var(--bottom-seek-forward-button)\n  );\n  --media-mute-button-display: var(--mute-button, var(--bottom-mute-button));\n  --media-captions-button-display: var(\n    --captions-button,\n    var(--bottom-captions-button)\n  );\n  --media-captions-selectmenu-display: var(\n    --captions-selectmenu,\n    var(--media-captions-button-display, var(--bottom-captions-selectmenu))\n  );\n  --media-airplay-button-display: var(\n    --airplay-button,\n    var(--bottom-airplay-button)\n  );\n  --media-pip-button-display: var(--pip-button, var(--bottom-pip-button));\n  --media-fullscreen-button-display: var(\n    --fullscreen-button,\n    var(--bottom-fullscreen-button)\n  );\n  --media-cast-button-display: var(--cast-button, var(--bottom-cast-button));\n  --media-playback-rate-button-display: var(\n    --playback-rate-button,\n    var(--bottom-playback-rate-button)\n  );\n  --media-volume-range-display: var(--volume-range, var(--bottom-volume-range));\n  --media-time-range-display: var(--time-range, var(--bottom-time-range));\n  --media-time-display-display: var(--time-display, var(--bottom-time-display));\n  --media-duration-display-display: var(\n    --duration-display,\n    var(--bottom-duration-display)\n  );\n  --media-title-display-display: var(\n    --title-display,\n    var(--bottom-title-display)\n  );\n}\n\ndiv.center-controls {\n  position: relative;\n  z-index: 9999;\n}\n';

  // src/media-theme-mux.html
  var media_theme_mux_default = `<!-- prettier-ignore -->
<template id="media-theme-mux">
  <style>
    :host {
      --_primary-color: var(--media-primary-color, white);
      --_secondary-color: var(--media-secondary-color, rgb(0 0 0 / .75));

      --media-icon-color: var(--_primary-color);
      --media-range-thumb-background: var(--_primary-color);
      --media-range-bar-color: var(--_primary-color);
      --media-control-background: var(--_secondary-color);
      --media-control-hover-background: var(--_secondary-color);
      --media-time-buffered-color: rgba(255, 255, 255, 0.4);
      --media-range-track-background:
        linear-gradient(rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.5)),
        linear-gradient(rgba(20, 20, 30, 0.7), rgba(20, 20, 30, 0.7));
      --media-preview-thumbnail-border: 0;
      --media-preview-thumbnail-border-radius: 2px 2px 0 0;
      --media-preview-time-border-radius: 0 0 2px 2px;
      --media-preview-time-margin: 0 0 8px;
      --media-preview-time-text-shadow: none;

      color: var(--_primary-color);
      display: inline-block;
      width: 100%;
      height: 100%;
    }

    :host([audio]) {
      --media-preview-time-border-radius: 3px;
      --media-preview-time-margin: 0 0 5px;
      --media-preview-time-text-shadow: none;
    }

    :host([audio]) ::slotted([slot='media']) {
      height: 0px;
    }

    :host([audio]) media-loading-indicator,
    :host([audio]) ::slotted([slot=poster]) {
      display: none;
    }

    :host([audio]) media-controller {
      background: transparent;
    }

    :host([audio]) media-controller::part(vertical-layer) {
      background: transparent;
    }

    :host([audio]) media-control-bar {
      width: 100%;
    }

    [disabled],
    [aria-disabled='true'] {
      opacity: 60%;
      cursor: not-allowed;
    }

    :host(:not([audio])) media-captions-selectmenu::part(listbox) {
      z-index: 10;
    }

    media-controller:not(:is([media-captions-list], [media-subtitles-list])) media-captions-selectmenu {
      --captions-selectmenu: none;
    }


    /* 0.433s is the transition duration for VTT Regions.
     * Borrowed here, so the captions don't move too fast. */
    media-controller ::slotted([slot='media']) {
      --media-webkit-text-track-transition: transform 0.433s ease-out 0.3s;
    }
    media-controller:is([media-paused],:not([user-inactive])) ::slotted([slot='media']) {
      /* 42px is the height of the control bar and progress bar
       * with an additional 5px as a buffer, to get 47px */
      --media-webkit-text-track-transform: translateY(-47px);
      --media-webkit-text-track-transition: transform 0.15s ease;
    }

    media-captions-selectmenu {
      --media-listbox-background: var(--_secondary-color);
      --media-listbox-selected-background: rgba(255, 255, 255, 0.28);
      --media-listbox-hover-background: none;
      --media-listbox-hover-outline: white solid 1px;
      --media-text-color: white;
    }

    media-volume-range[media-volume-unavailable] {
      --volume-range: none;
    }

    media-airplay-button[media-airplay-unavailable] {
      --airplay-button: none;
    }

    media-fullscreen-button[media-fullscreen-unavailable] {
      --fullscreen-button: none;
    }

    media-cast-button[media-cast-unavailable] {
      --cast-button: none;
    }

    media-pip-button[media-pip-unavailable] {
      --pip-button: none;
    }

    :host media-time-range {
      color: var(--_primary-color);
      --media-range-thumb-opacity: 0;
    }

    :host(:not([audio])) media-time-range {
      --media-range-padding: 0;
      background: transparent;
      z-index: 10;
      height: 10px;
      bottom: -3px;
      width: 100%;
    }

    media-control-bar {
      --media-control-padding: 4px 3px;
    }

    [breakpoint-sm] media-control-bar {
      --media-control-padding: 9px 5px;
    }

    [breakpoint-md] media-control-bar {
      --media-control-padding: 9px 7px;
    }

    media-control-bar :is([role='button'], [role='switch'], button) {
      line-height: 0;
    }

    media-control-bar :is(media-text-display, media-time-display):first-child {
      --media-control-padding: 9px 5px 9px 10px;
    }

    .spacer {
      flex-grow: 1;
      background-color: var(--media-control-background, rgba(20, 20, 30, 0.7));
    }

    /* Add a small space on the right to have the play button and
     * fullscreen button aligned in relation to the progress bar. */
    media-control-bar:not([slot])::after {
      content: '';
      width: 2px;
      height: 100%;
      background-color: var(--media-control-background, rgba(20, 20, 30, 0.7));
    }

    media-control-bar[slot='top-chrome'] {
      min-height: 42px;
      pointer-events: none;
    }

    :host([title]) media-control-bar[slot='top-chrome']::before {
      content: '';
      position: absolute;
      width: 100%;
      padding-bottom: min(160px, 25%);
      background: linear-gradient(rgb(0 0 0 / 0.4), transparent);
    }

    media-control-bar[slot='top-chrome'] > * {
      --media-control-background: transparent;
      --media-control-hover-background: transparent;
      position: relative;
    }

    media-controller::part(vertical-layer) {
      transition: background-color 1s;
    }

    media-controller:is([media-paused], :not([user-inactive]))::part(vertical-layer) {
      background-color: var(--controls-backdrop-color, var(--controls, transparent));
      transition: background-color 0.25s;
    }

    .center-controls {
      --media-button-icon-width: 100%;
      --media-button-icon-height: auto;
      pointer-events: none;
      width: 100%;
      display: flex;
      flex-flow: row;
      align-items: center;
      justify-content: center;
      filter: drop-shadow(0 0 2px rgb(0 0 0 / 0.25)) drop-shadow(0 0 6px rgb(0 0 0 / 0.25));
      paint-order: stroke;
      stroke: rgba(102, 102, 102, 1);
      stroke-width: 0.3px;
      text-shadow: 0 0 2px rgb(0 0 0 / 0.25), 0 0 6px rgb(0 0 0 / 0.25);
    }

    .center-controls media-play-button {
      --media-control-background: transparent;
      --media-control-hover-background: transparent;
      padding: 0;
      width: max(43px, min(10%, 55px));
    }

    .center-controls media-seek-backward-button,
    .center-controls media-seek-forward-button {
      --media-control-background: transparent;
      --media-control-hover-background: transparent;
      padding: 0;
      margin: 0 2%;
      width: max(33px, min(8%, 40px));
    }

    media-control-bar:not([slot]) media-seek-backward-button {
      padding-right: 5px;
    }

    media-control-bar:not([slot]) media-seek-forward-button {
      padding-left: 5px;
    }

    media-loading-indicator {
      --media-loading-icon-width: 100%;
      --media-button-icon-height: auto;
      display: var(--media-control-display, var(--media-loading-indicator-display, flex));
      pointer-events: none;
      position: absolute;
      width: min(15%, 150px);
      flex-flow: row;
      align-items: center;
      justify-content: center;
    }

    /* Intentionally don't target the div for transition but the children
     of the div. Prevents messing with media-chrome's autohide feature. */
    media-loading-indicator + div * {
      transition: opacity 0.15s;
      opacity: 1;
    }

    media-loading-indicator[media-loading]:not([media-paused]) ~ div > * {
      opacity: 0;
      transition-delay: 400ms;
    }

    media-volume-range {
      width: min(100%, 100px);
    }

    media-time-display {
      white-space: nowrap;
    }

    :is(media-time-display, media-text-display, media-playback-rate-button[role='button']) {
      color: inherit;
      line-height: 24px;
    }

    :is(.title-display, media-live-button) {
      color: inherit;
      font-size: 16px;
      text-shadow: 0 0 2px rgb(0 0 0 / 0.6);
    }

    :host([audio]) .title-display {
      flex-grow: 1;
      font-size: 21px;
    }
  </style>

  <template partial="TitleDisplay">
    <template if="title">
      <media-text-display part="top title display" class="title-display">
        {{title}}
      </media-text-display>
    </template>
  </template>

  <template partial="PlayButton">
    <media-play-button
      part="{{section ?? 'bottom'}} play button"
      disabled="{{disabled}}"
      aria-disabled="{{disabled}}"
    >
      <svg aria-hidden="true" viewBox="0 0 24 24" slot="play">
        <path d="m6.73 20.93 14.05-8.54a.46.46 0 0 0 0-.78L6.73 3.07a.48.48 0 0 0-.73.39v17.07a.48.48 0 0 0 .73.4Z" />
      </svg>
      <svg aria-hidden="true" viewBox="0 0 24 24" slot="pause">
        <path
          d="M6 19.5a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-15a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5v15ZM14.5 4a.5.5 0 0 0-.5.5v15a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-15a.5.5 0 0 0-.5-.5h-3Z"
        />
      </svg>
    </media-play-button>
  </template>

  <template partial="SeekBackwardButton">
    <media-seek-backward-button
      seek-offset="{{backwardSeekOffset}}"
      part="{{section ?? 'bottom'}} seek-backward button"
      disabled="{{disabled}}"
      aria-disabled="{{disabled}}"
    >
      <svg aria-hidden="true" viewBox="0 0 22 24" slot="backward">
        <path d="M11 6V3L5.37 7 11 10.94V8a5.54 5.54 0 0 1 1.9 10.48v2.12A7.5 7.5 0 0 0 11 6Z" />
        <text class="value" transform="translate(2.5 21)" style="font-size: 8px; font-family: 'ArialMT', 'Arial'">
          {{backwardSeekOffset}}
        </text>
      </svg>
    </media-seek-backward-button>
  </template>

  <template partial="SeekForwardButton">
    <media-seek-forward-button
      seek-offset="{{forwardSeekOffset}}"
      part="{{section ?? 'bottom'}} seek-forward button"
      disabled="{{disabled}}"
      aria-disabled="{{disabled}}"
    >
      <svg aria-hidden="true" viewBox="0 0 22 24" slot="forward">
        <path d="M11 6V3l5.61 4L11 10.94V8a5.54 5.54 0 0 0-1.9 10.48v2.12A7.5 7.5 0 0 1 11 6Z" />
        <text class="value" transform="translate(10 21)" style="font-size: 8px; font-family: 'ArialMT', 'Arial'">
          {{forwardSeekOffset}}
        </text>
      </svg>
    </media-seek-forward-button>
  </template>

  <template partial="MuteButton">
    <media-mute-button part="bottom mute button" disabled="{{disabled}}" aria-disabled="{{disabled}}">
      <svg aria-hidden="true" viewBox="0 0 24 24" slot="high">
        <path
          d="m11.14 4.86-4 4a.49.49 0 0 1-.35.14H3.25a.25.25 0 0 0-.25.25v5.5a.25.25 0 0 0 .25.25h3.54a.49.49 0 0 1 .36.15l4 4a.5.5 0 0 0 .85-.36V5.21a.5.5 0 0 0-.86-.35Zm2.74-1.56v1.52A7.52 7.52 0 0 1 19.47 12a7.52 7.52 0 0 1-5.59 7.18v1.52A9 9 0 0 0 21 12a9 9 0 0 0-7.12-8.7Zm3.56 8.7a5.49 5.49 0 0 0-3.56-5.1v1.66a3.93 3.93 0 0 1 0 6.88v1.66a5.49 5.49 0 0 0 3.56-5.1Z"
        />
      </svg>
      <svg aria-hidden="true" viewBox="0 0 24 24" slot="low">
        <path
          d="m11.14 4.853-4 4a.49.49 0 0 1-.35.14H3.25a.25.25 0 0 0-.25.25v5.5a.25.25 0 0 0 .25.25h3.54a.49.49 0 0 1 .36.15l4 4a.5.5 0 0 0 .85-.36V5.203a.5.5 0 0 0-.86-.35Zm6.3 7.14a5.49 5.49 0 0 0-3.56-5.1v1.66a3.93 3.93 0 0 1 0 6.88v1.66a5.49 5.49 0 0 0 3.56-5.1Z"
        />
      </svg>
      <svg aria-hidden="true" viewBox="0 0 24 24" slot="medium">
        <path
          d="m11.14 4.853-4 4a.49.49 0 0 1-.35.14H3.25a.25.25 0 0 0-.25.25v5.5a.25.25 0 0 0 .25.25h3.54a.49.49 0 0 1 .36.15l4 4a.5.5 0 0 0 .85-.36V5.203a.5.5 0 0 0-.86-.35Zm6.3 7.14a5.49 5.49 0 0 0-3.56-5.1v1.66a3.93 3.93 0 0 1 0 6.88v1.66a5.49 5.49 0 0 0 3.56-5.1Z"
        />
      </svg>
      <svg aria-hidden="true" viewBox="0 0 24 24" slot="off">
        <path
          d="m3 4.05 4.48 4.47-.33.33a.49.49 0 0 1-.36.15H3.25a.25.25 0 0 0-.25.25v5.5a.25.25 0 0 0 .25.25h3.54a.49.49 0 0 1 .36.15l4 4a.48.48 0 0 0 .36.15.5.5 0 0 0 .5-.5v-5.75l4.67 4.66a7.71 7.71 0 0 1-2.79 1.47v1.52a9.32 9.32 0 0 0 3.87-1.91L20 21l1-1L4.06 3 3 4.05Zm5.36 5.36 2.39 2.39V17L8 14.26a1.74 1.74 0 0 0-1.24-.51H4.25v-3.5h2.54A1.74 1.74 0 0 0 8 9.74l.36-.33ZM19.47 12a7.19 7.19 0 0 1-.89 3.47l1.11 1.1A8.64 8.64 0 0 0 21 12a9 9 0 0 0-7.12-8.7v1.52A7.52 7.52 0 0 1 19.47 12ZM12 8.88V5.21a.5.5 0 0 0-.5-.5.48.48 0 0 0-.36.15L9.56 6.44 12 8.88ZM15.91 12a4.284 4.284 0 0 1-.07.72l1.22 1.22a5.2 5.2 0 0 0 .38-1.94 5.49 5.49 0 0 0-3.56-5.1v1.66A4 4 0 0 1 15.91 12Z"
        />
      </svg>
    </media-mute-button>
  </template>

  <template partial="PipButton">
    <media-pip-button part="bottom pip button" disabled="{{disabled}}" aria-disabled="{{disabled}}">
      <svg aria-hidden="true" viewBox="0 0 26 24" slot="enter">
        <path
          d="M22 3H4a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h6.75v-1.25h-6.5V4.25h17.5v6.5H23V4a1 1 0 0 0-1-1Zm0 10h-8a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-6a1 1 0 0 0-1-1Zm-.5 6.5h-7v-5h7v5Z"
        />
      </svg>
      <svg aria-hidden="true" viewBox="0 0 26 24" slot="exit">
        <path
          d="M22 3H4a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h6.75v-1.25h-6.5V4.25h17.5v6.5H23V4a1 1 0 0 0-1-1Zm0 10h-8a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-6a1 1 0 0 0-1-1Zm-.5 6.5h-7v-5h7v5Z"
        />
      </svg>
    </media-pip-button>
  </template>

  <template partial="CaptionsMenuButton">
    <media-captions-selectmenu
      default-showing="{{defaultShowingCaptions}}"
      part="bottom captions selectmenu"
      disabled="{{disabled}}"
      aria-disabled="{{disabled}}"
    >
      <svg aria-hidden="true" viewBox="0 0 26 24" slot="on">
        <path
          d="M22.832 5.68a2.58 2.58 0 0 0-2.3-2.5c-3.62-.24-11.44-.24-15.06 0a2.58 2.58 0 0 0-2.3 2.5c-.23 4.21-.23 8.43 0 12.64a2.58 2.58 0 0 0 2.3 2.5c3.62.24 11.44.24 15.06 0a2.58 2.58 0 0 0 2.3-2.5c.23-4.21.23-8.43 0-12.64Zm-11.41 10.1a3.63 3.63 0 0 1-1.51.32 4.76 4.76 0 0 1-1.63-.27 4 4 0 0 1-1.28-.83 3.67 3.67 0 0 1-.84-1.26 4.23 4.23 0 0 1-.3-1.63 4.28 4.28 0 0 1 .3-1.64 3.53 3.53 0 0 1 .84-1.21 3.89 3.89 0 0 1 1.29-.8 4.76 4.76 0 0 1 1.63-.27 4.06 4.06 0 0 1 1.35.24c.225.091.44.205.64.34a2.7 2.7 0 0 1 .55.52l-1.27 1a1.79 1.79 0 0 0-.6-.46 2 2 0 0 0-.83-.16 2 2 0 0 0-1.56.69 2.35 2.35 0 0 0-.46.77 2.78 2.78 0 0 0-.16 1c-.009.34.046.68.16 1 .104.283.26.545.46.77.188.21.415.38.67.5a2 2 0 0 0 .84.18 1.87 1.87 0 0 0 .9-.21 1.78 1.78 0 0 0 .65-.6l1.38 1a2.88 2.88 0 0 1-1.22 1.01Zm7.52 0a3.63 3.63 0 0 1-1.51.32 4.76 4.76 0 0 1-1.63-.27 3.89 3.89 0 0 1-1.28-.83 3.55 3.55 0 0 1-.85-1.26 4.23 4.23 0 0 1-.3-1.63 4.28 4.28 0 0 1 .3-1.64 3.43 3.43 0 0 1 .85-1.25 3.75 3.75 0 0 1 1.28-.8 4.76 4.76 0 0 1 1.63-.27 4 4 0 0 1 1.35.24c.225.091.44.205.64.34.21.144.395.32.55.52l-1.27 1a1.79 1.79 0 0 0-.6-.46 2 2 0 0 0-.83-.16 2 2 0 0 0-1.56.69 2.352 2.352 0 0 0-.46.77 3.01 3.01 0 0 0-.16 1c-.003.34.05.678.16 1 .108.282.263.542.46.77.188.21.416.38.67.5a2 2 0 0 0 .84.18 1.87 1.87 0 0 0 .9-.21 1.78 1.78 0 0 0 .65-.6l1.38 1a2.82 2.82 0 0 1-1.21 1.05Z"
        />
      </svg>
      <svg aria-hidden="true" viewBox="0 0 26 24" slot="off">
        <path
          d="M22.832 5.68a2.58 2.58 0 0 0-2.3-2.5c-1.81-.12-4.67-.18-7.53-.18-2.86 0-5.72.06-7.53.18a2.58 2.58 0 0 0-2.3 2.5c-.23 4.21-.23 8.43 0 12.64a2.58 2.58 0 0 0 2.3 2.5c1.81.12 4.67.18 7.53.18 2.86 0 5.72-.06 7.53-.18a2.58 2.58 0 0 0 2.3-2.5c.23-4.21.23-8.43 0-12.64Zm-1.49 12.53a1.11 1.11 0 0 1-.91 1.11c-1.67.11-4.45.18-7.43.18-2.98 0-5.76-.07-7.43-.18a1.11 1.11 0 0 1-.91-1.11c-.21-4.137-.21-8.283 0-12.42a1.11 1.11 0 0 1 .91-1.11c1.67-.11 4.43-.18 7.43-.18s5.76.07 7.43.18a1.11 1.11 0 0 1 .91 1.11c.21 4.137.21 8.283 0 12.42ZM10.843 14a1.55 1.55 0 0 1-.76.18 1.57 1.57 0 0 1-.71-.18 1.69 1.69 0 0 1-.57-.42 2.099 2.099 0 0 1-.38-.58 2.47 2.47 0 0 1 0-1.64 2 2 0 0 1 .39-.66 1.73 1.73 0 0 1 .58-.42c.23-.103.479-.158.73-.16.241-.004.48.044.7.14.199.088.373.222.51.39l1.08-.89a2.179 2.179 0 0 0-.47-.44 2.81 2.81 0 0 0-.54-.32 2.91 2.91 0 0 0-.58-.15 2.71 2.71 0 0 0-.56 0 4.08 4.08 0 0 0-1.38.15 3.27 3.27 0 0 0-1.09.67 3.14 3.14 0 0 0-.71 1.06 3.62 3.62 0 0 0-.26 1.39 3.57 3.57 0 0 0 .26 1.38 3 3 0 0 0 .71 1.06c.316.293.687.52 1.09.67.443.16.91.238 1.38.23a3.2 3.2 0 0 0 1.28-.27c.401-.183.747-.47 1-.83l-1.17-.88a1.42 1.42 0 0 1-.53.52Zm6.62 0a1.58 1.58 0 0 1-.76.18 1.54 1.54 0 0 1-.7-.18 1.69 1.69 0 0 1-.57-.42 2.12 2.12 0 0 1-.43-.58 2.29 2.29 0 0 1 .39-2.3 1.84 1.84 0 0 1 1.32-.58c.241-.003.48.045.7.14.199.088.373.222.51.39l1.08-.92a2.43 2.43 0 0 0-.47-.44 3.22 3.22 0 0 0-.53-.29 2.999 2.999 0 0 0-.57-.15 2.87 2.87 0 0 0-.57 0 4.06 4.06 0 0 0-1.36.15 3.17 3.17 0 0 0-1.09.67 3 3 0 0 0-.72 1.06 3.62 3.62 0 0 0-.25 1.39 3.57 3.57 0 0 0 .25 1.38c.16.402.405.764.72 1.06a3.17 3.17 0 0 0 1.09.67c.44.16.904.237 1.37.23.441 0 .877-.092 1.28-.27a2.45 2.45 0 0 0 1-.83l-1.15-.85a1.49 1.49 0 0 1-.54.49Z"
        />
      </svg>
    </media-captions-selectmenu>
  </template>

  <template partial="AirplayButton">
    <media-airplay-button part="bottom airplay button" disabled="{{disabled}}" aria-disabled="{{disabled}}">
      <svg aria-hidden="true" viewBox="0 0 26 24" slot="airplay">
        <path
          d="M13.19 14.22a.25.25 0 0 0-.38 0l-5.46 6.37a.25.25 0 0 0 .19.41h10.92a.25.25 0 0 0 .19-.41l-5.46-6.37Z"
        />
        <path
          d="M22 3H4a1 1 0 0 0-1 1v13a1 1 0 0 0 1 1h2.94L8 16.75H4.25V4.25h17.5v12.5H18L19.06 18H22a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1Z"
        />
      </svg>
    </media-airplay-button>
  </template>

  <template partial="FullscreenButton">
    <media-fullscreen-button part="bottom fullscreen button" disabled="{{disabled}}" aria-disabled="{{disabled}}">
      <svg aria-hidden="true" viewBox="0 0 24 24" slot="enter">
        <path
          d="M20.25 14.5a.76.76 0 0 0-.75.75v4.25h-4.25a.75.75 0 1 0 0 1.5h5a.76.76 0 0 0 .75-.75v-5a.76.76 0 0 0-.75-.75Zm0-11.5h-5a.76.76 0 0 0-.75.75.76.76 0 0 0 .75.75h4.25v4.25a.75.75 0 1 0 1.5 0v-5a.76.76 0 0 0-.75-.75ZM8.75 19.5H4.5v-4.25a.76.76 0 0 0-.75-.75.76.76 0 0 0-.75.75v5a.76.76 0 0 0 .75.75h5a.75.75 0 1 0 0-1.5Zm0-16.5h-5a.76.76 0 0 0-.75.75v5a.76.76 0 0 0 .75.75.76.76 0 0 0 .75-.75V4.5h4.25a.76.76 0 0 0 .75-.75.76.76 0 0 0-.75-.75Z"
        />
      </svg>
      <svg aria-hidden="true" viewBox="0 0 24 24" slot="exit">
        <path
          d="M20.25 14.5h-5a.76.76 0 0 0-.75.75v5a.75.75 0 1 0 1.5 0V16h4.25a.75.75 0 1 0 0-1.5Zm-5-5h5a.75.75 0 1 0 0-1.5H16V3.75a.75.75 0 1 0-1.5 0v5a.76.76 0 0 0 .75.75Zm-6.5 5h-5a.75.75 0 1 0 0 1.5H8v4.25a.75.75 0 1 0 1.5 0v-5a.76.76 0 0 0-.75-.75Zm0-11.5a.76.76 0 0 0-.75.75V8H3.75a.75.75 0 0 0 0 1.5h5a.76.76 0 0 0 .75-.75v-5A.76.76 0 0 0 8.75 3Z"
        />
      </svg>
    </media-fullscreen-button>
  </template>

  <template partial="CastButton">
    <media-cast-button part="bottom cast button" disabled="{{disabled}}" aria-disabled="{{disabled}}">
      <svg aria-hidden="true" viewBox="0 0 26 24" slot="enter">
        <path d="M3 15.5V17c2.206 0 4 1.794 4 4h1.5A5.5 5.5 0 0 0 3 15.5Zm0 3V21h2.5A2.5 2.5 0 0 0 3 18.5Z" />
        <path d="M3 12.5V14c3.86 0 7 3.14 7 7h1.5A8.5 8.5 0 0 0 3 12.5Z" />
        <path
          d="M22 3H4a1 1 0 0 0-1 1v6.984c.424 0 .84.035 1.25.086V4.25h17.5v15.5h-8.82c.051.41.086.826.086 1.25H22a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1Z"
        />
      </svg>
      <svg aria-hidden="true" viewBox="0 0 26 24" slot="exit">
        <path d="M3 15.5V17c2.206 0 4 1.794 4 4h1.5A5.5 5.5 0 0 0 3 15.5Zm0 3V21h2.5A2.5 2.5 0 0 0 3 18.5Z" />
        <path d="M3 12.5V14c3.86 0 7 3.14 7 7h1.5A8.5 8.5 0 0 0 3 12.5Z" />
        <path
          d="M22 3H4a1 1 0 0 0-1 1v6.984c.424 0 .84.035 1.25.086V4.25h17.5v15.5h-8.82c.051.41.086.826.086 1.25H22a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1Z"
        />
        <path d="M20.5 5.5h-15v5.811c3.52.906 6.283 3.67 7.189 7.19H20.5V5.5Z" />
      </svg>
    </media-cast-button>
  </template>

  <template partial="LiveButton">
    <media-live-button
      part="{{section ?? 'top'}} live button"
      disabled="{{disabled}}"
      aria-disabled="{{disabled}}"
    ></media-live-button>
  </template>

  <template partial="PlaybackRateButton">
    <media-playback-rate-button
      rates="{{playbackRates}}"
      part="bottom playback-rate button"
      disabled="{{disabled}}"
      aria-disabled="{{disabled}}"
    ></media-playback-rate-button>
  </template>

  <template partial="VolumeRange">
    <media-volume-range
      part="bottom volume range"
      disabled="{{disabled}}"
      aria-disabled="{{disabled}}"
    ></media-volume-range>
  </template>

  <template partial="TimeDisplay">
    <media-time-display
      remaining="{{defaultShowRemainingTime}}"
      show-duration="{{!hideDuration}}"
      part="bottom time display"
      disabled="{{disabled}}"
      aria-disabled="{{disabled}}"
    ></media-time-display>
  </template>

  <template partial="TimeRange">
    <media-time-range
      part="bottom time range"
      disabled="{{disabled}}"
      aria-disabled="{{disabled}}"
    ></media-time-range>
  </template>

  <media-controller
    default-stream-type="{{defaultStreamType ?? 'on-demand'}}"
    breakpoints="sm:300 md:700"
    gestures-disabled="{{disabled}}"
    hotkeys="{{hotkeys}}"
    nohotkeys="{{nohotkeys}}"
    novolumepref="{{novolumepref}}"
    audio="{{audio}}"
    noautoseektolive="{{noautoseektolive}}"
    exportparts="layer, media-layer, poster-layer, vertical-layer, centered-layer, gesture-layer"
  >
    <slot name="media" slot="media"></slot>
    <slot name="poster" slot="poster"></slot>
    <media-loading-indicator slot="centered-chrome" no-auto-hide></media-loading-indicator>

    <template if="audio">

      <template if="streamType == 'on-demand'">
        <template if="title">
          <media-control-bar>{{>TitleDisplay}}</media-control-bar>
        </template>
        <media-control-bar>
          {{>PlayButton}}
          {{>SeekBackwardButton}}
          {{>SeekForwardButton}}
          {{>TimeDisplay}}
          {{>TimeRange}}
          {{>MuteButton}}
          {{>VolumeRange}}
          {{>PlaybackRateButton}}
          {{>AirplayButton}}
          {{>CastButton}}
        </media-control-bar>
      </template>

      <template if="streamType == 'live'">

        <template if="targetLiveWindow > 0">
          <template if="title">
            <media-control-bar>{{>TitleDisplay}}</media-control-bar>
          </template>
          <media-control-bar>
            {{>PlayButton}}
            {{>LiveButton section="bottom"}}
            {{>SeekBackwardButton}}
            {{>SeekForwardButton}}
            {{>TimeDisplay}}
            {{>TimeRange}}
            {{>MuteButton}}
            {{>VolumeRange}}
            {{>PlaybackRateButton}}
            {{>AirplayButton}}
            {{>CastButton}}
          </media-control-bar>
        </template>

        <template if="!targetLiveWindow">
          <template if="title">
            <media-control-bar>{{>TitleDisplay}}</media-control-bar>
          </template>
          <media-control-bar>
            {{>PlayButton}}
            {{>LiveButton section="bottom"}}
            {{>MuteButton}}
            {{>VolumeRange}}
            <div class="spacer"></div>
            {{>AirplayButton}}
            {{>CastButton}}
          </media-control-bar>
        </template>

      </template>
    </template>

    <template if="!audio">

      <template if="streamType == 'on-demand'">

        <template if="!breakpointSm">
          {{>TimeRange}}
          <media-control-bar>
            {{>PlayButton}}
            {{>MuteButton}}
            <div class="spacer"></div>
            {{>CaptionsMenuButton}}
            {{>FullscreenButton}}
          </media-control-bar>
        </template>

        <template if="breakpointSm">
          <template if="!breakpointMd">
            <media-control-bar slot="top-chrome">
              {{>TitleDisplay}}
            </media-control-bar>
            <div slot="centered-chrome" class="center-controls">
              {{>SeekBackwardButton section="center"}}
              {{>PlayButton section="center"}}
              {{>SeekForwardButton section="center"}}
            </div>
            {{>TimeRange}}
            <media-control-bar>
              {{>PlayButton}}
              {{>TimeDisplay}}
              {{>MuteButton}}
              {{>VolumeRange}}
              <div class="spacer"></div>
              {{>PlaybackRateButton}}
              {{>CaptionsMenuButton}}
              {{>AirplayButton}}
              {{>CastButton}}
              {{>PipButton}}
              {{>FullscreenButton}}
            </media-control-bar>
          </template>
        </template>

        <template if="breakpointMd">
          <media-control-bar slot="top-chrome">
            {{>TitleDisplay}}
          </media-control-bar>
          <div slot="centered-chrome" class="center-controls">
            {{>PlayButton section="center"}}
          </div>
          {{>TimeRange}}
          <media-control-bar>
            {{>PlayButton}}
            {{>SeekBackwardButton}}
            {{>SeekForwardButton}}
            {{>TimeDisplay}}
            {{>MuteButton}}
            {{>VolumeRange}}
            <div class="spacer"></div>
            {{>PlaybackRateButton}}
            {{>CaptionsMenuButton}}
            {{>AirplayButton}}
            {{>CastButton}}
            {{>PipButton}}
            {{>FullscreenButton}}
          </media-control-bar>
        </template>

      </template>

      <template if="streamType == 'live'">

        <template if="!targetLiveWindow">

          <template if="!breakpointSm">
            <media-control-bar slot="top-chrome">
              {{>LiveButton}}
            </media-control-bar>
            <media-control-bar>
              {{>PlayButton}}
              {{>MuteButton}}
              <div class="spacer"></div>
              {{>CaptionsMenuButton}}
              {{>FullscreenButton}}
            </media-control-bar>
          </template>

          <template if="breakpointSm">
            <template if="!breakpointMd">
              <media-control-bar slot="top-chrome">
                {{>LiveButton}}
                {{>TitleDisplay}}
              </media-control-bar>
              <div slot="centered-chrome" class="center-controls">
                {{>PlayButton section="center"}}
              </div>
              <media-control-bar>
                {{>PlayButton}}
                {{>MuteButton}}
                {{>VolumeRange}}
                <div class="spacer"></div>
                {{>CaptionsMenuButton}}
                {{>AirplayButton}}
                {{>CastButton}}
                {{>PipButton}}
                {{>FullscreenButton}}
              </media-control-bar>
            </template>
          </template>

          <template if="breakpointMd">
            <media-control-bar slot="top-chrome">
              {{>LiveButton}}
              {{>TitleDisplay}}
            </media-control-bar>
            <div slot="centered-chrome" class="center-controls">
              {{>PlayButton section="center"}}
            </div>
            <media-control-bar>
              {{>PlayButton}}
              {{>MuteButton}}
              {{>VolumeRange}}
              <div class="spacer"></div>
              {{>CaptionsMenuButton}}
              {{>AirplayButton}}
              {{>CastButton}}
              {{>PipButton}}
              {{>FullscreenButton}}
            </media-control-bar>
          </template>
        </template>

        <template if="targetLiveWindow > 0">

          <template if="!breakpointSm">
            <media-control-bar slot="top-chrome">
              {{>LiveButton}}
            </media-control-bar>
            {{>TimeRange}}
            <media-control-bar>
              {{>PlayButton}}
              {{>MuteButton}}
              <div class="spacer"></div>
              {{>CaptionsMenuButton}}
              {{>FullscreenButton}}
            </media-control-bar>
          </template>

          <template if="breakpointSm">
            <template if="!breakpointMd">
              <media-control-bar slot="top-chrome">
                {{>LiveButton}}
                {{>TitleDisplay}}
              </media-control-bar>
              <div slot="centered-chrome" class="center-controls">
                {{>SeekBackwardButton section="center"}}
                {{>PlayButton section="center"}}
                {{>SeekForwardButton section="center"}}
              </div>
              {{>TimeRange}}
              <media-control-bar>
                {{>PlayButton}}
                {{>MuteButton}}
                {{>VolumeRange}}
                <div class="spacer"></div>
                {{>CaptionsMenuButton}}
                {{>AirplayButton}}
                {{>CastButton}}
                {{>PipButton}}
                {{>FullscreenButton}}
              </media-control-bar>
            </template>
          </template>

          <template if="breakpointMd">
            <media-control-bar slot="top-chrome">
              {{>LiveButton}}
              {{>TitleDisplay}}
            </media-control-bar>
            <div slot="centered-chrome" class="center-controls">
              {{>PlayButton section="center"}}
            </div>
            {{>TimeRange}}
            <media-control-bar>
              {{>PlayButton}}
              {{>SeekBackwardButton}}
              {{>SeekForwardButton}}
              {{>MuteButton}}
              {{>VolumeRange}}
              <div class="spacer"></div>
              {{>CaptionsMenuButton}}
              {{>AirplayButton}}
              {{>CastButton}}
              {{>PipButton}}
              {{>FullscreenButton}}
            </media-control-bar>
          </template>

        </template>

      </template>

    </template>

    <slot></slot>

  </media-controller>
</template>
`;

  // src/media-chrome/dialog.ts
  var styles = `
  :host {
    z-index: 100;
    display: var(--media-dialog-display, flex);
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    box-sizing: border-box;
    color: #fff;
    line-height: 18px;
    font-family: Arial, sans-serif;
    padding: var(--media-dialog-backdrop-padding, 0);
    background: var(--media-dialog-backdrop-background,
      linear-gradient(to bottom, rgba(20, 20, 30, 0.7) 50%, rgba(20, 20, 30, 0.9))
    );
    /* Needs to use !important to prevent overwrite of media-chrome */
    transition: var(--media-dialog-transition-open, visibility .2s, opacity .2s) !important;
    transform: var(--media-dialog-transform-open, none) !important;
    visibility: visible !important;
    opacity: 1 !important;
    pointer-events: auto !important;
  }

  :host(:not([open])) {
    /* Needs to use !important to prevent overwrite of media-chrome */
    transition: var(--media-dialog-transition-close, visibility .1s, opacity .1s) !important;
    transform: var(--media-dialog-transform-close, none) !important;
    visibility: hidden !important;
    opacity: 0 !important;
    pointer-events: none !important;
  }

  :focus-visible {
    box-shadow: 0 0 0 2px rgba(27, 127, 204, 0.9);
  }

  .dialog {
    position: relative;
    box-sizing: border-box;
    background: var(--media-dialog-background, none);
    padding: var(--media-dialog-padding, 10px);
    width: min(320px, 100%);
    word-wrap: break-word;
    max-height: 100%;
    overflow: auto;
    text-align: center;
    line-height: 1.4;
  }
`;
  var template14 = internalDocument.createElement("template");
  template14.innerHTML = `
  <style>
    ${styles}
  </style>

  <div class="dialog">
    <slot></slot>
  </div>
`;
  var MediaDialog = class extends internalGlobalThis.HTMLElement {
    constructor() {
      var _a;
      super();
      this.attachShadow({ mode: "open" });
      (_a = this.shadowRoot) == null ? void 0 : _a.appendChild(this.constructor.template.content.cloneNode(true));
    }
    show() {
      this.setAttribute("open", "");
      this.dispatchEvent(new CustomEvent("open", { composed: true, bubbles: true }));
      focus(this);
    }
    close() {
      if (!this.hasAttribute("open"))
        return;
      this.removeAttribute("open");
      this.dispatchEvent(new CustomEvent("close", { composed: true, bubbles: true }));
      restoreFocus(this);
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      if (attrName === "open" && oldValue !== newValue) {
        newValue != null ? this.show() : this.close();
      }
    }
    connectedCallback() {
      if (!this.hasAttribute("role")) {
        this.setAttribute("role", "dialog");
      }
      if (this.hasAttribute("open")) {
        focus(this);
      }
    }
  };
  MediaDialog.styles = styles;
  MediaDialog.template = template14;
  MediaDialog.observedAttributes = ["open"];
  function focus(el) {
    const initFocus = new CustomEvent("initfocus", { composed: true, bubbles: true, cancelable: true });
    el.dispatchEvent(initFocus);
    if (initFocus.defaultPrevented)
      return;
    let target = el.querySelector("[autofocus]:not([disabled])");
    if (!target && el.tabIndex >= 0) {
      target = el;
    }
    if (!target) {
      target = findFocusableElementWithin(el.shadowRoot);
    }
    el._previouslyFocusedElement = internalDocument.activeElement;
    if (internalDocument.activeElement instanceof HTMLElement) {
      internalDocument.activeElement.blur();
    }
    el.addEventListener(
      "transitionend",
      () => {
        if (target instanceof HTMLElement) {
          target.focus({ preventScroll: true });
        }
      },
      { once: true }
    );
  }
  function findFocusableElementWithin(hostElement) {
    const opts = ["button", "input", "keygen", "select", "textarea"];
    const query = opts.map(function(el) {
      return el + ":not([disabled])";
    });
    query.push('[tabindex]:not([disabled]):not([tabindex=""])');
    let target = hostElement == null ? void 0 : hostElement.querySelector(query.join(", "));
    if (!target && "attachShadow" in Element.prototype) {
      const elems = (hostElement == null ? void 0 : hostElement.querySelectorAll("*")) || [];
      for (let i2 = 0; i2 < elems.length; i2++) {
        if (elems[i2].tagName && elems[i2].shadowRoot) {
          target = findFocusableElementWithin(elems[i2].shadowRoot);
          if (target) {
            break;
          }
        }
      }
    }
    return target;
  }
  function restoreFocus(el) {
    if (el._previouslyFocusedElement instanceof HTMLElement) {
      el._previouslyFocusedElement.focus();
    }
  }
  if (!internalGlobalThis.customElements.get("media-dialog")) {
    internalGlobalThis.customElements.define("media-dialog", MediaDialog);
    internalGlobalThis.MediaDialog = MediaDialog;
  }
  var dialog_default = MediaDialog;

  // src/dialog.ts
  var template15 = internalDocument.createElement("template");
  template15.innerHTML = `
  <style>
    ${dialog_default.styles}

    .close {
      background: none;
      color: inherit;
      border: none;
      padding: 0;
      font: inherit;
      cursor: pointer;
      outline: inherit;
      width: 28px;
      height: 28px;
      position: absolute;
      top: 1rem;
      right: 1rem;
    }
  </style>

  <div class="dialog">
    <slot></slot>
  </div>

  <slot name="close">
    <button class="close" tabindex="0">
      <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
  </slot>
`;
  var MxpDialog = class extends dialog_default {
    constructor() {
      var _a, _b;
      super();
      (_b = (_a = this.shadowRoot) == null ? void 0 : _a.querySelector(".close")) == null ? void 0 : _b.addEventListener("click", () => {
        this.close();
      });
    }
  };
  MxpDialog.template = template15;
  if (!internalGlobalThis.customElements.get("mxp-dialog")) {
    internalGlobalThis.customElements.define("mxp-dialog", MxpDialog);
    internalGlobalThis.MxpDialog = MxpDialog;
  }

  // src/widget.ts
  var template16 = internalDocument.createElement("template");
  template16.innerHTML = `
  <style>
    :host {
      position: absolute; 
      left:0; 
      right:0; 
      width: 100%; 
      height: 100%; 
      z-index: 99999; 
      pointer-events: none !important;
      opacity: 1!important;
    }


    .close {
      background: none;
      color: inherit;
      border: none;
      padding: 0;
      font: inherit;
      cursor: pointer;
      outline: inherit;
      width: 28px;
      height: 28px;
      position: absolute;
      top: 1rem;
      right: 1rem;
    }
  </style>

  <div id="groundbreak-widget-container" style="position: absolute; margin: auto; left:0; right:0; width: 100%; height: 100%; z-index: 99999; pointer-events: none">
  </div>
`;
  var _resize, resize_fn, _render2, render_fn2, _updateVisibility, updateVisibility_fn;
  var GroundWidget = class extends internalGlobalThis.HTMLElement {
    constructor() {
      var _a, _b;
      super();
      __privateAdd(this, _resize);
      __privateAdd(this, _render2);
      __privateAdd(this, _updateVisibility);
      this.widgetsVisibleInfo = [];
      this.attachShadow({ mode: "open" });
      (_a = this.shadowRoot) == null ? void 0 : _a.appendChild(
        this.constructor.template.content.cloneNode(true)
      );
      (_b = this.media) == null ? void 0 : _b.addEventListener("timeupdate", (event) => {
        __privateMethod(this, _updateVisibility, updateVisibility_fn).call(this);
      });
      window.addEventListener("resize", (event) => {
        __privateMethod(this, _resize, resize_fn).call(this);
      });
      __privateMethod(this, _render2, render_fn2).call(this);
    }
    get media() {
      var _a;
      return (_a = this.parentElement) == null ? void 0 : _a.querySelector("mux-video");
    }
    get widgets() {
      var _a;
      try {
        return JSON.parse((_a = this.getAttribute("widgets")) != null ? _a : "[]");
      } catch (e) {
        return [];
      }
    }
    get aspectRatio() {
      var _a;
      return (_a = this.getAttribute("aspect-ratio")) != null ? _a : 0.5625;
    }
    isVisible(info, currentTime) {
      if (info.spawnTime <= currentTime * 1e3 && info.spawnTime + info.duration >= currentTime * 1e3) {
        return true;
      }
      return false;
    }
    createWidget(widget, id) {
      var _a, _b, _c, _d, _e;
      let dom;
      switch (widget.type) {
        case "TEXT":
          dom = internalDocument.createElement("p");
          dom.setAttribute("style", (_a = stylePropsToString(widget == null ? void 0 : widget.style)) != null ? _a : "");
          dom.setAttribute("id", `ground-widget-components-${id}`);
          dom.innerText = (_b = widget.label) != null ? _b : "";
          break;
        case "LINK":
          dom = internalDocument.createElement("a");
          dom.setAttribute("style", (_c = stylePropsToString(widget == null ? void 0 : widget.style)) != null ? _c : "");
          dom.setAttribute("id", `ground-widget-components-${id}`);
          dom.innerText = (_d = widget.label) != null ? _d : "";
          dom.href = (_e = widget.href) != null ? _e : "";
          dom.target = "_blank";
          break;
        default:
          dom = internalDocument.createElement("div");
          break;
      }
      return dom;
    }
  };
  _resize = new WeakSet();
  resize_fn = function() {
    if (!this.media)
      return;
    if (!this.shadowRoot)
      return;
    const containerDOM = this.shadowRoot.getElementById(
      "groundbreak-widget-container"
    );
    if (!containerDOM)
      return;
    const width = `${this.media.getBoundingClientRect().height * this.aspectRatio}px`;
    containerDOM.style.width = width;
  };
  _render2 = new WeakSet();
  render_fn2 = function() {
    const widgets = this.widgets;
    const initialWidgetVisibleInfo = widgets.map((widget, index) => {
      var _a, _b, _c, _d;
      const dom = this.createWidget(widget, index);
      (_b = (_a = this.shadowRoot) == null ? void 0 : _a.getElementById("groundbreak-widget-container")) == null ? void 0 : _b.appendChild(dom);
      return {
        id: index,
        isVisible: true,
        spawnTime: (_c = widget.spawnTime) != null ? _c : 0,
        duration: (_d = widget.duration) != null ? _d : 0
      };
    });
    this.widgetsVisibleInfo = initialWidgetVisibleInfo;
    __privateMethod(this, _updateVisibility, updateVisibility_fn).call(this);
    setTimeout(() => __privateMethod(this, _resize, resize_fn).call(this), 100);
  };
  _updateVisibility = new WeakSet();
  updateVisibility_fn = function() {
    var _a, _b, _c;
    for (let info of this.widgetsVisibleInfo) {
      const isVisibleNew = this.isVisible(info, (_b = (_a = this.media) == null ? void 0 : _a.currentTime) != null ? _b : 0);
      if (info.isVisible === isVisibleNew)
        continue;
      info.isVisible = isVisibleNew;
      let dom = (_c = this.shadowRoot) == null ? void 0 : _c.getElementById(
        `ground-widget-components-${info.id}`
      );
      if (!dom)
        continue;
      dom.style.display = isVisibleNew === true ? "block" : "none";
    }
  };
  GroundWidget.template = template16;
  if (!internalGlobalThis.customElements.get("groundbreak-widget")) {
    internalGlobalThis.customElements.define("groundbreak-widget", GroundWidget);
    internalGlobalThis.GroundWidget = GroundWidget;
  }

  // src/html.ts
  var eventListeners = /* @__PURE__ */ new WeakMap();
  var EventHandler = class {
    constructor(element, type) {
      this.element = element;
      this.type = type;
      this.element.addEventListener(this.type, this);
      const elementMap = eventListeners.get(this.element);
      if (elementMap) {
        elementMap.set(this.type, this);
      }
    }
    set(listener) {
      if (typeof listener == "function") {
        this.handleEvent = listener.bind(this.element);
      } else if (typeof listener === "object" && typeof listener.handleEvent === "function") {
        this.handleEvent = listener.handleEvent.bind(listener);
      } else {
        this.element.removeEventListener(this.type, this);
        const elementMap = eventListeners.get(this.element);
        if (elementMap) {
          elementMap.delete(this.type);
        }
      }
    }
    static for(part) {
      if (!eventListeners.has(part.element))
        eventListeners.set(part.element, /* @__PURE__ */ new Map());
      const type = part.attributeName.slice(2);
      const elementListeners = eventListeners.get(part.element);
      if (elementListeners && elementListeners.has(type))
        return elementListeners.get(type);
      return new EventHandler(part.element, type);
    }
  };
  function processEvent(part, value) {
    if (part instanceof AttrPart && part.attributeName.startsWith("on")) {
      EventHandler.for(part).set(value);
      part.element.removeAttributeNS(part.attributeNamespace, part.attributeName);
      return true;
    }
    return false;
  }
  function processSubTemplate(part, value) {
    if (value instanceof TemplateResult && part instanceof ChildNodePart) {
      value.renderInto(part);
      return true;
    }
    return false;
  }
  function processDocumentFragment(part, value) {
    if (value instanceof DocumentFragment && part instanceof ChildNodePart) {
      if (value.childNodes.length)
        part.replace(...value.childNodes);
      return true;
    }
    return false;
  }
  function processPropertyIdentity(part, value) {
    if (part instanceof AttrPart) {
      const ns = part.attributeNamespace;
      const oldValue = part.element.getAttributeNS(ns, part.attributeName);
      if (String(value) !== oldValue) {
        part.value = String(value);
      }
      return true;
    }
    part.value = String(value);
    return true;
  }
  function processElementAttribute(part, value) {
    if (part instanceof AttrPart && value instanceof Element) {
      const element = part.element;
      if (element[part.attributeName] !== value) {
        part.element.removeAttributeNS(part.attributeNamespace, part.attributeName);
        element[part.attributeName] = value;
      }
      return true;
    }
    return false;
  }
  function processBooleanAttribute(part, value) {
    if (typeof value === "boolean" && part instanceof AttrPart) {
      const ns = part.attributeNamespace;
      const oldValue = part.element.hasAttributeNS(ns, part.attributeName);
      if (value !== oldValue) {
        part.booleanValue = value;
      }
      return true;
    }
    return false;
  }
  function processBooleanNode(part, value) {
    if (value === false && part instanceof ChildNodePart) {
      part.replace("");
      return true;
    }
    return false;
  }
  function processPart(part, value) {
    processElementAttribute(part, value) || processBooleanAttribute(part, value) || processEvent(part, value) || processBooleanNode(part, value) || processSubTemplate(part, value) || processDocumentFragment(part, value) || processPropertyIdentity(part, value);
  }
  var templates2 = /* @__PURE__ */ new Map();
  var renderedTemplates = /* @__PURE__ */ new WeakMap();
  var renderedTemplateInstances = /* @__PURE__ */ new WeakMap();
  var TemplateResult = class {
    constructor(strings, values, processor2) {
      this.strings = strings;
      this.values = values;
      this.processor = processor2;
      this.stringsKey = this.strings.join("");
    }
    get template() {
      if (templates2.has(this.stringsKey)) {
        return templates2.get(this.stringsKey);
      } else {
        const template18 = internalDocument.createElement("template");
        const end = this.strings.length - 1;
        template18.innerHTML = this.strings.reduce((str, cur, i2) => str + cur + (i2 < end ? `{{ ${i2} }}` : ""), "");
        templates2.set(this.stringsKey, template18);
        return template18;
      }
    }
    renderInto(element) {
      var _a;
      const template18 = this.template;
      if (renderedTemplates.get(element) !== template18) {
        renderedTemplates.set(element, template18);
        const instance = new TemplateInstance(template18, this.values, this.processor);
        renderedTemplateInstances.set(element, instance);
        if (element instanceof ChildNodePart) {
          element.replace(...instance.children);
        } else {
          element.appendChild(instance);
        }
        return;
      }
      const templateInstance = renderedTemplateInstances.get(element);
      (_a = templateInstance == null ? void 0 : templateInstance.update) == null ? void 0 : _a.call(templateInstance, this.values);
    }
  };
  var defaultProcessor2 = {
    processCallback(instance, parts, state) {
      var _a;
      if (!state)
        return;
      for (const [expression, part] of parts) {
        if (expression in state) {
          const value = (_a = state[expression]) != null ? _a : "";
          processPart(part, value);
        }
      }
    }
  };
  function html(strings, ...values) {
    return new TemplateResult(strings, values, defaultProcessor2);
  }
  function render(result, element) {
    result.renderInto(element);
  }

  // src/template.ts
  var muxTemplate = internalDocument.createElement("template");
  if ("innerHTML" in muxTemplate)
    muxTemplate.innerHTML = media_theme_mux_default;
  var template17 = (props) => html`
  <style>
    ${styles_default}
  </style>
  ${content(props)}
`;
  var getHotKeys = (props) => {
    let hotKeys = props.hotKeys ? `${props.hotKeys}` : "";
    if (getStreamTypeFromAttr(props.streamType) === "live") {
      hotKeys += " noarrowleft noarrowright";
    }
    return hotKeys;
  };
  var content = (props) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D, _E, _F, _G, _H, _I;
    return html`
  <media-theme
    template="${(_a = props.themeTemplate) != null ? _a : muxTemplate.content.children[0]}"
    default-stream-type="${(_b = props.defaultStreamType) != null ? _b : false}"
    hotkeys="${getHotKeys(props) || false}"
    nohotkeys="${props.noHotKeys || !props.hasSrc || props.isDialogOpen || false}"
    noautoseektolive="${!!((_c = props.streamType) == null ? void 0 : _c.includes(g.LIVE)) && props.targetLiveWindow !== 0}"
    novolumepref="${props.novolumepref || false}"
    disabled="${!props.hasSrc || props.isDialogOpen}"
    audio="${(_d = props.audio) != null ? _d : false}"
    style="${(_e = stylePropsToString({
      "--media-primary-color": props.primaryColor,
      "--media-secondary-color": props.secondaryColor
    })) != null ? _e : false}"
    default-showing-captions="${!props.defaultHiddenCaptions}"
    forward-seek-offset="${(_f = props.forwardSeekOffset) != null ? _f : false}"
    backward-seek-offset="${(_g = props.backwardSeekOffset) != null ? _g : false}"
    playback-rates="${(_h = props.playbackRates) != null ? _h : false}"
    default-show-remaining-time="${(_i = props.defaultShowRemainingTime) != null ? _i : false}"
    hide-duration="${(_j = props.hideDuration) != null ? _j : false}"
    title="${(_k = props.title) != null ? _k : false}"
    exportparts="top, center, bottom, layer, media-layer, poster-layer, vertical-layer, centered-layer, gesture-layer, poster, live, play, button, seek-backward, seek-forward, mute, captions, airplay, pip, fullscreen, cast, playback-rate, volume, range, time, display"
  >
    <mux-video
      slot="media"
      target-live-window="${(_l = props.targetLiveWindow) != null ? _l : false}"
      stream-type="${(_m = getStreamTypeFromAttr(props.streamType)) != null ? _m : false}"
      crossorigin="${(_n = props.crossOrigin) != null ? _n : ""}"
      playsinline
      autoplay="${(_o = props.autoplay) != null ? _o : false}"
      muted="${(_p = props.muted) != null ? _p : false}"
      loop="${(_q = props.loop) != null ? _q : false}"
      preload="${(_r = props.preload) != null ? _r : false}"
      debug="${(_s = props.debug) != null ? _s : false}"
      prefer-cmcd="${(_t = props.preferCmcd) != null ? _t : false}"
      disable-cookies="${(_u = props.disableCookies) != null ? _u : false}"
      prefer-playback="${(_v = props.preferPlayback) != null ? _v : false}"
      start-time="${props.startTime != null ? props.startTime : false}"
      beacon-collection-domain="${(_w = props.beaconCollectionDomain) != null ? _w : false}"
      player-software-name="${(_x = props.playerSoftwareName) != null ? _x : false}"
      player-software-version="${(_y = props.playerSoftwareVersion) != null ? _y : false}"
      env-key="${(_z = props.envKey) != null ? _z : false}"
      custom-domain="${(_A = props.customDomain) != null ? _A : false}"
      src="${!!props.src ? props.src : props.playbackId ? getSrcFromPlaybackId(props.playbackId, {
      maxResolution: props.maxResolution,
      domain: props.customDomain,
      token: props.tokens.playback
    }) : false}"
      cast-src="${!!props.src ? props.src : props.playbackId ? getSrcFromPlaybackId(props.playbackId, {
      maxResolution: props.maxResolution,
      domain: props.customDomain,
      token: props.tokens.playback
    }) : false}"
      exportparts="video"
    >
      ${props.storyboard ? html`<track
            label="thumbnails"
            default
            kind="metadata"
            src="${props.storyboard}"
          />` : html``}
    </mux-video>
    <media-poster-image
      no-auto-hide
      slot="poster"
      part="poster"
      src="${props.poster === "" ? false : (_B = props.poster) != null ? _B : false}"
      placeholder-src="${(_C = props.placeholder) != null ? _C : false}"
    ></media-poster-image>
    <groundbreak-widget
      widgets="${props.widgets}"
      aspect-ratio="${props.aspectRatio}"
    >
    </groundbreak-widget>
    <mxp-dialog
      no-auto-hide
      open="${(_D = props.isDialogOpen) != null ? _D : false}"
      onclose="${props.onCloseErrorDialog}"
      oninitfocus="${props.onInitFocusDialog}"
    >
      ${((_E = props.dialog) == null ? void 0 : _E.title) ? html`<h3>${props.dialog.title}</h3>` : html``}
      <p>
        ${(_F = props.dialog) == null ? void 0 : _F.message}
        ${((_G = props.dialog) == null ? void 0 : _G.linkUrl) ? html`<a
              href="${props.dialog.linkUrl}"
              target="_blank"
              rel="external noopener"
              aria-label="${(_H = props.dialog.linkText) != null ? _H : ""} ${i18n(
      `(opens in a new window)`
    )}"
              >${(_I = props.dialog.linkText) != null ? _I : props.dialog.linkUrl}</a
            >` : html``}
      </p>
    </mxp-dialog>
  </media-theme>
`;
  };

  // src/errors.ts
  function getErrorLogs(error2, offline, playbackId, playbackToken, translate) {
    var _a, _b, _c;
    let dialog = {};
    let devlog2 = {};
    switch (error2.code) {
      case T.MEDIA_ERR_NETWORK: {
        dialog.title = i18n(`Network Error`, translate);
        dialog.message = error2.message;
        switch ((_a = error2.data) == null ? void 0 : _a.response.code) {
          case 412: {
            dialog.title = i18n(`Video is not currently available`, translate);
            dialog.message = i18n(`The live stream or video file are not yet ready.`, translate);
            devlog2.message = i18n(
              `This playback-id may belong to a live stream that is not currently active or an asset that is not ready.`,
              translate
            );
            devlog2.file = "412-not-playable.md";
            break;
          }
          case 404: {
            dialog.title = i18n(`Video does not exist`, translate);
            dialog.message = "";
            devlog2.message = i18n(
              `This playback-id does not exist. You may have used an Asset ID or an ID from a different resource.`,
              translate
            );
            devlog2.file = "404-not-found.md";
            break;
          }
          case 403: {
            dialog.title = i18n(`Invalid playback URL`, translate);
            dialog.message = i18n(
              `The video URL or playback-token are formatted with incorrect or incomplete information.`,
              translate
            );
            devlog2.message = i18n(
              `403 error trying to access this playback URL. If this is a signed URL, you might need to provide a playback-token.`,
              translate
            );
            devlog2.file = "missing-signed-tokens.md";
            if (!playbackToken)
              break;
            const { exp: tokenExpiry, aud: tokenType, sub: tokenPlaybackId } = parseJwt(playbackToken);
            const tokenExpired = Date.now() > tokenExpiry * 1e3;
            const playbackIdMismatch = tokenPlaybackId !== playbackId;
            const badTokenType = tokenType !== "v";
            const dateOptions = {
              timeStyle: "medium",
              dateStyle: "medium"
            };
            if (tokenExpired) {
              dialog.title = i18n(`Video URL has expired`, translate);
              dialog.message = i18n(`The video\u2019s secured playback-token has expired.`, translate);
              devlog2.message = i18n(`The video\u2019s secured playback-token has expired.`, translate);
              devlog2.context = i18n(`Expired at: {expiredDate}. Current time: {currentDate}.`, translate).format({
                expiredDate: new Intl.DateTimeFormat(en_default.code, dateOptions).format(tokenExpiry * 1e3),
                currentDate: new Intl.DateTimeFormat(en_default.code, dateOptions).format(Date.now())
              });
              devlog2.file = "403-expired-token.md";
              break;
            }
            if (playbackIdMismatch) {
              dialog.title = i18n(`Video URL is formatted incorrectly`, translate);
              dialog.message = i18n(
                `The video\u2019s playback ID does not match the one encoded in the playback-token.`,
                translate
              );
              devlog2.message = i18n(
                `The video\u2019s playback ID does not match the one encoded in the playback-token.`,
                translate
              );
              devlog2.context = i18n(
                `Specified playback ID: {playbackId} and the playback ID encoded in the playback-token: {tokenPlaybackId}`,
                translate
              ).format({
                playbackId,
                tokenPlaybackId
              });
              devlog2.file = "403-playback-id-mismatch.md";
              break;
            }
            if (badTokenType) {
              dialog.title = i18n(`Video URL is formatted incorrectly`, translate);
              dialog.message = i18n(`The playback-token is formatted with incorrect information.`, translate);
              devlog2.message = i18n(`The playback-token is formatted with incorrect information.`, translate);
              devlog2.context = i18n(
                `The playback-token has an incorrect aud value: {tokenType}. aud value should be v.`,
                translate
              ).format({
                tokenType
              });
              devlog2.file = "403-incorrect-aud-value.md";
              break;
            }
            devlog2.message = i18n(
              `403 error trying to access this playback URL. If this is a signed playback ID, the token might not have been generated correctly.`,
              translate
            );
            devlog2.file = "403-malformatted-token.md";
            break;
          }
        }
        break;
      }
      case T.MEDIA_ERR_DECODE: {
        const { message } = error2;
        dialog = {
          title: i18n(`Media Error`, translate),
          message
        };
        devlog2.file = "media-decode-error.md";
        break;
      }
      case T.MEDIA_ERR_SRC_NOT_SUPPORTED: {
        const status2 = (_c = (_b = error2.data) == null ? void 0 : _b.response) == null ? void 0 : _c.code;
        if (status2 >= 400 && status2 < 500) {
          error2.code = T.MEDIA_ERR_NETWORK;
          error2.data = { response: { code: status2 } };
          ({ dialog, devlog: devlog2 } = getErrorLogs(error2, offline, playbackId, playbackToken));
          break;
        }
        dialog = {
          title: i18n(`Source Not Supported`, translate),
          message: error2.message
        };
        devlog2.file = "media-src-not-supported.md";
        break;
      }
      default:
        dialog = {
          title: i18n(`Error`, translate),
          message: error2.message
        };
        break;
    }
    if (offline) {
      dialog = {
        title: i18n(`Your device appears to be offline`, translate),
        message: i18n(`Check your internet connection and try reloading this video.`, translate)
      };
    }
    return { dialog, devlog: devlog2 };
  }

  // src/index.ts
  var VideoAttributes = {
    SRC: "src",
    POSTER: "poster"
  };
  var PlayerAttributes = {
    STYLE: "style",
    DEFAULT_HIDDEN_CAPTIONS: "default-hidden-captions",
    PRIMARY_COLOR: "primary-color",
    SECONDARY_COLOR: "secondary-color",
    FORWARD_SEEK_OFFSET: "forward-seek-offset",
    BACKWARD_SEEK_OFFSET: "backward-seek-offset",
    PLAYBACK_TOKEN: "playback-token",
    THUMBNAIL_TOKEN: "thumbnail-token",
    STORYBOARD_TOKEN: "storyboard-token",
    STORYBOARD_SRC: "storyboard-src",
    THUMBNAIL_TIME: "thumbnail-time",
    AUDIO: "audio",
    NOHOTKEYS: "nohotkeys",
    HOTKEYS: "hotkeys",
    PLAYBACK_RATES: "playbackrates",
    DEFAULT_SHOW_REMAINING_TIME: "default-show-remaining-time",
    TITLE: "title",
    PLACEHOLDER: "placeholder",
    THEME: "theme",
    DEFAULT_STREAM_TYPE: "default-stream-type",
    TARGET_LIVE_WINDOW: "target-live-window",
    NO_VOLUME_PREF: "no-volume-pref"
  };
  var GroundBreakElementAttributes = {
    WIDGETS: "widgets",
    ASPECT_RATIO: "aspect-ratio"
  };
  var ThemeAttributeNames = [
    "audio",
    "backward-seek-offset",
    "default-show-remaining-time",
    "default-showing-captions",
    "noautoseektolive",
    "disabled",
    "exportparts",
    "forward-seek-offset",
    "hide-duration",
    "hotkeys",
    "nohotkeys",
    "playbackrates",
    "default-stream-type",
    "stream-type",
    "style",
    "target-live-window",
    "template",
    "title",
    "no-volume-pref"
  ];
  function getProps(el, state) {
    var _a;
    const props = {
      src: !el.playbackId && el.src,
      playbackId: el.playbackId,
      hasSrc: !!el.playbackId || !!el.src,
      poster: el.poster,
      storyboard: el.storyboard,
      storyboardSrc: el.getAttribute(PlayerAttributes.STORYBOARD_SRC),
      placeholder: el.getAttribute("placeholder"),
      themeTemplate: getThemeTemplate(el),
      thumbnailTime: !el.tokens.thumbnail && el.thumbnailTime,
      autoplay: el.autoplay,
      crossOrigin: el.crossOrigin,
      loop: el.loop,
      widgets: el.widgets,
      aspectRatio: el.aspectRatio,
      noHotKeys: el.hasAttribute(PlayerAttributes.NOHOTKEYS),
      hotKeys: el.getAttribute(PlayerAttributes.HOTKEYS),
      muted: el.muted,
      paused: el.paused,
      preload: el.preload,
      envKey: el.envKey,
      preferCmcd: el.preferCmcd,
      debug: el.debug,
      disableCookies: el.disableCookies,
      tokens: el.tokens,
      beaconCollectionDomain: el.beaconCollectionDomain,
      maxResolution: el.maxResolution,
      metadata: el.metadata,
      playerSoftwareName: el.playerSoftwareName,
      playerSoftwareVersion: el.playerSoftwareVersion,
      startTime: el.startTime,
      preferPlayback: el.preferPlayback,
      audio: el.audio,
      defaultStreamType: el.defaultStreamType,
      targetLiveWindow: el.getAttribute(n.TARGET_LIVE_WINDOW),
      streamType: getStreamTypeFromAttr(
        el.getAttribute(n.STREAM_TYPE)
      ),
      primaryColor: el.primaryColor,
      secondaryColor: el.secondaryColor,
      forwardSeekOffset: el.forwardSeekOffset,
      backwardSeekOffset: el.backwardSeekOffset,
      defaultHiddenCaptions: el.defaultHiddenCaptions,
      defaultShowRemainingTime: el.defaultShowRemainingTime,
      hideDuration: getHideDuration(el),
      playbackRates: el.getAttribute(PlayerAttributes.PLAYBACK_RATES),
      customDomain: (_a = el.getAttribute(n.CUSTOM_DOMAIN)) != null ? _a : void 0,
      title: el.getAttribute(PlayerAttributes.TITLE),
      novolumepref: el.hasAttribute(PlayerAttributes.NO_VOLUME_PREF),
      ...state
    };
    return props;
  }
  function getThemeTemplate(el) {
    var _a, _b;
    let themeName = el.getAttribute(PlayerAttributes.THEME);
    if (themeName) {
      const templateElement = (_b = (_a = el.getRootNode()) == null ? void 0 : _a.getElementById) == null ? void 0 : _b.call(_a, themeName);
      if (templateElement)
        return templateElement;
      if (!themeName.startsWith("media-theme-")) {
        themeName = `media-theme-${themeName}`;
      }
      const ThemeElement = internalGlobalThis.customElements.get(themeName);
      if (ThemeElement == null ? void 0 : ThemeElement.template)
        return ThemeElement.template;
    }
  }
  function getHideDuration(el) {
    var _a;
    const timeDisplay = (_a = el.mediaController) == null ? void 0 : _a.querySelector("media-time-display");
    return timeDisplay && getComputedStyle(timeDisplay).getPropertyValue("--media-duration-display-display").trim() === "none";
  }
  function getMetadataFromAttrs(el) {
    return el.getAttributeNames().filter((attrName) => attrName.startsWith("metadata-")).reduce((currAttrs, attrName) => {
      const value = el.getAttribute(attrName);
      if (value !== null) {
        currAttrs[attrName.replace(/^metadata-/, "").replace(/-/g, "_")] = value;
      }
      return currAttrs;
    }, {});
  }
  var MuxVideoAttributeNames = Object.values(n);
  var VideoAttributeNames = Object.values(VideoAttributes);
  var PlayerAttributeNames = Object.values(PlayerAttributes);
  var GroundBreakElementAttributeNames = Object.values(
    GroundBreakElementAttributes
  );
  var playerSoftwareVersion = getPlayerVersion();
  var playerSoftwareName = "mux-player";
  var initialState = {
    dialog: void 0,
    isDialogOpen: false
  };
  var _isInit, _tokens3, _userInactive, _hotkeys, _state, _init, init_fn, _setupCSSProperties, setupCSSProperties_fn, _setState, setState_fn, _render3, render_fn3, _setUpThemeAttributes, setUpThemeAttributes_fn, _setUpErrors, setUpErrors_fn, _setUpCaptionsButton, setUpCaptionsButton_fn, _setUpCaptionsMovement, setUpCaptionsMovement_fn;
  var MuxPlayerElement = class extends video_api_default {
    constructor() {
      super();
      __privateAdd(this, _init);
      __privateAdd(this, _setupCSSProperties);
      __privateAdd(this, _setState);
      __privateAdd(this, _render3);
      __privateAdd(this, _setUpThemeAttributes);
      __privateAdd(this, _setUpErrors);
      __privateAdd(this, _setUpCaptionsButton);
      __privateAdd(this, _setUpCaptionsMovement);
      __privateAdd(this, _isInit, false);
      __privateAdd(this, _tokens3, {});
      __privateAdd(this, _userInactive, true);
      __privateAdd(this, _hotkeys, new AttributeTokenList2(this, "hotkeys"));
      __privateAdd(this, _state, {
        ...initialState,
        onCloseErrorDialog: () => __privateMethod(this, _setState, setState_fn).call(this, { dialog: void 0, isDialogOpen: false }),
        onInitFocusDialog: (e) => {
          const isFocusedElementInPlayer = containsComposedNode2(
            this,
            internalDocument.activeElement
          );
          if (!isFocusedElementInPlayer)
            e.preventDefault();
        }
      });
      this.attachShadow({ mode: "open" });
      __privateMethod(this, _setupCSSProperties, setupCSSProperties_fn).call(this);
      if (this.isConnected) {
        __privateMethod(this, _init, init_fn).call(this);
      }
    }
    static get observedAttributes() {
      var _a;
      return [
        ...(_a = video_api_default.observedAttributes) != null ? _a : [],
        ...VideoAttributeNames,
        ...MuxVideoAttributeNames,
        ...PlayerAttributeNames,
        ...GroundBreakElementAttributeNames
      ];
    }
    get mediaTheme() {
      var _a;
      return (_a = this.shadowRoot) == null ? void 0 : _a.querySelector("media-theme");
    }
    get mediaController() {
      var _a, _b;
      return (_b = (_a = this.mediaTheme) == null ? void 0 : _a.shadowRoot) == null ? void 0 : _b.querySelector("media-controller");
    }
    connectedCallback() {
      var _a;
      const muxVideo = (_a = this.shadowRoot) == null ? void 0 : _a.querySelector(
        "mux-video"
      );
      if (muxVideo) {
        muxVideo.metadata = getMetadataFromAttrs(this);
      }
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
      __privateMethod(this, _init, init_fn).call(this);
      super.attributeChangedCallback(attrName, oldValue, newValue);
      switch (attrName) {
        case PlayerAttributes.HOTKEYS:
          __privateGet(this, _hotkeys).value = newValue;
          break;
        case PlayerAttributes.THUMBNAIL_TIME: {
          if (newValue != null && this.tokens.thumbnail) {
            warn(
              i18n(
                `Use of thumbnail-time with thumbnail-token is currently unsupported. Ignore thumbnail-time.`
              ).format({})
            );
          }
          break;
        }
        case PlayerAttributes.THUMBNAIL_TOKEN: {
          const { aud } = parseJwt(newValue);
          if (newValue && aud !== "t") {
            warn(
              i18n(
                `The provided thumbnail-token should have audience value 't' instead of '{aud}'.`
              ).format({ aud })
            );
          }
          break;
        }
        case PlayerAttributes.STORYBOARD_TOKEN: {
          const { aud } = parseJwt(newValue);
          if (newValue && aud !== "s") {
            warn(
              i18n(
                `The provided storyboard-token should have audience value 's' instead of '{aud}'.`
              ).format({ aud })
            );
          }
          break;
        }
        case n.PLAYBACK_ID: {
          if (newValue == null ? void 0 : newValue.includes("?token")) {
            error(
              i18n(
                "The specificed playback ID {playbackId} contains a token which must be provided via the playback-token attribute."
              ).format({
                playbackId: newValue
              })
            );
          }
          break;
        }
        case n.STREAM_TYPE: {
          if (newValue && ![
            g.LIVE,
            g.ON_DEMAND,
            g.UNKNOWN
          ].includes(newValue)) {
            if (["ll-live", "live:dvr", "ll-live:dvr"].includes(
              this.streamType
            )) {
              this.targetLiveWindow = newValue.includes("dvr") ? Number.POSITIVE_INFINITY : 0;
            } else {
              devlog({
                file: "invalid-stream-type.md",
                message: i18n(
                  `Invalid stream-type value supplied: \`{streamType}\`. Please provide stream-type as either: \`on-demand\` or \`live\``
                ).format({ streamType: this.streamType })
              });
            }
          } else {
            this.targetLiveWindow = newValue === g.LIVE ? 0 : Number.NaN;
          }
        }
      }
      const shouldClearState = [
        n.PLAYBACK_ID,
        VideoAttributes.SRC,
        PlayerAttributes.PLAYBACK_TOKEN
      ].includes(attrName);
      if (shouldClearState && oldValue !== newValue) {
        __privateSet(this, _state, { ...__privateGet(this, _state), ...initialState });
      }
      __privateMethod(this, _render3, render_fn3).call(this, { [toPropName(attrName)]: newValue });
    }
    get preferCmcd() {
      var _a;
      return (_a = this.getAttribute(
        n.PREFER_CMCD
      )) != null ? _a : void 0;
    }
    set preferCmcd(value) {
      if (value === this.preferCmcd)
        return;
      if (!value) {
        this.removeAttribute(n.PREFER_CMCD);
      } else if (Re.includes(value)) {
        this.setAttribute(n.PREFER_CMCD, value);
      } else {
        warn(
          `Invalid value for preferCmcd. Must be one of ${Re.join()}`
        );
      }
    }
    get hasPlayed() {
      var _a, _b;
      return (_b = (_a = this.mediaController) == null ? void 0 : _a.hasAttribute("media-has-played")) != null ? _b : false;
    }
    get inLiveWindow() {
      var _a;
      return (_a = this.mediaController) == null ? void 0 : _a.hasAttribute("media-time-is-live");
    }
    get _hls() {
      var _a;
      return (_a = this.media) == null ? void 0 : _a._hls;
    }
    get mux() {
      var _a;
      return (_a = this.media) == null ? void 0 : _a.mux;
    }
    get theme() {
      var _a;
      return (_a = this.getAttribute(PlayerAttributes.THEME)) != null ? _a : "";
    }
    set theme(val) {
      this.setAttribute(PlayerAttributes.THEME, `${val}`);
    }
    get themeProps() {
      const theme = this.mediaTheme;
      if (!theme)
        return;
      const props = {};
      for (const name of theme.getAttributeNames()) {
        if (ThemeAttributeNames.includes(name))
          continue;
        const value = theme.getAttribute(name);
        props[camelCase2(name)] = value === "" ? true : value;
      }
      return props;
    }
    set themeProps(props) {
      var _a, _b;
      __privateMethod(this, _init, init_fn).call(this);
      const themeProps = { ...this.themeProps, ...props };
      for (const name in themeProps) {
        if (ThemeAttributeNames.includes(name))
          continue;
        const value = props == null ? void 0 : props[name];
        if (typeof value === "boolean" || value == null) {
          (_a = this.mediaTheme) == null ? void 0 : _a.toggleAttribute(kebabCase(name), Boolean(value));
        } else {
          (_b = this.mediaTheme) == null ? void 0 : _b.setAttribute(kebabCase(name), value);
        }
      }
    }
    get playbackId() {
      var _a;
      return (_a = this.getAttribute(n.PLAYBACK_ID)) != null ? _a : void 0;
    }
    set playbackId(val) {
      if (val) {
        this.setAttribute(n.PLAYBACK_ID, val);
      } else {
        this.removeAttribute(n.PLAYBACK_ID);
      }
    }
    get widgets() {
      var _a;
      return (_a = this.getAttribute("widgets")) != null ? _a : void 0;
    }
    set widgets(val) {
      if (val) {
        this.setAttribute("widgets", val);
      } else {
        this.removeAttribute("widgets");
      }
    }
    get aspectRatio() {
      var _a;
      return (_a = this.getAttribute("aspect-ratio")) != null ? _a : void 0;
    }
    set aspectRatio(val) {
      if (val) {
        this.setAttribute("aspect-ratio", val);
      } else {
        this.removeAttribute("aspect-ratio");
      }
    }
    get src() {
      var _a, _b;
      if (this.playbackId) {
        return (_a = getVideoAttribute2(this, VideoAttributes.SRC)) != null ? _a : void 0;
      }
      return (_b = this.getAttribute(VideoAttributes.SRC)) != null ? _b : void 0;
    }
    set src(val) {
      if (val) {
        this.setAttribute(VideoAttributes.SRC, val);
      } else {
        this.removeAttribute(VideoAttributes.SRC);
      }
    }
    get poster() {
      var _a;
      const val = this.getAttribute(VideoAttributes.POSTER);
      if (val != null)
        return val;
      if (this.playbackId && !this.audio) {
        return getPosterURLFromPlaybackId(this.playbackId, {
          domain: this.customDomain,
          thumbnailTime: (_a = this.thumbnailTime) != null ? _a : this.startTime,
          token: this.tokens.thumbnail
        });
      }
      return void 0;
    }
    set poster(val) {
      if (val || val === "") {
        this.setAttribute(VideoAttributes.POSTER, val);
      } else {
        this.removeAttribute(VideoAttributes.POSTER);
      }
    }
    get storyboardSrc() {
      var _a;
      return (_a = this.getAttribute(PlayerAttributes.STORYBOARD_SRC)) != null ? _a : void 0;
    }
    set storyboardSrc(src) {
      if (!src) {
        this.removeAttribute(PlayerAttributes.STORYBOARD_SRC);
      } else {
        this.setAttribute(PlayerAttributes.STORYBOARD_SRC, src);
      }
    }
    get storyboard() {
      if (this.storyboardSrc && !this.tokens.storyboard)
        return this.storyboardSrc;
      if (this.audio || !this.playbackId || !this.streamType || [g.LIVE, g.UNKNOWN].includes(this.streamType)) {
        return void 0;
      }
      return getStoryboardURLFromPlaybackId(this.playbackId, {
        domain: this.customDomain,
        token: this.tokens.storyboard
      });
    }
    get audio() {
      return this.hasAttribute(PlayerAttributes.AUDIO);
    }
    set audio(val) {
      if (!val) {
        this.removeAttribute(PlayerAttributes.AUDIO);
        return;
      }
      this.setAttribute(PlayerAttributes.AUDIO, "");
    }
    get hotkeys() {
      return __privateGet(this, _hotkeys);
    }
    get nohotkeys() {
      return this.hasAttribute(PlayerAttributes.NOHOTKEYS);
    }
    set nohotkeys(val) {
      if (!val) {
        this.removeAttribute(PlayerAttributes.NOHOTKEYS);
        return;
      }
      this.setAttribute(PlayerAttributes.NOHOTKEYS, "");
    }
    get thumbnailTime() {
      return toNumberOrUndefined(
        this.getAttribute(PlayerAttributes.THUMBNAIL_TIME)
      );
    }
    set thumbnailTime(val) {
      this.setAttribute(PlayerAttributes.THUMBNAIL_TIME, `${val}`);
    }
    get title() {
      var _a;
      return (_a = this.getAttribute(PlayerAttributes.TITLE)) != null ? _a : "";
    }
    set title(val) {
      if (val === this.title)
        return;
      if (!!val) {
        this.setAttribute(PlayerAttributes.TITLE, val);
      } else {
        this.removeAttribute("title");
      }
      super.title = val;
    }
    get placeholder() {
      var _a;
      return (_a = getVideoAttribute2(this, PlayerAttributes.PLACEHOLDER)) != null ? _a : "";
    }
    set placeholder(val) {
      this.setAttribute(PlayerAttributes.PLACEHOLDER, `${val}`);
    }
    get primaryColor() {
      var _a, _b;
      let color = this.getAttribute(PlayerAttributes.PRIMARY_COLOR);
      if (color != null)
        return color;
      if (this.mediaTheme) {
        color = (_b = (_a = internalGlobalThis.getComputedStyle(this.mediaTheme)) == null ? void 0 : _a.getPropertyValue("--_primary-color")) == null ? void 0 : _b.trim();
        if (color)
          return color;
      }
    }
    set primaryColor(val) {
      this.setAttribute(PlayerAttributes.PRIMARY_COLOR, `${val}`);
    }
    get secondaryColor() {
      var _a, _b;
      let color = this.getAttribute(PlayerAttributes.SECONDARY_COLOR);
      if (color != null)
        return color;
      if (this.mediaTheme) {
        color = (_b = (_a = internalGlobalThis.getComputedStyle(this.mediaTheme)) == null ? void 0 : _a.getPropertyValue("--_secondary-color")) == null ? void 0 : _b.trim();
        if (color)
          return color;
      }
    }
    set secondaryColor(val) {
      this.setAttribute(PlayerAttributes.SECONDARY_COLOR, `${val}`);
    }
    get defaultShowRemainingTime() {
      return this.hasAttribute(PlayerAttributes.DEFAULT_SHOW_REMAINING_TIME);
    }
    set defaultShowRemainingTime(val) {
      if (!val) {
        this.removeAttribute(PlayerAttributes.DEFAULT_SHOW_REMAINING_TIME);
      } else {
        this.setAttribute(PlayerAttributes.DEFAULT_SHOW_REMAINING_TIME, "");
      }
    }
    get playbackRates() {
      if (!this.hasAttribute(PlayerAttributes.PLAYBACK_RATES))
        return void 0;
      return this.getAttribute(PlayerAttributes.PLAYBACK_RATES).trim().split(/\s*,?\s+/).map((str) => Number(str)).filter((num) => !Number.isNaN(num)).sort((a, b2) => a - b2);
    }
    set playbackRates(val) {
      if (!val) {
        this.removeAttribute(PlayerAttributes.PLAYBACK_RATES);
        return;
      }
      this.setAttribute(PlayerAttributes.PLAYBACK_RATES, val.join(" "));
    }
    get forwardSeekOffset() {
      var _a;
      return (_a = toNumberOrUndefined(
        this.getAttribute(PlayerAttributes.FORWARD_SEEK_OFFSET)
      )) != null ? _a : 10;
    }
    set forwardSeekOffset(val) {
      this.setAttribute(PlayerAttributes.FORWARD_SEEK_OFFSET, `${val}`);
    }
    get backwardSeekOffset() {
      var _a;
      return (_a = toNumberOrUndefined(
        this.getAttribute(PlayerAttributes.BACKWARD_SEEK_OFFSET)
      )) != null ? _a : 10;
    }
    set backwardSeekOffset(val) {
      this.setAttribute(PlayerAttributes.BACKWARD_SEEK_OFFSET, `${val}`);
    }
    get defaultHiddenCaptions() {
      return this.hasAttribute(PlayerAttributes.DEFAULT_HIDDEN_CAPTIONS);
    }
    set defaultHiddenCaptions(val) {
      if (!val) {
        this.removeAttribute(PlayerAttributes.DEFAULT_HIDDEN_CAPTIONS);
      } else {
        this.setAttribute(PlayerAttributes.DEFAULT_HIDDEN_CAPTIONS, "");
      }
    }
    get playerSoftwareName() {
      var _a;
      return (_a = this.getAttribute(n.PLAYER_SOFTWARE_NAME)) != null ? _a : playerSoftwareName;
    }
    get playerSoftwareVersion() {
      var _a;
      return (_a = this.getAttribute(n.PLAYER_SOFTWARE_VERSION)) != null ? _a : playerSoftwareVersion;
    }
    get beaconCollectionDomain() {
      var _a;
      return (_a = this.getAttribute(n.BEACON_COLLECTION_DOMAIN)) != null ? _a : void 0;
    }
    set beaconCollectionDomain(val) {
      if (val === this.beaconCollectionDomain)
        return;
      if (val) {
        this.setAttribute(n.BEACON_COLLECTION_DOMAIN, val);
      } else {
        this.removeAttribute(n.BEACON_COLLECTION_DOMAIN);
      }
    }
    get maxResolution() {
      var _a;
      return (_a = this.getAttribute(n.MAX_RESOLUTION)) != null ? _a : void 0;
    }
    set maxResolution(val) {
      if (val === this.maxResolution)
        return;
      if (val) {
        this.setAttribute(n.MAX_RESOLUTION, val);
      } else {
        this.removeAttribute(n.MAX_RESOLUTION);
      }
    }
    get customDomain() {
      var _a;
      return (_a = this.getAttribute(n.CUSTOM_DOMAIN)) != null ? _a : void 0;
    }
    set customDomain(val) {
      if (val === this.customDomain)
        return;
      if (val) {
        this.setAttribute(n.CUSTOM_DOMAIN, val);
      } else {
        this.removeAttribute(n.CUSTOM_DOMAIN);
      }
    }
    get envKey() {
      var _a;
      return (_a = getVideoAttribute2(this, n.ENV_KEY)) != null ? _a : void 0;
    }
    set envKey(val) {
      this.setAttribute(n.ENV_KEY, `${val}`);
    }
    get noVolumePref() {
      return this.hasAttribute(PlayerAttributes.NO_VOLUME_PREF);
    }
    set noVolumePref(val) {
      if (val) {
        this.setAttribute(PlayerAttributes.NO_VOLUME_PREF, "");
      } else {
        this.removeAttribute(PlayerAttributes.NO_VOLUME_PREF);
      }
    }
    get debug() {
      return getVideoAttribute2(this, n.DEBUG) != null;
    }
    set debug(val) {
      if (val) {
        this.setAttribute(n.DEBUG, "");
      } else {
        this.removeAttribute(n.DEBUG);
      }
    }
    get disableCookies() {
      return getVideoAttribute2(this, n.DISABLE_COOKIES) != null;
    }
    set disableCookies(val) {
      if (val) {
        this.setAttribute(n.DISABLE_COOKIES, "");
      } else {
        this.removeAttribute(n.DISABLE_COOKIES);
      }
    }
    get streamType() {
      var _a, _b, _c;
      return (_c = (_b = this.getAttribute(n.STREAM_TYPE)) != null ? _b : (_a = this.media) == null ? void 0 : _a.streamType) != null ? _c : g.UNKNOWN;
    }
    set streamType(val) {
      this.setAttribute(n.STREAM_TYPE, `${val}`);
    }
    get defaultStreamType() {
      var _a, _b, _c;
      return (_c = (_b = this.getAttribute(
        PlayerAttributes.DEFAULT_STREAM_TYPE
      )) != null ? _b : (_a = this.mediaController) == null ? void 0 : _a.getAttribute(
        PlayerAttributes.DEFAULT_STREAM_TYPE
      )) != null ? _c : g.ON_DEMAND;
    }
    set defaultStreamType(val) {
      if (val) {
        this.setAttribute(PlayerAttributes.DEFAULT_STREAM_TYPE, val);
      } else {
        this.removeAttribute(PlayerAttributes.DEFAULT_STREAM_TYPE);
      }
    }
    get targetLiveWindow() {
      var _a, _b;
      if (this.hasAttribute(PlayerAttributes.TARGET_LIVE_WINDOW)) {
        return +this.getAttribute(
          PlayerAttributes.TARGET_LIVE_WINDOW
        );
      }
      return (_b = (_a = this.media) == null ? void 0 : _a.targetLiveWindow) != null ? _b : Number.NaN;
    }
    set targetLiveWindow(val) {
      if (val == this.targetLiveWindow)
        return;
      if (val == null) {
        this.removeAttribute(PlayerAttributes.TARGET_LIVE_WINDOW);
      } else {
        this.setAttribute(PlayerAttributes.TARGET_LIVE_WINDOW, `${+val}`);
      }
    }
    get liveEdgeStart() {
      var _a;
      return (_a = this.media) == null ? void 0 : _a.liveEdgeStart;
    }
    get startTime() {
      return toNumberOrUndefined(
        getVideoAttribute2(this, n.START_TIME)
      );
    }
    set startTime(val) {
      this.setAttribute(n.START_TIME, `${val}`);
    }
    get preferPlayback() {
      const val = this.getAttribute(n.PREFER_PLAYBACK);
      if (val === h.MSE || val === h.NATIVE)
        return val;
      return void 0;
    }
    set preferPlayback(val) {
      if (val === this.preferPlayback)
        return;
      if (val === h.MSE || val === h.NATIVE) {
        this.setAttribute(n.PREFER_PLAYBACK, val);
      } else {
        this.removeAttribute(n.PREFER_PLAYBACK);
      }
    }
    get metadata() {
      var _a;
      return (_a = this.media) == null ? void 0 : _a.metadata;
    }
    set metadata(val) {
      __privateMethod(this, _init, init_fn).call(this);
      if (!this.media) {
        error(
          "underlying media element missing when trying to set metadata. metadata will not be set."
        );
        return;
      }
      this.media.metadata = { ...getMetadataFromAttrs(this), ...val };
    }
    async addCuePoints(cuePoints) {
      var _a;
      __privateMethod(this, _init, init_fn).call(this);
      if (!this.media) {
        error(
          "underlying media element missing when trying to addCuePoints. cuePoints will not be added."
        );
        return;
      }
      return (_a = this.media) == null ? void 0 : _a.addCuePoints(cuePoints);
    }
    get activeCuePoint() {
      var _a;
      return (_a = this.media) == null ? void 0 : _a.activeCuePoint;
    }
    get cuePoints() {
      var _a, _b;
      return (_b = (_a = this.media) == null ? void 0 : _a.cuePoints) != null ? _b : [];
    }
    getStartDate() {
      var _a;
      return (_a = this.media) == null ? void 0 : _a.getStartDate();
    }
    get currentPdt() {
      var _a;
      return (_a = this.media) == null ? void 0 : _a.currentPdt;
    }
    get tokens() {
      const playback = this.getAttribute(PlayerAttributes.PLAYBACK_TOKEN);
      const thumbnail = this.getAttribute(PlayerAttributes.THUMBNAIL_TOKEN);
      const storyboard = this.getAttribute(PlayerAttributes.STORYBOARD_TOKEN);
      return {
        ...__privateGet(this, _tokens3),
        ...playback != null ? { playback } : {},
        ...thumbnail != null ? { thumbnail } : {},
        ...storyboard != null ? { storyboard } : {}
      };
    }
    set tokens(val) {
      __privateSet(this, _tokens3, val != null ? val : {});
    }
    get playbackToken() {
      var _a;
      return (_a = this.getAttribute(PlayerAttributes.PLAYBACK_TOKEN)) != null ? _a : void 0;
    }
    set playbackToken(val) {
      this.setAttribute(PlayerAttributes.PLAYBACK_TOKEN, `${val}`);
    }
    get thumbnailToken() {
      var _a;
      return (_a = this.getAttribute(PlayerAttributes.THUMBNAIL_TOKEN)) != null ? _a : void 0;
    }
    set thumbnailToken(val) {
      this.setAttribute(PlayerAttributes.THUMBNAIL_TOKEN, `${val}`);
    }
    get storyboardToken() {
      var _a;
      return (_a = this.getAttribute(PlayerAttributes.STORYBOARD_TOKEN)) != null ? _a : void 0;
    }
    set storyboardToken(val) {
      this.setAttribute(PlayerAttributes.STORYBOARD_TOKEN, `${val}`);
    }
    addTextTrack(kind, label, lang, id) {
      var _a;
      const mediaEl = (_a = this.media) == null ? void 0 : _a.nativeEl;
      if (!mediaEl)
        return;
      return I(mediaEl, kind, label, lang, id);
    }
    removeTextTrack(track) {
      var _a;
      const mediaEl = (_a = this.media) == null ? void 0 : _a.nativeEl;
      if (!mediaEl)
        return;
      return le(mediaEl, track);
    }
    get textTracks() {
      var _a;
      return (_a = this.media) == null ? void 0 : _a.textTracks;
    }
  };
  _isInit = new WeakMap();
  _tokens3 = new WeakMap();
  _userInactive = new WeakMap();
  _hotkeys = new WeakMap();
  _state = new WeakMap();
  _init = new WeakSet();
  init_fn = function() {
    var _a, _b, _c;
    if (__privateGet(this, _isInit))
      return;
    __privateSet(this, _isInit, true);
    __privateMethod(this, _render3, render_fn3).call(this);
    try {
      customElements.upgrade(this.mediaTheme);
      if (!(this.mediaTheme instanceof internalGlobalThis.HTMLElement))
        throw "";
    } catch (error2) {
      error(`<media-theme> failed to upgrade!`);
    }
    try {
      customElements.upgrade(this.media);
      if (!(this.media instanceof Kt))
        throw "";
    } catch (error2) {
      error("<mux-video> failed to upgrade!");
    }
    try {
      customElements.upgrade(this.mediaController);
      if (!(this.mediaController instanceof media_controller_default))
        throw "";
    } catch (error2) {
      error(`<media-controller> failed to upgrade!`);
    }
    initVideoApi(this);
    __privateMethod(this, _setUpThemeAttributes, setUpThemeAttributes_fn).call(this);
    __privateMethod(this, _setUpErrors, setUpErrors_fn).call(this);
    __privateMethod(this, _setUpCaptionsButton, setUpCaptionsButton_fn).call(this);
    __privateSet(this, _userInactive, (_b = (_a = this.mediaController) == null ? void 0 : _a.hasAttribute("user-inactive")) != null ? _b : true);
    __privateMethod(this, _setUpCaptionsMovement, setUpCaptionsMovement_fn).call(this);
    (_c = this.media) == null ? void 0 : _c.addEventListener("streamtypechange", () => {
      __privateMethod(this, _render3, render_fn3).call(this);
    });
  };
  _setupCSSProperties = new WeakSet();
  setupCSSProperties_fn = function() {
    var _a, _b;
    try {
      (_a = window == null ? void 0 : window.CSS) == null ? void 0 : _a.registerProperty({
        name: "--media-primary-color",
        syntax: "<color>",
        inherits: true
      });
      (_b = window == null ? void 0 : window.CSS) == null ? void 0 : _b.registerProperty({
        name: "--media-secondary-color",
        syntax: "<color>",
        inherits: true
      });
    } catch (e) {
    }
  };
  _setState = new WeakSet();
  setState_fn = function(newState) {
    Object.assign(__privateGet(this, _state), newState);
    __privateMethod(this, _render3, render_fn3).call(this);
  };
  _render3 = new WeakSet();
  render_fn3 = function(props = {}) {
    render(
      template17(getProps(this, { ...__privateGet(this, _state), ...props })),
      this.shadowRoot
    );
  };
  _setUpThemeAttributes = new WeakSet();
  setUpThemeAttributes_fn = function() {
    const setThemeAttribute = (attributeName) => {
      var _a, _b;
      if (!(attributeName == null ? void 0 : attributeName.startsWith("theme-")))
        return;
      const themeAttrName = attributeName.replace(/^theme-/, "");
      if (ThemeAttributeNames.includes(themeAttrName))
        return;
      const value = this.getAttribute(attributeName);
      if (value != null) {
        (_a = this.mediaTheme) == null ? void 0 : _a.setAttribute(themeAttrName, value);
      } else {
        (_b = this.mediaTheme) == null ? void 0 : _b.removeAttribute(themeAttrName);
      }
    };
    const observer = new MutationObserver((mutationList) => {
      for (const { attributeName } of mutationList) {
        setThemeAttribute(attributeName);
      }
    });
    observer.observe(this, { attributes: true });
    this.getAttributeNames().forEach(setThemeAttribute);
  };
  _setUpErrors = new WeakSet();
  setUpErrors_fn = function() {
    var _a;
    const onError = (event) => {
      let { detail: error2 } = event;
      if (!(error2 instanceof T)) {
        error2 = new T(error2.message, error2.code, error2.fatal);
      }
      if (!(error2 == null ? void 0 : error2.fatal)) {
        warn(error2);
        if (error2.data) {
          warn(`${error2.name} data:`, error2.data);
        }
        return;
      }
      const { dialog, devlog: devlog2 } = getErrorLogs(
        error2,
        !window.navigator.onLine,
        this.playbackId,
        this.playbackToken
      );
      if (devlog2.message) {
        devlog(devlog2);
      }
      error(error2);
      if (error2.data) {
        error(`${error2.name} data:`, error2.data);
      }
      __privateMethod(this, _setState, setState_fn).call(this, { isDialogOpen: true, dialog });
    };
    this.addEventListener("error", onError);
    if (this.media) {
      this.media.errorTranslator = (errorEvent = {}) => {
        var _a2, _b, _c;
        if (!(((_a2 = this.media) == null ? void 0 : _a2.error) instanceof T))
          return errorEvent;
        const { devlog: devlog2 } = getErrorLogs(
          (_b = this.media) == null ? void 0 : _b.error,
          !window.navigator.onLine,
          this.playbackId,
          this.playbackToken,
          false
        );
        return {
          player_error_code: (_c = this.media) == null ? void 0 : _c.error.code,
          player_error_message: devlog2.message ? String(devlog2.message) : errorEvent.player_error_message,
          player_error_context: devlog2.context ? String(devlog2.context) : errorEvent.player_error_context
        };
      };
    }
    (_a = this.media) == null ? void 0 : _a.addEventListener("error", (event) => {
      var _a2, _b;
      let { detail: error2 } = event;
      if (!error2) {
        const { message, code: code2 } = (_b = (_a2 = this.media) == null ? void 0 : _a2.error) != null ? _b : {};
        error2 = new T(message, code2);
      }
      if (!(error2 == null ? void 0 : error2.fatal))
        return;
      this.dispatchEvent(
        new CustomEvent("error", {
          detail: error2
        })
      );
    });
  };
  _setUpCaptionsButton = new WeakSet();
  setUpCaptionsButton_fn = function() {
    var _a, _b, _c, _d;
    const onTrackCountChange = () => __privateMethod(this, _render3, render_fn3).call(this);
    (_b = (_a = this.media) == null ? void 0 : _a.textTracks) == null ? void 0 : _b.addEventListener("addtrack", onTrackCountChange);
    (_d = (_c = this.media) == null ? void 0 : _c.textTracks) == null ? void 0 : _d.addEventListener("removetrack", onTrackCountChange);
  };
  _setUpCaptionsMovement = new WeakSet();
  setUpCaptionsMovement_fn = function() {
    var _a, _b;
    const isSafari = /.*Version\/.*Safari\/.*/.test(navigator.userAgent);
    const isFirefox = /Firefox/i.test(navigator.userAgent);
    if (!isFirefox)
      return;
    let selectedTrack;
    const cuesmap = /* @__PURE__ */ new WeakMap();
    const shouldSkipLineToggle = () => {
      return this.streamType === g.LIVE && !this.secondaryColor && this.offsetWidth >= 800;
    };
    const toggleLines = (track, userInactive, force = false) => {
      if (shouldSkipLineToggle()) {
        return;
      }
      const cues = Array.from(track && track.activeCues || []);
      cues.forEach((cue) => {
        if (!cue.snapToLines || cue.line < -5 || cue.line >= 0 && cue.line < 10) {
          return;
        }
        if (!userInactive || this.paused) {
          const lines = cue.text.split("\n").length;
          let offset = isSafari ? -2 : -3;
          if (this.streamType === g.LIVE) {
            offset = isSafari ? -1 : -2;
          }
          const setTo = offset - lines;
          if (cue.line === setTo && !force) {
            return;
          }
          if (!cuesmap.has(cue)) {
            cuesmap.set(cue, cue.line);
          }
          cue.line = setTo - 1;
          cue.line = setTo;
        } else {
          setTimeout(() => {
            cue.line = cuesmap.get(cue) || "auto";
          }, 500);
        }
      });
    };
    const cuechangeHandler = () => {
      var _a2, _b2;
      toggleLines(
        selectedTrack,
        (_b2 = (_a2 = this.mediaController) == null ? void 0 : _a2.hasAttribute("user-inactive")) != null ? _b2 : false
      );
    };
    const selectTrack = () => {
      var _a2, _b2;
      const tracks = Array.from(
        ((_b2 = (_a2 = this.mediaController) == null ? void 0 : _a2.media) == null ? void 0 : _b2.textTracks) || []
      );
      const newSelectedTrack = tracks.filter(
        (t) => ["subtitles", "captions"].includes(t.kind) && t.mode === "showing"
      )[0];
      if (newSelectedTrack !== selectedTrack) {
        selectedTrack == null ? void 0 : selectedTrack.removeEventListener("cuechange", cuechangeHandler);
      }
      selectedTrack = newSelectedTrack;
      selectedTrack == null ? void 0 : selectedTrack.addEventListener("cuechange", cuechangeHandler);
      toggleLines(selectedTrack, __privateGet(this, _userInactive));
    };
    selectTrack();
    (_a = this.textTracks) == null ? void 0 : _a.addEventListener("change", selectTrack);
    (_b = this.textTracks) == null ? void 0 : _b.addEventListener("addtrack", selectTrack);
    if (navigator.userAgent.includes("Chrome/")) {
      const chromeWorkaround = () => {
        toggleLines(selectedTrack, __privateGet(this, _userInactive), true);
        if (!this.paused) {
          window.requestAnimationFrame(chromeWorkaround);
        }
      };
      this.addEventListener("playing", () => {
        chromeWorkaround();
      });
    }
    this.addEventListener("userinactivechange", () => {
      var _a2, _b2;
      const newUserInactive = (_b2 = (_a2 = this.mediaController) == null ? void 0 : _a2.hasAttribute("user-inactive")) != null ? _b2 : true;
      if (__privateGet(this, _userInactive) === newUserInactive) {
        return;
      }
      __privateSet(this, _userInactive, newUserInactive);
      toggleLines(selectedTrack, __privateGet(this, _userInactive));
    });
  };
  function getVideoAttribute2(el, name) {
    return el.media ? el.media.getAttribute(name) : el.getAttribute(name);
  }
  if (!internalGlobalThis.customElements.get("mux-player")) {
    internalGlobalThis.customElements.define("mux-player", MuxPlayerElement);
    internalGlobalThis.MuxPlayerElement = MuxPlayerElement;
  }
  var src_default = MuxPlayerElement;
})();
/*!
 * JavaScript Cookie v2.1.3
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
/*!
 * mux-embed
 * @version 4.25.0
 * @copyright 2023 Mux, Inc
 */
